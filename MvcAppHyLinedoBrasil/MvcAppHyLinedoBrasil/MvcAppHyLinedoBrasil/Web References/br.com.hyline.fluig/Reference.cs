//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Este código-fonte foi gerado automaticamente por Microsoft.VSDesigner, Versão 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MvcAppHyLinedoBrasil.br.com.hyline.fluig {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ECMWorkflowEngineServiceServiceSoapBinding", Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class ECMWorkflowEngineServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback importProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDueDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback takeProcessTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInstanceCardDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback createWorkFlowProcessVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCardValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProcessAvailableToExportOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveAndSendTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutomaticDecisionClassicOperationCompleted;
        
        private System.Threading.SendOrPostCallback importProcessWithCardAndRelatedDatasetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback calculateDeadLineHoursOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProcessAvailableToImportOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getActualThreadOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWorkFlowProcessVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAvailableProcessOnDemandOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAvailableStatesDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback exportProcessInZipFormatOperationCompleted;
        
        private System.Threading.SendOrPostCallback importProcessWithCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveAndSendTaskByReplacementOperationCompleted;
        
        private System.Threading.SendOrPostCallback startProcessClassicOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelInstanceByReplacementOperationCompleted;
        
        private System.Threading.SendOrPostCallback calculateDeadLineTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback simpleStartProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAvailableProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback startProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllActiveStatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback releaseProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTasksCommentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAvailableUsersOnDemandOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessFormIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveAndSendTaskClassicOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAvailableUsersStartOnDemandOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAvailableUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAttachmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback importProcessWithCardAndPersistenceTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAvailableUsersStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback importProcessWithCardAndGeneralInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback takeProcessTaskByReplacementOperationCompleted;
        
        private System.Threading.SendOrPostCallback exportProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAvailableStatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateWorkflowAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHistoriesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ECMWorkflowEngineServiceService() {
            this.Url = global::MvcAppHyLinedoBrasil.Properties.Settings.Default.MvcAppHyLinedoBrasil_br_com_hyline_fluig_ECMWorkflowEngineServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event importProcessCompletedEventHandler importProcessCompleted;
        
        /// <remarks/>
        public event setDueDateCompletedEventHandler setDueDateCompleted;
        
        /// <remarks/>
        public event takeProcessTaskCompletedEventHandler takeProcessTaskCompleted;
        
        /// <remarks/>
        public event getInstanceCardDataCompletedEventHandler getInstanceCardDataCompleted;
        
        /// <remarks/>
        public event createWorkFlowProcessVersionCompletedEventHandler createWorkFlowProcessVersionCompleted;
        
        /// <remarks/>
        public event getCardValueCompletedEventHandler getCardValueCompleted;
        
        /// <remarks/>
        public event getAllProcessAvailableToExportCompletedEventHandler getAllProcessAvailableToExportCompleted;
        
        /// <remarks/>
        public event saveAndSendTaskCompletedEventHandler saveAndSendTaskCompleted;
        
        /// <remarks/>
        public event setAutomaticDecisionClassicCompletedEventHandler setAutomaticDecisionClassicCompleted;
        
        /// <remarks/>
        public event importProcessWithCardAndRelatedDatasetsCompletedEventHandler importProcessWithCardAndRelatedDatasetsCompleted;
        
        /// <remarks/>
        public event calculateDeadLineHoursCompletedEventHandler calculateDeadLineHoursCompleted;
        
        /// <remarks/>
        public event getAllProcessAvailableToImportCompletedEventHandler getAllProcessAvailableToImportCompleted;
        
        /// <remarks/>
        public event cancelInstanceCompletedEventHandler cancelInstanceCompleted;
        
        /// <remarks/>
        public event getActualThreadCompletedEventHandler getActualThreadCompleted;
        
        /// <remarks/>
        public event getWorkFlowProcessVersionCompletedEventHandler getWorkFlowProcessVersionCompleted;
        
        /// <remarks/>
        public event getAvailableProcessOnDemandCompletedEventHandler getAvailableProcessOnDemandCompleted;
        
        /// <remarks/>
        public event getAvailableStatesDetailCompletedEventHandler getAvailableStatesDetailCompleted;
        
        /// <remarks/>
        public event exportProcessInZipFormatCompletedEventHandler exportProcessInZipFormatCompleted;
        
        /// <remarks/>
        public event importProcessWithCardCompletedEventHandler importProcessWithCardCompleted;
        
        /// <remarks/>
        public event saveAndSendTaskByReplacementCompletedEventHandler saveAndSendTaskByReplacementCompleted;
        
        /// <remarks/>
        public event startProcessClassicCompletedEventHandler startProcessClassicCompleted;
        
        /// <remarks/>
        public event cancelInstanceByReplacementCompletedEventHandler cancelInstanceByReplacementCompleted;
        
        /// <remarks/>
        public event calculateDeadLineTimeCompletedEventHandler calculateDeadLineTimeCompleted;
        
        /// <remarks/>
        public event simpleStartProcessCompletedEventHandler simpleStartProcessCompleted;
        
        /// <remarks/>
        public event getAvailableProcessCompletedEventHandler getAvailableProcessCompleted;
        
        /// <remarks/>
        public event startProcessCompletedEventHandler startProcessCompleted;
        
        /// <remarks/>
        public event getAllActiveStatesCompletedEventHandler getAllActiveStatesCompleted;
        
        /// <remarks/>
        public event releaseProcessCompletedEventHandler releaseProcessCompleted;
        
        /// <remarks/>
        public event setTasksCommentsCompletedEventHandler setTasksCommentsCompleted;
        
        /// <remarks/>
        public event searchProcessCompletedEventHandler searchProcessCompleted;
        
        /// <remarks/>
        public event getAvailableUsersOnDemandCompletedEventHandler getAvailableUsersOnDemandCompleted;
        
        /// <remarks/>
        public event getProcessFormIdCompletedEventHandler getProcessFormIdCompleted;
        
        /// <remarks/>
        public event saveAndSendTaskClassicCompletedEventHandler saveAndSendTaskClassicCompleted;
        
        /// <remarks/>
        public event getAvailableUsersStartOnDemandCompletedEventHandler getAvailableUsersStartOnDemandCompleted;
        
        /// <remarks/>
        public event getAvailableUsersCompletedEventHandler getAvailableUsersCompleted;
        
        /// <remarks/>
        public event getProcessImageCompletedEventHandler getProcessImageCompleted;
        
        /// <remarks/>
        public event getAttachmentsCompletedEventHandler getAttachmentsCompleted;
        
        /// <remarks/>
        public event importProcessWithCardAndPersistenceTypeCompletedEventHandler importProcessWithCardAndPersistenceTypeCompleted;
        
        /// <remarks/>
        public event getAvailableUsersStartCompletedEventHandler getAvailableUsersStartCompleted;
        
        /// <remarks/>
        public event importProcessWithCardAndGeneralInfoCompletedEventHandler importProcessWithCardAndGeneralInfoCompleted;
        
        /// <remarks/>
        public event takeProcessTaskByReplacementCompletedEventHandler takeProcessTaskByReplacementCompleted;
        
        /// <remarks/>
        public event exportProcessCompletedEventHandler exportProcessCompleted;
        
        /// <remarks/>
        public event getAvailableStatesCompletedEventHandler getAvailableStatesCompleted;
        
        /// <remarks/>
        public event updateWorkflowAttachmentCompletedEventHandler updateWorkflowAttachmentCompleted;
        
        /// <remarks/>
        public event getHistoriesCompletedEventHandler getHistoriesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("importProcess", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string importProcess(string username, string password, int companyId, string processId, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] attachments, bool newProcess, bool overWrite, string colleagueId) {
            object[] results = this.Invoke("importProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        attachments,
                        newProcess,
                        overWrite,
                        colleagueId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void importProcessAsync(string username, string password, int companyId, string processId, attachment[] attachments, bool newProcess, bool overWrite, string colleagueId) {
            this.importProcessAsync(username, password, companyId, processId, attachments, newProcess, overWrite, colleagueId, null);
        }
        
        /// <remarks/>
        public void importProcessAsync(string username, string password, int companyId, string processId, attachment[] attachments, bool newProcess, bool overWrite, string colleagueId, object userState) {
            if ((this.importProcessOperationCompleted == null)) {
                this.importProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportProcessOperationCompleted);
            }
            this.InvokeAsync("importProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        attachments,
                        newProcess,
                        overWrite,
                        colleagueId}, this.importProcessOperationCompleted, userState);
        }
        
        private void OnimportProcessOperationCompleted(object arg) {
            if ((this.importProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importProcessCompleted(this, new importProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("setDueDate", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string setDueDate(string username, string password, int companyId, int processInstanceId, string userId, int threadSequence, string newDueDate, int timeInSecods) {
            object[] results = this.Invoke("setDueDate", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        threadSequence,
                        newDueDate,
                        timeInSecods});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setDueDateAsync(string username, string password, int companyId, int processInstanceId, string userId, int threadSequence, string newDueDate, int timeInSecods) {
            this.setDueDateAsync(username, password, companyId, processInstanceId, userId, threadSequence, newDueDate, timeInSecods, null);
        }
        
        /// <remarks/>
        public void setDueDateAsync(string username, string password, int companyId, int processInstanceId, string userId, int threadSequence, string newDueDate, int timeInSecods, object userState) {
            if ((this.setDueDateOperationCompleted == null)) {
                this.setDueDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDueDateOperationCompleted);
            }
            this.InvokeAsync("setDueDate", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        threadSequence,
                        newDueDate,
                        timeInSecods}, this.setDueDateOperationCompleted, userState);
        }
        
        private void OnsetDueDateOperationCompleted(object arg) {
            if ((this.setDueDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDueDateCompleted(this, new setDueDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("takeProcessTask", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string takeProcessTask(string username, string password, int companyId, string userId, int processInstanceId, int threadSequence) {
            object[] results = this.Invoke("takeProcessTask", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId,
                        threadSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void takeProcessTaskAsync(string username, string password, int companyId, string userId, int processInstanceId, int threadSequence) {
            this.takeProcessTaskAsync(username, password, companyId, userId, processInstanceId, threadSequence, null);
        }
        
        /// <remarks/>
        public void takeProcessTaskAsync(string username, string password, int companyId, string userId, int processInstanceId, int threadSequence, object userState) {
            if ((this.takeProcessTaskOperationCompleted == null)) {
                this.takeProcessTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OntakeProcessTaskOperationCompleted);
            }
            this.InvokeAsync("takeProcessTask", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId,
                        threadSequence}, this.takeProcessTaskOperationCompleted, userState);
        }
        
        private void OntakeProcessTaskOperationCompleted(object arg) {
            if ((this.takeProcessTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.takeProcessTaskCompleted(this, new takeProcessTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getInstanceCardData", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("CardData")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, NestingLevel=1)]
        public string[][] getInstanceCardData(string username, string password, int companyId, string userId, int processInstanceId) {
            object[] results = this.Invoke("getInstanceCardData", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getInstanceCardDataAsync(string username, string password, int companyId, string userId, int processInstanceId) {
            this.getInstanceCardDataAsync(username, password, companyId, userId, processInstanceId, null);
        }
        
        /// <remarks/>
        public void getInstanceCardDataAsync(string username, string password, int companyId, string userId, int processInstanceId, object userState) {
            if ((this.getInstanceCardDataOperationCompleted == null)) {
                this.getInstanceCardDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInstanceCardDataOperationCompleted);
            }
            this.InvokeAsync("getInstanceCardData", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId}, this.getInstanceCardDataOperationCompleted, userState);
        }
        
        private void OngetInstanceCardDataOperationCompleted(object arg) {
            if ((this.getInstanceCardDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInstanceCardDataCompleted(this, new getInstanceCardDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("createWorkFlowProcessVersion", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string createWorkFlowProcessVersion(string username, string password, int companyId, string processId) {
            object[] results = this.Invoke("createWorkFlowProcessVersion", new object[] {
                        username,
                        password,
                        companyId,
                        processId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createWorkFlowProcessVersionAsync(string username, string password, int companyId, string processId) {
            this.createWorkFlowProcessVersionAsync(username, password, companyId, processId, null);
        }
        
        /// <remarks/>
        public void createWorkFlowProcessVersionAsync(string username, string password, int companyId, string processId, object userState) {
            if ((this.createWorkFlowProcessVersionOperationCompleted == null)) {
                this.createWorkFlowProcessVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateWorkFlowProcessVersionOperationCompleted);
            }
            this.InvokeAsync("createWorkFlowProcessVersion", new object[] {
                        username,
                        password,
                        companyId,
                        processId}, this.createWorkFlowProcessVersionOperationCompleted, userState);
        }
        
        private void OncreateWorkFlowProcessVersionOperationCompleted(object arg) {
            if ((this.createWorkFlowProcessVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createWorkFlowProcessVersionCompleted(this, new createWorkFlowProcessVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getCardValue", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("content")]
        public string getCardValue(string username, string password, int companyId, int processInstanceId, string userId, string cardFieldName) {
            object[] results = this.Invoke("getCardValue", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        cardFieldName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCardValueAsync(string username, string password, int companyId, int processInstanceId, string userId, string cardFieldName) {
            this.getCardValueAsync(username, password, companyId, processInstanceId, userId, cardFieldName, null);
        }
        
        /// <remarks/>
        public void getCardValueAsync(string username, string password, int companyId, int processInstanceId, string userId, string cardFieldName, object userState) {
            if ((this.getCardValueOperationCompleted == null)) {
                this.getCardValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCardValueOperationCompleted);
            }
            this.InvokeAsync("getCardValue", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        cardFieldName}, this.getCardValueOperationCompleted, userState);
        }
        
        private void OngetCardValueOperationCompleted(object arg) {
            if ((this.getCardValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCardValueCompleted(this, new getCardValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAllProcessAvailableToExport", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processDefinitionDto[] getAllProcessAvailableToExport(string username, string password, int companyId) {
            object[] results = this.Invoke("getAllProcessAvailableToExport", new object[] {
                        username,
                        password,
                        companyId});
            return ((processDefinitionDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllProcessAvailableToExportAsync(string username, string password, int companyId) {
            this.getAllProcessAvailableToExportAsync(username, password, companyId, null);
        }
        
        /// <remarks/>
        public void getAllProcessAvailableToExportAsync(string username, string password, int companyId, object userState) {
            if ((this.getAllProcessAvailableToExportOperationCompleted == null)) {
                this.getAllProcessAvailableToExportOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProcessAvailableToExportOperationCompleted);
            }
            this.InvokeAsync("getAllProcessAvailableToExport", new object[] {
                        username,
                        password,
                        companyId}, this.getAllProcessAvailableToExportOperationCompleted, userState);
        }
        
        private void OngetAllProcessAvailableToExportOperationCompleted(object arg) {
            if ((this.getAllProcessAvailableToExportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProcessAvailableToExportCompleted(this, new getAllProcessAvailableToExportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("saveAndSendTask", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, NestingLevel=1)]
        public string[][] saveAndSendTask(string username, string password, int companyId, int processInstanceId, int choosedState, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] colleagueIds, string comments, string userId, bool completeTask, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processAttachmentDto[] attachments, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, NestingLevel=1)] string[][] cardData, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processTaskAppointmentDto[] appointment, bool managerMode, int threadSequence) {
            object[] results = this.Invoke("saveAndSendTask", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode,
                        threadSequence});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void saveAndSendTaskAsync(string username, string password, int companyId, int processInstanceId, int choosedState, string[] colleagueIds, string comments, string userId, bool completeTask, processAttachmentDto[] attachments, string[][] cardData, processTaskAppointmentDto[] appointment, bool managerMode, int threadSequence) {
            this.saveAndSendTaskAsync(username, password, companyId, processInstanceId, choosedState, colleagueIds, comments, userId, completeTask, attachments, cardData, appointment, managerMode, threadSequence, null);
        }
        
        /// <remarks/>
        public void saveAndSendTaskAsync(string username, string password, int companyId, int processInstanceId, int choosedState, string[] colleagueIds, string comments, string userId, bool completeTask, processAttachmentDto[] attachments, string[][] cardData, processTaskAppointmentDto[] appointment, bool managerMode, int threadSequence, object userState) {
            if ((this.saveAndSendTaskOperationCompleted == null)) {
                this.saveAndSendTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveAndSendTaskOperationCompleted);
            }
            this.InvokeAsync("saveAndSendTask", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode,
                        threadSequence}, this.saveAndSendTaskOperationCompleted, userState);
        }
        
        private void OnsaveAndSendTaskOperationCompleted(object arg) {
            if ((this.saveAndSendTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveAndSendTaskCompleted(this, new saveAndSendTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("setAutomaticDecisionClassic", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public keyValueDto[] setAutomaticDecisionClassic(string username, string password, int companyId, int processInstanceId, int iTaskAutom, int iTask, int condition, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] colleagueIds, string comments, string userId, bool managerMode, int threadSequence) {
            object[] results = this.Invoke("setAutomaticDecisionClassic", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        iTaskAutom,
                        iTask,
                        condition,
                        colleagueIds,
                        comments,
                        userId,
                        managerMode,
                        threadSequence});
            return ((keyValueDto[])(results[0]));
        }
        
        /// <remarks/>
        public void setAutomaticDecisionClassicAsync(string username, string password, int companyId, int processInstanceId, int iTaskAutom, int iTask, int condition, string[] colleagueIds, string comments, string userId, bool managerMode, int threadSequence) {
            this.setAutomaticDecisionClassicAsync(username, password, companyId, processInstanceId, iTaskAutom, iTask, condition, colleagueIds, comments, userId, managerMode, threadSequence, null);
        }
        
        /// <remarks/>
        public void setAutomaticDecisionClassicAsync(string username, string password, int companyId, int processInstanceId, int iTaskAutom, int iTask, int condition, string[] colleagueIds, string comments, string userId, bool managerMode, int threadSequence, object userState) {
            if ((this.setAutomaticDecisionClassicOperationCompleted == null)) {
                this.setAutomaticDecisionClassicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutomaticDecisionClassicOperationCompleted);
            }
            this.InvokeAsync("setAutomaticDecisionClassic", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        iTaskAutom,
                        iTask,
                        condition,
                        colleagueIds,
                        comments,
                        userId,
                        managerMode,
                        threadSequence}, this.setAutomaticDecisionClassicOperationCompleted, userState);
        }
        
        private void OnsetAutomaticDecisionClassicOperationCompleted(object arg) {
            if ((this.setAutomaticDecisionClassicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutomaticDecisionClassicCompleted(this, new setAutomaticDecisionClassicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("importProcessWithCardAndRelatedDatasets", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public webServiceMessage importProcessWithCardAndRelatedDatasets(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] cardAttachs, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] cardEventDto[] customEvents, 
                    generalInfoDto generalInfo, 
                    bool update, 
                    int persistenceType, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] relatedDatasets) {
            object[] results = this.Invoke("importProcessWithCardAndRelatedDatasets", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processAttachs,
                        newProcess,
                        overWrite,
                        colleagueId,
                        parentDocumentId,
                        documentDescription,
                        cardDescription,
                        datasetName,
                        cardAttachs,
                        customEvents,
                        generalInfo,
                        update,
                        persistenceType,
                        relatedDatasets});
            return ((webServiceMessage)(results[0]));
        }
        
        /// <remarks/>
        public void importProcessWithCardAndRelatedDatasetsAsync(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    attachment[] cardAttachs, 
                    cardEventDto[] customEvents, 
                    generalInfoDto generalInfo, 
                    bool update, 
                    int persistenceType, 
                    string[] relatedDatasets) {
            this.importProcessWithCardAndRelatedDatasetsAsync(username, password, companyId, processId, processAttachs, newProcess, overWrite, colleagueId, parentDocumentId, documentDescription, cardDescription, datasetName, cardAttachs, customEvents, generalInfo, update, persistenceType, relatedDatasets, null);
        }
        
        /// <remarks/>
        public void importProcessWithCardAndRelatedDatasetsAsync(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    attachment[] cardAttachs, 
                    cardEventDto[] customEvents, 
                    generalInfoDto generalInfo, 
                    bool update, 
                    int persistenceType, 
                    string[] relatedDatasets, 
                    object userState) {
            if ((this.importProcessWithCardAndRelatedDatasetsOperationCompleted == null)) {
                this.importProcessWithCardAndRelatedDatasetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportProcessWithCardAndRelatedDatasetsOperationCompleted);
            }
            this.InvokeAsync("importProcessWithCardAndRelatedDatasets", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processAttachs,
                        newProcess,
                        overWrite,
                        colleagueId,
                        parentDocumentId,
                        documentDescription,
                        cardDescription,
                        datasetName,
                        cardAttachs,
                        customEvents,
                        generalInfo,
                        update,
                        persistenceType,
                        relatedDatasets}, this.importProcessWithCardAndRelatedDatasetsOperationCompleted, userState);
        }
        
        private void OnimportProcessWithCardAndRelatedDatasetsOperationCompleted(object arg) {
            if ((this.importProcessWithCardAndRelatedDatasetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importProcessWithCardAndRelatedDatasetsCompleted(this, new importProcessWithCardAndRelatedDatasetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("calculeDeadLineHours", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public deadLineDto calculateDeadLineHours(string username, string password, int companyId, string userId, string data, int hora, int prazo, string periodId) {
            object[] results = this.Invoke("calculateDeadLineHours", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        data,
                        hora,
                        prazo,
                        periodId});
            return ((deadLineDto)(results[0]));
        }
        
        /// <remarks/>
        public void calculateDeadLineHoursAsync(string username, string password, int companyId, string userId, string data, int hora, int prazo, string periodId) {
            this.calculateDeadLineHoursAsync(username, password, companyId, userId, data, hora, prazo, periodId, null);
        }
        
        /// <remarks/>
        public void calculateDeadLineHoursAsync(string username, string password, int companyId, string userId, string data, int hora, int prazo, string periodId, object userState) {
            if ((this.calculateDeadLineHoursOperationCompleted == null)) {
                this.calculateDeadLineHoursOperationCompleted = new System.Threading.SendOrPostCallback(this.OncalculateDeadLineHoursOperationCompleted);
            }
            this.InvokeAsync("calculateDeadLineHours", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        data,
                        hora,
                        prazo,
                        periodId}, this.calculateDeadLineHoursOperationCompleted, userState);
        }
        
        private void OncalculateDeadLineHoursOperationCompleted(object arg) {
            if ((this.calculateDeadLineHoursCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.calculateDeadLineHoursCompleted(this, new calculateDeadLineHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAllProcessAvailableToImport", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processDefinitionDto[] getAllProcessAvailableToImport(string username, string password, int companyId) {
            object[] results = this.Invoke("getAllProcessAvailableToImport", new object[] {
                        username,
                        password,
                        companyId});
            return ((processDefinitionDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllProcessAvailableToImportAsync(string username, string password, int companyId) {
            this.getAllProcessAvailableToImportAsync(username, password, companyId, null);
        }
        
        /// <remarks/>
        public void getAllProcessAvailableToImportAsync(string username, string password, int companyId, object userState) {
            if ((this.getAllProcessAvailableToImportOperationCompleted == null)) {
                this.getAllProcessAvailableToImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProcessAvailableToImportOperationCompleted);
            }
            this.InvokeAsync("getAllProcessAvailableToImport", new object[] {
                        username,
                        password,
                        companyId}, this.getAllProcessAvailableToImportOperationCompleted, userState);
        }
        
        private void OngetAllProcessAvailableToImportOperationCompleted(object arg) {
            if ((this.getAllProcessAvailableToImportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProcessAvailableToImportCompleted(this, new getAllProcessAvailableToImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("cancelInstance", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string cancelInstance(string username, string password, int companyId, int processInstanceId, string userId, string cancelText) {
            object[] results = this.Invoke("cancelInstance", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        cancelText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cancelInstanceAsync(string username, string password, int companyId, int processInstanceId, string userId, string cancelText) {
            this.cancelInstanceAsync(username, password, companyId, processInstanceId, userId, cancelText, null);
        }
        
        /// <remarks/>
        public void cancelInstanceAsync(string username, string password, int companyId, int processInstanceId, string userId, string cancelText, object userState) {
            if ((this.cancelInstanceOperationCompleted == null)) {
                this.cancelInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelInstanceOperationCompleted);
            }
            this.InvokeAsync("cancelInstance", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        cancelText}, this.cancelInstanceOperationCompleted, userState);
        }
        
        private void OncancelInstanceOperationCompleted(object arg) {
            if ((this.cancelInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelInstanceCompleted(this, new cancelInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getActualThread", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActualThread")]
        public int getActualThread(string username, string password, int companyId, int processInstanceId, int stateSequence) {
            object[] results = this.Invoke("getActualThread", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        stateSequence});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getActualThreadAsync(string username, string password, int companyId, int processInstanceId, int stateSequence) {
            this.getActualThreadAsync(username, password, companyId, processInstanceId, stateSequence, null);
        }
        
        /// <remarks/>
        public void getActualThreadAsync(string username, string password, int companyId, int processInstanceId, int stateSequence, object userState) {
            if ((this.getActualThreadOperationCompleted == null)) {
                this.getActualThreadOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetActualThreadOperationCompleted);
            }
            this.InvokeAsync("getActualThread", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        stateSequence}, this.getActualThreadOperationCompleted, userState);
        }
        
        private void OngetActualThreadOperationCompleted(object arg) {
            if ((this.getActualThreadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getActualThreadCompleted(this, new getActualThreadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getWorkFlowProcessVersion", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public int getWorkFlowProcessVersion(string username, string password, int companyId, string processId) {
            object[] results = this.Invoke("getWorkFlowProcessVersion", new object[] {
                        username,
                        password,
                        companyId,
                        processId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getWorkFlowProcessVersionAsync(string username, string password, int companyId, string processId) {
            this.getWorkFlowProcessVersionAsync(username, password, companyId, processId, null);
        }
        
        /// <remarks/>
        public void getWorkFlowProcessVersionAsync(string username, string password, int companyId, string processId, object userState) {
            if ((this.getWorkFlowProcessVersionOperationCompleted == null)) {
                this.getWorkFlowProcessVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWorkFlowProcessVersionOperationCompleted);
            }
            this.InvokeAsync("getWorkFlowProcessVersion", new object[] {
                        username,
                        password,
                        companyId,
                        processId}, this.getWorkFlowProcessVersionOperationCompleted, userState);
        }
        
        private void OngetWorkFlowProcessVersionOperationCompleted(object arg) {
            if ((this.getWorkFlowProcessVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWorkFlowProcessVersionCompleted(this, new getWorkFlowProcessVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAvailableProcessOnDemand", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("AvailableProcesses")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processDefinitionVersionDto[] getAvailableProcessOnDemand(string username, string password, int companyId, string userId, int limit, int lastRowId) {
            object[] results = this.Invoke("getAvailableProcessOnDemand", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        limit,
                        lastRowId});
            return ((processDefinitionVersionDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getAvailableProcessOnDemandAsync(string username, string password, int companyId, string userId, int limit, int lastRowId) {
            this.getAvailableProcessOnDemandAsync(username, password, companyId, userId, limit, lastRowId, null);
        }
        
        /// <remarks/>
        public void getAvailableProcessOnDemandAsync(string username, string password, int companyId, string userId, int limit, int lastRowId, object userState) {
            if ((this.getAvailableProcessOnDemandOperationCompleted == null)) {
                this.getAvailableProcessOnDemandOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAvailableProcessOnDemandOperationCompleted);
            }
            this.InvokeAsync("getAvailableProcessOnDemand", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        limit,
                        lastRowId}, this.getAvailableProcessOnDemandOperationCompleted, userState);
        }
        
        private void OngetAvailableProcessOnDemandOperationCompleted(object arg) {
            if ((this.getAvailableProcessOnDemandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAvailableProcessOnDemandCompleted(this, new getAvailableProcessOnDemandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAvailableStatesDetail", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("AvailableStatesDetail")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processStateDto[] getAvailableStatesDetail(string username, string password, int companyId, string processId, int processInstanceId, int threadSequence) {
            object[] results = this.Invoke("getAvailableStatesDetail", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processInstanceId,
                        threadSequence});
            return ((processStateDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getAvailableStatesDetailAsync(string username, string password, int companyId, string processId, int processInstanceId, int threadSequence) {
            this.getAvailableStatesDetailAsync(username, password, companyId, processId, processInstanceId, threadSequence, null);
        }
        
        /// <remarks/>
        public void getAvailableStatesDetailAsync(string username, string password, int companyId, string processId, int processInstanceId, int threadSequence, object userState) {
            if ((this.getAvailableStatesDetailOperationCompleted == null)) {
                this.getAvailableStatesDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAvailableStatesDetailOperationCompleted);
            }
            this.InvokeAsync("getAvailableStatesDetail", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processInstanceId,
                        threadSequence}, this.getAvailableStatesDetailOperationCompleted, userState);
        }
        
        private void OngetAvailableStatesDetailOperationCompleted(object arg) {
            if ((this.getAvailableStatesDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAvailableStatesDetailCompleted(this, new getAvailableStatesDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("exportProcess", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result", DataType="base64Binary")]
        public byte[] exportProcessInZipFormat(string username, string password, int companyId, string processId) {
            object[] results = this.Invoke("exportProcessInZipFormat", new object[] {
                        username,
                        password,
                        companyId,
                        processId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void exportProcessInZipFormatAsync(string username, string password, int companyId, string processId) {
            this.exportProcessInZipFormatAsync(username, password, companyId, processId, null);
        }
        
        /// <remarks/>
        public void exportProcessInZipFormatAsync(string username, string password, int companyId, string processId, object userState) {
            if ((this.exportProcessInZipFormatOperationCompleted == null)) {
                this.exportProcessInZipFormatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexportProcessInZipFormatOperationCompleted);
            }
            this.InvokeAsync("exportProcessInZipFormat", new object[] {
                        username,
                        password,
                        companyId,
                        processId}, this.exportProcessInZipFormatOperationCompleted, userState);
        }
        
        private void OnexportProcessInZipFormatOperationCompleted(object arg) {
            if ((this.exportProcessInZipFormatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.exportProcessInZipFormatCompleted(this, new exportProcessInZipFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("importProcessWithCard", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public webServiceMessage importProcessWithCard(string username, string password, int companyId, string processId, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] processAttachs, bool newProcess, bool overWrite, string colleagueId, int parentDocumentId, string documentDescription, string cardDescription, string datasetName, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] cardAttachs, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] cardEventDto[] customEvents, bool update) {
            object[] results = this.Invoke("importProcessWithCard", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processAttachs,
                        newProcess,
                        overWrite,
                        colleagueId,
                        parentDocumentId,
                        documentDescription,
                        cardDescription,
                        datasetName,
                        cardAttachs,
                        customEvents,
                        update});
            return ((webServiceMessage)(results[0]));
        }
        
        /// <remarks/>
        public void importProcessWithCardAsync(string username, string password, int companyId, string processId, attachment[] processAttachs, bool newProcess, bool overWrite, string colleagueId, int parentDocumentId, string documentDescription, string cardDescription, string datasetName, attachment[] cardAttachs, cardEventDto[] customEvents, bool update) {
            this.importProcessWithCardAsync(username, password, companyId, processId, processAttachs, newProcess, overWrite, colleagueId, parentDocumentId, documentDescription, cardDescription, datasetName, cardAttachs, customEvents, update, null);
        }
        
        /// <remarks/>
        public void importProcessWithCardAsync(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    attachment[] cardAttachs, 
                    cardEventDto[] customEvents, 
                    bool update, 
                    object userState) {
            if ((this.importProcessWithCardOperationCompleted == null)) {
                this.importProcessWithCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportProcessWithCardOperationCompleted);
            }
            this.InvokeAsync("importProcessWithCard", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processAttachs,
                        newProcess,
                        overWrite,
                        colleagueId,
                        parentDocumentId,
                        documentDescription,
                        cardDescription,
                        datasetName,
                        cardAttachs,
                        customEvents,
                        update}, this.importProcessWithCardOperationCompleted, userState);
        }
        
        private void OnimportProcessWithCardOperationCompleted(object arg) {
            if ((this.importProcessWithCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importProcessWithCardCompleted(this, new importProcessWithCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("saveAndSendTaskByReplacement", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, NestingLevel=1)]
        public string[][] saveAndSendTaskByReplacement(string username, string password, int companyId, int processInstanceId, int choosedState, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] colleagueIds, string comments, string userId, bool completeTask, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processAttachmentDto[] attachments, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, NestingLevel=1)] string[][] cardData, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processTaskAppointmentDto[] appointment, bool managerMode, int threadSequence, string replacementId) {
            object[] results = this.Invoke("saveAndSendTaskByReplacement", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode,
                        threadSequence,
                        replacementId});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void saveAndSendTaskByReplacementAsync(string username, string password, int companyId, int processInstanceId, int choosedState, string[] colleagueIds, string comments, string userId, bool completeTask, processAttachmentDto[] attachments, string[][] cardData, processTaskAppointmentDto[] appointment, bool managerMode, int threadSequence, string replacementId) {
            this.saveAndSendTaskByReplacementAsync(username, password, companyId, processInstanceId, choosedState, colleagueIds, comments, userId, completeTask, attachments, cardData, appointment, managerMode, threadSequence, replacementId, null);
        }
        
        /// <remarks/>
        public void saveAndSendTaskByReplacementAsync(
                    string username, 
                    string password, 
                    int companyId, 
                    int processInstanceId, 
                    int choosedState, 
                    string[] colleagueIds, 
                    string comments, 
                    string userId, 
                    bool completeTask, 
                    processAttachmentDto[] attachments, 
                    string[][] cardData, 
                    processTaskAppointmentDto[] appointment, 
                    bool managerMode, 
                    int threadSequence, 
                    string replacementId, 
                    object userState) {
            if ((this.saveAndSendTaskByReplacementOperationCompleted == null)) {
                this.saveAndSendTaskByReplacementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveAndSendTaskByReplacementOperationCompleted);
            }
            this.InvokeAsync("saveAndSendTaskByReplacement", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode,
                        threadSequence,
                        replacementId}, this.saveAndSendTaskByReplacementOperationCompleted, userState);
        }
        
        private void OnsaveAndSendTaskByReplacementOperationCompleted(object arg) {
            if ((this.saveAndSendTaskByReplacementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveAndSendTaskByReplacementCompleted(this, new saveAndSendTaskByReplacementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("startProcessClassic", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public keyValueDto[] startProcessClassic(string username, string password, int companyId, string processId, int choosedState, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] colleagueIds, string comments, string userId, bool completeTask, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processAttachmentDto[] attachments, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] keyValueDto[] cardData, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processTaskAppointmentDto[] appointment, bool managerMode) {
            object[] results = this.Invoke("startProcessClassic", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode});
            return ((keyValueDto[])(results[0]));
        }
        
        /// <remarks/>
        public void startProcessClassicAsync(string username, string password, int companyId, string processId, int choosedState, string[] colleagueIds, string comments, string userId, bool completeTask, processAttachmentDto[] attachments, keyValueDto[] cardData, processTaskAppointmentDto[] appointment, bool managerMode) {
            this.startProcessClassicAsync(username, password, companyId, processId, choosedState, colleagueIds, comments, userId, completeTask, attachments, cardData, appointment, managerMode, null);
        }
        
        /// <remarks/>
        public void startProcessClassicAsync(string username, string password, int companyId, string processId, int choosedState, string[] colleagueIds, string comments, string userId, bool completeTask, processAttachmentDto[] attachments, keyValueDto[] cardData, processTaskAppointmentDto[] appointment, bool managerMode, object userState) {
            if ((this.startProcessClassicOperationCompleted == null)) {
                this.startProcessClassicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstartProcessClassicOperationCompleted);
            }
            this.InvokeAsync("startProcessClassic", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode}, this.startProcessClassicOperationCompleted, userState);
        }
        
        private void OnstartProcessClassicOperationCompleted(object arg) {
            if ((this.startProcessClassicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.startProcessClassicCompleted(this, new startProcessClassicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("cancelInstanceByReplacement", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string cancelInstanceByReplacement(string username, string password, int companyId, int processInstanceId, string userId, string cancelText, string replacementId) {
            object[] results = this.Invoke("cancelInstanceByReplacement", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        cancelText,
                        replacementId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cancelInstanceByReplacementAsync(string username, string password, int companyId, int processInstanceId, string userId, string cancelText, string replacementId) {
            this.cancelInstanceByReplacementAsync(username, password, companyId, processInstanceId, userId, cancelText, replacementId, null);
        }
        
        /// <remarks/>
        public void cancelInstanceByReplacementAsync(string username, string password, int companyId, int processInstanceId, string userId, string cancelText, string replacementId, object userState) {
            if ((this.cancelInstanceByReplacementOperationCompleted == null)) {
                this.cancelInstanceByReplacementOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelInstanceByReplacementOperationCompleted);
            }
            this.InvokeAsync("cancelInstanceByReplacement", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        cancelText,
                        replacementId}, this.cancelInstanceByReplacementOperationCompleted, userState);
        }
        
        private void OncancelInstanceByReplacementOperationCompleted(object arg) {
            if ((this.cancelInstanceByReplacementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelInstanceByReplacementCompleted(this, new cancelInstanceByReplacementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("calculeDeadLineTime", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public deadLineDto calculateDeadLineTime(string username, string password, int companyId, string userId, string data, int hora, int prazo, string periodId) {
            object[] results = this.Invoke("calculateDeadLineTime", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        data,
                        hora,
                        prazo,
                        periodId});
            return ((deadLineDto)(results[0]));
        }
        
        /// <remarks/>
        public void calculateDeadLineTimeAsync(string username, string password, int companyId, string userId, string data, int hora, int prazo, string periodId) {
            this.calculateDeadLineTimeAsync(username, password, companyId, userId, data, hora, prazo, periodId, null);
        }
        
        /// <remarks/>
        public void calculateDeadLineTimeAsync(string username, string password, int companyId, string userId, string data, int hora, int prazo, string periodId, object userState) {
            if ((this.calculateDeadLineTimeOperationCompleted == null)) {
                this.calculateDeadLineTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OncalculateDeadLineTimeOperationCompleted);
            }
            this.InvokeAsync("calculateDeadLineTime", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        data,
                        hora,
                        prazo,
                        periodId}, this.calculateDeadLineTimeOperationCompleted, userState);
        }
        
        private void OncalculateDeadLineTimeOperationCompleted(object arg) {
            if ((this.calculateDeadLineTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.calculateDeadLineTimeCompleted(this, new calculateDeadLineTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("simpleStartProcess", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] simpleStartProcess(string username, string password, int companyId, string processId, string comments, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processAttachmentDto[] attachments, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, NestingLevel=1)] string[][] cardData) {
            object[] results = this.Invoke("simpleStartProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        comments,
                        attachments,
                        cardData});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void simpleStartProcessAsync(string username, string password, int companyId, string processId, string comments, processAttachmentDto[] attachments, string[][] cardData) {
            this.simpleStartProcessAsync(username, password, companyId, processId, comments, attachments, cardData, null);
        }
        
        /// <remarks/>
        public void simpleStartProcessAsync(string username, string password, int companyId, string processId, string comments, processAttachmentDto[] attachments, string[][] cardData, object userState) {
            if ((this.simpleStartProcessOperationCompleted == null)) {
                this.simpleStartProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsimpleStartProcessOperationCompleted);
            }
            this.InvokeAsync("simpleStartProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        comments,
                        attachments,
                        cardData}, this.simpleStartProcessOperationCompleted, userState);
        }
        
        private void OnsimpleStartProcessOperationCompleted(object arg) {
            if ((this.simpleStartProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.simpleStartProcessCompleted(this, new simpleStartProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAvailableProcess", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("AvailableProcesses")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processDefinitionVersionDto[] getAvailableProcess(string username, string password, int companyId, string userId) {
            object[] results = this.Invoke("getAvailableProcess", new object[] {
                        username,
                        password,
                        companyId,
                        userId});
            return ((processDefinitionVersionDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getAvailableProcessAsync(string username, string password, int companyId, string userId) {
            this.getAvailableProcessAsync(username, password, companyId, userId, null);
        }
        
        /// <remarks/>
        public void getAvailableProcessAsync(string username, string password, int companyId, string userId, object userState) {
            if ((this.getAvailableProcessOperationCompleted == null)) {
                this.getAvailableProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAvailableProcessOperationCompleted);
            }
            this.InvokeAsync("getAvailableProcess", new object[] {
                        username,
                        password,
                        companyId,
                        userId}, this.getAvailableProcessOperationCompleted, userState);
        }
        
        private void OngetAvailableProcessOperationCompleted(object arg) {
            if ((this.getAvailableProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAvailableProcessCompleted(this, new getAvailableProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("startProcess", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, NestingLevel=1)]
        public string[][] startProcess(string username, string password, int companyId, string processId, int choosedState, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] colleagueIds, string comments, string userId, bool completeTask, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processAttachmentDto[] attachments, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, NestingLevel=1)] string[][] cardData, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processTaskAppointmentDto[] appointment, bool managerMode) {
            object[] results = this.Invoke("startProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void startProcessAsync(string username, string password, int companyId, string processId, int choosedState, string[] colleagueIds, string comments, string userId, bool completeTask, processAttachmentDto[] attachments, string[][] cardData, processTaskAppointmentDto[] appointment, bool managerMode) {
            this.startProcessAsync(username, password, companyId, processId, choosedState, colleagueIds, comments, userId, completeTask, attachments, cardData, appointment, managerMode, null);
        }
        
        /// <remarks/>
        public void startProcessAsync(string username, string password, int companyId, string processId, int choosedState, string[] colleagueIds, string comments, string userId, bool completeTask, processAttachmentDto[] attachments, string[][] cardData, processTaskAppointmentDto[] appointment, bool managerMode, object userState) {
            if ((this.startProcessOperationCompleted == null)) {
                this.startProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstartProcessOperationCompleted);
            }
            this.InvokeAsync("startProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode}, this.startProcessOperationCompleted, userState);
        }
        
        private void OnstartProcessOperationCompleted(object arg) {
            if ((this.startProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.startProcessCompleted(this, new startProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAllActiveStates", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("States")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Nullable<int>[] getAllActiveStates(string username, string password, int companyId, string userId, int processInstanceId) {
            object[] results = this.Invoke("getAllActiveStates", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId});
            return ((System.Nullable<int>[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllActiveStatesAsync(string username, string password, int companyId, string userId, int processInstanceId) {
            this.getAllActiveStatesAsync(username, password, companyId, userId, processInstanceId, null);
        }
        
        /// <remarks/>
        public void getAllActiveStatesAsync(string username, string password, int companyId, string userId, int processInstanceId, object userState) {
            if ((this.getAllActiveStatesOperationCompleted == null)) {
                this.getAllActiveStatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllActiveStatesOperationCompleted);
            }
            this.InvokeAsync("getAllActiveStates", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId}, this.getAllActiveStatesOperationCompleted, userState);
        }
        
        private void OngetAllActiveStatesOperationCompleted(object arg) {
            if ((this.getAllActiveStatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllActiveStatesCompleted(this, new getAllActiveStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("relaseProcess", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string releaseProcess(string username, string password, int companyId, string processId) {
            object[] results = this.Invoke("releaseProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void releaseProcessAsync(string username, string password, int companyId, string processId) {
            this.releaseProcessAsync(username, password, companyId, processId, null);
        }
        
        /// <remarks/>
        public void releaseProcessAsync(string username, string password, int companyId, string processId, object userState) {
            if ((this.releaseProcessOperationCompleted == null)) {
                this.releaseProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreleaseProcessOperationCompleted);
            }
            this.InvokeAsync("releaseProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId}, this.releaseProcessOperationCompleted, userState);
        }
        
        private void OnreleaseProcessOperationCompleted(object arg) {
            if ((this.releaseProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.releaseProcessCompleted(this, new releaseProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("setTasksComments", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string setTasksComments(string username, string password, int companyId, int processInstanceId, string userId, int threadSequence, string comments) {
            object[] results = this.Invoke("setTasksComments", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        threadSequence,
                        comments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setTasksCommentsAsync(string username, string password, int companyId, int processInstanceId, string userId, int threadSequence, string comments) {
            this.setTasksCommentsAsync(username, password, companyId, processInstanceId, userId, threadSequence, comments, null);
        }
        
        /// <remarks/>
        public void setTasksCommentsAsync(string username, string password, int companyId, int processInstanceId, string userId, int threadSequence, string comments, object userState) {
            if ((this.setTasksCommentsOperationCompleted == null)) {
                this.setTasksCommentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTasksCommentsOperationCompleted);
            }
            this.InvokeAsync("setTasksComments", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        userId,
                        threadSequence,
                        comments}, this.setTasksCommentsOperationCompleted, userState);
        }
        
        private void OnsetTasksCommentsOperationCompleted(object arg) {
            if ((this.setTasksCommentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTasksCommentsCompleted(this, new setTasksCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("searchProcess", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("searchResults")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processDefinitionVersionDto[] searchProcess(string username, string password, int companyId, string colleagueId, string content, bool favorite) {
            object[] results = this.Invoke("searchProcess", new object[] {
                        username,
                        password,
                        companyId,
                        colleagueId,
                        content,
                        favorite});
            return ((processDefinitionVersionDto[])(results[0]));
        }
        
        /// <remarks/>
        public void searchProcessAsync(string username, string password, int companyId, string colleagueId, string content, bool favorite) {
            this.searchProcessAsync(username, password, companyId, colleagueId, content, favorite, null);
        }
        
        /// <remarks/>
        public void searchProcessAsync(string username, string password, int companyId, string colleagueId, string content, bool favorite, object userState) {
            if ((this.searchProcessOperationCompleted == null)) {
                this.searchProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchProcessOperationCompleted);
            }
            this.InvokeAsync("searchProcess", new object[] {
                        username,
                        password,
                        companyId,
                        colleagueId,
                        content,
                        favorite}, this.searchProcessOperationCompleted, userState);
        }
        
        private void OnsearchProcessOperationCompleted(object arg) {
            if ((this.searchProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchProcessCompleted(this, new searchProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAvailableUsersOnDemand", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("AvailableUsers")]
        public availableUsersDto getAvailableUsersOnDemand(string username, string password, int companyId, int processInstanceId, int state, int threadSequence, int limit, int initialUser, string userSearch) {
            object[] results = this.Invoke("getAvailableUsersOnDemand", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        state,
                        threadSequence,
                        limit,
                        initialUser,
                        userSearch});
            return ((availableUsersDto)(results[0]));
        }
        
        /// <remarks/>
        public void getAvailableUsersOnDemandAsync(string username, string password, int companyId, int processInstanceId, int state, int threadSequence, int limit, int initialUser, string userSearch) {
            this.getAvailableUsersOnDemandAsync(username, password, companyId, processInstanceId, state, threadSequence, limit, initialUser, userSearch, null);
        }
        
        /// <remarks/>
        public void getAvailableUsersOnDemandAsync(string username, string password, int companyId, int processInstanceId, int state, int threadSequence, int limit, int initialUser, string userSearch, object userState) {
            if ((this.getAvailableUsersOnDemandOperationCompleted == null)) {
                this.getAvailableUsersOnDemandOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAvailableUsersOnDemandOperationCompleted);
            }
            this.InvokeAsync("getAvailableUsersOnDemand", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        state,
                        threadSequence,
                        limit,
                        initialUser,
                        userSearch}, this.getAvailableUsersOnDemandOperationCompleted, userState);
        }
        
        private void OngetAvailableUsersOnDemandOperationCompleted(object arg) {
            if ((this.getAvailableUsersOnDemandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAvailableUsersOnDemandCompleted(this, new getAvailableUsersOnDemandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getProcessFormId", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public int getProcessFormId(string username, string password, int companyId, string processId) {
            object[] results = this.Invoke("getProcessFormId", new object[] {
                        username,
                        password,
                        companyId,
                        processId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getProcessFormIdAsync(string username, string password, int companyId, string processId) {
            this.getProcessFormIdAsync(username, password, companyId, processId, null);
        }
        
        /// <remarks/>
        public void getProcessFormIdAsync(string username, string password, int companyId, string processId, object userState) {
            if ((this.getProcessFormIdOperationCompleted == null)) {
                this.getProcessFormIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessFormIdOperationCompleted);
            }
            this.InvokeAsync("getProcessFormId", new object[] {
                        username,
                        password,
                        companyId,
                        processId}, this.getProcessFormIdOperationCompleted, userState);
        }
        
        private void OngetProcessFormIdOperationCompleted(object arg) {
            if ((this.getProcessFormIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessFormIdCompleted(this, new getProcessFormIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("saveAndSendTaskClassic", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("result")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public keyValueDto[] saveAndSendTaskClassic(string username, string password, int companyId, int processInstanceId, int choosedState, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] colleagueIds, string comments, string userId, bool completeTask, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processAttachmentDto[] attachments, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] keyValueDto[] cardData, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] processTaskAppointmentDto[] appointment, bool managerMode, int threadSequence) {
            object[] results = this.Invoke("saveAndSendTaskClassic", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode,
                        threadSequence});
            return ((keyValueDto[])(results[0]));
        }
        
        /// <remarks/>
        public void saveAndSendTaskClassicAsync(string username, string password, int companyId, int processInstanceId, int choosedState, string[] colleagueIds, string comments, string userId, bool completeTask, processAttachmentDto[] attachments, keyValueDto[] cardData, processTaskAppointmentDto[] appointment, bool managerMode, int threadSequence) {
            this.saveAndSendTaskClassicAsync(username, password, companyId, processInstanceId, choosedState, colleagueIds, comments, userId, completeTask, attachments, cardData, appointment, managerMode, threadSequence, null);
        }
        
        /// <remarks/>
        public void saveAndSendTaskClassicAsync(string username, string password, int companyId, int processInstanceId, int choosedState, string[] colleagueIds, string comments, string userId, bool completeTask, processAttachmentDto[] attachments, keyValueDto[] cardData, processTaskAppointmentDto[] appointment, bool managerMode, int threadSequence, object userState) {
            if ((this.saveAndSendTaskClassicOperationCompleted == null)) {
                this.saveAndSendTaskClassicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveAndSendTaskClassicOperationCompleted);
            }
            this.InvokeAsync("saveAndSendTaskClassic", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        choosedState,
                        colleagueIds,
                        comments,
                        userId,
                        completeTask,
                        attachments,
                        cardData,
                        appointment,
                        managerMode,
                        threadSequence}, this.saveAndSendTaskClassicOperationCompleted, userState);
        }
        
        private void OnsaveAndSendTaskClassicOperationCompleted(object arg) {
            if ((this.saveAndSendTaskClassicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveAndSendTaskClassicCompleted(this, new saveAndSendTaskClassicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAvailableUsersStartOnDemand", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("AvailableUsers")]
        public availableUsersDto getAvailableUsersStartOnDemand(string username, string password, int companyId, string processId, int state, int threadSequence, int limit, int initialUser, string userSearch) {
            object[] results = this.Invoke("getAvailableUsersStartOnDemand", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        state,
                        threadSequence,
                        limit,
                        initialUser,
                        userSearch});
            return ((availableUsersDto)(results[0]));
        }
        
        /// <remarks/>
        public void getAvailableUsersStartOnDemandAsync(string username, string password, int companyId, string processId, int state, int threadSequence, int limit, int initialUser, string userSearch) {
            this.getAvailableUsersStartOnDemandAsync(username, password, companyId, processId, state, threadSequence, limit, initialUser, userSearch, null);
        }
        
        /// <remarks/>
        public void getAvailableUsersStartOnDemandAsync(string username, string password, int companyId, string processId, int state, int threadSequence, int limit, int initialUser, string userSearch, object userState) {
            if ((this.getAvailableUsersStartOnDemandOperationCompleted == null)) {
                this.getAvailableUsersStartOnDemandOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAvailableUsersStartOnDemandOperationCompleted);
            }
            this.InvokeAsync("getAvailableUsersStartOnDemand", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        state,
                        threadSequence,
                        limit,
                        initialUser,
                        userSearch}, this.getAvailableUsersStartOnDemandOperationCompleted, userState);
        }
        
        private void OngetAvailableUsersStartOnDemandOperationCompleted(object arg) {
            if ((this.getAvailableUsersStartOnDemandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAvailableUsersStartOnDemandCompleted(this, new getAvailableUsersStartOnDemandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAvailableUsers", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("AvailableUsers")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] getAvailableUsers(string username, string password, int companyId, int processInstanceId, int state, int threadSequence) {
            object[] results = this.Invoke("getAvailableUsers", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        state,
                        threadSequence});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAvailableUsersAsync(string username, string password, int companyId, int processInstanceId, int state, int threadSequence) {
            this.getAvailableUsersAsync(username, password, companyId, processInstanceId, state, threadSequence, null);
        }
        
        /// <remarks/>
        public void getAvailableUsersAsync(string username, string password, int companyId, int processInstanceId, int state, int threadSequence, object userState) {
            if ((this.getAvailableUsersOperationCompleted == null)) {
                this.getAvailableUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAvailableUsersOperationCompleted);
            }
            this.InvokeAsync("getAvailableUsers", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        state,
                        threadSequence}, this.getAvailableUsersOperationCompleted, userState);
        }
        
        private void OngetAvailableUsersOperationCompleted(object arg) {
            if ((this.getAvailableUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAvailableUsersCompleted(this, new getAvailableUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getProcessImage", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("Image")]
        public string getProcessImage(string username, string password, int companyId, string userId, string processId) {
            object[] results = this.Invoke("getProcessImage", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getProcessImageAsync(string username, string password, int companyId, string userId, string processId) {
            this.getProcessImageAsync(username, password, companyId, userId, processId, null);
        }
        
        /// <remarks/>
        public void getProcessImageAsync(string username, string password, int companyId, string userId, string processId, object userState) {
            if ((this.getProcessImageOperationCompleted == null)) {
                this.getProcessImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessImageOperationCompleted);
            }
            this.InvokeAsync("getProcessImage", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processId}, this.getProcessImageOperationCompleted, userState);
        }
        
        private void OngetProcessImageOperationCompleted(object arg) {
            if ((this.getProcessImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessImageCompleted(this, new getProcessImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAttachments", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Attachments")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processAttachmentDto[] getAttachments(string username, string password, int companyId, string userId, int processInstanceId) {
            object[] results = this.Invoke("getAttachments", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId});
            return ((processAttachmentDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getAttachmentsAsync(string username, string password, int companyId, string userId, int processInstanceId) {
            this.getAttachmentsAsync(username, password, companyId, userId, processInstanceId, null);
        }
        
        /// <remarks/>
        public void getAttachmentsAsync(string username, string password, int companyId, string userId, int processInstanceId, object userState) {
            if ((this.getAttachmentsOperationCompleted == null)) {
                this.getAttachmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAttachmentsOperationCompleted);
            }
            this.InvokeAsync("getAttachments", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId}, this.getAttachmentsOperationCompleted, userState);
        }
        
        private void OngetAttachmentsOperationCompleted(object arg) {
            if ((this.getAttachmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAttachmentsCompleted(this, new getAttachmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("importProcessWithCardAndPersistenceType", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public webServiceMessage importProcessWithCardAndPersistenceType(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] cardAttachs, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] cardEventDto[] customEvents, 
                    bool update, 
                    int persistenceType) {
            object[] results = this.Invoke("importProcessWithCardAndPersistenceType", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processAttachs,
                        newProcess,
                        overWrite,
                        colleagueId,
                        parentDocumentId,
                        documentDescription,
                        cardDescription,
                        datasetName,
                        cardAttachs,
                        customEvents,
                        update,
                        persistenceType});
            return ((webServiceMessage)(results[0]));
        }
        
        /// <remarks/>
        public void importProcessWithCardAndPersistenceTypeAsync(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    attachment[] cardAttachs, 
                    cardEventDto[] customEvents, 
                    bool update, 
                    int persistenceType) {
            this.importProcessWithCardAndPersistenceTypeAsync(username, password, companyId, processId, processAttachs, newProcess, overWrite, colleagueId, parentDocumentId, documentDescription, cardDescription, datasetName, cardAttachs, customEvents, update, persistenceType, null);
        }
        
        /// <remarks/>
        public void importProcessWithCardAndPersistenceTypeAsync(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    attachment[] cardAttachs, 
                    cardEventDto[] customEvents, 
                    bool update, 
                    int persistenceType, 
                    object userState) {
            if ((this.importProcessWithCardAndPersistenceTypeOperationCompleted == null)) {
                this.importProcessWithCardAndPersistenceTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportProcessWithCardAndPersistenceTypeOperationCompleted);
            }
            this.InvokeAsync("importProcessWithCardAndPersistenceType", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processAttachs,
                        newProcess,
                        overWrite,
                        colleagueId,
                        parentDocumentId,
                        documentDescription,
                        cardDescription,
                        datasetName,
                        cardAttachs,
                        customEvents,
                        update,
                        persistenceType}, this.importProcessWithCardAndPersistenceTypeOperationCompleted, userState);
        }
        
        private void OnimportProcessWithCardAndPersistenceTypeOperationCompleted(object arg) {
            if ((this.importProcessWithCardAndPersistenceTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importProcessWithCardAndPersistenceTypeCompleted(this, new importProcessWithCardAndPersistenceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAvailableUsersStart", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("AvailableUsers")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] getAvailableUsersStart(string username, string password, int companyId, string processId, int state, int threadSequence) {
            object[] results = this.Invoke("getAvailableUsersStart", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        state,
                        threadSequence});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAvailableUsersStartAsync(string username, string password, int companyId, string processId, int state, int threadSequence) {
            this.getAvailableUsersStartAsync(username, password, companyId, processId, state, threadSequence, null);
        }
        
        /// <remarks/>
        public void getAvailableUsersStartAsync(string username, string password, int companyId, string processId, int state, int threadSequence, object userState) {
            if ((this.getAvailableUsersStartOperationCompleted == null)) {
                this.getAvailableUsersStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAvailableUsersStartOperationCompleted);
            }
            this.InvokeAsync("getAvailableUsersStart", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        state,
                        threadSequence}, this.getAvailableUsersStartOperationCompleted, userState);
        }
        
        private void OngetAvailableUsersStartOperationCompleted(object arg) {
            if ((this.getAvailableUsersStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAvailableUsersStartCompleted(this, new getAvailableUsersStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("importProcessWithCardAndGeneralInfo", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public webServiceMessage importProcessWithCardAndGeneralInfo(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] cardAttachs, 
                    [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] cardEventDto[] customEvents, 
                    generalInfoDto generalInfo, 
                    bool update, 
                    int persistenceType) {
            object[] results = this.Invoke("importProcessWithCardAndGeneralInfo", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processAttachs,
                        newProcess,
                        overWrite,
                        colleagueId,
                        parentDocumentId,
                        documentDescription,
                        cardDescription,
                        datasetName,
                        cardAttachs,
                        customEvents,
                        generalInfo,
                        update,
                        persistenceType});
            return ((webServiceMessage)(results[0]));
        }
        
        /// <remarks/>
        public void importProcessWithCardAndGeneralInfoAsync(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    attachment[] cardAttachs, 
                    cardEventDto[] customEvents, 
                    generalInfoDto generalInfo, 
                    bool update, 
                    int persistenceType) {
            this.importProcessWithCardAndGeneralInfoAsync(username, password, companyId, processId, processAttachs, newProcess, overWrite, colleagueId, parentDocumentId, documentDescription, cardDescription, datasetName, cardAttachs, customEvents, generalInfo, update, persistenceType, null);
        }
        
        /// <remarks/>
        public void importProcessWithCardAndGeneralInfoAsync(
                    string username, 
                    string password, 
                    int companyId, 
                    string processId, 
                    attachment[] processAttachs, 
                    bool newProcess, 
                    bool overWrite, 
                    string colleagueId, 
                    int parentDocumentId, 
                    string documentDescription, 
                    string cardDescription, 
                    string datasetName, 
                    attachment[] cardAttachs, 
                    cardEventDto[] customEvents, 
                    generalInfoDto generalInfo, 
                    bool update, 
                    int persistenceType, 
                    object userState) {
            if ((this.importProcessWithCardAndGeneralInfoOperationCompleted == null)) {
                this.importProcessWithCardAndGeneralInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportProcessWithCardAndGeneralInfoOperationCompleted);
            }
            this.InvokeAsync("importProcessWithCardAndGeneralInfo", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processAttachs,
                        newProcess,
                        overWrite,
                        colleagueId,
                        parentDocumentId,
                        documentDescription,
                        cardDescription,
                        datasetName,
                        cardAttachs,
                        customEvents,
                        generalInfo,
                        update,
                        persistenceType}, this.importProcessWithCardAndGeneralInfoOperationCompleted, userState);
        }
        
        private void OnimportProcessWithCardAndGeneralInfoOperationCompleted(object arg) {
            if ((this.importProcessWithCardAndGeneralInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importProcessWithCardAndGeneralInfoCompleted(this, new importProcessWithCardAndGeneralInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("takeProcessTaskByReplacement", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string takeProcessTaskByReplacement(string username, string password, int companyId, string userId, int processInstanceId, int threadSequence, string replacementId) {
            object[] results = this.Invoke("takeProcessTaskByReplacement", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId,
                        threadSequence,
                        replacementId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void takeProcessTaskByReplacementAsync(string username, string password, int companyId, string userId, int processInstanceId, int threadSequence, string replacementId) {
            this.takeProcessTaskByReplacementAsync(username, password, companyId, userId, processInstanceId, threadSequence, replacementId, null);
        }
        
        /// <remarks/>
        public void takeProcessTaskByReplacementAsync(string username, string password, int companyId, string userId, int processInstanceId, int threadSequence, string replacementId, object userState) {
            if ((this.takeProcessTaskByReplacementOperationCompleted == null)) {
                this.takeProcessTaskByReplacementOperationCompleted = new System.Threading.SendOrPostCallback(this.OntakeProcessTaskByReplacementOperationCompleted);
            }
            this.InvokeAsync("takeProcessTaskByReplacement", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId,
                        threadSequence,
                        replacementId}, this.takeProcessTaskByReplacementOperationCompleted, userState);
        }
        
        private void OntakeProcessTaskByReplacementOperationCompleted(object arg) {
            if ((this.takeProcessTaskByReplacementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.takeProcessTaskByReplacementCompleted(this, new takeProcessTaskByReplacementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("exportProcess", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string exportProcess(string username, string password, int companyId, string processId) {
            object[] results = this.Invoke("exportProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void exportProcessAsync(string username, string password, int companyId, string processId) {
            this.exportProcessAsync(username, password, companyId, processId, null);
        }
        
        /// <remarks/>
        public void exportProcessAsync(string username, string password, int companyId, string processId, object userState) {
            if ((this.exportProcessOperationCompleted == null)) {
                this.exportProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexportProcessOperationCompleted);
            }
            this.InvokeAsync("exportProcess", new object[] {
                        username,
                        password,
                        companyId,
                        processId}, this.exportProcessOperationCompleted, userState);
        }
        
        private void OnexportProcessOperationCompleted(object arg) {
            if ((this.exportProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.exportProcessCompleted(this, new exportProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getAvailbleStates", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("States")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Nullable<int>[] getAvailableStates(string username, string password, int companyId, string processId, int processInstanceId, int threadSequence) {
            object[] results = this.Invoke("getAvailableStates", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processInstanceId,
                        threadSequence});
            return ((System.Nullable<int>[])(results[0]));
        }
        
        /// <remarks/>
        public void getAvailableStatesAsync(string username, string password, int companyId, string processId, int processInstanceId, int threadSequence) {
            this.getAvailableStatesAsync(username, password, companyId, processId, processInstanceId, threadSequence, null);
        }
        
        /// <remarks/>
        public void getAvailableStatesAsync(string username, string password, int companyId, string processId, int processInstanceId, int threadSequence, object userState) {
            if ((this.getAvailableStatesOperationCompleted == null)) {
                this.getAvailableStatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAvailableStatesOperationCompleted);
            }
            this.InvokeAsync("getAvailableStates", new object[] {
                        username,
                        password,
                        companyId,
                        processId,
                        processInstanceId,
                        threadSequence}, this.getAvailableStatesOperationCompleted, userState);
        }
        
        private void OngetAvailableStatesOperationCompleted(object arg) {
            if ((this.getAvailableStatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAvailableStatesCompleted(this, new getAvailableStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("updateWorkflowAttachment", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public string updateWorkflowAttachment(string username, string password, int companyId, int processInstanceId, string usuario, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] documentDto[] document, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] attachment[] attachments) {
            object[] results = this.Invoke("updateWorkflowAttachment", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        usuario,
                        document,
                        attachments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateWorkflowAttachmentAsync(string username, string password, int companyId, int processInstanceId, string usuario, documentDto[] document, attachment[] attachments) {
            this.updateWorkflowAttachmentAsync(username, password, companyId, processInstanceId, usuario, document, attachments, null);
        }
        
        /// <remarks/>
        public void updateWorkflowAttachmentAsync(string username, string password, int companyId, int processInstanceId, string usuario, documentDto[] document, attachment[] attachments, object userState) {
            if ((this.updateWorkflowAttachmentOperationCompleted == null)) {
                this.updateWorkflowAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateWorkflowAttachmentOperationCompleted);
            }
            this.InvokeAsync("updateWorkflowAttachment", new object[] {
                        username,
                        password,
                        companyId,
                        processInstanceId,
                        usuario,
                        document,
                        attachments}, this.updateWorkflowAttachmentOperationCompleted, userState);
        }
        
        private void OnupdateWorkflowAttachmentOperationCompleted(object arg) {
            if ((this.updateWorkflowAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateWorkflowAttachmentCompleted(this, new updateWorkflowAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("getHistories", RequestNamespace="http://ws.workflow.ecm.technology.totvs.com/", ResponseNamespace="http://ws.workflow.ecm.technology.totvs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Histories")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processHistoryDto[] getHistories(string username, string password, int companyId, string userId, int processInstanceId) {
            object[] results = this.Invoke("getHistories", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId});
            return ((processHistoryDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getHistoriesAsync(string username, string password, int companyId, string userId, int processInstanceId) {
            this.getHistoriesAsync(username, password, companyId, userId, processInstanceId, null);
        }
        
        /// <remarks/>
        public void getHistoriesAsync(string username, string password, int companyId, string userId, int processInstanceId, object userState) {
            if ((this.getHistoriesOperationCompleted == null)) {
                this.getHistoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHistoriesOperationCompleted);
            }
            this.InvokeAsync("getHistories", new object[] {
                        username,
                        password,
                        companyId,
                        userId,
                        processInstanceId}, this.getHistoriesOperationCompleted, userState);
        }
        
        private void OngetHistoriesOperationCompleted(object arg) {
            if ((this.getHistoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHistoriesCompleted(this, new getHistoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class attachment {
        
        private bool attachField;
        
        private bool attachFieldSpecified;
        
        private bool descriptorField;
        
        private bool descriptorFieldSpecified;
        
        private bool editingField;
        
        private bool editingFieldSpecified;
        
        private string fileNameField;
        
        private attachment fileSelectedField;
        
        private long fileSizeField;
        
        private byte[] filecontentField;
        
        private string fullPatchField;
        
        private string iconPathField;
        
        private bool mobileField;
        
        private bool mobileFieldSpecified;
        
        private string pathNameField;
        
        private bool principalField;
        
        private bool principalFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool attach {
            get {
                return this.attachField;
            }
            set {
                this.attachField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool attachSpecified {
            get {
                return this.attachFieldSpecified;
            }
            set {
                this.attachFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool descriptor {
            get {
                return this.descriptorField;
            }
            set {
                this.descriptorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool descriptorSpecified {
            get {
                return this.descriptorFieldSpecified;
            }
            set {
                this.descriptorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool editing {
            get {
                return this.editingField;
            }
            set {
                this.editingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool editingSpecified {
            get {
                return this.editingFieldSpecified;
            }
            set {
                this.editingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public attachment fileSelected {
            get {
                return this.fileSelectedField;
            }
            set {
                this.fileSelectedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long fileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] filecontent {
            get {
                return this.filecontentField;
            }
            set {
                this.filecontentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fullPatch {
            get {
                return this.fullPatchField;
            }
            set {
                this.fullPatchField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string iconPath {
            get {
                return this.iconPathField;
            }
            set {
                this.iconPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool mobile {
            get {
                return this.mobileField;
            }
            set {
                this.mobileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mobileSpecified {
            get {
                return this.mobileFieldSpecified;
            }
            set {
                this.mobileFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string pathName {
            get {
                return this.pathNameField;
            }
            set {
                this.pathNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool principal {
            get {
                return this.principalField;
            }
            set {
                this.principalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool principalSpecified {
            get {
                return this.principalFieldSpecified;
            }
            set {
                this.principalFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class processTaskDto {
        
        private bool activeField;
        
        private bool canCurrentUserTakeTaskField;
        
        private string choosedColleagueIdField;
        
        private int choosedSequenceField;
        
        private string colleagueIdField;
        
        private string colleagueNameField;
        
        private long companyIdField;
        
        private bool complementField;
        
        private string completeColleagueIdField;
        
        private int completeTypeField;
        
        private string deadlineTextField;
        
        private string historCompleteColleagueField;
        
        private string historTaskObservationField;
        
        private int movementSequenceField;
        
        private int processInstanceIdField;
        
        private int statusField;
        
        private int statusConsultField;
        
        private System.DateTime taskCompletionDateField;
        
        private bool taskCompletionDateFieldSpecified;
        
        private int taskCompletionHourField;
        
        private string taskObservationField;
        
        private bool taskSignedField;
        
        private int transferredSequenceField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool canCurrentUserTakeTask {
            get {
                return this.canCurrentUserTakeTaskField;
            }
            set {
                this.canCurrentUserTakeTaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string choosedColleagueId {
            get {
                return this.choosedColleagueIdField;
            }
            set {
                this.choosedColleagueIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int choosedSequence {
            get {
                return this.choosedSequenceField;
            }
            set {
                this.choosedSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueId {
            get {
                return this.colleagueIdField;
            }
            set {
                this.colleagueIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueName {
            get {
                return this.colleagueNameField;
            }
            set {
                this.colleagueNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool complement {
            get {
                return this.complementField;
            }
            set {
                this.complementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string completeColleagueId {
            get {
                return this.completeColleagueIdField;
            }
            set {
                this.completeColleagueIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int completeType {
            get {
                return this.completeTypeField;
            }
            set {
                this.completeTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string deadlineText {
            get {
                return this.deadlineTextField;
            }
            set {
                this.deadlineTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string historCompleteColleague {
            get {
                return this.historCompleteColleagueField;
            }
            set {
                this.historCompleteColleagueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string historTaskObservation {
            get {
                return this.historTaskObservationField;
            }
            set {
                this.historTaskObservationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int movementSequence {
            get {
                return this.movementSequenceField;
            }
            set {
                this.movementSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int processInstanceId {
            get {
                return this.processInstanceIdField;
            }
            set {
                this.processInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int statusConsult {
            get {
                return this.statusConsultField;
            }
            set {
                this.statusConsultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime taskCompletionDate {
            get {
                return this.taskCompletionDateField;
            }
            set {
                this.taskCompletionDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taskCompletionDateSpecified {
            get {
                return this.taskCompletionDateFieldSpecified;
            }
            set {
                this.taskCompletionDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int taskCompletionHour {
            get {
                return this.taskCompletionHourField;
            }
            set {
                this.taskCompletionHourField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string taskObservation {
            get {
                return this.taskObservationField;
            }
            set {
                this.taskObservationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool taskSigned {
            get {
                return this.taskSignedField;
            }
            set {
                this.taskSignedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int transferredSequence {
            get {
                return this.transferredSequenceField;
            }
            set {
                this.transferredSequenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class processHistoryDto {
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private long companyIdField;
        
        private int conversionSequenceField;
        
        private bool conversionSequenceFieldSpecified;
        
        private bool isReturnField;
        
        private bool isReturnFieldSpecified;
        
        private string labelActivityField;
        
        private string labelLinkField;
        
        private System.DateTime movementDateField;
        
        private bool movementDateFieldSpecified;
        
        private string movementHourField;
        
        private int movementSequenceField;
        
        private int previousMovementSequenceField;
        
        private bool previousMovementSequenceFieldSpecified;
        
        private int processInstanceIdField;
        
        private int stateSequenceField;
        
        private bool stateSequenceFieldSpecified;
        
        private int subProcessIdField;
        
        private bool subProcessIdFieldSpecified;
        
        private processTaskDto[] tasksField;
        
        private int threadSequenceField;
        
        private bool threadSequenceFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activeSpecified {
            get {
                return this.activeFieldSpecified;
            }
            set {
                this.activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int conversionSequence {
            get {
                return this.conversionSequenceField;
            }
            set {
                this.conversionSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool conversionSequenceSpecified {
            get {
                return this.conversionSequenceFieldSpecified;
            }
            set {
                this.conversionSequenceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isReturn {
            get {
                return this.isReturnField;
            }
            set {
                this.isReturnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isReturnSpecified {
            get {
                return this.isReturnFieldSpecified;
            }
            set {
                this.isReturnFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string labelActivity {
            get {
                return this.labelActivityField;
            }
            set {
                this.labelActivityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string labelLink {
            get {
                return this.labelLinkField;
            }
            set {
                this.labelLinkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime movementDate {
            get {
                return this.movementDateField;
            }
            set {
                this.movementDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool movementDateSpecified {
            get {
                return this.movementDateFieldSpecified;
            }
            set {
                this.movementDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string movementHour {
            get {
                return this.movementHourField;
            }
            set {
                this.movementHourField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int movementSequence {
            get {
                return this.movementSequenceField;
            }
            set {
                this.movementSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int previousMovementSequence {
            get {
                return this.previousMovementSequenceField;
            }
            set {
                this.previousMovementSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool previousMovementSequenceSpecified {
            get {
                return this.previousMovementSequenceFieldSpecified;
            }
            set {
                this.previousMovementSequenceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int processInstanceId {
            get {
                return this.processInstanceIdField;
            }
            set {
                this.processInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int stateSequence {
            get {
                return this.stateSequenceField;
            }
            set {
                this.stateSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stateSequenceSpecified {
            get {
                return this.stateSequenceFieldSpecified;
            }
            set {
                this.stateSequenceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int subProcessId {
            get {
                return this.subProcessIdField;
            }
            set {
                this.subProcessIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool subProcessIdSpecified {
            get {
                return this.subProcessIdFieldSpecified;
            }
            set {
                this.subProcessIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("tasks", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public processTaskDto[] tasks {
            get {
                return this.tasksField;
            }
            set {
                this.tasksField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int threadSequence {
            get {
                return this.threadSequenceField;
            }
            set {
                this.threadSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool threadSequenceSpecified {
            get {
                return this.threadSequenceFieldSpecified;
            }
            set {
                this.threadSequenceFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class sociableDocumentDto {
        
        private bool commentedField;
        
        private bool denouncedField;
        
        private int documentIdField;
        
        private bool documentIdFieldSpecified;
        
        private bool followingField;
        
        private bool likedField;
        
        private int numberCommentsField;
        
        private bool numberCommentsFieldSpecified;
        
        private int numberDenouncementsField;
        
        private bool numberDenouncementsFieldSpecified;
        
        private int numberFollowsField;
        
        private bool numberFollowsFieldSpecified;
        
        private int numberLikesField;
        
        private bool numberLikesFieldSpecified;
        
        private int numberSharesField;
        
        private bool numberSharesFieldSpecified;
        
        private bool sharedField;
        
        private long sociableIdField;
        
        private bool sociableIdFieldSpecified;
        
        private int versionField;
        
        private bool versionFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool commented {
            get {
                return this.commentedField;
            }
            set {
                this.commentedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool denounced {
            get {
                return this.denouncedField;
            }
            set {
                this.denouncedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentIdSpecified {
            get {
                return this.documentIdFieldSpecified;
            }
            set {
                this.documentIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool following {
            get {
                return this.followingField;
            }
            set {
                this.followingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool liked {
            get {
                return this.likedField;
            }
            set {
                this.likedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int numberComments {
            get {
                return this.numberCommentsField;
            }
            set {
                this.numberCommentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberCommentsSpecified {
            get {
                return this.numberCommentsFieldSpecified;
            }
            set {
                this.numberCommentsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int numberDenouncements {
            get {
                return this.numberDenouncementsField;
            }
            set {
                this.numberDenouncementsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberDenouncementsSpecified {
            get {
                return this.numberDenouncementsFieldSpecified;
            }
            set {
                this.numberDenouncementsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int numberFollows {
            get {
                return this.numberFollowsField;
            }
            set {
                this.numberFollowsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberFollowsSpecified {
            get {
                return this.numberFollowsFieldSpecified;
            }
            set {
                this.numberFollowsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int numberLikes {
            get {
                return this.numberLikesField;
            }
            set {
                this.numberLikesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberLikesSpecified {
            get {
                return this.numberLikesFieldSpecified;
            }
            set {
                this.numberLikesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int numberShares {
            get {
                return this.numberSharesField;
            }
            set {
                this.numberSharesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberSharesSpecified {
            get {
                return this.numberSharesFieldSpecified;
            }
            set {
                this.numberSharesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool shared {
            get {
                return this.sharedField;
            }
            set {
                this.sharedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long sociableId {
            get {
                return this.sociableIdField;
            }
            set {
                this.sociableIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sociableIdSpecified {
            get {
                return this.sociableIdFieldSpecified;
            }
            set {
                this.sociableIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool versionSpecified {
            get {
                return this.versionFieldSpecified;
            }
            set {
                this.versionFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class documentDto {
        
        private int accessCountField;
        
        private bool accessCountFieldSpecified;
        
        private bool activeUserApproverField;
        
        private bool activeUserApproverFieldSpecified;
        
        private bool activeVersionField;
        
        private bool activeVersionFieldSpecified;
        
        private string additionalCommentsField;
        
        private bool allowMuiltiCardsPerUserField;
        
        private bool allowMuiltiCardsPerUserFieldSpecified;
        
        private bool approvalAndOrField;
        
        private bool approvalAndOrFieldSpecified;
        
        private bool approvedField;
        
        private bool approvedFieldSpecified;
        
        private System.DateTime approvedDateField;
        
        private bool approvedDateFieldSpecified;
        
        private string articleContentField;
        
        private attachment[] attachmentsField;
        
        private int atualizationIdField;
        
        private bool atualizationIdFieldSpecified;
        
        private string backgroundColorField;
        
        private string backgroundImageField;
        
        private string bannerImageField;
        
        private string cardDescriptionField;
        
        private string colleagueIdField;
        
        private string colleagueNameField;
        
        private long companyIdField;
        
        private int convertDocumentTypeField;
        
        private bool convertDocumentTypeFieldSpecified;
        
        private long crcField;
        
        private bool crcFieldSpecified;
        
        private System.DateTime createDateField;
        
        private bool createDateFieldSpecified;
        
        private long createDateInMillisecondsField;
        
        private string datasetNameField;
        
        private bool dateFormStartedField;
        
        private bool dateFormStartedFieldSpecified;
        
        private bool deletedField;
        
        private bool deletedFieldSpecified;
        
        private string documentDescriptionField;
        
        private int documentIdField;
        
        private bool documentIdFieldSpecified;
        
        private string documentKeyWordField;
        
        private int documentPropertyNumberField;
        
        private bool documentPropertyNumberFieldSpecified;
        
        private int documentPropertyVersionField;
        
        private bool documentPropertyVersionFieldSpecified;
        
        private string documentTypeField;
        
        private string documentTypeIdField;
        
        private bool downloadEnabledField;
        
        private bool downloadEnabledFieldSpecified;
        
        private bool draftField;
        
        private bool draftFieldSpecified;
        
        private System.DateTime expirationDateField;
        
        private bool expirationDateFieldSpecified;
        
        private bool expiredFormField;
        
        private bool expiredFormFieldSpecified;
        
        private bool expiresField;
        
        private bool expiresFieldSpecified;
        
        private string externalDocumentIdField;
        
        private bool favoriteField;
        
        private bool favoriteFieldSpecified;
        
        private string fileURLField;
        
        private int folderIdField;
        
        private bool folderIdFieldSpecified;
        
        private bool forAprovalField;
        
        private string hashAnnotationsField;
        
        private int iconIdField;
        
        private bool iconIdFieldSpecified;
        
        private string iconPathField;
        
        private bool imutableField;
        
        private bool imutableFieldSpecified;
        
        private bool indexedField;
        
        private bool indexedFieldSpecified;
        
        private bool inheritApproversField;
        
        private bool inheritApproversFieldSpecified;
        
        private bool inheritSecurityField;
        
        private bool internalVisualizerField;
        
        private bool internalVisualizerFieldSpecified;
        
        private bool isEncryptedField;
        
        private bool isEncryptedFieldSpecified;
        
        private string keyWordField;
        
        private string languageIdField;
        
        private string languageIndicatorField;
        
        private System.DateTime lastModifiedDateField;
        
        private bool lastModifiedDateFieldSpecified;
        
        private string lastModifiedTimeField;
        
        private int metaListIdField;
        
        private bool metaListIdFieldSpecified;
        
        private int metaListRecordIdField;
        
        private bool metaListRecordIdFieldSpecified;
        
        private bool newStructureField;
        
        private bool newStructureFieldSpecified;
        
        private int notificationDaysField;
        
        private bool notificationDaysFieldSpecified;
        
        private bool onCheckoutField;
        
        private int parentDocumentIdField;
        
        private bool parentDocumentIdFieldSpecified;
        
        private string pdfRenderEngineField;
        
        private int permissionTypeField;
        
        private bool permissionTypeFieldSpecified;
        
        private string phisicalFileField;
        
        private float phisicalFileSizeField;
        
        private bool phisicalFileSizeFieldSpecified;
        
        private int priorityField;
        
        private bool priorityFieldSpecified;
        
        private string privateColleagueIdField;
        
        private bool privateDocumentField;
        
        private bool privateDocumentFieldSpecified;
        
        private bool protectedCopyField;
        
        private bool protectedCopyFieldSpecified;
        
        private bool publicDocumentField;
        
        private bool publicDocumentFieldSpecified;
        
        private string publisherIdField;
        
        private string publisherNameField;
        
        private int quotaField;
        
        private bool quotaFieldSpecified;
        
        private string relatedFilesField;
        
        private int restrictionTypeField;
        
        private bool restrictionTypeFieldSpecified;
        
        private int rowIdField;
        
        private int searchNumberField;
        
        private bool searchNumberFieldSpecified;
        
        private int securityLevelField;
        
        private string siteCodeField;
        
        private sociableDocumentDto sociableDocumentDtoField;
        
        private string socialDocumentField;
        
        private bool toolField;
        
        private bool toolFieldSpecified;
        
        private int topicIdField;
        
        private bool topicIdFieldSpecified;
        
        private bool translatedField;
        
        private string uUIDField;
        
        private bool updateIsoPropertiesField;
        
        private bool userAnswerFormField;
        
        private bool userAnswerFormFieldSpecified;
        
        private bool userNotifyField;
        
        private bool userNotifyFieldSpecified;
        
        private int userPermissionField;
        
        private bool userPermissionFieldSpecified;
        
        private System.DateTime validationStartDateField;
        
        private bool validationStartDateFieldSpecified;
        
        private int versionField;
        
        private string versionDescriptionField;
        
        private string versionOptionField;
        
        private string visualizationField;
        
        private string volumeIdField;
        
        private int watermarkIdField;
        
        private bool watermarkIdFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int accessCount {
            get {
                return this.accessCountField;
            }
            set {
                this.accessCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool accessCountSpecified {
            get {
                return this.accessCountFieldSpecified;
            }
            set {
                this.accessCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool activeUserApprover {
            get {
                return this.activeUserApproverField;
            }
            set {
                this.activeUserApproverField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activeUserApproverSpecified {
            get {
                return this.activeUserApproverFieldSpecified;
            }
            set {
                this.activeUserApproverFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool activeVersion {
            get {
                return this.activeVersionField;
            }
            set {
                this.activeVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activeVersionSpecified {
            get {
                return this.activeVersionFieldSpecified;
            }
            set {
                this.activeVersionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string additionalComments {
            get {
                return this.additionalCommentsField;
            }
            set {
                this.additionalCommentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool allowMuiltiCardsPerUser {
            get {
                return this.allowMuiltiCardsPerUserField;
            }
            set {
                this.allowMuiltiCardsPerUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool allowMuiltiCardsPerUserSpecified {
            get {
                return this.allowMuiltiCardsPerUserFieldSpecified;
            }
            set {
                this.allowMuiltiCardsPerUserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool approvalAndOr {
            get {
                return this.approvalAndOrField;
            }
            set {
                this.approvalAndOrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool approvalAndOrSpecified {
            get {
                return this.approvalAndOrFieldSpecified;
            }
            set {
                this.approvalAndOrFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool approved {
            get {
                return this.approvedField;
            }
            set {
                this.approvedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool approvedSpecified {
            get {
                return this.approvedFieldSpecified;
            }
            set {
                this.approvedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime approvedDate {
            get {
                return this.approvedDateField;
            }
            set {
                this.approvedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool approvedDateSpecified {
            get {
                return this.approvedDateFieldSpecified;
            }
            set {
                this.approvedDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string articleContent {
            get {
                return this.articleContentField;
            }
            set {
                this.articleContentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("attachments", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public attachment[] attachments {
            get {
                return this.attachmentsField;
            }
            set {
                this.attachmentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int atualizationId {
            get {
                return this.atualizationIdField;
            }
            set {
                this.atualizationIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool atualizationIdSpecified {
            get {
                return this.atualizationIdFieldSpecified;
            }
            set {
                this.atualizationIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string backgroundColor {
            get {
                return this.backgroundColorField;
            }
            set {
                this.backgroundColorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string backgroundImage {
            get {
                return this.backgroundImageField;
            }
            set {
                this.backgroundImageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string bannerImage {
            get {
                return this.bannerImageField;
            }
            set {
                this.bannerImageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string cardDescription {
            get {
                return this.cardDescriptionField;
            }
            set {
                this.cardDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueId {
            get {
                return this.colleagueIdField;
            }
            set {
                this.colleagueIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueName {
            get {
                return this.colleagueNameField;
            }
            set {
                this.colleagueNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int convertDocumentType {
            get {
                return this.convertDocumentTypeField;
            }
            set {
                this.convertDocumentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool convertDocumentTypeSpecified {
            get {
                return this.convertDocumentTypeFieldSpecified;
            }
            set {
                this.convertDocumentTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long crc {
            get {
                return this.crcField;
            }
            set {
                this.crcField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool crcSpecified {
            get {
                return this.crcFieldSpecified;
            }
            set {
                this.crcFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime createDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool createDateSpecified {
            get {
                return this.createDateFieldSpecified;
            }
            set {
                this.createDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long createDateInMilliseconds {
            get {
                return this.createDateInMillisecondsField;
            }
            set {
                this.createDateInMillisecondsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string datasetName {
            get {
                return this.datasetNameField;
            }
            set {
                this.datasetNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool dateFormStarted {
            get {
                return this.dateFormStartedField;
            }
            set {
                this.dateFormStartedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateFormStartedSpecified {
            get {
                return this.dateFormStartedFieldSpecified;
            }
            set {
                this.dateFormStartedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deletedSpecified {
            get {
                return this.deletedFieldSpecified;
            }
            set {
                this.deletedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentDescription {
            get {
                return this.documentDescriptionField;
            }
            set {
                this.documentDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentIdSpecified {
            get {
                return this.documentIdFieldSpecified;
            }
            set {
                this.documentIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentKeyWord {
            get {
                return this.documentKeyWordField;
            }
            set {
                this.documentKeyWordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentPropertyNumber {
            get {
                return this.documentPropertyNumberField;
            }
            set {
                this.documentPropertyNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentPropertyNumberSpecified {
            get {
                return this.documentPropertyNumberFieldSpecified;
            }
            set {
                this.documentPropertyNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentPropertyVersion {
            get {
                return this.documentPropertyVersionField;
            }
            set {
                this.documentPropertyVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentPropertyVersionSpecified {
            get {
                return this.documentPropertyVersionFieldSpecified;
            }
            set {
                this.documentPropertyVersionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentTypeId {
            get {
                return this.documentTypeIdField;
            }
            set {
                this.documentTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool downloadEnabled {
            get {
                return this.downloadEnabledField;
            }
            set {
                this.downloadEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool downloadEnabledSpecified {
            get {
                return this.downloadEnabledFieldSpecified;
            }
            set {
                this.downloadEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool draft {
            get {
                return this.draftField;
            }
            set {
                this.draftField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool draftSpecified {
            get {
                return this.draftFieldSpecified;
            }
            set {
                this.draftFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime expirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationDateSpecified {
            get {
                return this.expirationDateFieldSpecified;
            }
            set {
                this.expirationDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool expiredForm {
            get {
                return this.expiredFormField;
            }
            set {
                this.expiredFormField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expiredFormSpecified {
            get {
                return this.expiredFormFieldSpecified;
            }
            set {
                this.expiredFormFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool expires {
            get {
                return this.expiresField;
            }
            set {
                this.expiresField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expiresSpecified {
            get {
                return this.expiresFieldSpecified;
            }
            set {
                this.expiresFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string externalDocumentId {
            get {
                return this.externalDocumentIdField;
            }
            set {
                this.externalDocumentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool favorite {
            get {
                return this.favoriteField;
            }
            set {
                this.favoriteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool favoriteSpecified {
            get {
                return this.favoriteFieldSpecified;
            }
            set {
                this.favoriteFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileURL {
            get {
                return this.fileURLField;
            }
            set {
                this.fileURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int folderId {
            get {
                return this.folderIdField;
            }
            set {
                this.folderIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool folderIdSpecified {
            get {
                return this.folderIdFieldSpecified;
            }
            set {
                this.folderIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool forAproval {
            get {
                return this.forAprovalField;
            }
            set {
                this.forAprovalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string hashAnnotations {
            get {
                return this.hashAnnotationsField;
            }
            set {
                this.hashAnnotationsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int iconId {
            get {
                return this.iconIdField;
            }
            set {
                this.iconIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool iconIdSpecified {
            get {
                return this.iconIdFieldSpecified;
            }
            set {
                this.iconIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string iconPath {
            get {
                return this.iconPathField;
            }
            set {
                this.iconPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool imutable {
            get {
                return this.imutableField;
            }
            set {
                this.imutableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool imutableSpecified {
            get {
                return this.imutableFieldSpecified;
            }
            set {
                this.imutableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool indexed {
            get {
                return this.indexedField;
            }
            set {
                this.indexedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool indexedSpecified {
            get {
                return this.indexedFieldSpecified;
            }
            set {
                this.indexedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool inheritApprovers {
            get {
                return this.inheritApproversField;
            }
            set {
                this.inheritApproversField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool inheritApproversSpecified {
            get {
                return this.inheritApproversFieldSpecified;
            }
            set {
                this.inheritApproversFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool inheritSecurity {
            get {
                return this.inheritSecurityField;
            }
            set {
                this.inheritSecurityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool internalVisualizer {
            get {
                return this.internalVisualizerField;
            }
            set {
                this.internalVisualizerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool internalVisualizerSpecified {
            get {
                return this.internalVisualizerFieldSpecified;
            }
            set {
                this.internalVisualizerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isEncrypted {
            get {
                return this.isEncryptedField;
            }
            set {
                this.isEncryptedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isEncryptedSpecified {
            get {
                return this.isEncryptedFieldSpecified;
            }
            set {
                this.isEncryptedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string keyWord {
            get {
                return this.keyWordField;
            }
            set {
                this.keyWordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string languageId {
            get {
                return this.languageIdField;
            }
            set {
                this.languageIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string languageIndicator {
            get {
                return this.languageIndicatorField;
            }
            set {
                this.languageIndicatorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime lastModifiedDate {
            get {
                return this.lastModifiedDateField;
            }
            set {
                this.lastModifiedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastModifiedDateSpecified {
            get {
                return this.lastModifiedDateFieldSpecified;
            }
            set {
                this.lastModifiedDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string lastModifiedTime {
            get {
                return this.lastModifiedTimeField;
            }
            set {
                this.lastModifiedTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int metaListId {
            get {
                return this.metaListIdField;
            }
            set {
                this.metaListIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool metaListIdSpecified {
            get {
                return this.metaListIdFieldSpecified;
            }
            set {
                this.metaListIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int metaListRecordId {
            get {
                return this.metaListRecordIdField;
            }
            set {
                this.metaListRecordIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool metaListRecordIdSpecified {
            get {
                return this.metaListRecordIdFieldSpecified;
            }
            set {
                this.metaListRecordIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool newStructure {
            get {
                return this.newStructureField;
            }
            set {
                this.newStructureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool newStructureSpecified {
            get {
                return this.newStructureFieldSpecified;
            }
            set {
                this.newStructureFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int notificationDays {
            get {
                return this.notificationDaysField;
            }
            set {
                this.notificationDaysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool notificationDaysSpecified {
            get {
                return this.notificationDaysFieldSpecified;
            }
            set {
                this.notificationDaysFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool onCheckout {
            get {
                return this.onCheckoutField;
            }
            set {
                this.onCheckoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int parentDocumentId {
            get {
                return this.parentDocumentIdField;
            }
            set {
                this.parentDocumentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool parentDocumentIdSpecified {
            get {
                return this.parentDocumentIdFieldSpecified;
            }
            set {
                this.parentDocumentIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string pdfRenderEngine {
            get {
                return this.pdfRenderEngineField;
            }
            set {
                this.pdfRenderEngineField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int permissionType {
            get {
                return this.permissionTypeField;
            }
            set {
                this.permissionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool permissionTypeSpecified {
            get {
                return this.permissionTypeFieldSpecified;
            }
            set {
                this.permissionTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string phisicalFile {
            get {
                return this.phisicalFileField;
            }
            set {
                this.phisicalFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public float phisicalFileSize {
            get {
                return this.phisicalFileSizeField;
            }
            set {
                this.phisicalFileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool phisicalFileSizeSpecified {
            get {
                return this.phisicalFileSizeFieldSpecified;
            }
            set {
                this.phisicalFileSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool prioritySpecified {
            get {
                return this.priorityFieldSpecified;
            }
            set {
                this.priorityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string privateColleagueId {
            get {
                return this.privateColleagueIdField;
            }
            set {
                this.privateColleagueIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool privateDocument {
            get {
                return this.privateDocumentField;
            }
            set {
                this.privateDocumentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool privateDocumentSpecified {
            get {
                return this.privateDocumentFieldSpecified;
            }
            set {
                this.privateDocumentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool protectedCopy {
            get {
                return this.protectedCopyField;
            }
            set {
                this.protectedCopyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool protectedCopySpecified {
            get {
                return this.protectedCopyFieldSpecified;
            }
            set {
                this.protectedCopyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool publicDocument {
            get {
                return this.publicDocumentField;
            }
            set {
                this.publicDocumentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool publicDocumentSpecified {
            get {
                return this.publicDocumentFieldSpecified;
            }
            set {
                this.publicDocumentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string publisherId {
            get {
                return this.publisherIdField;
            }
            set {
                this.publisherIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string publisherName {
            get {
                return this.publisherNameField;
            }
            set {
                this.publisherNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int quota {
            get {
                return this.quotaField;
            }
            set {
                this.quotaField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quotaSpecified {
            get {
                return this.quotaFieldSpecified;
            }
            set {
                this.quotaFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string relatedFiles {
            get {
                return this.relatedFilesField;
            }
            set {
                this.relatedFilesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int restrictionType {
            get {
                return this.restrictionTypeField;
            }
            set {
                this.restrictionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool restrictionTypeSpecified {
            get {
                return this.restrictionTypeFieldSpecified;
            }
            set {
                this.restrictionTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int rowId {
            get {
                return this.rowIdField;
            }
            set {
                this.rowIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int searchNumber {
            get {
                return this.searchNumberField;
            }
            set {
                this.searchNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool searchNumberSpecified {
            get {
                return this.searchNumberFieldSpecified;
            }
            set {
                this.searchNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int securityLevel {
            get {
                return this.securityLevelField;
            }
            set {
                this.securityLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string siteCode {
            get {
                return this.siteCodeField;
            }
            set {
                this.siteCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public sociableDocumentDto sociableDocumentDto {
            get {
                return this.sociableDocumentDtoField;
            }
            set {
                this.sociableDocumentDtoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string socialDocument {
            get {
                return this.socialDocumentField;
            }
            set {
                this.socialDocumentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool tool {
            get {
                return this.toolField;
            }
            set {
                this.toolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool toolSpecified {
            get {
                return this.toolFieldSpecified;
            }
            set {
                this.toolFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int topicId {
            get {
                return this.topicIdField;
            }
            set {
                this.topicIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool topicIdSpecified {
            get {
                return this.topicIdFieldSpecified;
            }
            set {
                this.topicIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool translated {
            get {
                return this.translatedField;
            }
            set {
                this.translatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool updateIsoProperties {
            get {
                return this.updateIsoPropertiesField;
            }
            set {
                this.updateIsoPropertiesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool userAnswerForm {
            get {
                return this.userAnswerFormField;
            }
            set {
                this.userAnswerFormField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool userAnswerFormSpecified {
            get {
                return this.userAnswerFormFieldSpecified;
            }
            set {
                this.userAnswerFormFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool userNotify {
            get {
                return this.userNotifyField;
            }
            set {
                this.userNotifyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool userNotifySpecified {
            get {
                return this.userNotifyFieldSpecified;
            }
            set {
                this.userNotifyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int userPermission {
            get {
                return this.userPermissionField;
            }
            set {
                this.userPermissionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool userPermissionSpecified {
            get {
                return this.userPermissionFieldSpecified;
            }
            set {
                this.userPermissionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime validationStartDate {
            get {
                return this.validationStartDateField;
            }
            set {
                this.validationStartDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool validationStartDateSpecified {
            get {
                return this.validationStartDateFieldSpecified;
            }
            set {
                this.validationStartDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string versionDescription {
            get {
                return this.versionDescriptionField;
            }
            set {
                this.versionDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string versionOption {
            get {
                return this.versionOptionField;
            }
            set {
                this.versionOptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string visualization {
            get {
                return this.visualizationField;
            }
            set {
                this.visualizationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string volumeId {
            get {
                return this.volumeIdField;
            }
            set {
                this.volumeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int watermarkId {
            get {
                return this.watermarkIdField;
            }
            set {
                this.watermarkIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool watermarkIdSpecified {
            get {
                return this.watermarkIdFieldSpecified;
            }
            set {
                this.watermarkIdFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class colleagueDto {
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private bool adminUserField;
        
        private bool adminUserFieldSpecified;
        
        private int area1IdField;
        
        private bool area1IdFieldSpecified;
        
        private int area2IdField;
        
        private bool area2IdFieldSpecified;
        
        private int area3IdField;
        
        private bool area3IdFieldSpecified;
        
        private int area4IdField;
        
        private bool area4IdFieldSpecified;
        
        private int area5IdField;
        
        private bool area5IdFieldSpecified;
        
        private string colleagueIdField;
        
        private string colleagueNameField;
        
        private string colleaguebackgroundField;
        
        private long companyIdField;
        
        private string currentProjectField;
        
        private string defaultLanguageField;
        
        private string dialectIdField;
        
        private string ecmVersionField;
        
        private bool emailHtmlField;
        
        private bool emailHtmlFieldSpecified;
        
        private string especializationAreaField;
        
        private string extensionNrField;
        
        private bool gedUserField;
        
        private bool gedUserFieldSpecified;
        
        private string groupIdField;
        
        private bool guestUserField;
        
        private bool guestUserFieldSpecified;
        
        private string homePageField;
        
        private string loginField;
        
        private string mailField;
        
        private float maxPrivateSizeField;
        
        private bool maxPrivateSizeFieldSpecified;
        
        private int menuConfigField;
        
        private bool menuConfigFieldSpecified;
        
        private bool nominalUserField;
        
        private bool nominalUserFieldSpecified;
        
        private string passwdField;
        
        private string photoPathField;
        
        private int rowIdField;
        
        private string sessionIdField;
        
        private float usedSpaceField;
        
        private bool usedSpaceFieldSpecified;
        
        private string volumeIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activeSpecified {
            get {
                return this.activeFieldSpecified;
            }
            set {
                this.activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool adminUser {
            get {
                return this.adminUserField;
            }
            set {
                this.adminUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool adminUserSpecified {
            get {
                return this.adminUserFieldSpecified;
            }
            set {
                this.adminUserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int area1Id {
            get {
                return this.area1IdField;
            }
            set {
                this.area1IdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool area1IdSpecified {
            get {
                return this.area1IdFieldSpecified;
            }
            set {
                this.area1IdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int area2Id {
            get {
                return this.area2IdField;
            }
            set {
                this.area2IdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool area2IdSpecified {
            get {
                return this.area2IdFieldSpecified;
            }
            set {
                this.area2IdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int area3Id {
            get {
                return this.area3IdField;
            }
            set {
                this.area3IdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool area3IdSpecified {
            get {
                return this.area3IdFieldSpecified;
            }
            set {
                this.area3IdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int area4Id {
            get {
                return this.area4IdField;
            }
            set {
                this.area4IdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool area4IdSpecified {
            get {
                return this.area4IdFieldSpecified;
            }
            set {
                this.area4IdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int area5Id {
            get {
                return this.area5IdField;
            }
            set {
                this.area5IdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool area5IdSpecified {
            get {
                return this.area5IdFieldSpecified;
            }
            set {
                this.area5IdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueId {
            get {
                return this.colleagueIdField;
            }
            set {
                this.colleagueIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueName {
            get {
                return this.colleagueNameField;
            }
            set {
                this.colleagueNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleaguebackground {
            get {
                return this.colleaguebackgroundField;
            }
            set {
                this.colleaguebackgroundField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string currentProject {
            get {
                return this.currentProjectField;
            }
            set {
                this.currentProjectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string defaultLanguage {
            get {
                return this.defaultLanguageField;
            }
            set {
                this.defaultLanguageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string dialectId {
            get {
                return this.dialectIdField;
            }
            set {
                this.dialectIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ecmVersion {
            get {
                return this.ecmVersionField;
            }
            set {
                this.ecmVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool emailHtml {
            get {
                return this.emailHtmlField;
            }
            set {
                this.emailHtmlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool emailHtmlSpecified {
            get {
                return this.emailHtmlFieldSpecified;
            }
            set {
                this.emailHtmlFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string especializationArea {
            get {
                return this.especializationAreaField;
            }
            set {
                this.especializationAreaField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string extensionNr {
            get {
                return this.extensionNrField;
            }
            set {
                this.extensionNrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool gedUser {
            get {
                return this.gedUserField;
            }
            set {
                this.gedUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool gedUserSpecified {
            get {
                return this.gedUserFieldSpecified;
            }
            set {
                this.gedUserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string groupId {
            get {
                return this.groupIdField;
            }
            set {
                this.groupIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool guestUser {
            get {
                return this.guestUserField;
            }
            set {
                this.guestUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool guestUserSpecified {
            get {
                return this.guestUserFieldSpecified;
            }
            set {
                this.guestUserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string homePage {
            get {
                return this.homePageField;
            }
            set {
                this.homePageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string mail {
            get {
                return this.mailField;
            }
            set {
                this.mailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public float maxPrivateSize {
            get {
                return this.maxPrivateSizeField;
            }
            set {
                this.maxPrivateSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxPrivateSizeSpecified {
            get {
                return this.maxPrivateSizeFieldSpecified;
            }
            set {
                this.maxPrivateSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int menuConfig {
            get {
                return this.menuConfigField;
            }
            set {
                this.menuConfigField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool menuConfigSpecified {
            get {
                return this.menuConfigFieldSpecified;
            }
            set {
                this.menuConfigFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool nominalUser {
            get {
                return this.nominalUserField;
            }
            set {
                this.nominalUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalUserSpecified {
            get {
                return this.nominalUserFieldSpecified;
            }
            set {
                this.nominalUserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string passwd {
            get {
                return this.passwdField;
            }
            set {
                this.passwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string photoPath {
            get {
                return this.photoPathField;
            }
            set {
                this.photoPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int rowId {
            get {
                return this.rowIdField;
            }
            set {
                this.rowIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string sessionId {
            get {
                return this.sessionIdField;
            }
            set {
                this.sessionIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public float usedSpace {
            get {
                return this.usedSpaceField;
            }
            set {
                this.usedSpaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool usedSpaceSpecified {
            get {
                return this.usedSpaceFieldSpecified;
            }
            set {
                this.usedSpaceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string volumeId {
            get {
                return this.volumeIdField;
            }
            set {
                this.volumeIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class availableUsersDto {
        
        private bool isCollectiveTaskField;
        
        private bool isCollectiveTaskFieldSpecified;
        
        private colleagueDto[] usersField;
        
        private bool willShowUsersField;
        
        private bool willShowUsersFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isCollectiveTask {
            get {
                return this.isCollectiveTaskField;
            }
            set {
                this.isCollectiveTaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isCollectiveTaskSpecified {
            get {
                return this.isCollectiveTaskFieldSpecified;
            }
            set {
                this.isCollectiveTaskFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("users", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public colleagueDto[] users {
            get {
                return this.usersField;
            }
            set {
                this.usersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool willShowUsers {
            get {
                return this.willShowUsersField;
            }
            set {
                this.willShowUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool willShowUsersSpecified {
            get {
                return this.willShowUsersFieldSpecified;
            }
            set {
                this.willShowUsersFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class processStateDto {
        
        private long companyIdField;
        
        private bool counterSignField;
        
        private bool counterSignFieldSpecified;
        
        private int sequenceField;
        
        private string stateDescriptionField;
        
        private string stateNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool counterSign {
            get {
                return this.counterSignField;
            }
            set {
                this.counterSignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool counterSignSpecified {
            get {
                return this.counterSignFieldSpecified;
            }
            set {
                this.counterSignFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string stateDescription {
            get {
                return this.stateDescriptionField;
            }
            set {
                this.stateDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string stateName {
            get {
                return this.stateNameField;
            }
            set {
                this.stateNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class processDefinitionVersionDto {
        
        private string categoryStructureField;
        
        private long companyIdField;
        
        private bool counterSignField;
        
        private bool counterSignFieldSpecified;
        
        private bool favoriteField;
        
        private int formIdField;
        
        private bool formIdFieldSpecified;
        
        private int formVersionField;
        
        private bool formVersionFieldSpecified;
        
        private string fullCategoryStructureField;
        
        private processStateDto initialProcessStateField;
        
        private bool mobileReadyField;
        
        private string processDescriptionField;
        
        private string processIdField;
        
        private string[] relatedDatasetsField;
        
        private int rowIdField;
        
        private int versionField;
        
        private string versionDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string categoryStructure {
            get {
                return this.categoryStructureField;
            }
            set {
                this.categoryStructureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool counterSign {
            get {
                return this.counterSignField;
            }
            set {
                this.counterSignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool counterSignSpecified {
            get {
                return this.counterSignFieldSpecified;
            }
            set {
                this.counterSignFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool favorite {
            get {
                return this.favoriteField;
            }
            set {
                this.favoriteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int formId {
            get {
                return this.formIdField;
            }
            set {
                this.formIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool formIdSpecified {
            get {
                return this.formIdFieldSpecified;
            }
            set {
                this.formIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int formVersion {
            get {
                return this.formVersionField;
            }
            set {
                this.formVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool formVersionSpecified {
            get {
                return this.formVersionFieldSpecified;
            }
            set {
                this.formVersionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fullCategoryStructure {
            get {
                return this.fullCategoryStructureField;
            }
            set {
                this.fullCategoryStructureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public processStateDto initialProcessState {
            get {
                return this.initialProcessStateField;
            }
            set {
                this.initialProcessStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool mobileReady {
            get {
                return this.mobileReadyField;
            }
            set {
                this.mobileReadyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string processDescription {
            get {
                return this.processDescriptionField;
            }
            set {
                this.processDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string processId {
            get {
                return this.processIdField;
            }
            set {
                this.processIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("relatedDatasets", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string[] relatedDatasets {
            get {
                return this.relatedDatasetsField;
            }
            set {
                this.relatedDatasetsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int rowId {
            get {
                return this.rowIdField;
            }
            set {
                this.rowIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string versionDescription {
            get {
                return this.versionDescriptionField;
            }
            set {
                this.versionDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class deadLineDto {
        
        private string dateField;
        
        private int horaField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int hora {
            get {
                return this.horaField;
            }
            set {
                this.horaField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class webServiceMessage {
        
        private long companyIdField;
        
        private string documentDescriptionField;
        
        private int documentIdField;
        
        private string[] fooField;
        
        private int versionField;
        
        private string webServiceMessage1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentDescription {
            get {
                return this.documentDescriptionField;
            }
            set {
                this.documentDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("foo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string[] foo {
            get {
                return this.fooField;
            }
            set {
                this.fooField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("webServiceMessage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string webServiceMessage1 {
            get {
                return this.webServiceMessage1Field;
            }
            set {
                this.webServiceMessage1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class generalInfoDto {
        
        private string versionOptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string versionOption {
            get {
                return this.versionOptionField;
            }
            set {
                this.versionOptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class cardEventDto {
        
        private string eventDescriptionField;
        
        private string eventIdField;
        
        private bool eventVersAntField;
        
        private bool eventVersAntFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string eventDescription {
            get {
                return this.eventDescriptionField;
            }
            set {
                this.eventDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string eventId {
            get {
                return this.eventIdField;
            }
            set {
                this.eventIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool eventVersAnt {
            get {
                return this.eventVersAntField;
            }
            set {
                this.eventVersAntField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventVersAntSpecified {
            get {
                return this.eventVersAntFieldSpecified;
            }
            set {
                this.eventVersAntFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class keyValueDto {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class processTaskAppointmentDto {
        
        private System.DateTime appointmentDateField;
        
        private bool appointmentDateFieldSpecified;
        
        private int appointmentSecondsField;
        
        private bool appointmentSecondsFieldSpecified;
        
        private int appointmentSequenceField;
        
        private string colleagueIdField;
        
        private string colleagueNameField;
        
        private long companyIdField;
        
        private bool isNewRecordField;
        
        private bool isNewRecordFieldSpecified;
        
        private int movementSequenceField;
        
        private int processInstanceIdField;
        
        private int transferenceSequenceField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime appointmentDate {
            get {
                return this.appointmentDateField;
            }
            set {
                this.appointmentDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool appointmentDateSpecified {
            get {
                return this.appointmentDateFieldSpecified;
            }
            set {
                this.appointmentDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int appointmentSeconds {
            get {
                return this.appointmentSecondsField;
            }
            set {
                this.appointmentSecondsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool appointmentSecondsSpecified {
            get {
                return this.appointmentSecondsFieldSpecified;
            }
            set {
                this.appointmentSecondsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int appointmentSequence {
            get {
                return this.appointmentSequenceField;
            }
            set {
                this.appointmentSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueId {
            get {
                return this.colleagueIdField;
            }
            set {
                this.colleagueIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueName {
            get {
                return this.colleagueNameField;
            }
            set {
                this.colleagueNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isNewRecord {
            get {
                return this.isNewRecordField;
            }
            set {
                this.isNewRecordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isNewRecordSpecified {
            get {
                return this.isNewRecordFieldSpecified;
            }
            set {
                this.isNewRecordFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int movementSequence {
            get {
                return this.movementSequenceField;
            }
            set {
                this.movementSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int processInstanceId {
            get {
                return this.processInstanceIdField;
            }
            set {
                this.processInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int transferenceSequence {
            get {
                return this.transferenceSequenceField;
            }
            set {
                this.transferenceSequenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class processAttachmentDto {
        
        private int attachmentSequenceField;
        
        private attachment[] attachmentsField;
        
        private string colleagueIdField;
        
        private string colleagueNameField;
        
        private long companyIdField;
        
        private long crcField;
        
        private bool crcFieldSpecified;
        
        private System.DateTime createDateField;
        
        private bool createDateFieldSpecified;
        
        private long createDateTimestampField;
        
        private bool createDateTimestampFieldSpecified;
        
        private bool deletedField;
        
        private bool deletedFieldSpecified;
        
        private string descriptionField;
        
        private int documentIdField;
        
        private bool documentIdFieldSpecified;
        
        private string documentTypeField;
        
        private string fileNameField;
        
        private bool newAttachField;
        
        private bool newAttachFieldSpecified;
        
        private int originalMovementSequenceField;
        
        private bool originalMovementSequenceFieldSpecified;
        
        private string permissionField;
        
        private int processInstanceIdField;
        
        private float sizeField;
        
        private int versionField;
        
        private bool versionFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int attachmentSequence {
            get {
                return this.attachmentSequenceField;
            }
            set {
                this.attachmentSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("attachments", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public attachment[] attachments {
            get {
                return this.attachmentsField;
            }
            set {
                this.attachmentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueId {
            get {
                return this.colleagueIdField;
            }
            set {
                this.colleagueIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string colleagueName {
            get {
                return this.colleagueNameField;
            }
            set {
                this.colleagueNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long crc {
            get {
                return this.crcField;
            }
            set {
                this.crcField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool crcSpecified {
            get {
                return this.crcFieldSpecified;
            }
            set {
                this.crcFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime createDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool createDateSpecified {
            get {
                return this.createDateFieldSpecified;
            }
            set {
                this.createDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long createDateTimestamp {
            get {
                return this.createDateTimestampField;
            }
            set {
                this.createDateTimestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool createDateTimestampSpecified {
            get {
                return this.createDateTimestampFieldSpecified;
            }
            set {
                this.createDateTimestampFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deletedSpecified {
            get {
                return this.deletedFieldSpecified;
            }
            set {
                this.deletedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentIdSpecified {
            get {
                return this.documentIdFieldSpecified;
            }
            set {
                this.documentIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool newAttach {
            get {
                return this.newAttachField;
            }
            set {
                this.newAttachField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool newAttachSpecified {
            get {
                return this.newAttachFieldSpecified;
            }
            set {
                this.newAttachFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int originalMovementSequence {
            get {
                return this.originalMovementSequenceField;
            }
            set {
                this.originalMovementSequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool originalMovementSequenceSpecified {
            get {
                return this.originalMovementSequenceFieldSpecified;
            }
            set {
                this.originalMovementSequenceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string permission {
            get {
                return this.permissionField;
            }
            set {
                this.permissionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int processInstanceId {
            get {
                return this.processInstanceIdField;
            }
            set {
                this.processInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public float size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool versionSpecified {
            get {
                return this.versionFieldSpecified;
            }
            set {
                this.versionFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.workflow.ecm.technology.totvs.com/")]
    public partial class processDefinitionDto {
        
        private bool activeField;
        
        private bool activeFieldSpecified;
        
        private long companyIdField;
        
        private string processDescriptionField;
        
        private string processIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activeSpecified {
            get {
                return this.activeFieldSpecified;
            }
            set {
                this.activeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long companyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string processDescription {
            get {
                return this.processDescriptionField;
            }
            set {
                this.processDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string processId {
            get {
                return this.processIdField;
            }
            set {
                this.processIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void importProcessCompletedEventHandler(object sender, importProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void setDueDateCompletedEventHandler(object sender, setDueDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setDueDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setDueDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void takeProcessTaskCompletedEventHandler(object sender, takeProcessTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class takeProcessTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal takeProcessTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getInstanceCardDataCompletedEventHandler(object sender, getInstanceCardDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInstanceCardDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInstanceCardDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void createWorkFlowProcessVersionCompletedEventHandler(object sender, createWorkFlowProcessVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createWorkFlowProcessVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createWorkFlowProcessVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getCardValueCompletedEventHandler(object sender, getCardValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCardValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCardValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAllProcessAvailableToExportCompletedEventHandler(object sender, getAllProcessAvailableToExportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProcessAvailableToExportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProcessAvailableToExportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public processDefinitionDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((processDefinitionDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void saveAndSendTaskCompletedEventHandler(object sender, saveAndSendTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveAndSendTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveAndSendTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void setAutomaticDecisionClassicCompletedEventHandler(object sender, setAutomaticDecisionClassicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setAutomaticDecisionClassicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setAutomaticDecisionClassicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public keyValueDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((keyValueDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void importProcessWithCardAndRelatedDatasetsCompletedEventHandler(object sender, importProcessWithCardAndRelatedDatasetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importProcessWithCardAndRelatedDatasetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importProcessWithCardAndRelatedDatasetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public webServiceMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((webServiceMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void calculateDeadLineHoursCompletedEventHandler(object sender, calculateDeadLineHoursCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class calculateDeadLineHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal calculateDeadLineHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public deadLineDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((deadLineDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAllProcessAvailableToImportCompletedEventHandler(object sender, getAllProcessAvailableToImportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProcessAvailableToImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProcessAvailableToImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public processDefinitionDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((processDefinitionDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void cancelInstanceCompletedEventHandler(object sender, cancelInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getActualThreadCompletedEventHandler(object sender, getActualThreadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getActualThreadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getActualThreadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getWorkFlowProcessVersionCompletedEventHandler(object sender, getWorkFlowProcessVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWorkFlowProcessVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWorkFlowProcessVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAvailableProcessOnDemandCompletedEventHandler(object sender, getAvailableProcessOnDemandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAvailableProcessOnDemandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAvailableProcessOnDemandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public processDefinitionVersionDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((processDefinitionVersionDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAvailableStatesDetailCompletedEventHandler(object sender, getAvailableStatesDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAvailableStatesDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAvailableStatesDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public processStateDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((processStateDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void exportProcessInZipFormatCompletedEventHandler(object sender, exportProcessInZipFormatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class exportProcessInZipFormatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal exportProcessInZipFormatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void importProcessWithCardCompletedEventHandler(object sender, importProcessWithCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importProcessWithCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importProcessWithCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public webServiceMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((webServiceMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void saveAndSendTaskByReplacementCompletedEventHandler(object sender, saveAndSendTaskByReplacementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveAndSendTaskByReplacementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveAndSendTaskByReplacementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void startProcessClassicCompletedEventHandler(object sender, startProcessClassicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class startProcessClassicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal startProcessClassicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public keyValueDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((keyValueDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void cancelInstanceByReplacementCompletedEventHandler(object sender, cancelInstanceByReplacementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelInstanceByReplacementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelInstanceByReplacementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void calculateDeadLineTimeCompletedEventHandler(object sender, calculateDeadLineTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class calculateDeadLineTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal calculateDeadLineTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public deadLineDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((deadLineDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void simpleStartProcessCompletedEventHandler(object sender, simpleStartProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class simpleStartProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal simpleStartProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAvailableProcessCompletedEventHandler(object sender, getAvailableProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAvailableProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAvailableProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public processDefinitionVersionDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((processDefinitionVersionDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void startProcessCompletedEventHandler(object sender, startProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class startProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal startProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAllActiveStatesCompletedEventHandler(object sender, getAllActiveStatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllActiveStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllActiveStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<int>[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void releaseProcessCompletedEventHandler(object sender, releaseProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class releaseProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal releaseProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void setTasksCommentsCompletedEventHandler(object sender, setTasksCommentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setTasksCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setTasksCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void searchProcessCompletedEventHandler(object sender, searchProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public processDefinitionVersionDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((processDefinitionVersionDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAvailableUsersOnDemandCompletedEventHandler(object sender, getAvailableUsersOnDemandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAvailableUsersOnDemandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAvailableUsersOnDemandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public availableUsersDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((availableUsersDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getProcessFormIdCompletedEventHandler(object sender, getProcessFormIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessFormIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessFormIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void saveAndSendTaskClassicCompletedEventHandler(object sender, saveAndSendTaskClassicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveAndSendTaskClassicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveAndSendTaskClassicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public keyValueDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((keyValueDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAvailableUsersStartOnDemandCompletedEventHandler(object sender, getAvailableUsersStartOnDemandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAvailableUsersStartOnDemandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAvailableUsersStartOnDemandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public availableUsersDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((availableUsersDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAvailableUsersCompletedEventHandler(object sender, getAvailableUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAvailableUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAvailableUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getProcessImageCompletedEventHandler(object sender, getProcessImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAttachmentsCompletedEventHandler(object sender, getAttachmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAttachmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAttachmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public processAttachmentDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((processAttachmentDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void importProcessWithCardAndPersistenceTypeCompletedEventHandler(object sender, importProcessWithCardAndPersistenceTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importProcessWithCardAndPersistenceTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importProcessWithCardAndPersistenceTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public webServiceMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((webServiceMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAvailableUsersStartCompletedEventHandler(object sender, getAvailableUsersStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAvailableUsersStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAvailableUsersStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void importProcessWithCardAndGeneralInfoCompletedEventHandler(object sender, importProcessWithCardAndGeneralInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importProcessWithCardAndGeneralInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importProcessWithCardAndGeneralInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public webServiceMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((webServiceMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void takeProcessTaskByReplacementCompletedEventHandler(object sender, takeProcessTaskByReplacementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class takeProcessTaskByReplacementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal takeProcessTaskByReplacementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void exportProcessCompletedEventHandler(object sender, exportProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class exportProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal exportProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAvailableStatesCompletedEventHandler(object sender, getAvailableStatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAvailableStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAvailableStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<int>[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateWorkflowAttachmentCompletedEventHandler(object sender, updateWorkflowAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateWorkflowAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateWorkflowAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getHistoriesCompletedEventHandler(object sender, getHistoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHistoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHistoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public processHistoryDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((processHistoryDto[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591