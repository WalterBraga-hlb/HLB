//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace MvcAppHyLinedoBrasil.EntityWebForms.PAT_BEM
{
    public partial class Apolo10Entities1 : ObjectContext
    {
        public const string ConnectionString = "name=Apolo10Entities1";
        public const string ContainerName = "Apolo10Entities1";
    
        #region Constructors
    
        public Apolo10Entities1()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public Apolo10Entities1(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public Apolo10Entities1(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<media> PAT_BEM
        {
            get { return _pAT_BEM  ?? (_pAT_BEM = CreateObjectSet<media>("PAT_BEM")); }
        }
        private ObjectSet<media> _pAT_BEM;

        #endregion

        #region Function Imports
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empresa">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="tabela">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="codigo">Nenhuma Documentação de Metadados disponível.</param>
        public virtual ObjectResult<string> gerar_codigo(string empresa, string tabela, ObjectParameter codigo)
        {
    
            ObjectParameter empresaParameter;
    
            if (empresa != null)
            {
                empresaParameter = new ObjectParameter("empresa", empresa);
            }
            else
            {
                empresaParameter = new ObjectParameter("empresa", typeof(string));
            }
    
            ObjectParameter tabelaParameter;
    
            if (tabela != null)
            {
                tabelaParameter = new ObjectParameter("tabela", tabela);
            }
            else
            {
                tabelaParameter = new ObjectParameter("tabela", typeof(string));
            }
            return base.ExecuteFunction<string>("gerar_codigo", empresaParameter, tabelaParameter, codigo);
        }

        #endregion

    }
}
