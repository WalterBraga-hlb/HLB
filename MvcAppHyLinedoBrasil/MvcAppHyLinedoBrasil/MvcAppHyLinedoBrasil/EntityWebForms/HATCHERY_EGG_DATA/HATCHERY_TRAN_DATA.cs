//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.EntityWebForms.HATCHERY_EGG_DATA
{
    [DataContract(IsReference = true)]
    public partial class HATCHERY_TRAN_DATA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Hatch_Loc
        {
            get { return _hatch_Loc; }
            set
            {
                if (_hatch_Loc != value)
                {
                    _hatch_Loc = value;
                    OnPropertyChanged("Hatch_Loc");
                }
            }
        }
        private string _hatch_Loc;
    
        [DataMember]
        public Nullable<System.DateTime> Set_date
        {
            get { return _set_date; }
            set
            {
                if (_set_date != value)
                {
                    _set_date = value;
                    OnPropertyChanged("Set_date");
                }
            }
        }
        private Nullable<System.DateTime> _set_date;
    
        [DataMember]
        public string Flock_id
        {
            get { return _flock_id; }
            set
            {
                if (_flock_id != value)
                {
                    _flock_id = value;
                    OnPropertyChanged("Flock_id");
                }
            }
        }
        private string _flock_id;
    
        [DataMember]
        public string NumLote
        {
            get { return _numLote; }
            set
            {
                if (_numLote != value)
                {
                    _numLote = value;
                    OnPropertyChanged("NumLote");
                }
            }
        }
        private string _numLote;
    
        [DataMember]
        public Nullable<System.DateTime> Lay_date
        {
            get { return _lay_date; }
            set
            {
                if (_lay_date != value)
                {
                    _lay_date = value;
                    OnPropertyChanged("Lay_date");
                }
            }
        }
        private Nullable<System.DateTime> _lay_date;
    
        [DataMember]
        public string Setter
        {
            get { return _setter; }
            set
            {
                if (_setter != value)
                {
                    _setter = value;
                    OnPropertyChanged("Setter");
                }
            }
        }
        private string _setter;
    
        [DataMember]
        public string Hatcher
        {
            get { return _hatcher; }
            set
            {
                if (_hatcher != value)
                {
                    _hatcher = value;
                    OnPropertyChanged("Hatcher");
                }
            }
        }
        private string _hatcher;
    
        [DataMember]
        public string ClassOvo
        {
            get { return _classOvo; }
            set
            {
                if (_classOvo != value)
                {
                    _classOvo = value;
                    OnPropertyChanged("ClassOvo");
                }
            }
        }
        private string _classOvo;
    
        [DataMember]
        public Nullable<System.DateTime> Transf_date
        {
            get { return _transf_date; }
            set
            {
                if (_transf_date != value)
                {
                    _transf_date = value;
                    OnPropertyChanged("Transf_date");
                }
            }
        }
        private Nullable<System.DateTime> _transf_date;
    
        [DataMember]
        public string Hora_Inicio
        {
            get { return _hora_Inicio; }
            set
            {
                if (_hora_Inicio != value)
                {
                    _hora_Inicio = value;
                    OnPropertyChanged("Hora_Inicio");
                }
            }
        }
        private string _hora_Inicio;
    
        [DataMember]
        public Nullable<int> Contaminado_Transferencia
        {
            get { return _contaminado_Transferencia; }
            set
            {
                if (_contaminado_Transferencia != value)
                {
                    _contaminado_Transferencia = value;
                    OnPropertyChanged("Contaminado_Transferencia");
                }
            }
        }
        private Nullable<int> _contaminado_Transferencia;
    
        [DataMember]
        public Nullable<int> Contaminado_Rodizio
        {
            get { return _contaminado_Rodizio; }
            set
            {
                if (_contaminado_Rodizio != value)
                {
                    _contaminado_Rodizio = value;
                    OnPropertyChanged("Contaminado_Rodizio");
                }
            }
        }
        private Nullable<int> _contaminado_Rodizio;
    
        [DataMember]
        public Nullable<int> Bicados
        {
            get { return _bicados; }
            set
            {
                if (_bicados != value)
                {
                    _bicados = value;
                    OnPropertyChanged("Bicados");
                }
            }
        }
        private Nullable<int> _bicados;
    
        [DataMember]
        public Nullable<int> Trincados_Transferencia
        {
            get { return _trincados_Transferencia; }
            set
            {
                if (_trincados_Transferencia != value)
                {
                    _trincados_Transferencia = value;
                    OnPropertyChanged("Trincados_Transferencia");
                }
            }
        }
        private Nullable<int> _trincados_Transferencia;
    
        [DataMember]
        public Nullable<int> Trincados_Rodizio
        {
            get { return _trincados_Rodizio; }
            set
            {
                if (_trincados_Rodizio != value)
                {
                    _trincados_Rodizio = value;
                    OnPropertyChanged("Trincados_Rodizio");
                }
            }
        }
        private Nullable<int> _trincados_Rodizio;
    
        [DataMember]
        public Nullable<int> Num_Grudados
        {
            get { return _num_Grudados; }
            set
            {
                if (_num_Grudados != value)
                {
                    _num_Grudados = value;
                    OnPropertyChanged("Num_Grudados");
                }
            }
        }
        private Nullable<int> _num_Grudados;
    
        [DataMember]
        public Nullable<int> Pintos_Nascidos
        {
            get { return _pintos_Nascidos; }
            set
            {
                if (_pintos_Nascidos != value)
                {
                    _pintos_Nascidos = value;
                    OnPropertyChanged("Pintos_Nascidos");
                }
            }
        }
        private Nullable<int> _pintos_Nascidos;
    
        [DataMember]
        public Nullable<int> Perdidos_Transferencia
        {
            get { return _perdidos_Transferencia; }
            set
            {
                if (_perdidos_Transferencia != value)
                {
                    _perdidos_Transferencia = value;
                    OnPropertyChanged("Perdidos_Transferencia");
                }
            }
        }
        private Nullable<int> _perdidos_Transferencia;
    
        [DataMember]
        public Nullable<int> Perdidos_Rodizio
        {
            get { return _perdidos_Rodizio; }
            set
            {
                if (_perdidos_Rodizio != value)
                {
                    _perdidos_Rodizio = value;
                    OnPropertyChanged("Perdidos_Rodizio");
                }
            }
        }
        private Nullable<int> _perdidos_Rodizio;
    
        [DataMember]
        public string Hora_Termino
        {
            get { return _hora_Termino; }
            set
            {
                if (_hora_Termino != value)
                {
                    _hora_Termino = value;
                    OnPropertyChanged("Hora_Termino");
                }
            }
        }
        private string _hora_Termino;
    
        [DataMember]
        public Nullable<int> Qtde_Ovos_Transferidos
        {
            get { return _qtde_Ovos_Transferidos; }
            set
            {
                if (_qtde_Ovos_Transferidos != value)
                {
                    _qtde_Ovos_Transferidos = value;
                    OnPropertyChanged("Qtde_Ovos_Transferidos");
                }
            }
        }
        private Nullable<int> _qtde_Ovos_Transferidos;
    
        [DataMember]
        public string Variety
        {
            get { return _variety; }
            set
            {
                if (_variety != value)
                {
                    _variety = value;
                    OnPropertyChanged("Variety");
                }
            }
        }
        private string _variety;
    
        [DataMember]
        public Nullable<int> Claros
        {
            get { return _claros; }
            set
            {
                if (_claros != value)
                {
                    _claros = value;
                    OnPropertyChanged("Claros");
                }
            }
        }
        private Nullable<int> _claros;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
