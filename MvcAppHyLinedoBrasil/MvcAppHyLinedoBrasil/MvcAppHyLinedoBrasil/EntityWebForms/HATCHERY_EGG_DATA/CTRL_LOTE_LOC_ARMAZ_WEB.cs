//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.EntityWebForms.HATCHERY_EGG_DATA
{
    [DataContract(IsReference = true)]
    public partial class CTRL_LOTE_LOC_ARMAZ_WEB: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string Local
        {
            get { return _local; }
            set
            {
                if (_local != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Local' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _local = value;
                    OnPropertyChanged("Local");
                }
            }
        }
        private string _local;
    
        [DataMember]
        public string Linhagem
        {
            get { return _linhagem; }
            set
            {
                if (_linhagem != value)
                {
                    _linhagem = value;
                    OnPropertyChanged("Linhagem");
                }
            }
        }
        private string _linhagem;
    
        [DataMember]
        public string LoteCompleto
        {
            get { return _loteCompleto; }
            set
            {
                if (_loteCompleto != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LoteCompleto' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _loteCompleto = value;
                    OnPropertyChanged("LoteCompleto");
                }
            }
        }
        private string _loteCompleto;
    
        [DataMember]
        public string NumLote
        {
            get { return _numLote; }
            set
            {
                if (_numLote != value)
                {
                    _numLote = value;
                    OnPropertyChanged("NumLote");
                }
            }
        }
        private string _numLote;
    
        [DataMember]
        public System.DateTime DataProducao
        {
            get { return _dataProducao; }
            set
            {
                if (_dataProducao != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DataProducao' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dataProducao = value;
                    OnPropertyChanged("DataProducao");
                }
            }
        }
        private System.DateTime _dataProducao;
    
        [DataMember]
        public Nullable<int> Qtde
        {
            get { return _qtde; }
            set
            {
                if (_qtde != value)
                {
                    _qtde = value;
                    OnPropertyChanged("Qtde");
                }
            }
        }
        private Nullable<int> _qtde;
    
        [DataMember]
        public string Nucleo
        {
            get { return _nucleo; }
            set
            {
                if (_nucleo != value)
                {
                    _nucleo = value;
                    OnPropertyChanged("Nucleo");
                }
            }
        }
        private string _nucleo;
    
        [DataMember]
        public Nullable<int> IdadeLote
        {
            get { return _idadeLote; }
            set
            {
                if (_idadeLote != value)
                {
                    _idadeLote = value;
                    OnPropertyChanged("IdadeLote");
                }
            }
        }
        private Nullable<int> _idadeLote;
    
        [DataMember]
        public Nullable<decimal> PercMediaIncUlt4SemFLIP
        {
            get { return _percMediaIncUlt4SemFLIP; }
            set
            {
                if (_percMediaIncUlt4SemFLIP != value)
                {
                    _percMediaIncUlt4SemFLIP = value;
                    OnPropertyChanged("PercMediaIncUlt4SemFLIP");
                }
            }
        }
        private Nullable<decimal> _percMediaIncUlt4SemFLIP;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
