//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.EntityWebForms.HATCHERY_EGG_DATA
{
    [DataContract(IsReference = true)]
    public partial class HATCHERY_ORDER_FLOCK_DATA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Hatch_Loc
        {
            get { return _hatch_Loc; }
            set
            {
                if (_hatch_Loc != value)
                {
                    _hatch_Loc = value;
                    OnPropertyChanged("Hatch_Loc");
                }
            }
        }
        private string _hatch_Loc;
    
        [DataMember]
        public Nullable<System.DateTime> Set_date
        {
            get { return _set_date; }
            set
            {
                if (_set_date != value)
                {
                    _set_date = value;
                    OnPropertyChanged("Set_date");
                }
            }
        }
        private Nullable<System.DateTime> _set_date;
    
        [DataMember]
        public string OrderNoCHIC
        {
            get { return _orderNoCHIC; }
            set
            {
                if (_orderNoCHIC != value)
                {
                    _orderNoCHIC = value;
                    OnPropertyChanged("OrderNoCHIC");
                }
            }
        }
        private string _orderNoCHIC;
    
        [DataMember]
        public string Flock_id
        {
            get { return _flock_id; }
            set
            {
                if (_flock_id != value)
                {
                    _flock_id = value;
                    OnPropertyChanged("Flock_id");
                }
            }
        }
        private string _flock_id;
    
        [DataMember]
        public string NumLote
        {
            get { return _numLote; }
            set
            {
                if (_numLote != value)
                {
                    _numLote = value;
                    OnPropertyChanged("NumLote");
                }
            }
        }
        private string _numLote;
    
        [DataMember]
        public string ClassOvo
        {
            get { return _classOvo; }
            set
            {
                if (_classOvo != value)
                {
                    _classOvo = value;
                    OnPropertyChanged("ClassOvo");
                }
            }
        }
        private string _classOvo;
    
        [DataMember]
        public Nullable<int> Qtde
        {
            get { return _qtde; }
            set
            {
                if (_qtde != value)
                {
                    _qtde = value;
                    OnPropertyChanged("Qtde");
                }
            }
        }
        private Nullable<int> _qtde;
    
        [DataMember]
        public string Variety
        {
            get { return _variety; }
            set
            {
                if (_variety != value)
                {
                    _variety = value;
                    OnPropertyChanged("Variety");
                }
            }
        }
        private string _variety;
    
        [DataMember]
        public string Rotulo
        {
            get { return _rotulo; }
            set
            {
                if (_rotulo != value)
                {
                    _rotulo = value;
                    OnPropertyChanged("Rotulo");
                }
            }
        }
        private string _rotulo;
    
        [DataMember]
        public string TIPoderLampada
        {
            get { return _tIPoderLampada; }
            set
            {
                if (_tIPoderLampada != value)
                {
                    _tIPoderLampada = value;
                    OnPropertyChanged("TIPoderLampada");
                }
            }
        }
        private string _tIPoderLampada;
    
        [DataMember]
        public string TIMascara
        {
            get { return _tIMascara; }
            set
            {
                if (_tIMascara != value)
                {
                    _tIMascara = value;
                    OnPropertyChanged("TIMascara");
                }
            }
        }
        private string _tIMascara;
    
        [DataMember]
        public Nullable<int> FaltaQtde
        {
            get { return _faltaQtde; }
            set
            {
                if (_faltaQtde != value)
                {
                    _faltaQtde = value;
                    OnPropertyChanged("FaltaQtde");
                }
            }
        }
        private Nullable<int> _faltaQtde;
    
        [DataMember]
        public string FaltaMotivo
        {
            get { return _faltaMotivo; }
            set
            {
                if (_faltaMotivo != value)
                {
                    _faltaMotivo = value;
                    OnPropertyChanged("FaltaMotivo");
                }
            }
        }
        private string _faltaMotivo;
    
        [DataMember]
        public Nullable<decimal> Peso
        {
            get { return _peso; }
            set
            {
                if (_peso != value)
                {
                    _peso = value;
                    OnPropertyChanged("Peso");
                }
            }
        }
        private Nullable<decimal> _peso;
    
        [DataMember]
        public Nullable<decimal> Uniformidade
        {
            get { return _uniformidade; }
            set
            {
                if (_uniformidade != value)
                {
                    _uniformidade = value;
                    OnPropertyChanged("Uniformidade");
                }
            }
        }
        private Nullable<decimal> _uniformidade;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
