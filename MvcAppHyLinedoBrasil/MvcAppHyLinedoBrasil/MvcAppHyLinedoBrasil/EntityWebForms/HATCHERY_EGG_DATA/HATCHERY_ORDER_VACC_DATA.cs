//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.EntityWebForms.HATCHERY_EGG_DATA
{
    [DataContract(IsReference = true)]
    public partial class HATCHERY_ORDER_VACC_DATA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Hatch_Loc
        {
            get { return _hatch_Loc; }
            set
            {
                if (_hatch_Loc != value)
                {
                    _hatch_Loc = value;
                    OnPropertyChanged("Hatch_Loc");
                }
            }
        }
        private string _hatch_Loc;
    
        [DataMember]
        public Nullable<System.DateTime> Set_date
        {
            get { return _set_date; }
            set
            {
                if (_set_date != value)
                {
                    _set_date = value;
                    OnPropertyChanged("Set_date");
                }
            }
        }
        private Nullable<System.DateTime> _set_date;
    
        [DataMember]
        public string OrderNoCHIC
        {
            get { return _orderNoCHIC; }
            set
            {
                if (_orderNoCHIC != value)
                {
                    _orderNoCHIC = value;
                    OnPropertyChanged("OrderNoCHIC");
                }
            }
        }
        private string _orderNoCHIC;
    
        [DataMember]
        public string Vacina
        {
            get { return _vacina; }
            set
            {
                if (_vacina != value)
                {
                    _vacina = value;
                    OnPropertyChanged("Vacina");
                }
            }
        }
        private string _vacina;
    
        [DataMember]
        public string Laboratorio
        {
            get { return _laboratorio; }
            set
            {
                if (_laboratorio != value)
                {
                    _laboratorio = value;
                    OnPropertyChanged("Laboratorio");
                }
            }
        }
        private string _laboratorio;
    
        [DataMember]
        public string Partida
        {
            get { return _partida; }
            set
            {
                if (_partida != value)
                {
                    _partida = value;
                    OnPropertyChanged("Partida");
                }
            }
        }
        private string _partida;
    
        [DataMember]
        public Nullable<System.DateTime> DataFabricacao
        {
            get { return _dataFabricacao; }
            set
            {
                if (_dataFabricacao != value)
                {
                    _dataFabricacao = value;
                    OnPropertyChanged("DataFabricacao");
                }
            }
        }
        private Nullable<System.DateTime> _dataFabricacao;
    
        [DataMember]
        public Nullable<System.DateTime> DataValidade
        {
            get { return _dataValidade; }
            set
            {
                if (_dataValidade != value)
                {
                    _dataValidade = value;
                    OnPropertyChanged("DataValidade");
                }
            }
        }
        private Nullable<System.DateTime> _dataValidade;
    
        [DataMember]
        public string Variety
        {
            get { return _variety; }
            set
            {
                if (_variety != value)
                {
                    _variety = value;
                    OnPropertyChanged("Variety");
                }
            }
        }
        private string _variety;
    
        [DataMember]
        public Nullable<int> QtdeAmpolas
        {
            get { return _qtdeAmpolas; }
            set
            {
                if (_qtdeAmpolas != value)
                {
                    _qtdeAmpolas = value;
                    OnPropertyChanged("QtdeAmpolas");
                }
            }
        }
        private Nullable<int> _qtdeAmpolas;
    
        [DataMember]
        public Nullable<int> QtdeDosesPorAmpola
        {
            get { return _qtdeDosesPorAmpola; }
            set
            {
                if (_qtdeDosesPorAmpola != value)
                {
                    _qtdeDosesPorAmpola = value;
                    OnPropertyChanged("QtdeDosesPorAmpola");
                }
            }
        }
        private Nullable<int> _qtdeDosesPorAmpola;
    
        [DataMember]
        public string Observacao
        {
            get { return _observacao; }
            set
            {
                if (_observacao != value)
                {
                    _observacao = value;
                    OnPropertyChanged("Observacao");
                }
            }
        }
        private string _observacao;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
