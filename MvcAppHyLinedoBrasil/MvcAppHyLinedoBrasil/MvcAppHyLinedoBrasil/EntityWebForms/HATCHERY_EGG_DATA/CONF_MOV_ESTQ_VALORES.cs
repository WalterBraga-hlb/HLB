//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.EntityWebForms.HATCHERY_EGG_DATA
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CONF_MOV_ESTQ))]
    public partial class CONF_MOV_ESTQ_VALORES: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public int IDConfItemMovEstq
        {
            get { return _iDConfItemMovEstq; }
            set
            {
                if (_iDConfItemMovEstq != value)
                {
                    ChangeTracker.RecordOriginalValue("IDConfItemMovEstq", _iDConfItemMovEstq);
                    if (!IsDeserializing)
                    {
                        if (CONF_MOV_ESTQ != null && CONF_MOV_ESTQ.ID != value)
                        {
                            CONF_MOV_ESTQ = null;
                        }
                    }
                    _iDConfItemMovEstq = value;
                    OnPropertyChanged("IDConfItemMovEstq");
                }
            }
        }
        private int _iDConfItemMovEstq;
    
        [DataMember]
        public string Tabela
        {
            get { return _tabela; }
            set
            {
                if (_tabela != value)
                {
                    _tabela = value;
                    OnPropertyChanged("Tabela");
                }
            }
        }
        private string _tabela;
    
        [DataMember]
        public Nullable<int> ItMovEstqSeq
        {
            get { return _itMovEstqSeq; }
            set
            {
                if (_itMovEstqSeq != value)
                {
                    _itMovEstqSeq = value;
                    OnPropertyChanged("ItMovEstqSeq");
                }
            }
        }
        private Nullable<int> _itMovEstqSeq;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public string Operacao
        {
            get { return _operacao; }
            set
            {
                if (_operacao != value)
                {
                    _operacao = value;
                    OnPropertyChanged("Operacao");
                }
            }
        }
        private string _operacao;
    
        [DataMember]
        public string Campo
        {
            get { return _campo; }
            set
            {
                if (_campo != value)
                {
                    _campo = value;
                    OnPropertyChanged("Campo");
                }
            }
        }
        private string _campo;
    
        [DataMember]
        public string ValorAntigo
        {
            get { return _valorAntigo; }
            set
            {
                if (_valorAntigo != value)
                {
                    _valorAntigo = value;
                    OnPropertyChanged("ValorAntigo");
                }
            }
        }
        private string _valorAntigo;
    
        [DataMember]
        public string ValorNovo
        {
            get { return _valorNovo; }
            set
            {
                if (_valorNovo != value)
                {
                    _valorNovo = value;
                    OnPropertyChanged("ValorNovo");
                }
            }
        }
        private string _valorNovo;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CONF_MOV_ESTQ CONF_MOV_ESTQ
        {
            get { return _cONF_MOV_ESTQ; }
            set
            {
                if (!ReferenceEquals(_cONF_MOV_ESTQ, value))
                {
                    var previousValue = _cONF_MOV_ESTQ;
                    _cONF_MOV_ESTQ = value;
                    FixupCONF_MOV_ESTQ(previousValue);
                    OnNavigationPropertyChanged("CONF_MOV_ESTQ");
                }
            }
        }
        private CONF_MOV_ESTQ _cONF_MOV_ESTQ;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CONF_MOV_ESTQ = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCONF_MOV_ESTQ(CONF_MOV_ESTQ previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CONF_MOV_ESTQ_VALORES.Contains(this))
            {
                previousValue.CONF_MOV_ESTQ_VALORES.Remove(this);
            }
    
            if (CONF_MOV_ESTQ != null)
            {
                if (!CONF_MOV_ESTQ.CONF_MOV_ESTQ_VALORES.Contains(this))
                {
                    CONF_MOV_ESTQ.CONF_MOV_ESTQ_VALORES.Add(this);
                }
    
                IDConfItemMovEstq = CONF_MOV_ESTQ.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CONF_MOV_ESTQ")
                    && (ChangeTracker.OriginalValues["CONF_MOV_ESTQ"] == CONF_MOV_ESTQ))
                {
                    ChangeTracker.OriginalValues.Remove("CONF_MOV_ESTQ");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CONF_MOV_ESTQ", previousValue);
                }
                if (CONF_MOV_ESTQ != null && !CONF_MOV_ESTQ.ChangeTracker.ChangeTrackingEnabled)
                {
                    CONF_MOV_ESTQ.StartTracking();
                }
            }
        }

        #endregion

    }
}
