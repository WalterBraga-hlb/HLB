//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CLASSE_REC_DESP_CTA_CONTAB))]
    [KnownType(typeof(CLASSE_REC_DESP_CENTRO_CTRL))]
    [KnownType(typeof(CLASSE_REC_DESP))]
    [KnownType(typeof(MOV_ESTQ_CLASSE_REC_DESP))]
    [KnownType(typeof(RATEIO_MOV_ESTQ))]
    [KnownType(typeof(ITEM_MOV_ESTQ))]
    public partial class CLASSE_REC_DESP: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ClasseRecDespCodEstr
        {
            get { return _classeRecDespCodEstr; }
            set
            {
                if (_classeRecDespCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ClasseRecDespCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _classeRecDespCodEstr = value;
                    OnPropertyChanged("ClasseRecDespCodEstr");
                }
            }
        }
        private string _classeRecDespCodEstr;
    
        [DataMember]
        public string ClasseRecDespNome
        {
            get { return _classeRecDespNome; }
            set
            {
                if (_classeRecDespNome != value)
                {
                    _classeRecDespNome = value;
                    OnPropertyChanged("ClasseRecDespNome");
                }
            }
        }
        private string _classeRecDespNome;
    
        [DataMember]
        public string ClasseRecDespCodEstrNiv
        {
            get { return _classeRecDespCodEstrNiv; }
            set
            {
                if (_classeRecDespCodEstrNiv != value)
                {
                    ChangeTracker.RecordOriginalValue("ClasseRecDespCodEstrNiv", _classeRecDespCodEstrNiv);
                    if (!IsDeserializing)
                    {
                        if (CLASSE_REC_DESP2 != null && CLASSE_REC_DESP2.ClasseRecDespCodEstr != value)
                        {
                            CLASSE_REC_DESP2 = null;
                        }
                    }
                    _classeRecDespCodEstrNiv = value;
                    OnPropertyChanged("ClasseRecDespCodEstrNiv");
                }
            }
        }
        private string _classeRecDespCodEstrNiv;
    
        [DataMember]
        public string ClasseRecDespGrupo
        {
            get { return _classeRecDespGrupo; }
            set
            {
                if (_classeRecDespGrupo != value)
                {
                    _classeRecDespGrupo = value;
                    OnPropertyChanged("ClasseRecDespGrupo");
                }
            }
        }
        private string _classeRecDespGrupo;
    
        [DataMember]
        public string PlanoCtaEmpCod
        {
            get { return _planoCtaEmpCod; }
            set
            {
                if (_planoCtaEmpCod != value)
                {
                    _planoCtaEmpCod = value;
                    OnPropertyChanged("PlanoCtaEmpCod");
                }
            }
        }
        private string _planoCtaEmpCod;
    
        [DataMember]
        public string ClasseRecDespCContab
        {
            get { return _classeRecDespCContab; }
            set
            {
                if (_classeRecDespCContab != value)
                {
                    _classeRecDespCContab = value;
                    OnPropertyChanged("ClasseRecDespCContab");
                }
            }
        }
        private string _classeRecDespCContab;
    
        [DataMember]
        public string ClasseRecDespNat
        {
            get { return _classeRecDespNat; }
            set
            {
                if (_classeRecDespNat != value)
                {
                    _classeRecDespNat = value;
                    OnPropertyChanged("ClasseRecDespNat");
                }
            }
        }
        private string _classeRecDespNat;
    
        [DataMember]
        public string DirecCod
        {
            get { return _direcCod; }
            set
            {
                if (_direcCod != value)
                {
                    _direcCod = value;
                    OnPropertyChanged("DirecCod");
                }
            }
        }
        private string _direcCod;
    
        [DataMember]
        public string ClasseRecDespCusto
        {
            get { return _classeRecDespCusto; }
            set
            {
                if (_classeRecDespCusto != value)
                {
                    _classeRecDespCusto = value;
                    OnPropertyChanged("ClasseRecDespCusto");
                }
            }
        }
        private string _classeRecDespCusto;
    
        [DataMember]
        public string ClasseRecDespClassifQdrRDS
        {
            get { return _classeRecDespClassifQdrRDS; }
            set
            {
                if (_classeRecDespClassifQdrRDS != value)
                {
                    _classeRecDespClassifQdrRDS = value;
                    OnPropertyChanged("ClasseRecDespClassifQdrRDS");
                }
            }
        }
        private string _classeRecDespClassifQdrRDS;
    
        [DataMember]
        public string ClasseRecDespAlocRat
        {
            get { return _classeRecDespAlocRat; }
            set
            {
                if (_classeRecDespAlocRat != value)
                {
                    _classeRecDespAlocRat = value;
                    OnPropertyChanged("ClasseRecDespAlocRat");
                }
            }
        }
        private string _classeRecDespAlocRat;
    
        [DataMember]
        public string USERIncidePisCofins
        {
            get { return _uSERIncidePisCofins; }
            set
            {
                if (_uSERIncidePisCofins != value)
                {
                    _uSERIncidePisCofins = value;
                    OnPropertyChanged("USERIncidePisCofins");
                }
            }
        }
        private string _uSERIncidePisCofins;
    
        [DataMember]
        public string USERIncideICMS
        {
            get { return _uSERIncideICMS; }
            set
            {
                if (_uSERIncideICMS != value)
                {
                    _uSERIncideICMS = value;
                    OnPropertyChanged("USERIncideICMS");
                }
            }
        }
        private string _uSERIncideICMS;
    
        [DataMember]
        public string ClasseRecDespOficialPrev
        {
            get { return _classeRecDespOficialPrev; }
            set
            {
                if (_classeRecDespOficialPrev != value)
                {
                    _classeRecDespOficialPrev = value;
                    OnPropertyChanged("ClasseRecDespOficialPrev");
                }
            }
        }
        private string _classeRecDespOficialPrev;
    
        [DataMember]
        public string ClasseRecDespStat
        {
            get { return _classeRecDespStat; }
            set
            {
                if (_classeRecDespStat != value)
                {
                    _classeRecDespStat = value;
                    OnPropertyChanged("ClasseRecDespStat");
                }
            }
        }
        private string _classeRecDespStat;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CLASSE_REC_DESP_CTA_CONTAB> CLASSE_REC_DESP_CTA_CONTAB
        {
            get
            {
                if (_cLASSE_REC_DESP_CTA_CONTAB == null)
                {
                    _cLASSE_REC_DESP_CTA_CONTAB = new TrackableCollection<CLASSE_REC_DESP_CTA_CONTAB>();
                    _cLASSE_REC_DESP_CTA_CONTAB.CollectionChanged += FixupCLASSE_REC_DESP_CTA_CONTAB;
                }
                return _cLASSE_REC_DESP_CTA_CONTAB;
            }
            set
            {
                if (!ReferenceEquals(_cLASSE_REC_DESP_CTA_CONTAB, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cLASSE_REC_DESP_CTA_CONTAB != null)
                    {
                        _cLASSE_REC_DESP_CTA_CONTAB.CollectionChanged -= FixupCLASSE_REC_DESP_CTA_CONTAB;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CLASSE_REC_DESP_CTA_CONTAB item in _cLASSE_REC_DESP_CTA_CONTAB)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _cLASSE_REC_DESP_CTA_CONTAB = value;
                    if (_cLASSE_REC_DESP_CTA_CONTAB != null)
                    {
                        _cLASSE_REC_DESP_CTA_CONTAB.CollectionChanged += FixupCLASSE_REC_DESP_CTA_CONTAB;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CLASSE_REC_DESP_CTA_CONTAB item in _cLASSE_REC_DESP_CTA_CONTAB)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CLASSE_REC_DESP_CTA_CONTAB");
                }
            }
        }
        private TrackableCollection<CLASSE_REC_DESP_CTA_CONTAB> _cLASSE_REC_DESP_CTA_CONTAB;
    
        [DataMember]
        public TrackableCollection<CLASSE_REC_DESP_CENTRO_CTRL> CLASSE_REC_DESP_CENTRO_CTRL
        {
            get
            {
                if (_cLASSE_REC_DESP_CENTRO_CTRL == null)
                {
                    _cLASSE_REC_DESP_CENTRO_CTRL = new TrackableCollection<CLASSE_REC_DESP_CENTRO_CTRL>();
                    _cLASSE_REC_DESP_CENTRO_CTRL.CollectionChanged += FixupCLASSE_REC_DESP_CENTRO_CTRL;
                }
                return _cLASSE_REC_DESP_CENTRO_CTRL;
            }
            set
            {
                if (!ReferenceEquals(_cLASSE_REC_DESP_CENTRO_CTRL, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cLASSE_REC_DESP_CENTRO_CTRL != null)
                    {
                        _cLASSE_REC_DESP_CENTRO_CTRL.CollectionChanged -= FixupCLASSE_REC_DESP_CENTRO_CTRL;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CLASSE_REC_DESP_CENTRO_CTRL item in _cLASSE_REC_DESP_CENTRO_CTRL)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _cLASSE_REC_DESP_CENTRO_CTRL = value;
                    if (_cLASSE_REC_DESP_CENTRO_CTRL != null)
                    {
                        _cLASSE_REC_DESP_CENTRO_CTRL.CollectionChanged += FixupCLASSE_REC_DESP_CENTRO_CTRL;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CLASSE_REC_DESP_CENTRO_CTRL item in _cLASSE_REC_DESP_CENTRO_CTRL)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CLASSE_REC_DESP_CENTRO_CTRL");
                }
            }
        }
        private TrackableCollection<CLASSE_REC_DESP_CENTRO_CTRL> _cLASSE_REC_DESP_CENTRO_CTRL;
    
        [DataMember]
        public TrackableCollection<CLASSE_REC_DESP> CLASSE_REC_DESP1
        {
            get
            {
                if (_cLASSE_REC_DESP1 == null)
                {
                    _cLASSE_REC_DESP1 = new TrackableCollection<CLASSE_REC_DESP>();
                    _cLASSE_REC_DESP1.CollectionChanged += FixupCLASSE_REC_DESP1;
                }
                return _cLASSE_REC_DESP1;
            }
            set
            {
                if (!ReferenceEquals(_cLASSE_REC_DESP1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cLASSE_REC_DESP1 != null)
                    {
                        _cLASSE_REC_DESP1.CollectionChanged -= FixupCLASSE_REC_DESP1;
                    }
                    _cLASSE_REC_DESP1 = value;
                    if (_cLASSE_REC_DESP1 != null)
                    {
                        _cLASSE_REC_DESP1.CollectionChanged += FixupCLASSE_REC_DESP1;
                    }
                    OnNavigationPropertyChanged("CLASSE_REC_DESP1");
                }
            }
        }
        private TrackableCollection<CLASSE_REC_DESP> _cLASSE_REC_DESP1;
    
        [DataMember]
        public CLASSE_REC_DESP CLASSE_REC_DESP2
        {
            get { return _cLASSE_REC_DESP2; }
            set
            {
                if (!ReferenceEquals(_cLASSE_REC_DESP2, value))
                {
                    var previousValue = _cLASSE_REC_DESP2;
                    _cLASSE_REC_DESP2 = value;
                    FixupCLASSE_REC_DESP2(previousValue);
                    OnNavigationPropertyChanged("CLASSE_REC_DESP2");
                }
            }
        }
        private CLASSE_REC_DESP _cLASSE_REC_DESP2;
    
        [DataMember]
        public TrackableCollection<MOV_ESTQ_CLASSE_REC_DESP> MOV_ESTQ_CLASSE_REC_DESP
        {
            get
            {
                if (_mOV_ESTQ_CLASSE_REC_DESP == null)
                {
                    _mOV_ESTQ_CLASSE_REC_DESP = new TrackableCollection<MOV_ESTQ_CLASSE_REC_DESP>();
                    _mOV_ESTQ_CLASSE_REC_DESP.CollectionChanged += FixupMOV_ESTQ_CLASSE_REC_DESP;
                }
                return _mOV_ESTQ_CLASSE_REC_DESP;
            }
            set
            {
                if (!ReferenceEquals(_mOV_ESTQ_CLASSE_REC_DESP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_mOV_ESTQ_CLASSE_REC_DESP != null)
                    {
                        _mOV_ESTQ_CLASSE_REC_DESP.CollectionChanged -= FixupMOV_ESTQ_CLASSE_REC_DESP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (MOV_ESTQ_CLASSE_REC_DESP item in _mOV_ESTQ_CLASSE_REC_DESP)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _mOV_ESTQ_CLASSE_REC_DESP = value;
                    if (_mOV_ESTQ_CLASSE_REC_DESP != null)
                    {
                        _mOV_ESTQ_CLASSE_REC_DESP.CollectionChanged += FixupMOV_ESTQ_CLASSE_REC_DESP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (MOV_ESTQ_CLASSE_REC_DESP item in _mOV_ESTQ_CLASSE_REC_DESP)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("MOV_ESTQ_CLASSE_REC_DESP");
                }
            }
        }
        private TrackableCollection<MOV_ESTQ_CLASSE_REC_DESP> _mOV_ESTQ_CLASSE_REC_DESP;
    
        [DataMember]
        public TrackableCollection<RATEIO_MOV_ESTQ> RATEIO_MOV_ESTQ
        {
            get
            {
                if (_rATEIO_MOV_ESTQ == null)
                {
                    _rATEIO_MOV_ESTQ = new TrackableCollection<RATEIO_MOV_ESTQ>();
                    _rATEIO_MOV_ESTQ.CollectionChanged += FixupRATEIO_MOV_ESTQ;
                }
                return _rATEIO_MOV_ESTQ;
            }
            set
            {
                if (!ReferenceEquals(_rATEIO_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rATEIO_MOV_ESTQ != null)
                    {
                        _rATEIO_MOV_ESTQ.CollectionChanged -= FixupRATEIO_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RATEIO_MOV_ESTQ item in _rATEIO_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rATEIO_MOV_ESTQ = value;
                    if (_rATEIO_MOV_ESTQ != null)
                    {
                        _rATEIO_MOV_ESTQ.CollectionChanged += FixupRATEIO_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RATEIO_MOV_ESTQ item in _rATEIO_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RATEIO_MOV_ESTQ");
                }
            }
        }
        private TrackableCollection<RATEIO_MOV_ESTQ> _rATEIO_MOV_ESTQ;
    
        [DataMember]
        public TrackableCollection<ITEM_MOV_ESTQ> ITEM_MOV_ESTQ
        {
            get
            {
                if (_iTEM_MOV_ESTQ == null)
                {
                    _iTEM_MOV_ESTQ = new TrackableCollection<ITEM_MOV_ESTQ>();
                    _iTEM_MOV_ESTQ.CollectionChanged += FixupITEM_MOV_ESTQ;
                }
                return _iTEM_MOV_ESTQ;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_MOV_ESTQ != null)
                    {
                        _iTEM_MOV_ESTQ.CollectionChanged -= FixupITEM_MOV_ESTQ;
                    }
                    _iTEM_MOV_ESTQ = value;
                    if (_iTEM_MOV_ESTQ != null)
                    {
                        _iTEM_MOV_ESTQ.CollectionChanged += FixupITEM_MOV_ESTQ;
                    }
                    OnNavigationPropertyChanged("ITEM_MOV_ESTQ");
                }
            }
        }
        private TrackableCollection<ITEM_MOV_ESTQ> _iTEM_MOV_ESTQ;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CLASSE_REC_DESP_CTA_CONTAB.Clear();
            CLASSE_REC_DESP_CENTRO_CTRL.Clear();
            CLASSE_REC_DESP1.Clear();
            CLASSE_REC_DESP2 = null;
            MOV_ESTQ_CLASSE_REC_DESP.Clear();
            RATEIO_MOV_ESTQ.Clear();
            ITEM_MOV_ESTQ.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCLASSE_REC_DESP2(CLASSE_REC_DESP previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CLASSE_REC_DESP1.Contains(this))
            {
                previousValue.CLASSE_REC_DESP1.Remove(this);
            }
    
            if (CLASSE_REC_DESP2 != null)
            {
                if (!CLASSE_REC_DESP2.CLASSE_REC_DESP1.Contains(this))
                {
                    CLASSE_REC_DESP2.CLASSE_REC_DESP1.Add(this);
                }
    
                ClasseRecDespCodEstrNiv = CLASSE_REC_DESP2.ClasseRecDespCodEstr;
            }
            else if (!skipKeys)
            {
                ClasseRecDespCodEstrNiv = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CLASSE_REC_DESP2")
                    && (ChangeTracker.OriginalValues["CLASSE_REC_DESP2"] == CLASSE_REC_DESP2))
                {
                    ChangeTracker.OriginalValues.Remove("CLASSE_REC_DESP2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CLASSE_REC_DESP2", previousValue);
                }
                if (CLASSE_REC_DESP2 != null && !CLASSE_REC_DESP2.ChangeTracker.ChangeTrackingEnabled)
                {
                    CLASSE_REC_DESP2.StartTracking();
                }
            }
        }
    
        private void FixupCLASSE_REC_DESP_CTA_CONTAB(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CLASSE_REC_DESP_CTA_CONTAB item in e.NewItems)
                {
                    item.CLASSE_REC_DESP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CLASSE_REC_DESP_CTA_CONTAB", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CLASSE_REC_DESP_CTA_CONTAB item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLASSE_REC_DESP, this))
                    {
                        item.CLASSE_REC_DESP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CLASSE_REC_DESP_CTA_CONTAB", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCLASSE_REC_DESP_CENTRO_CTRL(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CLASSE_REC_DESP_CENTRO_CTRL item in e.NewItems)
                {
                    item.CLASSE_REC_DESP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CLASSE_REC_DESP_CENTRO_CTRL", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CLASSE_REC_DESP_CENTRO_CTRL item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLASSE_REC_DESP, this))
                    {
                        item.CLASSE_REC_DESP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CLASSE_REC_DESP_CENTRO_CTRL", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCLASSE_REC_DESP1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CLASSE_REC_DESP item in e.NewItems)
                {
                    item.CLASSE_REC_DESP2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CLASSE_REC_DESP1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CLASSE_REC_DESP item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLASSE_REC_DESP2, this))
                    {
                        item.CLASSE_REC_DESP2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CLASSE_REC_DESP1", item);
                    }
                }
            }
        }
    
        private void FixupMOV_ESTQ_CLASSE_REC_DESP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MOV_ESTQ_CLASSE_REC_DESP item in e.NewItems)
                {
                    item.CLASSE_REC_DESP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MOV_ESTQ_CLASSE_REC_DESP", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MOV_ESTQ_CLASSE_REC_DESP item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLASSE_REC_DESP, this))
                    {
                        item.CLASSE_REC_DESP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MOV_ESTQ_CLASSE_REC_DESP", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRATEIO_MOV_ESTQ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RATEIO_MOV_ESTQ item in e.NewItems)
                {
                    item.CLASSE_REC_DESP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RATEIO_MOV_ESTQ", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RATEIO_MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLASSE_REC_DESP, this))
                    {
                        item.CLASSE_REC_DESP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RATEIO_MOV_ESTQ", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupITEM_MOV_ESTQ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_MOV_ESTQ item in e.NewItems)
                {
                    item.CLASSE_REC_DESP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_MOV_ESTQ", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLASSE_REC_DESP, this))
                    {
                        item.CLASSE_REC_DESP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_MOV_ESTQ", item);
                    }
                }
            }
        }

        #endregion

    }
}
