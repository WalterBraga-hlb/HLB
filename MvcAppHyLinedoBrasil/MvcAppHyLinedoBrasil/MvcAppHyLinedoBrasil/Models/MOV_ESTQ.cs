//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CIDADE))]
    [KnownType(typeof(EMPRESA_FILIAL))]
    [KnownType(typeof(ICMS_MOV_ESTQ))]
    [KnownType(typeof(MOV_ESTQ))]
    [KnownType(typeof(MOV_ESTQ_CCTRL))]
    [KnownType(typeof(MOV_ESTQ_CLASSE_REC_DESP))]
    [KnownType(typeof(PARC_PAG_MOV_ESTQ))]
    [KnownType(typeof(RATEIO_MOV_ESTQ))]
    [KnownType(typeof(ENTIDADE))]
    [KnownType(typeof(DOC_FIN))]
    [KnownType(typeof(NAT_OPERACAO))]
    [KnownType(typeof(COND_PAG))]
    [KnownType(typeof(OBJETO))]
    [KnownType(typeof(ITEM_MOV_ESTQ))]
    public partial class MOV_ESTQ: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL1 != null && EMPRESA_FILIAL1.EmpCod != value)
                        {
                            EMPRESA_FILIAL1 = null;
                        }
                        if (MOV_ESTQ2 != null && MOV_ESTQ2.EmpCod != value)
                        {
                            var previousValue = _mOV_ESTQ2;
                            _mOV_ESTQ2 = null;
                            FixupMOV_ESTQ2(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("MOV_ESTQ2");
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public int MovEstqChv
        {
            get { return _movEstqChv; }
            set
            {
                if (_movEstqChv != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MovEstqChv' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _movEstqChv = value;
                    OnPropertyChanged("MovEstqChv");
                }
            }
        }
        private int _movEstqChv;
    
        [DataMember]
        public string TipoLancCod
        {
            get { return _tipoLancCod; }
            set
            {
                if (_tipoLancCod != value)
                {
                    _tipoLancCod = value;
                    OnPropertyChanged("TipoLancCod");
                }
            }
        }
        private string _tipoLancCod;
    
        [DataMember]
        public Nullable<int> MovEstqChvCtrl
        {
            get { return _movEstqChvCtrl; }
            set
            {
                if (_movEstqChvCtrl != value)
                {
                    _movEstqChvCtrl = value;
                    OnPropertyChanged("MovEstqChvCtrl");
                }
            }
        }
        private Nullable<int> _movEstqChvCtrl;
    
        [DataMember]
        public System.DateTime MovEstqDataMovimento
        {
            get { return _movEstqDataMovimento; }
            set
            {
                if (_movEstqDataMovimento != value)
                {
                    _movEstqDataMovimento = value;
                    OnPropertyChanged("MovEstqDataMovimento");
                }
            }
        }
        private System.DateTime _movEstqDataMovimento;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqDataEmissao
        {
            get { return _movEstqDataEmissao; }
            set
            {
                if (_movEstqDataEmissao != value)
                {
                    _movEstqDataEmissao = value;
                    OnPropertyChanged("MovEstqDataEmissao");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqDataEmissao;
    
        [DataMember]
        public string MovEstqEmpOrig
        {
            get { return _movEstqEmpOrig; }
            set
            {
                if (_movEstqEmpOrig != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqEmpOrig", _movEstqEmpOrig);
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL2 != null && EMPRESA_FILIAL2.EmpCod != value)
                        {
                            EMPRESA_FILIAL2 = null;
                        }
                    }
                    _movEstqEmpOrig = value;
                    OnPropertyChanged("MovEstqEmpOrig");
                }
            }
        }
        private string _movEstqEmpOrig;
    
        [DataMember]
        public string MovEstqEmpDest
        {
            get { return _movEstqEmpDest; }
            set
            {
                if (_movEstqEmpDest != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqEmpDest", _movEstqEmpDest);
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL3 != null && EMPRESA_FILIAL3.EmpCod != value)
                        {
                            EMPRESA_FILIAL3 = null;
                        }
                    }
                    _movEstqEmpDest = value;
                    OnPropertyChanged("MovEstqEmpDest");
                }
            }
        }
        private string _movEstqEmpDest;
    
        [DataMember]
        public string MovEstqDocEmpCod
        {
            get { return _movEstqDocEmpCod; }
            set
            {
                if (_movEstqDocEmpCod != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqDocEmpCod", _movEstqDocEmpCod);
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL != null && EMPRESA_FILIAL.EmpCod != value)
                        {
                            EMPRESA_FILIAL = null;
                        }
                    }
                    _movEstqDocEmpCod = value;
                    OnPropertyChanged("MovEstqDocEmpCod");
                }
            }
        }
        private string _movEstqDocEmpCod;
    
        [DataMember]
        public string MovEstqDocEspec
        {
            get { return _movEstqDocEspec; }
            set
            {
                if (_movEstqDocEspec != value)
                {
                    _movEstqDocEspec = value;
                    OnPropertyChanged("MovEstqDocEspec");
                }
            }
        }
        private string _movEstqDocEspec;
    
        [DataMember]
        public string MovEstqDocSerie
        {
            get { return _movEstqDocSerie; }
            set
            {
                if (_movEstqDocSerie != value)
                {
                    _movEstqDocSerie = value;
                    OnPropertyChanged("MovEstqDocSerie");
                }
            }
        }
        private string _movEstqDocSerie;
    
        [DataMember]
        public string MovEstqDocNum
        {
            get { return _movEstqDocNum; }
            set
            {
                if (_movEstqDocNum != value)
                {
                    _movEstqDocNum = value;
                    OnPropertyChanged("MovEstqDocNum");
                }
            }
        }
        private string _movEstqDocNum;
    
        [DataMember]
        public Nullable<int> MovEstqDocSeq
        {
            get { return _movEstqDocSeq; }
            set
            {
                if (_movEstqDocSeq != value)
                {
                    _movEstqDocSeq = value;
                    OnPropertyChanged("MovEstqDocSeq");
                }
            }
        }
        private Nullable<int> _movEstqDocSeq;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    ChangeTracker.RecordOriginalValue("EntCod", _entCod);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE4 != null && ENTIDADE4.EntCod != value)
                        {
                            ENTIDADE4 = null;
                        }
                    }
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string MovEstqObs
        {
            get { return _movEstqObs; }
            set
            {
                if (_movEstqObs != value)
                {
                    _movEstqObs = value;
                    OnPropertyChanged("MovEstqObs");
                }
            }
        }
        private string _movEstqObs;
    
        [DataMember]
        public Nullable<decimal> MovEstqValAcrescFinProd
        {
            get { return _movEstqValAcrescFinProd; }
            set
            {
                if (_movEstqValAcrescFinProd != value)
                {
                    _movEstqValAcrescFinProd = value;
                    OnPropertyChanged("MovEstqValAcrescFinProd");
                }
            }
        }
        private Nullable<decimal> _movEstqValAcrescFinProd;
    
        [DataMember]
        public Nullable<decimal> MovEstqValAcrescFinServ
        {
            get { return _movEstqValAcrescFinServ; }
            set
            {
                if (_movEstqValAcrescFinServ != value)
                {
                    _movEstqValAcrescFinServ = value;
                    OnPropertyChanged("MovEstqValAcrescFinServ");
                }
            }
        }
        private Nullable<decimal> _movEstqValAcrescFinServ;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDescEspecProd
        {
            get { return _movEstqValDescEspecProd; }
            set
            {
                if (_movEstqValDescEspecProd != value)
                {
                    _movEstqValDescEspecProd = value;
                    OnPropertyChanged("MovEstqValDescEspecProd");
                }
            }
        }
        private Nullable<decimal> _movEstqValDescEspecProd;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDescEspecServ
        {
            get { return _movEstqValDescEspecServ; }
            set
            {
                if (_movEstqValDescEspecServ != value)
                {
                    _movEstqValDescEspecServ = value;
                    OnPropertyChanged("MovEstqValDescEspecServ");
                }
            }
        }
        private Nullable<decimal> _movEstqValDescEspecServ;
    
        [DataMember]
        public Nullable<decimal> MovEstqValServ
        {
            get { return _movEstqValServ; }
            set
            {
                if (_movEstqValServ != value)
                {
                    _movEstqValServ = value;
                    OnPropertyChanged("MovEstqValServ");
                }
            }
        }
        private Nullable<decimal> _movEstqValServ;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseIss
        {
            get { return _movEstqValBaseIss; }
            set
            {
                if (_movEstqValBaseIss != value)
                {
                    _movEstqValBaseIss = value;
                    OnPropertyChanged("MovEstqValBaseIss");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseIss;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIss
        {
            get { return _movEstqValIss; }
            set
            {
                if (_movEstqValIss != value)
                {
                    _movEstqValIss = value;
                    OnPropertyChanged("MovEstqValIss");
                }
            }
        }
        private Nullable<decimal> _movEstqValIss;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseIrrf
        {
            get { return _movEstqValBaseIrrf; }
            set
            {
                if (_movEstqValBaseIrrf != value)
                {
                    _movEstqValBaseIrrf = value;
                    OnPropertyChanged("MovEstqValBaseIrrf");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseIrrf;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIrrf
        {
            get { return _movEstqValIrrf; }
            set
            {
                if (_movEstqValIrrf != value)
                {
                    _movEstqValIrrf = value;
                    OnPropertyChanged("MovEstqValIrrf");
                }
            }
        }
        private Nullable<decimal> _movEstqValIrrf;
    
        [DataMember]
        public Nullable<decimal> MovEstqValServTot
        {
            get { return _movEstqValServTot; }
            set
            {
                if (_movEstqValServTot != value)
                {
                    _movEstqValServTot = value;
                    OnPropertyChanged("MovEstqValServTot");
                }
            }
        }
        private Nullable<decimal> _movEstqValServTot;
    
        [DataMember]
        public string MovEstqNatOpServ
        {
            get { return _movEstqNatOpServ; }
            set
            {
                if (_movEstqNatOpServ != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqNatOpServ", _movEstqNatOpServ);
                    if (!IsDeserializing)
                    {
                        if (NAT_OPERACAO != null && NAT_OPERACAO.NatOpCodEstr != value)
                        {
                            NAT_OPERACAO = null;
                        }
                    }
                    _movEstqNatOpServ = value;
                    OnPropertyChanged("MovEstqNatOpServ");
                }
            }
        }
        private string _movEstqNatOpServ;
    
        [DataMember]
        public string MovEstqObsServ
        {
            get { return _movEstqObsServ; }
            set
            {
                if (_movEstqObsServ != value)
                {
                    _movEstqObsServ = value;
                    OnPropertyChanged("MovEstqObsServ");
                }
            }
        }
        private string _movEstqObsServ;
    
        [DataMember]
        public Nullable<decimal> MovEstqValEmbalagem
        {
            get { return _movEstqValEmbalagem; }
            set
            {
                if (_movEstqValEmbalagem != value)
                {
                    _movEstqValEmbalagem = value;
                    OnPropertyChanged("MovEstqValEmbalagem");
                }
            }
        }
        private Nullable<decimal> _movEstqValEmbalagem;
    
        [DataMember]
        public Nullable<decimal> MovEstqValFrete
        {
            get { return _movEstqValFrete; }
            set
            {
                if (_movEstqValFrete != value)
                {
                    _movEstqValFrete = value;
                    OnPropertyChanged("MovEstqValFrete");
                }
            }
        }
        private Nullable<decimal> _movEstqValFrete;
    
        [DataMember]
        public Nullable<decimal> MovEstqValSeguro
        {
            get { return _movEstqValSeguro; }
            set
            {
                if (_movEstqValSeguro != value)
                {
                    _movEstqValSeguro = value;
                    OnPropertyChanged("MovEstqValSeguro");
                }
            }
        }
        private Nullable<decimal> _movEstqValSeguro;
    
        [DataMember]
        public Nullable<decimal> MovEstqValOutra
        {
            get { return _movEstqValOutra; }
            set
            {
                if (_movEstqValOutra != value)
                {
                    _movEstqValOutra = value;
                    OnPropertyChanged("MovEstqValOutra");
                }
            }
        }
        private Nullable<decimal> _movEstqValOutra;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDespDiv
        {
            get { return _movEstqValDespDiv; }
            set
            {
                if (_movEstqValDespDiv != value)
                {
                    _movEstqValDespDiv = value;
                    OnPropertyChanged("MovEstqValDespDiv");
                }
            }
        }
        private Nullable<decimal> _movEstqValDespDiv;
    
        [DataMember]
        public Nullable<decimal> MovEstqBaseIcms
        {
            get { return _movEstqBaseIcms; }
            set
            {
                if (_movEstqBaseIcms != value)
                {
                    _movEstqBaseIcms = value;
                    OnPropertyChanged("MovEstqBaseIcms");
                }
            }
        }
        private Nullable<decimal> _movEstqBaseIcms;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIcms
        {
            get { return _movEstqValIcms; }
            set
            {
                if (_movEstqValIcms != value)
                {
                    _movEstqValIcms = value;
                    OnPropertyChanged("MovEstqValIcms");
                }
            }
        }
        private Nullable<decimal> _movEstqValIcms;
    
        [DataMember]
        public Nullable<decimal> MovEstqBaseIcmsST
        {
            get { return _movEstqBaseIcmsST; }
            set
            {
                if (_movEstqBaseIcmsST != value)
                {
                    _movEstqBaseIcmsST = value;
                    OnPropertyChanged("MovEstqBaseIcmsST");
                }
            }
        }
        private Nullable<decimal> _movEstqBaseIcmsST;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIcmsST
        {
            get { return _movEstqValIcmsST; }
            set
            {
                if (_movEstqValIcmsST != value)
                {
                    _movEstqValIcmsST = value;
                    OnPropertyChanged("MovEstqValIcmsST");
                }
            }
        }
        private Nullable<decimal> _movEstqValIcmsST;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIcmsRetST
        {
            get { return _movEstqValIcmsRetST; }
            set
            {
                if (_movEstqValIcmsRetST != value)
                {
                    _movEstqValIcmsRetST = value;
                    OnPropertyChanged("MovEstqValIcmsRetST");
                }
            }
        }
        private Nullable<decimal> _movEstqValIcmsRetST;
    
        [DataMember]
        public Nullable<decimal> MovEstqBaseIpi
        {
            get { return _movEstqBaseIpi; }
            set
            {
                if (_movEstqBaseIpi != value)
                {
                    _movEstqBaseIpi = value;
                    OnPropertyChanged("MovEstqBaseIpi");
                }
            }
        }
        private Nullable<decimal> _movEstqBaseIpi;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIpi
        {
            get { return _movEstqValIpi; }
            set
            {
                if (_movEstqValIpi != value)
                {
                    _movEstqValIpi = value;
                    OnPropertyChanged("MovEstqValIpi");
                }
            }
        }
        private Nullable<decimal> _movEstqValIpi;
    
        [DataMember]
        public Nullable<decimal> MovEstqValMerc
        {
            get { return _movEstqValMerc; }
            set
            {
                if (_movEstqValMerc != value)
                {
                    _movEstqValMerc = value;
                    OnPropertyChanged("MovEstqValMerc");
                }
            }
        }
        private Nullable<decimal> _movEstqValMerc;
    
        [DataMember]
        public Nullable<decimal> MovEstqValFinalMerc
        {
            get { return _movEstqValFinalMerc; }
            set
            {
                if (_movEstqValFinalMerc != value)
                {
                    _movEstqValFinalMerc = value;
                    OnPropertyChanged("MovEstqValFinalMerc");
                }
            }
        }
        private Nullable<decimal> _movEstqValFinalMerc;
    
        [DataMember]
        public Nullable<decimal> MovEstqValMercDiv
        {
            get { return _movEstqValMercDiv; }
            set
            {
                if (_movEstqValMercDiv != value)
                {
                    _movEstqValMercDiv = value;
                    OnPropertyChanged("MovEstqValMercDiv");
                }
            }
        }
        private Nullable<decimal> _movEstqValMercDiv;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDoc
        {
            get { return _movEstqValDoc; }
            set
            {
                if (_movEstqValDoc != value)
                {
                    _movEstqValDoc = value;
                    OnPropertyChanged("MovEstqValDoc");
                }
            }
        }
        private Nullable<decimal> _movEstqValDoc;
    
        [DataMember]
        public string CondPagCod
        {
            get { return _condPagCod; }
            set
            {
                if (_condPagCod != value)
                {
                    ChangeTracker.RecordOriginalValue("CondPagCod", _condPagCod);
                    if (!IsDeserializing)
                    {
                        if (COND_PAG2 != null && COND_PAG2.CondPagCod != value)
                        {
                            COND_PAG2 = null;
                        }
                    }
                    _condPagCod = value;
                    OnPropertyChanged("CondPagCod");
                }
            }
        }
        private string _condPagCod;
    
        [DataMember]
        public string MovEstqIntegFin
        {
            get { return _movEstqIntegFin; }
            set
            {
                if (_movEstqIntegFin != value)
                {
                    _movEstqIntegFin = value;
                    OnPropertyChanged("MovEstqIntegFin");
                }
            }
        }
        private string _movEstqIntegFin;
    
        [DataMember]
        public string MovEstqEntCodContato
        {
            get { return _movEstqEntCodContato; }
            set
            {
                if (_movEstqEntCodContato != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqEntCodContato", _movEstqEntCodContato);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE3 != null && ENTIDADE3.EntCod != value)
                        {
                            ENTIDADE3 = null;
                        }
                    }
                    _movEstqEntCodContato = value;
                    OnPropertyChanged("MovEstqEntCodContato");
                }
            }
        }
        private string _movEstqEntCodContato;
    
        [DataMember]
        public string MovEstqRatValDespDiv
        {
            get { return _movEstqRatValDespDiv; }
            set
            {
                if (_movEstqRatValDespDiv != value)
                {
                    _movEstqRatValDespDiv = value;
                    OnPropertyChanged("MovEstqRatValDespDiv");
                }
            }
        }
        private string _movEstqRatValDespDiv;
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqDataHoraDig
        {
            get { return _movEstqDataHoraDig; }
            set
            {
                if (_movEstqDataHoraDig != value)
                {
                    _movEstqDataHoraDig = value;
                    OnPropertyChanged("MovEstqDataHoraDig");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqDataHoraDig;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseInss
        {
            get { return _movEstqValBaseInss; }
            set
            {
                if (_movEstqValBaseInss != value)
                {
                    _movEstqValBaseInss = value;
                    OnPropertyChanged("MovEstqValBaseInss");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseInss;
    
        [DataMember]
        public Nullable<decimal> MovEstqValInss
        {
            get { return _movEstqValInss; }
            set
            {
                if (_movEstqValInss != value)
                {
                    _movEstqValInss = value;
                    OnPropertyChanged("MovEstqValInss");
                }
            }
        }
        private Nullable<decimal> _movEstqValInss;
    
        [DataMember]
        public string MovEstqIntegFisc
        {
            get { return _movEstqIntegFisc; }
            set
            {
                if (_movEstqIntegFisc != value)
                {
                    _movEstqIntegFisc = value;
                    OnPropertyChanged("MovEstqIntegFisc");
                }
            }
        }
        private string _movEstqIntegFisc;
    
        [DataMember]
        public string MovEstqValIssDedTot
        {
            get { return _movEstqValIssDedTot; }
            set
            {
                if (_movEstqValIssDedTot != value)
                {
                    _movEstqValIssDedTot = value;
                    OnPropertyChanged("MovEstqValIssDedTot");
                }
            }
        }
        private string _movEstqValIssDedTot;
    
        [DataMember]
        public string MovEstqValInssDedTot
        {
            get { return _movEstqValInssDedTot; }
            set
            {
                if (_movEstqValInssDedTot != value)
                {
                    _movEstqValInssDedTot = value;
                    OnPropertyChanged("MovEstqValInssDedTot");
                }
            }
        }
        private string _movEstqValInssDedTot;
    
        [DataMember]
        public Nullable<decimal> MovEstqPercFreteEmbut
        {
            get { return _movEstqPercFreteEmbut; }
            set
            {
                if (_movEstqPercFreteEmbut != value)
                {
                    _movEstqPercFreteEmbut = value;
                    OnPropertyChanged("MovEstqPercFreteEmbut");
                }
            }
        }
        private Nullable<decimal> _movEstqPercFreteEmbut;
    
        [DataMember]
        public Nullable<decimal> MovEstqValFreteEmbut
        {
            get { return _movEstqValFreteEmbut; }
            set
            {
                if (_movEstqValFreteEmbut != value)
                {
                    _movEstqValFreteEmbut = value;
                    OnPropertyChanged("MovEstqValFreteEmbut");
                }
            }
        }
        private Nullable<decimal> _movEstqValFreteEmbut;
    
        [DataMember]
        public Nullable<decimal> MovEstqPercFinancEmbut
        {
            get { return _movEstqPercFinancEmbut; }
            set
            {
                if (_movEstqPercFinancEmbut != value)
                {
                    _movEstqPercFinancEmbut = value;
                    OnPropertyChanged("MovEstqPercFinancEmbut");
                }
            }
        }
        private Nullable<decimal> _movEstqPercFinancEmbut;
    
        [DataMember]
        public Nullable<decimal> MovEstqValFinancEmbut
        {
            get { return _movEstqValFinancEmbut; }
            set
            {
                if (_movEstqValFinancEmbut != value)
                {
                    _movEstqValFinancEmbut = value;
                    OnPropertyChanged("MovEstqValFinancEmbut");
                }
            }
        }
        private Nullable<decimal> _movEstqValFinancEmbut;
    
        [DataMember]
        public Nullable<decimal> MovEstqPercDescGer
        {
            get { return _movEstqPercDescGer; }
            set
            {
                if (_movEstqPercDescGer != value)
                {
                    _movEstqPercDescGer = value;
                    OnPropertyChanged("MovEstqPercDescGer");
                }
            }
        }
        private Nullable<decimal> _movEstqPercDescGer;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDescGer
        {
            get { return _movEstqValDescGer; }
            set
            {
                if (_movEstqValDescGer != value)
                {
                    _movEstqValDescGer = value;
                    OnPropertyChanged("MovEstqValDescGer");
                }
            }
        }
        private Nullable<decimal> _movEstqValDescGer;
    
        [DataMember]
        public Nullable<decimal> MovEstqPercDescGerProd
        {
            get { return _movEstqPercDescGerProd; }
            set
            {
                if (_movEstqPercDescGerProd != value)
                {
                    _movEstqPercDescGerProd = value;
                    OnPropertyChanged("MovEstqPercDescGerProd");
                }
            }
        }
        private Nullable<decimal> _movEstqPercDescGerProd;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDescGerProd
        {
            get { return _movEstqValDescGerProd; }
            set
            {
                if (_movEstqValDescGerProd != value)
                {
                    _movEstqValDescGerProd = value;
                    OnPropertyChanged("MovEstqValDescGerProd");
                }
            }
        }
        private Nullable<decimal> _movEstqValDescGerProd;
    
        [DataMember]
        public Nullable<decimal> MovEstqPercDescGerServ
        {
            get { return _movEstqPercDescGerServ; }
            set
            {
                if (_movEstqPercDescGerServ != value)
                {
                    _movEstqPercDescGerServ = value;
                    OnPropertyChanged("MovEstqPercDescGerServ");
                }
            }
        }
        private Nullable<decimal> _movEstqPercDescGerServ;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDescGerServ
        {
            get { return _movEstqValDescGerServ; }
            set
            {
                if (_movEstqValDescGerServ != value)
                {
                    _movEstqValDescGerServ = value;
                    OnPropertyChanged("MovEstqValDescGerServ");
                }
            }
        }
        private Nullable<decimal> _movEstqValDescGerServ;
    
        [DataMember]
        public Nullable<int> MovEstqChvRef
        {
            get { return _movEstqChvRef; }
            set
            {
                if (_movEstqChvRef != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqChvRef", _movEstqChvRef);
                    if (!IsDeserializing)
                    {
                        if (MOV_ESTQ2 != null && MOV_ESTQ2.MovEstqChv != value)
                        {
                            var previousValue = _mOV_ESTQ2;
                            _mOV_ESTQ2 = null;
                            FixupMOV_ESTQ2(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("MOV_ESTQ2");
                        }
                    }
                    _movEstqChvRef = value;
                    OnPropertyChanged("MovEstqChvRef");
                }
            }
        }
        private Nullable<int> _movEstqChvRef;
    
        [DataMember]
        public string MovEstqSegIndEconCod
        {
            get { return _movEstqSegIndEconCod; }
            set
            {
                if (_movEstqSegIndEconCod != value)
                {
                    _movEstqSegIndEconCod = value;
                    OnPropertyChanged("MovEstqSegIndEconCod");
                }
            }
        }
        private string _movEstqSegIndEconCod;
    
        [DataMember]
        public Nullable<decimal> MovEstqSegIndEconValCambio
        {
            get { return _movEstqSegIndEconValCambio; }
            set
            {
                if (_movEstqSegIndEconValCambio != value)
                {
                    _movEstqSegIndEconValCambio = value;
                    OnPropertyChanged("MovEstqSegIndEconValCambio");
                }
            }
        }
        private Nullable<decimal> _movEstqSegIndEconValCambio;
    
        [DataMember]
        public string MovEstq
        {
            get { return _movEstq; }
            set
            {
                if (_movEstq != value)
                {
                    _movEstq = value;
                    OnPropertyChanged("MovEstq");
                }
            }
        }
        private string _movEstq;
    
        [DataMember]
        public string FuncCod
        {
            get { return _funcCod; }
            set
            {
                if (_funcCod != value)
                {
                    _funcCod = value;
                    OnPropertyChanged("FuncCod");
                }
            }
        }
        private string _funcCod;
    
        [DataMember]
        public string MovEstqValIrrfDedTot
        {
            get { return _movEstqValIrrfDedTot; }
            set
            {
                if (_movEstqValIrrfDedTot != value)
                {
                    _movEstqValIrrfDedTot = value;
                    OnPropertyChanged("MovEstqValIrrfDedTot");
                }
            }
        }
        private string _movEstqValIrrfDedTot;
    
        [DataMember]
        public Nullable<decimal> MovEstqValLib
        {
            get { return _movEstqValLib; }
            set
            {
                if (_movEstqValLib != value)
                {
                    _movEstqValLib = value;
                    OnPropertyChanged("MovEstqValLib");
                }
            }
        }
        private Nullable<decimal> _movEstqValLib;
    
        [DataMember]
        public Nullable<decimal> MovEstqValOrig
        {
            get { return _movEstqValOrig; }
            set
            {
                if (_movEstqValOrig != value)
                {
                    _movEstqValOrig = value;
                    OnPropertyChanged("MovEstqValOrig");
                }
            }
        }
        private Nullable<decimal> _movEstqValOrig;
    
        [DataMember]
        public string MovEstqOrig
        {
            get { return _movEstqOrig; }
            set
            {
                if (_movEstqOrig != value)
                {
                    _movEstqOrig = value;
                    OnPropertyChanged("MovEstqOrig");
                }
            }
        }
        private string _movEstqOrig;
    
        [DataMember]
        public string MovEstqRejPat
        {
            get { return _movEstqRejPat; }
            set
            {
                if (_movEstqRejPat != value)
                {
                    _movEstqRejPat = value;
                    OnPropertyChanged("MovEstqRejPat");
                }
            }
        }
        private string _movEstqRejPat;
    
        [DataMember]
        public Nullable<decimal> MovEstqBaseII
        {
            get { return _movEstqBaseII; }
            set
            {
                if (_movEstqBaseII != value)
                {
                    _movEstqBaseII = value;
                    OnPropertyChanged("MovEstqBaseII");
                }
            }
        }
        private Nullable<decimal> _movEstqBaseII;
    
        [DataMember]
        public Nullable<decimal> MovEstqValII
        {
            get { return _movEstqValII; }
            set
            {
                if (_movEstqValII != value)
                {
                    _movEstqValII = value;
                    OnPropertyChanged("MovEstqValII");
                }
            }
        }
        private Nullable<decimal> _movEstqValII;
    
        [DataMember]
        public System.DateTime MovEstqDataEntrada
        {
            get { return _movEstqDataEntrada; }
            set
            {
                if (_movEstqDataEntrada != value)
                {
                    _movEstqDataEntrada = value;
                    OnPropertyChanged("MovEstqDataEntrada");
                }
            }
        }
        private System.DateTime _movEstqDataEntrada;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqDataConhecTranspImp
        {
            get { return _movEstqDataConhecTranspImp; }
            set
            {
                if (_movEstqDataConhecTranspImp != value)
                {
                    _movEstqDataConhecTranspImp = value;
                    OnPropertyChanged("MovEstqDataConhecTranspImp");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqDataConhecTranspImp;
    
        [DataMember]
        public string MovEstqIndEconCodDoc
        {
            get { return _movEstqIndEconCodDoc; }
            set
            {
                if (_movEstqIndEconCodDoc != value)
                {
                    _movEstqIndEconCodDoc = value;
                    OnPropertyChanged("MovEstqIndEconCodDoc");
                }
            }
        }
        private string _movEstqIndEconCodDoc;
    
        [DataMember]
        public Nullable<decimal> MovEstqIndEconValCambioDoc
        {
            get { return _movEstqIndEconValCambioDoc; }
            set
            {
                if (_movEstqIndEconValCambioDoc != value)
                {
                    _movEstqIndEconValCambioDoc = value;
                    OnPropertyChanged("MovEstqIndEconValCambioDoc");
                }
            }
        }
        private Nullable<decimal> _movEstqIndEconValCambioDoc;
    
        [DataMember]
        public Nullable<decimal> MovEstqValMercDoc
        {
            get { return _movEstqValMercDoc; }
            set
            {
                if (_movEstqValMercDoc != value)
                {
                    _movEstqValMercDoc = value;
                    OnPropertyChanged("MovEstqValMercDoc");
                }
            }
        }
        private Nullable<decimal> _movEstqValMercDoc;
    
        [DataMember]
        public string TipoPagRecCod
        {
            get { return _tipoPagRecCod; }
            set
            {
                if (_tipoPagRecCod != value)
                {
                    _tipoPagRecCod = value;
                    OnPropertyChanged("TipoPagRecCod");
                }
            }
        }
        private string _tipoPagRecCod;
    
        [DataMember]
        public string MovEstqFreteDocEntCod
        {
            get { return _movEstqFreteDocEntCod; }
            set
            {
                if (_movEstqFreteDocEntCod != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqFreteDocEntCod", _movEstqFreteDocEntCod);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE2 != null && ENTIDADE2.EntCod != value)
                        {
                            ENTIDADE2 = null;
                        }
                    }
                    _movEstqFreteDocEntCod = value;
                    OnPropertyChanged("MovEstqFreteDocEntCod");
                }
            }
        }
        private string _movEstqFreteDocEntCod;
    
        [DataMember]
        public string MovEstqFreteDocEspec
        {
            get { return _movEstqFreteDocEspec; }
            set
            {
                if (_movEstqFreteDocEspec != value)
                {
                    _movEstqFreteDocEspec = value;
                    OnPropertyChanged("MovEstqFreteDocEspec");
                }
            }
        }
        private string _movEstqFreteDocEspec;
    
        [DataMember]
        public string MovEstqFreteDocSerie
        {
            get { return _movEstqFreteDocSerie; }
            set
            {
                if (_movEstqFreteDocSerie != value)
                {
                    _movEstqFreteDocSerie = value;
                    OnPropertyChanged("MovEstqFreteDocSerie");
                }
            }
        }
        private string _movEstqFreteDocSerie;
    
        [DataMember]
        public string MovEstqFreteDocNum
        {
            get { return _movEstqFreteDocNum; }
            set
            {
                if (_movEstqFreteDocNum != value)
                {
                    _movEstqFreteDocNum = value;
                    OnPropertyChanged("MovEstqFreteDocNum");
                }
            }
        }
        private string _movEstqFreteDocNum;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqFreteDocData
        {
            get { return _movEstqFreteDocData; }
            set
            {
                if (_movEstqFreteDocData != value)
                {
                    _movEstqFreteDocData = value;
                    OnPropertyChanged("MovEstqFreteDocData");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqFreteDocData;
    
        [DataMember]
        public Nullable<decimal> MovEstqFreteDocVal
        {
            get { return _movEstqFreteDocVal; }
            set
            {
                if (_movEstqFreteDocVal != value)
                {
                    _movEstqFreteDocVal = value;
                    OnPropertyChanged("MovEstqFreteDocVal");
                }
            }
        }
        private Nullable<decimal> _movEstqFreteDocVal;
    
        [DataMember]
        public string MovEstqFreteDocIndEconCod
        {
            get { return _movEstqFreteDocIndEconCod; }
            set
            {
                if (_movEstqFreteDocIndEconCod != value)
                {
                    _movEstqFreteDocIndEconCod = value;
                    OnPropertyChanged("MovEstqFreteDocIndEconCod");
                }
            }
        }
        private string _movEstqFreteDocIndEconCod;
    
        [DataMember]
        public Nullable<decimal> MovEstqFreteDocIndEconCamb
        {
            get { return _movEstqFreteDocIndEconCamb; }
            set
            {
                if (_movEstqFreteDocIndEconCamb != value)
                {
                    _movEstqFreteDocIndEconCamb = value;
                    OnPropertyChanged("MovEstqFreteDocIndEconCamb");
                }
            }
        }
        private Nullable<decimal> _movEstqFreteDocIndEconCamb;
    
        [DataMember]
        public string MovEstqFreteDocCondPagCod
        {
            get { return _movEstqFreteDocCondPagCod; }
            set
            {
                if (_movEstqFreteDocCondPagCod != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqFreteDocCondPagCod", _movEstqFreteDocCondPagCod);
                    if (!IsDeserializing)
                    {
                        if (COND_PAG != null && COND_PAG.CondPagCod != value)
                        {
                            COND_PAG = null;
                        }
                    }
                    _movEstqFreteDocCondPagCod = value;
                    OnPropertyChanged("MovEstqFreteDocCondPagCod");
                }
            }
        }
        private string _movEstqFreteDocCondPagCod;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqFreteDocDataBaseVenc
        {
            get { return _movEstqFreteDocDataBaseVenc; }
            set
            {
                if (_movEstqFreteDocDataBaseVenc != value)
                {
                    _movEstqFreteDocDataBaseVenc = value;
                    OnPropertyChanged("MovEstqFreteDocDataBaseVenc");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqFreteDocDataBaseVenc;
    
        [DataMember]
        public string MovEstqSegDocEntCod
        {
            get { return _movEstqSegDocEntCod; }
            set
            {
                if (_movEstqSegDocEntCod != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqSegDocEntCod", _movEstqSegDocEntCod);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE1 != null && ENTIDADE1.EntCod != value)
                        {
                            ENTIDADE1 = null;
                        }
                    }
                    _movEstqSegDocEntCod = value;
                    OnPropertyChanged("MovEstqSegDocEntCod");
                }
            }
        }
        private string _movEstqSegDocEntCod;
    
        [DataMember]
        public string MovEstqSegDocEspec
        {
            get { return _movEstqSegDocEspec; }
            set
            {
                if (_movEstqSegDocEspec != value)
                {
                    _movEstqSegDocEspec = value;
                    OnPropertyChanged("MovEstqSegDocEspec");
                }
            }
        }
        private string _movEstqSegDocEspec;
    
        [DataMember]
        public string MovEstqSegDocSerie
        {
            get { return _movEstqSegDocSerie; }
            set
            {
                if (_movEstqSegDocSerie != value)
                {
                    _movEstqSegDocSerie = value;
                    OnPropertyChanged("MovEstqSegDocSerie");
                }
            }
        }
        private string _movEstqSegDocSerie;
    
        [DataMember]
        public string MovEstqSegDocNum
        {
            get { return _movEstqSegDocNum; }
            set
            {
                if (_movEstqSegDocNum != value)
                {
                    _movEstqSegDocNum = value;
                    OnPropertyChanged("MovEstqSegDocNum");
                }
            }
        }
        private string _movEstqSegDocNum;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqSegDocData
        {
            get { return _movEstqSegDocData; }
            set
            {
                if (_movEstqSegDocData != value)
                {
                    _movEstqSegDocData = value;
                    OnPropertyChanged("MovEstqSegDocData");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqSegDocData;
    
        [DataMember]
        public Nullable<decimal> MovEstqSegDocVal
        {
            get { return _movEstqSegDocVal; }
            set
            {
                if (_movEstqSegDocVal != value)
                {
                    _movEstqSegDocVal = value;
                    OnPropertyChanged("MovEstqSegDocVal");
                }
            }
        }
        private Nullable<decimal> _movEstqSegDocVal;
    
        [DataMember]
        public string MovEstqSegDocIndEconCod
        {
            get { return _movEstqSegDocIndEconCod; }
            set
            {
                if (_movEstqSegDocIndEconCod != value)
                {
                    _movEstqSegDocIndEconCod = value;
                    OnPropertyChanged("MovEstqSegDocIndEconCod");
                }
            }
        }
        private string _movEstqSegDocIndEconCod;
    
        [DataMember]
        public Nullable<decimal> MovEstqSegDocIndEconCamb
        {
            get { return _movEstqSegDocIndEconCamb; }
            set
            {
                if (_movEstqSegDocIndEconCamb != value)
                {
                    _movEstqSegDocIndEconCamb = value;
                    OnPropertyChanged("MovEstqSegDocIndEconCamb");
                }
            }
        }
        private Nullable<decimal> _movEstqSegDocIndEconCamb;
    
        [DataMember]
        public string MovEstqSegDocCondPagCod
        {
            get { return _movEstqSegDocCondPagCod; }
            set
            {
                if (_movEstqSegDocCondPagCod != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqSegDocCondPagCod", _movEstqSegDocCondPagCod);
                    if (!IsDeserializing)
                    {
                        if (COND_PAG1 != null && COND_PAG1.CondPagCod != value)
                        {
                            COND_PAG1 = null;
                        }
                    }
                    _movEstqSegDocCondPagCod = value;
                    OnPropertyChanged("MovEstqSegDocCondPagCod");
                }
            }
        }
        private string _movEstqSegDocCondPagCod;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqSegDocDataBaseVenc
        {
            get { return _movEstqSegDocDataBaseVenc; }
            set
            {
                if (_movEstqSegDocDataBaseVenc != value)
                {
                    _movEstqSegDocDataBaseVenc = value;
                    OnPropertyChanged("MovEstqSegDocDataBaseVenc");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqSegDocDataBaseVenc;
    
        [DataMember]
        public Nullable<decimal> MovEstqOutraDespDocOrigVal
        {
            get { return _movEstqOutraDespDocOrigVal; }
            set
            {
                if (_movEstqOutraDespDocOrigVal != value)
                {
                    _movEstqOutraDespDocOrigVal = value;
                    OnPropertyChanged("MovEstqOutraDespDocOrigVal");
                }
            }
        }
        private Nullable<decimal> _movEstqOutraDespDocOrigVal;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqDataChegEmp
        {
            get { return _movEstqDataChegEmp; }
            set
            {
                if (_movEstqDataChegEmp != value)
                {
                    _movEstqDataChegEmp = value;
                    OnPropertyChanged("MovEstqDataChegEmp");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqDataChegEmp;
    
        [DataMember]
        public string MovEstqDespachEntCod
        {
            get { return _movEstqDespachEntCod; }
            set
            {
                if (_movEstqDespachEntCod != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqDespachEntCod", _movEstqDespachEntCod);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE != null && ENTIDADE.EntCod != value)
                        {
                            ENTIDADE = null;
                        }
                    }
                    _movEstqDespachEntCod = value;
                    OnPropertyChanged("MovEstqDespachEntCod");
                }
            }
        }
        private string _movEstqDespachEntCod;
    
        [DataMember]
        public string MovEstqDINum
        {
            get { return _movEstqDINum; }
            set
            {
                if (_movEstqDINum != value)
                {
                    _movEstqDINum = value;
                    OnPropertyChanged("MovEstqDINum");
                }
            }
        }
        private string _movEstqDINum;
    
        [DataMember]
        public string MovEstqRefComissaria
        {
            get { return _movEstqRefComissaria; }
            set
            {
                if (_movEstqRefComissaria != value)
                {
                    _movEstqRefComissaria = value;
                    OnPropertyChanged("MovEstqRefComissaria");
                }
            }
        }
        private string _movEstqRefComissaria;
    
        [DataMember]
        public Nullable<decimal> MovEstqValSiscomex
        {
            get { return _movEstqValSiscomex; }
            set
            {
                if (_movEstqValSiscomex != value)
                {
                    _movEstqValSiscomex = value;
                    OnPropertyChanged("MovEstqValSiscomex");
                }
            }
        }
        private Nullable<decimal> _movEstqValSiscomex;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBasePis
        {
            get { return _movEstqValBasePis; }
            set
            {
                if (_movEstqValBasePis != value)
                {
                    _movEstqValBasePis = value;
                    OnPropertyChanged("MovEstqValBasePis");
                }
            }
        }
        private Nullable<decimal> _movEstqValBasePis;
    
        [DataMember]
        public Nullable<decimal> MovEstqValPis
        {
            get { return _movEstqValPis; }
            set
            {
                if (_movEstqValPis != value)
                {
                    _movEstqValPis = value;
                    OnPropertyChanged("MovEstqValPis");
                }
            }
        }
        private Nullable<decimal> _movEstqValPis;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseCofins
        {
            get { return _movEstqValBaseCofins; }
            set
            {
                if (_movEstqValBaseCofins != value)
                {
                    _movEstqValBaseCofins = value;
                    OnPropertyChanged("MovEstqValBaseCofins");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseCofins;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCofins
        {
            get { return _movEstqValCofins; }
            set
            {
                if (_movEstqValCofins != value)
                {
                    _movEstqValCofins = value;
                    OnPropertyChanged("MovEstqValCofins");
                }
            }
        }
        private Nullable<decimal> _movEstqValCofins;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCalcIssDedTot
        {
            get { return _movEstqValCalcIssDedTot; }
            set
            {
                if (_movEstqValCalcIssDedTot != value)
                {
                    _movEstqValCalcIssDedTot = value;
                    OnPropertyChanged("MovEstqValCalcIssDedTot");
                }
            }
        }
        private Nullable<decimal> _movEstqValCalcIssDedTot;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDifIcms
        {
            get { return _movEstqValDifIcms; }
            set
            {
                if (_movEstqValDifIcms != value)
                {
                    _movEstqValDifIcms = value;
                    OnPropertyChanged("MovEstqValDifIcms");
                }
            }
        }
        private Nullable<decimal> _movEstqValDifIcms;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseCsll
        {
            get { return _movEstqValBaseCsll; }
            set
            {
                if (_movEstqValBaseCsll != value)
                {
                    _movEstqValBaseCsll = value;
                    OnPropertyChanged("MovEstqValBaseCsll");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseCsll;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCsllRF
        {
            get { return _movEstqValCsllRF; }
            set
            {
                if (_movEstqValCsllRF != value)
                {
                    _movEstqValCsllRF = value;
                    OnPropertyChanged("MovEstqValCsllRF");
                }
            }
        }
        private Nullable<decimal> _movEstqValCsllRF;
    
        [DataMember]
        public Nullable<decimal> MovEstqPercCsllRF
        {
            get { return _movEstqPercCsllRF; }
            set
            {
                if (_movEstqPercCsllRF != value)
                {
                    _movEstqPercCsllRF = value;
                    OnPropertyChanged("MovEstqPercCsllRF");
                }
            }
        }
        private Nullable<decimal> _movEstqPercCsllRF;
    
        [DataMember]
        public string MovEstqValCsllDedTot
        {
            get { return _movEstqValCsllDedTot; }
            set
            {
                if (_movEstqValCsllDedTot != value)
                {
                    _movEstqValCsllDedTot = value;
                    OnPropertyChanged("MovEstqValCsllDedTot");
                }
            }
        }
        private string _movEstqValCsllDedTot;
    
        [DataMember]
        public Nullable<decimal> MovEstqPercCofinsRF
        {
            get { return _movEstqPercCofinsRF; }
            set
            {
                if (_movEstqPercCofinsRF != value)
                {
                    _movEstqPercCofinsRF = value;
                    OnPropertyChanged("MovEstqPercCofinsRF");
                }
            }
        }
        private Nullable<decimal> _movEstqPercCofinsRF;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCofinsRF
        {
            get { return _movEstqValCofinsRF; }
            set
            {
                if (_movEstqValCofinsRF != value)
                {
                    _movEstqValCofinsRF = value;
                    OnPropertyChanged("MovEstqValCofinsRF");
                }
            }
        }
        private Nullable<decimal> _movEstqValCofinsRF;
    
        [DataMember]
        public string MovEstqValCofinsDedTot
        {
            get { return _movEstqValCofinsDedTot; }
            set
            {
                if (_movEstqValCofinsDedTot != value)
                {
                    _movEstqValCofinsDedTot = value;
                    OnPropertyChanged("MovEstqValCofinsDedTot");
                }
            }
        }
        private string _movEstqValCofinsDedTot;
    
        [DataMember]
        public Nullable<decimal> MovEstqPercPisRF
        {
            get { return _movEstqPercPisRF; }
            set
            {
                if (_movEstqPercPisRF != value)
                {
                    _movEstqPercPisRF = value;
                    OnPropertyChanged("MovEstqPercPisRF");
                }
            }
        }
        private Nullable<decimal> _movEstqPercPisRF;
    
        [DataMember]
        public Nullable<decimal> MovEstqValPisRF
        {
            get { return _movEstqValPisRF; }
            set
            {
                if (_movEstqValPisRF != value)
                {
                    _movEstqValPisRF = value;
                    OnPropertyChanged("MovEstqValPisRF");
                }
            }
        }
        private Nullable<decimal> _movEstqValPisRF;
    
        [DataMember]
        public string MovEstqValPisDedTot
        {
            get { return _movEstqValPisDedTot; }
            set
            {
                if (_movEstqValPisDedTot != value)
                {
                    _movEstqValPisDedTot = value;
                    OnPropertyChanged("MovEstqValPisDedTot");
                }
            }
        }
        private string _movEstqValPisDedTot;
    
        [DataMember]
        public string MovEstqMotResOrcCodDev
        {
            get { return _movEstqMotResOrcCodDev; }
            set
            {
                if (_movEstqMotResOrcCodDev != value)
                {
                    _movEstqMotResOrcCodDev = value;
                    OnPropertyChanged("MovEstqMotResOrcCodDev");
                }
            }
        }
        private string _movEstqMotResOrcCodDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValAtivo
        {
            get { return _movEstqValAtivo; }
            set
            {
                if (_movEstqValAtivo != value)
                {
                    _movEstqValAtivo = value;
                    OnPropertyChanged("MovEstqValAtivo");
                }
            }
        }
        private Nullable<decimal> _movEstqValAtivo;
    
        [DataMember]
        public string USERCodContab
        {
            get { return _uSERCodContab; }
            set
            {
                if (_uSERCodContab != value)
                {
                    _uSERCodContab = value;
                    OnPropertyChanged("USERCodContab");
                }
            }
        }
        private string _uSERCodContab;
    
        [DataMember]
        public string USERNatOperCod
        {
            get { return _uSERNatOperCod; }
            set
            {
                if (_uSERNatOperCod != value)
                {
                    _uSERNatOperCod = value;
                    OnPropertyChanged("USERNatOperCod");
                }
            }
        }
        private string _uSERNatOperCod;
    
        [DataMember]
        public Nullable<decimal> MovEstqRepIcmsDifValDesc
        {
            get { return _movEstqRepIcmsDifValDesc; }
            set
            {
                if (_movEstqRepIcmsDifValDesc != value)
                {
                    _movEstqRepIcmsDifValDesc = value;
                    OnPropertyChanged("MovEstqRepIcmsDifValDesc");
                }
            }
        }
        private Nullable<decimal> _movEstqRepIcmsDifValDesc;
    
        [DataMember]
        public Nullable<decimal> MovEstqRepIcmsRedValDesc
        {
            get { return _movEstqRepIcmsRedValDesc; }
            set
            {
                if (_movEstqRepIcmsRedValDesc != value)
                {
                    _movEstqRepIcmsRedValDesc = value;
                    OnPropertyChanged("MovEstqRepIcmsRedValDesc");
                }
            }
        }
        private Nullable<decimal> _movEstqRepIcmsRedValDesc;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseIcmsPropST
        {
            get { return _movEstqValBaseIcmsPropST; }
            set
            {
                if (_movEstqValBaseIcmsPropST != value)
                {
                    _movEstqValBaseIcmsPropST = value;
                    OnPropertyChanged("MovEstqValBaseIcmsPropST");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseIcmsPropST;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIcmsPropST
        {
            get { return _movEstqValIcmsPropST; }
            set
            {
                if (_movEstqValIcmsPropST != value)
                {
                    _movEstqValIcmsPropST = value;
                    OnPropertyChanged("MovEstqValIcmsPropST");
                }
            }
        }
        private Nullable<decimal> _movEstqValIcmsPropST;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseIcmsSTLista
        {
            get { return _movEstqValBaseIcmsSTLista; }
            set
            {
                if (_movEstqValBaseIcmsSTLista != value)
                {
                    _movEstqValBaseIcmsSTLista = value;
                    OnPropertyChanged("MovEstqValBaseIcmsSTLista");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseIcmsSTLista;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIcmsSTLista
        {
            get { return _movEstqValIcmsSTLista; }
            set
            {
                if (_movEstqValIcmsSTLista != value)
                {
                    _movEstqValIcmsSTLista = value;
                    OnPropertyChanged("MovEstqValIcmsSTLista");
                }
            }
        }
        private Nullable<decimal> _movEstqValIcmsSTLista;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseIcmsSTLucro
        {
            get { return _movEstqValBaseIcmsSTLucro; }
            set
            {
                if (_movEstqValBaseIcmsSTLucro != value)
                {
                    _movEstqValBaseIcmsSTLucro = value;
                    OnPropertyChanged("MovEstqValBaseIcmsSTLucro");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseIcmsSTLucro;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIcmsSTLucro
        {
            get { return _movEstqValIcmsSTLucro; }
            set
            {
                if (_movEstqValIcmsSTLucro != value)
                {
                    _movEstqValIcmsSTLucro = value;
                    OnPropertyChanged("MovEstqValIcmsSTLucro");
                }
            }
        }
        private Nullable<decimal> _movEstqValIcmsSTLucro;
    
        [DataMember]
        public string MovEstqIcmsFreteSomaIcmsST
        {
            get { return _movEstqIcmsFreteSomaIcmsST; }
            set
            {
                if (_movEstqIcmsFreteSomaIcmsST != value)
                {
                    _movEstqIcmsFreteSomaIcmsST = value;
                    OnPropertyChanged("MovEstqIcmsFreteSomaIcmsST");
                }
            }
        }
        private string _movEstqIcmsFreteSomaIcmsST;
    
        [DataMember]
        public Nullable<decimal> MovEstqValMercST
        {
            get { return _movEstqValMercST; }
            set
            {
                if (_movEstqValMercST != value)
                {
                    _movEstqValMercST = value;
                    OnPropertyChanged("MovEstqValMercST");
                }
            }
        }
        private Nullable<decimal> _movEstqValMercST;
    
        [DataMember]
        public Nullable<decimal> MovEstqPesoLiq
        {
            get { return _movEstqPesoLiq; }
            set
            {
                if (_movEstqPesoLiq != value)
                {
                    _movEstqPesoLiq = value;
                    OnPropertyChanged("MovEstqPesoLiq");
                }
            }
        }
        private Nullable<decimal> _movEstqPesoLiq;
    
        [DataMember]
        public Nullable<decimal> MovEstqPesoBruto
        {
            get { return _movEstqPesoBruto; }
            set
            {
                if (_movEstqPesoBruto != value)
                {
                    _movEstqPesoBruto = value;
                    OnPropertyChanged("MovEstqPesoBruto");
                }
            }
        }
        private Nullable<decimal> _movEstqPesoBruto;
    
        [DataMember]
        public string MovEstqRateioFretePorPeso
        {
            get { return _movEstqRateioFretePorPeso; }
            set
            {
                if (_movEstqRateioFretePorPeso != value)
                {
                    _movEstqRateioFretePorPeso = value;
                    OnPropertyChanged("MovEstqRateioFretePorPeso");
                }
            }
        }
        private string _movEstqRateioFretePorPeso;
    
        [DataMember]
        public string USERContratoNum
        {
            get { return _uSERContratoNum; }
            set
            {
                if (_uSERContratoNum != value)
                {
                    _uSERContratoNum = value;
                    OnPropertyChanged("USERContratoNum");
                }
            }
        }
        private string _uSERContratoNum;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCap
        {
            get { return _movEstqValCap; }
            set
            {
                if (_movEstqValCap != value)
                {
                    _movEstqValCap = value;
                    OnPropertyChanged("MovEstqValCap");
                }
            }
        }
        private Nullable<decimal> _movEstqValCap;
    
        [DataMember]
        public string MovEstqRateioCapPorPeso
        {
            get { return _movEstqRateioCapPorPeso; }
            set
            {
                if (_movEstqRateioCapPorPeso != value)
                {
                    _movEstqRateioCapPorPeso = value;
                    OnPropertyChanged("MovEstqRateioCapPorPeso");
                }
            }
        }
        private string _movEstqRateioCapPorPeso;
    
        [DataMember]
        public Nullable<decimal> MovEstqValRecAntIcmsST
        {
            get { return _movEstqValRecAntIcmsST; }
            set
            {
                if (_movEstqValRecAntIcmsST != value)
                {
                    _movEstqValRecAntIcmsST = value;
                    OnPropertyChanged("MovEstqValRecAntIcmsST");
                }
            }
        }
        private Nullable<decimal> _movEstqValRecAntIcmsST;
    
        [DataMember]
        public string MovEstqValPagRecAntIcmsST
        {
            get { return _movEstqValPagRecAntIcmsST; }
            set
            {
                if (_movEstqValPagRecAntIcmsST != value)
                {
                    _movEstqValPagRecAntIcmsST = value;
                    OnPropertyChanged("MovEstqValPagRecAntIcmsST");
                }
            }
        }
        private string _movEstqValPagRecAntIcmsST;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDescIcms
        {
            get { return _movEstqValDescIcms; }
            set
            {
                if (_movEstqValDescIcms != value)
                {
                    _movEstqValDescIcms = value;
                    OnPropertyChanged("MovEstqValDescIcms");
                }
            }
        }
        private Nullable<decimal> _movEstqValDescIcms;
    
        [DataMember]
        public Nullable<decimal> MovEstqValReembolso
        {
            get { return _movEstqValReembolso; }
            set
            {
                if (_movEstqValReembolso != value)
                {
                    _movEstqValReembolso = value;
                    OnPropertyChanged("MovEstqValReembolso");
                }
            }
        }
        private Nullable<decimal> _movEstqValReembolso;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDiferimIcms
        {
            get { return _movEstqValDiferimIcms; }
            set
            {
                if (_movEstqValDiferimIcms != value)
                {
                    _movEstqValDiferimIcms = value;
                    OnPropertyChanged("MovEstqValDiferimIcms");
                }
            }
        }
        private Nullable<decimal> _movEstqValDiferimIcms;
    
        [DataMember]
        public Nullable<decimal> MovEstqValICMSDevido
        {
            get { return _movEstqValICMSDevido; }
            set
            {
                if (_movEstqValICMSDevido != value)
                {
                    _movEstqValICMSDevido = value;
                    OnPropertyChanged("MovEstqValICMSDevido");
                }
            }
        }
        private Nullable<decimal> _movEstqValICMSDevido;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCredPresumICMS
        {
            get { return _movEstqValCredPresumICMS; }
            set
            {
                if (_movEstqValCredPresumICMS != value)
                {
                    _movEstqValCredPresumICMS = value;
                    OnPropertyChanged("MovEstqValCredPresumICMS");
                }
            }
        }
        private Nullable<decimal> _movEstqValCredPresumICMS;
    
        [DataMember]
        public Nullable<decimal> MovEstqValICMSRecolher
        {
            get { return _movEstqValICMSRecolher; }
            set
            {
                if (_movEstqValICMSRecolher != value)
                {
                    _movEstqValICMSRecolher = value;
                    OnPropertyChanged("MovEstqValICMSRecolher");
                }
            }
        }
        private Nullable<decimal> _movEstqValICMSRecolher;
    
        [DataMember]
        public string MovEstqSelec
        {
            get { return _movEstqSelec; }
            set
            {
                if (_movEstqSelec != value)
                {
                    _movEstqSelec = value;
                    OnPropertyChanged("MovEstqSelec");
                }
            }
        }
        private string _movEstqSelec;
    
        [DataMember]
        public string EmpPedVenda
        {
            get { return _empPedVenda; }
            set
            {
                if (_empPedVenda != value)
                {
                    _empPedVenda = value;
                    OnPropertyChanged("EmpPedVenda");
                }
            }
        }
        private string _empPedVenda;
    
        [DataMember]
        public string PedVendaNum
        {
            get { return _pedVendaNum; }
            set
            {
                if (_pedVendaNum != value)
                {
                    _pedVendaNum = value;
                    OnPropertyChanged("PedVendaNum");
                }
            }
        }
        private string _pedVendaNum;
    
        [DataMember]
        public string CtrlProjNum
        {
            get { return _ctrlProjNum; }
            set
            {
                if (_ctrlProjNum != value)
                {
                    _ctrlProjNum = value;
                    OnPropertyChanged("CtrlProjNum");
                }
            }
        }
        private string _ctrlProjNum;
    
        [DataMember]
        public string MatrizCod
        {
            get { return _matrizCod; }
            set
            {
                if (_matrizCod != value)
                {
                    _matrizCod = value;
                    OnPropertyChanged("MatrizCod");
                }
            }
        }
        private string _matrizCod;
    
        [DataMember]
        public string LinhaCod
        {
            get { return _linhaCod; }
            set
            {
                if (_linhaCod != value)
                {
                    _linhaCod = value;
                    OnPropertyChanged("LinhaCod");
                }
            }
        }
        private string _linhaCod;
    
        [DataMember]
        public string ColunaCod
        {
            get { return _colunaCod; }
            set
            {
                if (_colunaCod != value)
                {
                    _colunaCod = value;
                    OnPropertyChanged("ColunaCod");
                }
            }
        }
        private string _colunaCod;
    
        [DataMember]
        public Nullable<int> VerbaCtrlProjSeq
        {
            get { return _verbaCtrlProjSeq; }
            set
            {
                if (_verbaCtrlProjSeq != value)
                {
                    _verbaCtrlProjSeq = value;
                    OnPropertyChanged("VerbaCtrlProjSeq");
                }
            }
        }
        private Nullable<int> _verbaCtrlProjSeq;
    
        [DataMember]
        public string MovEstqGeraFiscal
        {
            get { return _movEstqGeraFiscal; }
            set
            {
                if (_movEstqGeraFiscal != value)
                {
                    _movEstqGeraFiscal = value;
                    OnPropertyChanged("MovEstqGeraFiscal");
                }
            }
        }
        private string _movEstqGeraFiscal;
    
        [DataMember]
        public Nullable<decimal> MovEstqValGlosa
        {
            get { return _movEstqValGlosa; }
            set
            {
                if (_movEstqValGlosa != value)
                {
                    _movEstqValGlosa = value;
                    OnPropertyChanged("MovEstqValGlosa");
                }
            }
        }
        private Nullable<decimal> _movEstqValGlosa;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDocLiq
        {
            get { return _movEstqValDocLiq; }
            set
            {
                if (_movEstqValDocLiq != value)
                {
                    _movEstqValDocLiq = value;
                    OnPropertyChanged("MovEstqValDocLiq");
                }
            }
        }
        private Nullable<decimal> _movEstqValDocLiq;
    
        [DataMember]
        public Nullable<decimal> MovEstqValPedagio
        {
            get { return _movEstqValPedagio; }
            set
            {
                if (_movEstqValPedagio != value)
                {
                    _movEstqValPedagio = value;
                    OnPropertyChanged("MovEstqValPedagio");
                }
            }
        }
        private Nullable<decimal> _movEstqValPedagio;
    
        [DataMember]
        public string MovEstqEntCodEnderEntrega
        {
            get { return _movEstqEntCodEnderEntrega; }
            set
            {
                if (_movEstqEntCodEnderEntrega != value)
                {
                    _movEstqEntCodEnderEntrega = value;
                    OnPropertyChanged("MovEstqEntCodEnderEntrega");
                }
            }
        }
        private string _movEstqEntCodEnderEntrega;
    
        [DataMember]
        public Nullable<short> MovEstqEntCodEnderEntregaSeq
        {
            get { return _movEstqEntCodEnderEntregaSeq; }
            set
            {
                if (_movEstqEntCodEnderEntregaSeq != value)
                {
                    _movEstqEntCodEnderEntregaSeq = value;
                    OnPropertyChanged("MovEstqEntCodEnderEntregaSeq");
                }
            }
        }
        private Nullable<short> _movEstqEntCodEnderEntregaSeq;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseIcmsOper
        {
            get { return _movEstqValBaseIcmsOper; }
            set
            {
                if (_movEstqValBaseIcmsOper != value)
                {
                    _movEstqValBaseIcmsOper = value;
                    OnPropertyChanged("MovEstqValBaseIcmsOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseIcmsOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIcmsOper
        {
            get { return _movEstqValIcmsOper; }
            set
            {
                if (_movEstqValIcmsOper != value)
                {
                    _movEstqValIcmsOper = value;
                    OnPropertyChanged("MovEstqValIcmsOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValIcmsOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqPrecoVendaVarejo
        {
            get { return _movEstqPrecoVendaVarejo; }
            set
            {
                if (_movEstqPrecoVendaVarejo != value)
                {
                    _movEstqPrecoVendaVarejo = value;
                    OnPropertyChanged("MovEstqPrecoVendaVarejo");
                }
            }
        }
        private Nullable<decimal> _movEstqPrecoVendaVarejo;
    
        [DataMember]
        public string MovEstqValOutrDespCompValDoc
        {
            get { return _movEstqValOutrDespCompValDoc; }
            set
            {
                if (_movEstqValOutrDespCompValDoc != value)
                {
                    _movEstqValOutrDespCompValDoc = value;
                    OnPropertyChanged("MovEstqValOutrDespCompValDoc");
                }
            }
        }
        private string _movEstqValOutrDespCompValDoc;
    
        [DataMember]
        public string MovEstqDesabRecalcVal
        {
            get { return _movEstqDesabRecalcVal; }
            set
            {
                if (_movEstqDesabRecalcVal != value)
                {
                    _movEstqDesabRecalcVal = value;
                    OnPropertyChanged("MovEstqDesabRecalcVal");
                }
            }
        }
        private string _movEstqDesabRecalcVal;
    
        [DataMember]
        public Nullable<decimal> MovEstqValSeloCtrl
        {
            get { return _movEstqValSeloCtrl; }
            set
            {
                if (_movEstqValSeloCtrl != value)
                {
                    _movEstqValSeloCtrl = value;
                    OnPropertyChanged("MovEstqValSeloCtrl");
                }
            }
        }
        private Nullable<decimal> _movEstqValSeloCtrl;
    
        [DataMember]
        public string MovEstqDadosAdic
        {
            get { return _movEstqDadosAdic; }
            set
            {
                if (_movEstqDadosAdic != value)
                {
                    _movEstqDadosAdic = value;
                    OnPropertyChanged("MovEstqDadosAdic");
                }
            }
        }
        private string _movEstqDadosAdic;
    
        [DataMember]
        public Nullable<decimal> MovEstqValPisProdRF
        {
            get { return _movEstqValPisProdRF; }
            set
            {
                if (_movEstqValPisProdRF != value)
                {
                    _movEstqValPisProdRF = value;
                    OnPropertyChanged("MovEstqValPisProdRF");
                }
            }
        }
        private Nullable<decimal> _movEstqValPisProdRF;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCofinsProdRF
        {
            get { return _movEstqValCofinsProdRF; }
            set
            {
                if (_movEstqValCofinsProdRF != value)
                {
                    _movEstqValCofinsProdRF = value;
                    OnPropertyChanged("MovEstqValCofinsProdRF");
                }
            }
        }
        private Nullable<decimal> _movEstqValCofinsProdRF;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBasePISRF
        {
            get { return _movEstqValBasePISRF; }
            set
            {
                if (_movEstqValBasePISRF != value)
                {
                    _movEstqValBasePISRF = value;
                    OnPropertyChanged("MovEstqValBasePISRF");
                }
            }
        }
        private Nullable<decimal> _movEstqValBasePISRF;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseCofinsRF
        {
            get { return _movEstqValBaseCofinsRF; }
            set
            {
                if (_movEstqValBaseCofinsRF != value)
                {
                    _movEstqValBaseCofinsRF = value;
                    OnPropertyChanged("MovEstqValBaseCofinsRF");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseCofinsRF;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBasePisProdRF
        {
            get { return _movEstqValBasePisProdRF; }
            set
            {
                if (_movEstqValBasePisProdRF != value)
                {
                    _movEstqValBasePisProdRF = value;
                    OnPropertyChanged("MovEstqValBasePisProdRF");
                }
            }
        }
        private Nullable<decimal> _movEstqValBasePisProdRF;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseCofinsProdRF
        {
            get { return _movEstqValBaseCofinsProdRF; }
            set
            {
                if (_movEstqValBaseCofinsProdRF != value)
                {
                    _movEstqValBaseCofinsProdRF = value;
                    OnPropertyChanged("MovEstqValBaseCofinsProdRF");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseCofinsProdRF;
    
        [DataMember]
        public string MovEstqIndTipoFrete
        {
            get { return _movEstqIndTipoFrete; }
            set
            {
                if (_movEstqIndTipoFrete != value)
                {
                    _movEstqIndTipoFrete = value;
                    OnPropertyChanged("MovEstqIndTipoFrete");
                }
            }
        }
        private string _movEstqIndTipoFrete;
    
        [DataMember]
        public Nullable<decimal> MovEstqPercAcrescFin
        {
            get { return _movEstqPercAcrescFin; }
            set
            {
                if (_movEstqPercAcrescFin != value)
                {
                    _movEstqPercAcrescFin = value;
                    OnPropertyChanged("MovEstqPercAcrescFin");
                }
            }
        }
        private Nullable<decimal> _movEstqPercAcrescFin;
    
        [DataMember]
        public Nullable<decimal> MovEstqValAcrescFin
        {
            get { return _movEstqValAcrescFin; }
            set
            {
                if (_movEstqValAcrescFin != value)
                {
                    _movEstqValAcrescFin = value;
                    OnPropertyChanged("MovEstqValAcrescFin");
                }
            }
        }
        private Nullable<decimal> _movEstqValAcrescFin;
    
        [DataMember]
        public string ConfConhFrtCod
        {
            get { return _confConhFrtCod; }
            set
            {
                if (_confConhFrtCod != value)
                {
                    _confConhFrtCod = value;
                    OnPropertyChanged("ConfConhFrtCod");
                }
            }
        }
        private string _confConhFrtCod;
    
        [DataMember]
        public string MovEstqValPisProdDedTot
        {
            get { return _movEstqValPisProdDedTot; }
            set
            {
                if (_movEstqValPisProdDedTot != value)
                {
                    _movEstqValPisProdDedTot = value;
                    OnPropertyChanged("MovEstqValPisProdDedTot");
                }
            }
        }
        private string _movEstqValPisProdDedTot;
    
        [DataMember]
        public string MovEstqValCofinsProdDedTot
        {
            get { return _movEstqValCofinsProdDedTot; }
            set
            {
                if (_movEstqValCofinsProdDedTot != value)
                {
                    _movEstqValCofinsProdDedTot = value;
                    OnPropertyChanged("MovEstqValCofinsProdDedTot");
                }
            }
        }
        private string _movEstqValCofinsProdDedTot;
    
        [DataMember]
        public Nullable<decimal> MovEstqBaseFunrural
        {
            get { return _movEstqBaseFunrural; }
            set
            {
                if (_movEstqBaseFunrural != value)
                {
                    _movEstqBaseFunrural = value;
                    OnPropertyChanged("MovEstqBaseFunrural");
                }
            }
        }
        private Nullable<decimal> _movEstqBaseFunrural;
    
        [DataMember]
        public Nullable<decimal> MovEstqValFunrural
        {
            get { return _movEstqValFunrural; }
            set
            {
                if (_movEstqValFunrural != value)
                {
                    _movEstqValFunrural = value;
                    OnPropertyChanged("MovEstqValFunrural");
                }
            }
        }
        private Nullable<decimal> _movEstqValFunrural;
    
        [DataMember]
        public string MovEstqValFunruralDedTot
        {
            get { return _movEstqValFunruralDedTot; }
            set
            {
                if (_movEstqValFunruralDedTot != value)
                {
                    _movEstqValFunruralDedTot = value;
                    OnPropertyChanged("MovEstqValFunruralDedTot");
                }
            }
        }
        private string _movEstqValFunruralDedTot;
    
        [DataMember]
        public Nullable<decimal> MovEstqPesoCubado
        {
            get { return _movEstqPesoCubado; }
            set
            {
                if (_movEstqPesoCubado != value)
                {
                    _movEstqPesoCubado = value;
                    OnPropertyChanged("MovEstqPesoCubado");
                }
            }
        }
        private Nullable<decimal> _movEstqPesoCubado;
    
        [DataMember]
        public string MovEstqEntNome
        {
            get { return _movEstqEntNome; }
            set
            {
                if (_movEstqEntNome != value)
                {
                    _movEstqEntNome = value;
                    OnPropertyChanged("MovEstqEntNome");
                }
            }
        }
        private string _movEstqEntNome;
    
        [DataMember]
        public string MovEstqEntCpfCgc
        {
            get { return _movEstqEntCpfCgc; }
            set
            {
                if (_movEstqEntCpfCgc != value)
                {
                    _movEstqEntCpfCgc = value;
                    OnPropertyChanged("MovEstqEntCpfCgc");
                }
            }
        }
        private string _movEstqEntCpfCgc;
    
        [DataMember]
        public string MovEstqRGIE
        {
            get { return _movEstqRGIE; }
            set
            {
                if (_movEstqRGIE != value)
                {
                    _movEstqRGIE = value;
                    OnPropertyChanged("MovEstqRGIE");
                }
            }
        }
        private string _movEstqRGIE;
    
        [DataMember]
        public string MovEstqEntEnder
        {
            get { return _movEstqEntEnder; }
            set
            {
                if (_movEstqEntEnder != value)
                {
                    _movEstqEntEnder = value;
                    OnPropertyChanged("MovEstqEntEnder");
                }
            }
        }
        private string _movEstqEntEnder;
    
        [DataMember]
        public string MovEstqEntEnderNo
        {
            get { return _movEstqEntEnderNo; }
            set
            {
                if (_movEstqEntEnderNo != value)
                {
                    _movEstqEntEnderNo = value;
                    OnPropertyChanged("MovEstqEntEnderNo");
                }
            }
        }
        private string _movEstqEntEnderNo;
    
        [DataMember]
        public string MovEstqEntEnderComp
        {
            get { return _movEstqEntEnderComp; }
            set
            {
                if (_movEstqEntEnderComp != value)
                {
                    _movEstqEntEnderComp = value;
                    OnPropertyChanged("MovEstqEntEnderComp");
                }
            }
        }
        private string _movEstqEntEnderComp;
    
        [DataMember]
        public string MovEstqEntBair
        {
            get { return _movEstqEntBair; }
            set
            {
                if (_movEstqEntBair != value)
                {
                    _movEstqEntBair = value;
                    OnPropertyChanged("MovEstqEntBair");
                }
            }
        }
        private string _movEstqEntBair;
    
        [DataMember]
        public string MovEstqEntInscSuframa
        {
            get { return _movEstqEntInscSuframa; }
            set
            {
                if (_movEstqEntInscSuframa != value)
                {
                    _movEstqEntInscSuframa = value;
                    OnPropertyChanged("MovEstqEntInscSuframa");
                }
            }
        }
        private string _movEstqEntInscSuframa;
    
        [DataMember]
        public string MovEstqCodPais
        {
            get { return _movEstqCodPais; }
            set
            {
                if (_movEstqCodPais != value)
                {
                    _movEstqCodPais = value;
                    OnPropertyChanged("MovEstqCodPais");
                }
            }
        }
        private string _movEstqCodPais;
    
        [DataMember]
        public string MovEstqCidNome
        {
            get { return _movEstqCidNome; }
            set
            {
                if (_movEstqCidNome != value)
                {
                    _movEstqCidNome = value;
                    OnPropertyChanged("MovEstqCidNome");
                }
            }
        }
        private string _movEstqCidNome;
    
        [DataMember]
        public string MovEstqUfSigla
        {
            get { return _movEstqUfSigla; }
            set
            {
                if (_movEstqUfSigla != value)
                {
                    _movEstqUfSigla = value;
                    OnPropertyChanged("MovEstqUfSigla");
                }
            }
        }
        private string _movEstqUfSigla;
    
        [DataMember]
        public string MovEstqCodCid
        {
            get { return _movEstqCodCid; }
            set
            {
                if (_movEstqCodCid != value)
                {
                    _movEstqCodCid = value;
                    OnPropertyChanged("MovEstqCodCid");
                }
            }
        }
        private string _movEstqCodCid;
    
        [DataMember]
        public string MovEstqDeduzPISParc
        {
            get { return _movEstqDeduzPISParc; }
            set
            {
                if (_movEstqDeduzPISParc != value)
                {
                    _movEstqDeduzPISParc = value;
                    OnPropertyChanged("MovEstqDeduzPISParc");
                }
            }
        }
        private string _movEstqDeduzPISParc;
    
        [DataMember]
        public string MovEstqDeduzCofinsParc
        {
            get { return _movEstqDeduzCofinsParc; }
            set
            {
                if (_movEstqDeduzCofinsParc != value)
                {
                    _movEstqDeduzCofinsParc = value;
                    OnPropertyChanged("MovEstqDeduzCofinsParc");
                }
            }
        }
        private string _movEstqDeduzCofinsParc;
    
        [DataMember]
        public string MovEstqDeduzCsllParc
        {
            get { return _movEstqDeduzCsllParc; }
            set
            {
                if (_movEstqDeduzCsllParc != value)
                {
                    _movEstqDeduzCsllParc = value;
                    OnPropertyChanged("MovEstqDeduzCsllParc");
                }
            }
        }
        private string _movEstqDeduzCsllParc;
    
        [DataMember]
        public string MovEstqNatFrete
        {
            get { return _movEstqNatFrete; }
            set
            {
                if (_movEstqNatFrete != value)
                {
                    _movEstqNatFrete = value;
                    OnPropertyChanged("MovEstqNatFrete");
                }
            }
        }
        private string _movEstqNatFrete;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqDataEntrega
        {
            get { return _movEstqDataEntrega; }
            set
            {
                if (_movEstqDataEntrega != value)
                {
                    _movEstqDataEntrega = value;
                    OnPropertyChanged("MovEstqDataEntrega");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqDataEntrega;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDescIcmsZFM
        {
            get { return _movEstqValDescIcmsZFM; }
            set
            {
                if (_movEstqValDescIcmsZFM != value)
                {
                    _movEstqValDescIcmsZFM = value;
                    OnPropertyChanged("MovEstqValDescIcmsZFM");
                }
            }
        }
        private Nullable<decimal> _movEstqValDescIcmsZFM;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDescPisZFM
        {
            get { return _movEstqValDescPisZFM; }
            set
            {
                if (_movEstqValDescPisZFM != value)
                {
                    _movEstqValDescPisZFM = value;
                    OnPropertyChanged("MovEstqValDescPisZFM");
                }
            }
        }
        private Nullable<decimal> _movEstqValDescPisZFM;
    
        [DataMember]
        public Nullable<decimal> MovEstqValDescCofinsZFM
        {
            get { return _movEstqValDescCofinsZFM; }
            set
            {
                if (_movEstqValDescCofinsZFM != value)
                {
                    _movEstqValDescCofinsZFM = value;
                    OnPropertyChanged("MovEstqValDescCofinsZFM");
                }
            }
        }
        private Nullable<decimal> _movEstqValDescCofinsZFM;
    
        [DataMember]
        public string OBJCODESTR
        {
            get { return _oBJCODESTR; }
            set
            {
                if (_oBJCODESTR != value)
                {
                    ChangeTracker.RecordOriginalValue("OBJCODESTR", _oBJCODESTR);
                    if (!IsDeserializing)
                    {
                        if (OBJETO != null && OBJETO.ObjCodEstr != value)
                        {
                            OBJETO = null;
                        }
                    }
                    _oBJCODESTR = value;
                    OnPropertyChanged("OBJCODESTR");
                }
            }
        }
        private string _oBJCODESTR;
    
        [DataMember]
        public string MOVESTQCONFINTEGSIS
        {
            get { return _mOVESTQCONFINTEGSIS; }
            set
            {
                if (_mOVESTQCONFINTEGSIS != value)
                {
                    _mOVESTQCONFINTEGSIS = value;
                    OnPropertyChanged("MOVESTQCONFINTEGSIS");
                }
            }
        }
        private string _mOVESTQCONFINTEGSIS;
    
        [DataMember]
        public Nullable<decimal> MovEstqTxaMarMerc
        {
            get { return _movEstqTxaMarMerc; }
            set
            {
                if (_movEstqTxaMarMerc != value)
                {
                    _movEstqTxaMarMerc = value;
                    OnPropertyChanged("MovEstqTxaMarMerc");
                }
            }
        }
        private Nullable<decimal> _movEstqTxaMarMerc;
    
        [DataMember]
        public string MovEstqRatTxaMarMercPorPeso
        {
            get { return _movEstqRatTxaMarMercPorPeso; }
            set
            {
                if (_movEstqRatTxaMarMercPorPeso != value)
                {
                    _movEstqRatTxaMarMercPorPeso = value;
                    OnPropertyChanged("MovEstqRatTxaMarMercPorPeso");
                }
            }
        }
        private string _movEstqRatTxaMarMercPorPeso;
    
        [DataMember]
        public string MovEstqRatSiscomexPorPeso
        {
            get { return _movEstqRatSiscomexPorPeso; }
            set
            {
                if (_movEstqRatSiscomexPorPeso != value)
                {
                    _movEstqRatSiscomexPorPeso = value;
                    OnPropertyChanged("MovEstqRatSiscomexPorPeso");
                }
            }
        }
        private string _movEstqRatSiscomexPorPeso;
    
        [DataMember]
        public string MovEstqRatDespImportPorPeso
        {
            get { return _movEstqRatDespImportPorPeso; }
            set
            {
                if (_movEstqRatDespImportPorPeso != value)
                {
                    _movEstqRatDespImportPorPeso = value;
                    OnPropertyChanged("MovEstqRatDespImportPorPeso");
                }
            }
        }
        private string _movEstqRatDespImportPorPeso;
    
        [DataMember]
        public string MovEstqCidCodOrig
        {
            get { return _movEstqCidCodOrig; }
            set
            {
                if (_movEstqCidCodOrig != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqCidCodOrig", _movEstqCidCodOrig);
                    if (!IsDeserializing)
                    {
                        if (CIDADE != null && CIDADE.CidCod != value)
                        {
                            CIDADE = null;
                        }
                    }
                    _movEstqCidCodOrig = value;
                    OnPropertyChanged("MovEstqCidCodOrig");
                }
            }
        }
        private string _movEstqCidCodOrig;
    
        [DataMember]
        public string MovEstqCidCodDest
        {
            get { return _movEstqCidCodDest; }
            set
            {
                if (_movEstqCidCodDest != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqCidCodDest", _movEstqCidCodDest);
                    if (!IsDeserializing)
                    {
                        if (CIDADE1 != null && CIDADE1.CidCod != value)
                        {
                            CIDADE1 = null;
                        }
                    }
                    _movEstqCidCodDest = value;
                    OnPropertyChanged("MovEstqCidCodDest");
                }
            }
        }
        private string _movEstqCidCodDest;
    
        [DataMember]
        public string USERFLIPDataCarregDEO
        {
            get { return _uSERFLIPDataCarregDEO; }
            set
            {
                if (_uSERFLIPDataCarregDEO != value)
                {
                    _uSERFLIPDataCarregDEO = value;
                    OnPropertyChanged("USERFLIPDataCarregDEO");
                }
            }
        }
        private string _uSERFLIPDataCarregDEO;
    
        [DataMember]
        public string MovEstqOrigMod
        {
            get { return _movEstqOrigMod; }
            set
            {
                if (_movEstqOrigMod != value)
                {
                    _movEstqOrigMod = value;
                    OnPropertyChanged("MovEstqOrigMod");
                }
            }
        }
        private string _movEstqOrigMod;
    
        [DataMember]
        public decimal MovEstqBaseFCPIcmsDestPart
        {
            get { return _movEstqBaseFCPIcmsDestPart; }
            set
            {
                if (_movEstqBaseFCPIcmsDestPart != value)
                {
                    _movEstqBaseFCPIcmsDestPart = value;
                    OnPropertyChanged("MovEstqBaseFCPIcmsDestPart");
                }
            }
        }
        private decimal _movEstqBaseFCPIcmsDestPart;
    
        [DataMember]
        public Nullable<decimal> MovEstqBaseFCPIcms
        {
            get { return _movEstqBaseFCPIcms; }
            set
            {
                if (_movEstqBaseFCPIcms != value)
                {
                    _movEstqBaseFCPIcms = value;
                    OnPropertyChanged("MovEstqBaseFCPIcms");
                }
            }
        }
        private Nullable<decimal> _movEstqBaseFCPIcms;
    
        [DataMember]
        public Nullable<decimal> MovEstqValFCPIcms
        {
            get { return _movEstqValFCPIcms; }
            set
            {
                if (_movEstqValFCPIcms != value)
                {
                    _movEstqValFCPIcms = value;
                    OnPropertyChanged("MovEstqValFCPIcms");
                }
            }
        }
        private Nullable<decimal> _movEstqValFCPIcms;
    
        [DataMember]
        public Nullable<decimal> MovEstqBaseFCPIcmsST
        {
            get { return _movEstqBaseFCPIcmsST; }
            set
            {
                if (_movEstqBaseFCPIcmsST != value)
                {
                    _movEstqBaseFCPIcmsST = value;
                    OnPropertyChanged("MovEstqBaseFCPIcmsST");
                }
            }
        }
        private Nullable<decimal> _movEstqBaseFCPIcmsST;
    
        [DataMember]
        public Nullable<decimal> MovEstqValFCPIcmsST
        {
            get { return _movEstqValFCPIcmsST; }
            set
            {
                if (_movEstqValFCPIcmsST != value)
                {
                    _movEstqValFCPIcmsST = value;
                    OnPropertyChanged("MovEstqValFCPIcmsST");
                }
            }
        }
        private Nullable<decimal> _movEstqValFCPIcmsST;
    
        [DataMember]
        public string MovEstqCNOCEI
        {
            get { return _movEstqCNOCEI; }
            set
            {
                if (_movEstqCNOCEI != value)
                {
                    _movEstqCNOCEI = value;
                    OnPropertyChanged("MovEstqCNOCEI");
                }
            }
        }
        private string _movEstqCNOCEI;
    
        [DataMember]
        public string CidCodInicPrestServ
        {
            get { return _cidCodInicPrestServ; }
            set
            {
                if (_cidCodInicPrestServ != value)
                {
                    ChangeTracker.RecordOriginalValue("CidCodInicPrestServ", _cidCodInicPrestServ);
                    if (!IsDeserializing)
                    {
                        if (CIDADE2 != null && CIDADE2.CidCod != value)
                        {
                            CIDADE2 = null;
                        }
                    }
                    _cidCodInicPrestServ = value;
                    OnPropertyChanged("CidCodInicPrestServ");
                }
            }
        }
        private string _cidCodInicPrestServ;
    
        [DataMember]
        public string CidCodFinalPrestServ
        {
            get { return _cidCodFinalPrestServ; }
            set
            {
                if (_cidCodFinalPrestServ != value)
                {
                    ChangeTracker.RecordOriginalValue("CidCodFinalPrestServ", _cidCodFinalPrestServ);
                    if (!IsDeserializing)
                    {
                        if (CIDADE3 != null && CIDADE3.CidCod != value)
                        {
                            CIDADE3 = null;
                        }
                    }
                    _cidCodFinalPrestServ = value;
                    OnPropertyChanged("CidCodFinalPrestServ");
                }
            }
        }
        private string _cidCodFinalPrestServ;
    
        [DataMember]
        public Nullable<decimal> MovEstqValServPrestSeg15
        {
            get { return _movEstqValServPrestSeg15; }
            set
            {
                if (_movEstqValServPrestSeg15 != value)
                {
                    _movEstqValServPrestSeg15 = value;
                    OnPropertyChanged("MovEstqValServPrestSeg15");
                }
            }
        }
        private Nullable<decimal> _movEstqValServPrestSeg15;
    
        [DataMember]
        public Nullable<decimal> MovEstqValServPrestSeg20
        {
            get { return _movEstqValServPrestSeg20; }
            set
            {
                if (_movEstqValServPrestSeg20 != value)
                {
                    _movEstqValServPrestSeg20 = value;
                    OnPropertyChanged("MovEstqValServPrestSeg20");
                }
            }
        }
        private Nullable<decimal> _movEstqValServPrestSeg20;
    
        [DataMember]
        public Nullable<decimal> MovEstqValServPrestSeg25
        {
            get { return _movEstqValServPrestSeg25; }
            set
            {
                if (_movEstqValServPrestSeg25 != value)
                {
                    _movEstqValServPrestSeg25 = value;
                    OnPropertyChanged("MovEstqValServPrestSeg25");
                }
            }
        }
        private Nullable<decimal> _movEstqValServPrestSeg25;
    
        [DataMember]
        public Nullable<decimal> MovEstqValAdicServPrestSeg
        {
            get { return _movEstqValAdicServPrestSeg; }
            set
            {
                if (_movEstqValAdicServPrestSeg != value)
                {
                    _movEstqValAdicServPrestSeg = value;
                    OnPropertyChanged("MovEstqValAdicServPrestSeg");
                }
            }
        }
        private Nullable<decimal> _movEstqValAdicServPrestSeg;
    
        [DataMember]
        public Nullable<decimal> MovEstqValAdicNaoRetServ
        {
            get { return _movEstqValAdicNaoRetServ; }
            set
            {
                if (_movEstqValAdicNaoRetServ != value)
                {
                    _movEstqValAdicNaoRetServ = value;
                    OnPropertyChanged("MovEstqValAdicNaoRetServ");
                }
            }
        }
        private Nullable<decimal> _movEstqValAdicNaoRetServ;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseInssNaoDev
        {
            get { return _movEstqValBaseInssNaoDev; }
            set
            {
                if (_movEstqValBaseInssNaoDev != value)
                {
                    _movEstqValBaseInssNaoDev = value;
                    OnPropertyChanged("MovEstqValBaseInssNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseInssNaoDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValInssNaoDev
        {
            get { return _movEstqValInssNaoDev; }
            set
            {
                if (_movEstqValInssNaoDev != value)
                {
                    _movEstqValInssNaoDev = value;
                    OnPropertyChanged("MovEstqValInssNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValInssNaoDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseIrrfNaoDev
        {
            get { return _movEstqValBaseIrrfNaoDev; }
            set
            {
                if (_movEstqValBaseIrrfNaoDev != value)
                {
                    _movEstqValBaseIrrfNaoDev = value;
                    OnPropertyChanged("MovEstqValBaseIrrfNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseIrrfNaoDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIrrfNaoDev
        {
            get { return _movEstqValIrrfNaoDev; }
            set
            {
                if (_movEstqValIrrfNaoDev != value)
                {
                    _movEstqValIrrfNaoDev = value;
                    OnPropertyChanged("MovEstqValIrrfNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValIrrfNaoDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBasePisNaoDev
        {
            get { return _movEstqValBasePisNaoDev; }
            set
            {
                if (_movEstqValBasePisNaoDev != value)
                {
                    _movEstqValBasePisNaoDev = value;
                    OnPropertyChanged("MovEstqValBasePisNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValBasePisNaoDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValPisNaoDev
        {
            get { return _movEstqValPisNaoDev; }
            set
            {
                if (_movEstqValPisNaoDev != value)
                {
                    _movEstqValPisNaoDev = value;
                    OnPropertyChanged("MovEstqValPisNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValPisNaoDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseCofinsNaoDev
        {
            get { return _movEstqValBaseCofinsNaoDev; }
            set
            {
                if (_movEstqValBaseCofinsNaoDev != value)
                {
                    _movEstqValBaseCofinsNaoDev = value;
                    OnPropertyChanged("MovEstqValBaseCofinsNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseCofinsNaoDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCofinsNaoDev
        {
            get { return _movEstqValCofinsNaoDev; }
            set
            {
                if (_movEstqValCofinsNaoDev != value)
                {
                    _movEstqValCofinsNaoDev = value;
                    OnPropertyChanged("MovEstqValCofinsNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValCofinsNaoDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseCsllNaoDev
        {
            get { return _movEstqValBaseCsllNaoDev; }
            set
            {
                if (_movEstqValBaseCsllNaoDev != value)
                {
                    _movEstqValBaseCsllNaoDev = value;
                    OnPropertyChanged("MovEstqValBaseCsllNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseCsllNaoDev;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCsllNaoDev
        {
            get { return _movEstqValCsllNaoDev; }
            set
            {
                if (_movEstqValCsllNaoDev != value)
                {
                    _movEstqValCsllNaoDev = value;
                    OnPropertyChanged("MovEstqValCsllNaoDev");
                }
            }
        }
        private Nullable<decimal> _movEstqValCsllNaoDev;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqDataCompet
        {
            get { return _movEstqDataCompet; }
            set
            {
                if (_movEstqDataCompet != value)
                {
                    _movEstqDataCompet = value;
                    OnPropertyChanged("MovEstqDataCompet");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqDataCompet;
    
        [DataMember]
        public string MovEstqNFEmisProp
        {
            get { return _movEstqNFEmisProp; }
            set
            {
                if (_movEstqNFEmisProp != value)
                {
                    _movEstqNFEmisProp = value;
                    OnPropertyChanged("MovEstqNFEmisProp");
                }
            }
        }
        private string _movEstqNFEmisProp;
    
        [DataMember]
        public Nullable<decimal> MovEstqValRetFCPIcmsST
        {
            get { return _movEstqValRetFCPIcmsST; }
            set
            {
                if (_movEstqValRetFCPIcmsST != value)
                {
                    _movEstqValRetFCPIcmsST = value;
                    OnPropertyChanged("MovEstqValRetFCPIcmsST");
                }
            }
        }
        private Nullable<decimal> _movEstqValRetFCPIcmsST;
    
        [DataMember]
        public string MovEstqOper
        {
            get { return _movEstqOper; }
            set
            {
                if (_movEstqOper != value)
                {
                    _movEstqOper = value;
                    OnPropertyChanged("MovEstqOper");
                }
            }
        }
        private string _movEstqOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseIIOper
        {
            get { return _movEstqValBaseIIOper; }
            set
            {
                if (_movEstqValBaseIIOper != value)
                {
                    _movEstqValBaseIIOper = value;
                    OnPropertyChanged("MovEstqValBaseIIOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseIIOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIIOper
        {
            get { return _movEstqValIIOper; }
            set
            {
                if (_movEstqValIIOper != value)
                {
                    _movEstqValIIOper = value;
                    OnPropertyChanged("MovEstqValIIOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValIIOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseIPIOper
        {
            get { return _movEstqValBaseIPIOper; }
            set
            {
                if (_movEstqValBaseIPIOper != value)
                {
                    _movEstqValBaseIPIOper = value;
                    OnPropertyChanged("MovEstqValBaseIPIOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseIPIOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqValIPIOper
        {
            get { return _movEstqValIPIOper; }
            set
            {
                if (_movEstqValIPIOper != value)
                {
                    _movEstqValIPIOper = value;
                    OnPropertyChanged("MovEstqValIPIOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValIPIOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBasePisOper
        {
            get { return _movEstqValBasePisOper; }
            set
            {
                if (_movEstqValBasePisOper != value)
                {
                    _movEstqValBasePisOper = value;
                    OnPropertyChanged("MovEstqValBasePisOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValBasePisOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqValPisOper
        {
            get { return _movEstqValPisOper; }
            set
            {
                if (_movEstqValPisOper != value)
                {
                    _movEstqValPisOper = value;
                    OnPropertyChanged("MovEstqValPisOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValPisOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqValBaseCofinsOper
        {
            get { return _movEstqValBaseCofinsOper; }
            set
            {
                if (_movEstqValBaseCofinsOper != value)
                {
                    _movEstqValBaseCofinsOper = value;
                    OnPropertyChanged("MovEstqValBaseCofinsOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValBaseCofinsOper;
    
        [DataMember]
        public Nullable<decimal> MovEstqValCofinsOper
        {
            get { return _movEstqValCofinsOper; }
            set
            {
                if (_movEstqValCofinsOper != value)
                {
                    _movEstqValCofinsOper = value;
                    OnPropertyChanged("MovEstqValCofinsOper");
                }
            }
        }
        private Nullable<decimal> _movEstqValCofinsOper;
    
        [DataMember]
        public string USERChaveCTePrincipal
        {
            get { return _uSERChaveCTePrincipal; }
            set
            {
                if (_uSERChaveCTePrincipal != value)
                {
                    _uSERChaveCTePrincipal = value;
                    OnPropertyChanged("USERChaveCTePrincipal");
                }
            }
        }
        private string _uSERChaveCTePrincipal;
    
        [DataMember]
        public string CtrlComisVendNum
        {
            get { return _ctrlComisVendNum; }
            set
            {
                if (_ctrlComisVendNum != value)
                {
                    _ctrlComisVendNum = value;
                    OnPropertyChanged("CtrlComisVendNum");
                }
            }
        }
        private string _ctrlComisVendNum;
    
        [DataMember]
        public string MovEstqDocHomologado
        {
            get { return _movEstqDocHomologado; }
            set
            {
                if (_movEstqDocHomologado != value)
                {
                    _movEstqDocHomologado = value;
                    OnPropertyChanged("MovEstqDocHomologado");
                }
            }
        }
        private string _movEstqDocHomologado;
    
        [DataMember]
        public Nullable<int> IdGerencProj
        {
            get { return _idGerencProj; }
            set
            {
                if (_idGerencProj != value)
                {
                    _idGerencProj = value;
                    OnPropertyChanged("IdGerencProj");
                }
            }
        }
        private Nullable<int> _idGerencProj;
    
        [DataMember]
        public Nullable<int> IdVerbaGerencProj
        {
            get { return _idVerbaGerencProj; }
            set
            {
                if (_idVerbaGerencProj != value)
                {
                    _idVerbaGerencProj = value;
                    OnPropertyChanged("IdVerbaGerencProj");
                }
            }
        }
        private Nullable<int> _idVerbaGerencProj;
    
        [DataMember]
        public Nullable<short> USERNumFluig
        {
            get { return _uSERNumFluig; }
            set
            {
                if (_uSERNumFluig != value)
                {
                    _uSERNumFluig = value;
                    OnPropertyChanged("USERNumFluig");
                }
            }
        }
        private Nullable<short> _uSERNumFluig;
    
        [DataMember]
        public string USERPreDigitadoFluig
        {
            get { return _uSERPreDigitadoFluig; }
            set
            {
                if (_uSERPreDigitadoFluig != value)
                {
                    _uSERPreDigitadoFluig = value;
                    OnPropertyChanged("USERPreDigitadoFluig");
                }
            }
        }
        private string _uSERPreDigitadoFluig;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CIDADE CIDADE
        {
            get { return _cIDADE; }
            set
            {
                if (!ReferenceEquals(_cIDADE, value))
                {
                    var previousValue = _cIDADE;
                    _cIDADE = value;
                    FixupCIDADE(previousValue);
                    OnNavigationPropertyChanged("CIDADE");
                }
            }
        }
        private CIDADE _cIDADE;
    
        [DataMember]
        public CIDADE CIDADE1
        {
            get { return _cIDADE1; }
            set
            {
                if (!ReferenceEquals(_cIDADE1, value))
                {
                    var previousValue = _cIDADE1;
                    _cIDADE1 = value;
                    FixupCIDADE1(previousValue);
                    OnNavigationPropertyChanged("CIDADE1");
                }
            }
        }
        private CIDADE _cIDADE1;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL
        {
            get { return _eMPRESA_FILIAL; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL, value))
                {
                    var previousValue = _eMPRESA_FILIAL;
                    _eMPRESA_FILIAL = value;
                    FixupEMPRESA_FILIAL(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL1
        {
            get { return _eMPRESA_FILIAL1; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eMPRESA_FILIAL1;
                    _eMPRESA_FILIAL1 = value;
                    FixupEMPRESA_FILIAL1(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL1");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL1;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL2
        {
            get { return _eMPRESA_FILIAL2; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL2, value))
                {
                    var previousValue = _eMPRESA_FILIAL2;
                    _eMPRESA_FILIAL2 = value;
                    FixupEMPRESA_FILIAL2(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL2");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL2;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL3
        {
            get { return _eMPRESA_FILIAL3; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL3, value))
                {
                    var previousValue = _eMPRESA_FILIAL3;
                    _eMPRESA_FILIAL3 = value;
                    FixupEMPRESA_FILIAL3(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL3");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL3;
    
        [DataMember]
        public TrackableCollection<ICMS_MOV_ESTQ> ICMS_MOV_ESTQ
        {
            get
            {
                if (_iCMS_MOV_ESTQ == null)
                {
                    _iCMS_MOV_ESTQ = new TrackableCollection<ICMS_MOV_ESTQ>();
                    _iCMS_MOV_ESTQ.CollectionChanged += FixupICMS_MOV_ESTQ;
                }
                return _iCMS_MOV_ESTQ;
            }
            set
            {
                if (!ReferenceEquals(_iCMS_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iCMS_MOV_ESTQ != null)
                    {
                        _iCMS_MOV_ESTQ.CollectionChanged -= FixupICMS_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ICMS_MOV_ESTQ item in _iCMS_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _iCMS_MOV_ESTQ = value;
                    if (_iCMS_MOV_ESTQ != null)
                    {
                        _iCMS_MOV_ESTQ.CollectionChanged += FixupICMS_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ICMS_MOV_ESTQ item in _iCMS_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ICMS_MOV_ESTQ");
                }
            }
        }
        private TrackableCollection<ICMS_MOV_ESTQ> _iCMS_MOV_ESTQ;
    
        [DataMember]
        public TrackableCollection<MOV_ESTQ> MOV_ESTQ1
        {
            get
            {
                if (_mOV_ESTQ1 == null)
                {
                    _mOV_ESTQ1 = new TrackableCollection<MOV_ESTQ>();
                    _mOV_ESTQ1.CollectionChanged += FixupMOV_ESTQ1;
                }
                return _mOV_ESTQ1;
            }
            set
            {
                if (!ReferenceEquals(_mOV_ESTQ1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_mOV_ESTQ1 != null)
                    {
                        _mOV_ESTQ1.CollectionChanged -= FixupMOV_ESTQ1;
                    }
                    _mOV_ESTQ1 = value;
                    if (_mOV_ESTQ1 != null)
                    {
                        _mOV_ESTQ1.CollectionChanged += FixupMOV_ESTQ1;
                    }
                    OnNavigationPropertyChanged("MOV_ESTQ1");
                }
            }
        }
        private TrackableCollection<MOV_ESTQ> _mOV_ESTQ1;
    
        [DataMember]
        public MOV_ESTQ MOV_ESTQ2
        {
            get { return _mOV_ESTQ2; }
            set
            {
                if (!ReferenceEquals(_mOV_ESTQ2, value))
                {
                    var previousValue = _mOV_ESTQ2;
                    _mOV_ESTQ2 = value;
                    FixupMOV_ESTQ2(previousValue);
                    OnNavigationPropertyChanged("MOV_ESTQ2");
                }
            }
        }
        private MOV_ESTQ _mOV_ESTQ2;
    
        [DataMember]
        public TrackableCollection<MOV_ESTQ_CCTRL> MOV_ESTQ_CCTRL
        {
            get
            {
                if (_mOV_ESTQ_CCTRL == null)
                {
                    _mOV_ESTQ_CCTRL = new TrackableCollection<MOV_ESTQ_CCTRL>();
                    _mOV_ESTQ_CCTRL.CollectionChanged += FixupMOV_ESTQ_CCTRL;
                }
                return _mOV_ESTQ_CCTRL;
            }
            set
            {
                if (!ReferenceEquals(_mOV_ESTQ_CCTRL, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_mOV_ESTQ_CCTRL != null)
                    {
                        _mOV_ESTQ_CCTRL.CollectionChanged -= FixupMOV_ESTQ_CCTRL;
                    }
                    _mOV_ESTQ_CCTRL = value;
                    if (_mOV_ESTQ_CCTRL != null)
                    {
                        _mOV_ESTQ_CCTRL.CollectionChanged += FixupMOV_ESTQ_CCTRL;
                    }
                    OnNavigationPropertyChanged("MOV_ESTQ_CCTRL");
                }
            }
        }
        private TrackableCollection<MOV_ESTQ_CCTRL> _mOV_ESTQ_CCTRL;
    
        [DataMember]
        public TrackableCollection<MOV_ESTQ_CLASSE_REC_DESP> MOV_ESTQ_CLASSE_REC_DESP
        {
            get
            {
                if (_mOV_ESTQ_CLASSE_REC_DESP == null)
                {
                    _mOV_ESTQ_CLASSE_REC_DESP = new TrackableCollection<MOV_ESTQ_CLASSE_REC_DESP>();
                    _mOV_ESTQ_CLASSE_REC_DESP.CollectionChanged += FixupMOV_ESTQ_CLASSE_REC_DESP;
                }
                return _mOV_ESTQ_CLASSE_REC_DESP;
            }
            set
            {
                if (!ReferenceEquals(_mOV_ESTQ_CLASSE_REC_DESP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_mOV_ESTQ_CLASSE_REC_DESP != null)
                    {
                        _mOV_ESTQ_CLASSE_REC_DESP.CollectionChanged -= FixupMOV_ESTQ_CLASSE_REC_DESP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (MOV_ESTQ_CLASSE_REC_DESP item in _mOV_ESTQ_CLASSE_REC_DESP)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _mOV_ESTQ_CLASSE_REC_DESP = value;
                    if (_mOV_ESTQ_CLASSE_REC_DESP != null)
                    {
                        _mOV_ESTQ_CLASSE_REC_DESP.CollectionChanged += FixupMOV_ESTQ_CLASSE_REC_DESP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (MOV_ESTQ_CLASSE_REC_DESP item in _mOV_ESTQ_CLASSE_REC_DESP)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("MOV_ESTQ_CLASSE_REC_DESP");
                }
            }
        }
        private TrackableCollection<MOV_ESTQ_CLASSE_REC_DESP> _mOV_ESTQ_CLASSE_REC_DESP;
    
        [DataMember]
        public TrackableCollection<PARC_PAG_MOV_ESTQ> PARC_PAG_MOV_ESTQ
        {
            get
            {
                if (_pARC_PAG_MOV_ESTQ == null)
                {
                    _pARC_PAG_MOV_ESTQ = new TrackableCollection<PARC_PAG_MOV_ESTQ>();
                    _pARC_PAG_MOV_ESTQ.CollectionChanged += FixupPARC_PAG_MOV_ESTQ;
                }
                return _pARC_PAG_MOV_ESTQ;
            }
            set
            {
                if (!ReferenceEquals(_pARC_PAG_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pARC_PAG_MOV_ESTQ != null)
                    {
                        _pARC_PAG_MOV_ESTQ.CollectionChanged -= FixupPARC_PAG_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (PARC_PAG_MOV_ESTQ item in _pARC_PAG_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _pARC_PAG_MOV_ESTQ = value;
                    if (_pARC_PAG_MOV_ESTQ != null)
                    {
                        _pARC_PAG_MOV_ESTQ.CollectionChanged += FixupPARC_PAG_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (PARC_PAG_MOV_ESTQ item in _pARC_PAG_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PARC_PAG_MOV_ESTQ");
                }
            }
        }
        private TrackableCollection<PARC_PAG_MOV_ESTQ> _pARC_PAG_MOV_ESTQ;
    
        [DataMember]
        public TrackableCollection<RATEIO_MOV_ESTQ> RATEIO_MOV_ESTQ
        {
            get
            {
                if (_rATEIO_MOV_ESTQ == null)
                {
                    _rATEIO_MOV_ESTQ = new TrackableCollection<RATEIO_MOV_ESTQ>();
                    _rATEIO_MOV_ESTQ.CollectionChanged += FixupRATEIO_MOV_ESTQ;
                }
                return _rATEIO_MOV_ESTQ;
            }
            set
            {
                if (!ReferenceEquals(_rATEIO_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rATEIO_MOV_ESTQ != null)
                    {
                        _rATEIO_MOV_ESTQ.CollectionChanged -= FixupRATEIO_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RATEIO_MOV_ESTQ item in _rATEIO_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rATEIO_MOV_ESTQ = value;
                    if (_rATEIO_MOV_ESTQ != null)
                    {
                        _rATEIO_MOV_ESTQ.CollectionChanged += FixupRATEIO_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RATEIO_MOV_ESTQ item in _rATEIO_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RATEIO_MOV_ESTQ");
                }
            }
        }
        private TrackableCollection<RATEIO_MOV_ESTQ> _rATEIO_MOV_ESTQ;
    
        [DataMember]
        public ENTIDADE ENTIDADE
        {
            get { return _eNTIDADE; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE, value))
                {
                    var previousValue = _eNTIDADE;
                    _eNTIDADE = value;
                    FixupENTIDADE(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE");
                }
            }
        }
        private ENTIDADE _eNTIDADE;
    
        [DataMember]
        public ENTIDADE ENTIDADE1
        {
            get { return _eNTIDADE1; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE1, value))
                {
                    var previousValue = _eNTIDADE1;
                    _eNTIDADE1 = value;
                    FixupENTIDADE1(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE1");
                }
            }
        }
        private ENTIDADE _eNTIDADE1;
    
        [DataMember]
        public ENTIDADE ENTIDADE2
        {
            get { return _eNTIDADE2; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE2, value))
                {
                    var previousValue = _eNTIDADE2;
                    _eNTIDADE2 = value;
                    FixupENTIDADE2(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE2");
                }
            }
        }
        private ENTIDADE _eNTIDADE2;
    
        [DataMember]
        public ENTIDADE ENTIDADE3
        {
            get { return _eNTIDADE3; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE3, value))
                {
                    var previousValue = _eNTIDADE3;
                    _eNTIDADE3 = value;
                    FixupENTIDADE3(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE3");
                }
            }
        }
        private ENTIDADE _eNTIDADE3;
    
        [DataMember]
        public ENTIDADE ENTIDADE4
        {
            get { return _eNTIDADE4; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE4, value))
                {
                    var previousValue = _eNTIDADE4;
                    _eNTIDADE4 = value;
                    FixupENTIDADE4(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE4");
                }
            }
        }
        private ENTIDADE _eNTIDADE4;
    
        [DataMember]
        public TrackableCollection<DOC_FIN> DOC_FIN
        {
            get
            {
                if (_dOC_FIN == null)
                {
                    _dOC_FIN = new TrackableCollection<DOC_FIN>();
                    _dOC_FIN.CollectionChanged += FixupDOC_FIN;
                }
                return _dOC_FIN;
            }
            set
            {
                if (!ReferenceEquals(_dOC_FIN, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dOC_FIN != null)
                    {
                        _dOC_FIN.CollectionChanged -= FixupDOC_FIN;
                    }
                    _dOC_FIN = value;
                    if (_dOC_FIN != null)
                    {
                        _dOC_FIN.CollectionChanged += FixupDOC_FIN;
                    }
                    OnNavigationPropertyChanged("DOC_FIN");
                }
            }
        }
        private TrackableCollection<DOC_FIN> _dOC_FIN;
    
        [DataMember]
        public CIDADE CIDADE2
        {
            get { return _cIDADE2; }
            set
            {
                if (!ReferenceEquals(_cIDADE2, value))
                {
                    var previousValue = _cIDADE2;
                    _cIDADE2 = value;
                    FixupCIDADE2(previousValue);
                    OnNavigationPropertyChanged("CIDADE2");
                }
            }
        }
        private CIDADE _cIDADE2;
    
        [DataMember]
        public CIDADE CIDADE3
        {
            get { return _cIDADE3; }
            set
            {
                if (!ReferenceEquals(_cIDADE3, value))
                {
                    var previousValue = _cIDADE3;
                    _cIDADE3 = value;
                    FixupCIDADE3(previousValue);
                    OnNavigationPropertyChanged("CIDADE3");
                }
            }
        }
        private CIDADE _cIDADE3;
    
        [DataMember]
        public NAT_OPERACAO NAT_OPERACAO
        {
            get { return _nAT_OPERACAO; }
            set
            {
                if (!ReferenceEquals(_nAT_OPERACAO, value))
                {
                    var previousValue = _nAT_OPERACAO;
                    _nAT_OPERACAO = value;
                    FixupNAT_OPERACAO(previousValue);
                    OnNavigationPropertyChanged("NAT_OPERACAO");
                }
            }
        }
        private NAT_OPERACAO _nAT_OPERACAO;
    
        [DataMember]
        public COND_PAG COND_PAG
        {
            get { return _cOND_PAG; }
            set
            {
                if (!ReferenceEquals(_cOND_PAG, value))
                {
                    var previousValue = _cOND_PAG;
                    _cOND_PAG = value;
                    FixupCOND_PAG(previousValue);
                    OnNavigationPropertyChanged("COND_PAG");
                }
            }
        }
        private COND_PAG _cOND_PAG;
    
        [DataMember]
        public COND_PAG COND_PAG1
        {
            get { return _cOND_PAG1; }
            set
            {
                if (!ReferenceEquals(_cOND_PAG1, value))
                {
                    var previousValue = _cOND_PAG1;
                    _cOND_PAG1 = value;
                    FixupCOND_PAG1(previousValue);
                    OnNavigationPropertyChanged("COND_PAG1");
                }
            }
        }
        private COND_PAG _cOND_PAG1;
    
        [DataMember]
        public COND_PAG COND_PAG2
        {
            get { return _cOND_PAG2; }
            set
            {
                if (!ReferenceEquals(_cOND_PAG2, value))
                {
                    var previousValue = _cOND_PAG2;
                    _cOND_PAG2 = value;
                    FixupCOND_PAG2(previousValue);
                    OnNavigationPropertyChanged("COND_PAG2");
                }
            }
        }
        private COND_PAG _cOND_PAG2;
    
        [DataMember]
        public OBJETO OBJETO
        {
            get { return _oBJETO; }
            set
            {
                if (!ReferenceEquals(_oBJETO, value))
                {
                    var previousValue = _oBJETO;
                    _oBJETO = value;
                    FixupOBJETO(previousValue);
                    OnNavigationPropertyChanged("OBJETO");
                }
            }
        }
        private OBJETO _oBJETO;
    
        [DataMember]
        public TrackableCollection<ITEM_MOV_ESTQ> ITEM_MOV_ESTQ
        {
            get
            {
                if (_iTEM_MOV_ESTQ == null)
                {
                    _iTEM_MOV_ESTQ = new TrackableCollection<ITEM_MOV_ESTQ>();
                    _iTEM_MOV_ESTQ.CollectionChanged += FixupITEM_MOV_ESTQ;
                }
                return _iTEM_MOV_ESTQ;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_MOV_ESTQ != null)
                    {
                        _iTEM_MOV_ESTQ.CollectionChanged -= FixupITEM_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ITEM_MOV_ESTQ item in _iTEM_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _iTEM_MOV_ESTQ = value;
                    if (_iTEM_MOV_ESTQ != null)
                    {
                        _iTEM_MOV_ESTQ.CollectionChanged += FixupITEM_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ITEM_MOV_ESTQ item in _iTEM_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ITEM_MOV_ESTQ");
                }
            }
        }
        private TrackableCollection<ITEM_MOV_ESTQ> _iTEM_MOV_ESTQ;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CIDADE = null;
            CIDADE1 = null;
            EMPRESA_FILIAL = null;
            EMPRESA_FILIAL1 = null;
            EMPRESA_FILIAL2 = null;
            EMPRESA_FILIAL3 = null;
            ICMS_MOV_ESTQ.Clear();
            MOV_ESTQ1.Clear();
            MOV_ESTQ2 = null;
            MOV_ESTQ_CCTRL.Clear();
            MOV_ESTQ_CLASSE_REC_DESP.Clear();
            PARC_PAG_MOV_ESTQ.Clear();
            RATEIO_MOV_ESTQ.Clear();
            ENTIDADE = null;
            ENTIDADE1 = null;
            ENTIDADE2 = null;
            ENTIDADE3 = null;
            ENTIDADE4 = null;
            DOC_FIN.Clear();
            CIDADE2 = null;
            CIDADE3 = null;
            NAT_OPERACAO = null;
            COND_PAG = null;
            COND_PAG1 = null;
            COND_PAG2 = null;
            OBJETO = null;
            ITEM_MOV_ESTQ.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCIDADE(CIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ.Contains(this))
            {
                previousValue.MOV_ESTQ.Remove(this);
            }
    
            if (CIDADE != null)
            {
                if (!CIDADE.MOV_ESTQ.Contains(this))
                {
                    CIDADE.MOV_ESTQ.Add(this);
                }
    
                MovEstqCidCodOrig = CIDADE.CidCod;
            }
            else if (!skipKeys)
            {
                MovEstqCidCodOrig = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CIDADE")
                    && (ChangeTracker.OriginalValues["CIDADE"] == CIDADE))
                {
                    ChangeTracker.OriginalValues.Remove("CIDADE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CIDADE", previousValue);
                }
                if (CIDADE != null && !CIDADE.ChangeTracker.ChangeTrackingEnabled)
                {
                    CIDADE.StartTracking();
                }
            }
        }
    
        private void FixupCIDADE1(CIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ1.Contains(this))
            {
                previousValue.MOV_ESTQ1.Remove(this);
            }
    
            if (CIDADE1 != null)
            {
                if (!CIDADE1.MOV_ESTQ1.Contains(this))
                {
                    CIDADE1.MOV_ESTQ1.Add(this);
                }
    
                MovEstqCidCodDest = CIDADE1.CidCod;
            }
            else if (!skipKeys)
            {
                MovEstqCidCodDest = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CIDADE1")
                    && (ChangeTracker.OriginalValues["CIDADE1"] == CIDADE1))
                {
                    ChangeTracker.OriginalValues.Remove("CIDADE1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CIDADE1", previousValue);
                }
                if (CIDADE1 != null && !CIDADE1.ChangeTracker.ChangeTrackingEnabled)
                {
                    CIDADE1.StartTracking();
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ.Contains(this))
            {
                previousValue.MOV_ESTQ.Remove(this);
            }
    
            if (EMPRESA_FILIAL != null)
            {
                if (!EMPRESA_FILIAL.MOV_ESTQ.Contains(this))
                {
                    EMPRESA_FILIAL.MOV_ESTQ.Add(this);
                }
    
                MovEstqDocEmpCod = EMPRESA_FILIAL.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL"] == EMPRESA_FILIAL))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL", previousValue);
                }
                if (EMPRESA_FILIAL != null && !EMPRESA_FILIAL.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL.StartTracking();
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL1(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ1.Contains(this))
            {
                previousValue.MOV_ESTQ1.Remove(this);
            }
    
            if (EMPRESA_FILIAL1 != null)
            {
                if (!EMPRESA_FILIAL1.MOV_ESTQ1.Contains(this))
                {
                    EMPRESA_FILIAL1.MOV_ESTQ1.Add(this);
                }
    
                EmpCod = EMPRESA_FILIAL1.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL1")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL1"] == EMPRESA_FILIAL1))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL1", previousValue);
                }
                if (EMPRESA_FILIAL1 != null && !EMPRESA_FILIAL1.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL1.StartTracking();
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL2(EMPRESA_FILIAL previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ2.Contains(this))
            {
                previousValue.MOV_ESTQ2.Remove(this);
            }
    
            if (EMPRESA_FILIAL2 != null)
            {
                if (!EMPRESA_FILIAL2.MOV_ESTQ2.Contains(this))
                {
                    EMPRESA_FILIAL2.MOV_ESTQ2.Add(this);
                }
    
                MovEstqEmpOrig = EMPRESA_FILIAL2.EmpCod;
            }
            else if (!skipKeys)
            {
                MovEstqEmpOrig = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL2")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL2"] == EMPRESA_FILIAL2))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL2", previousValue);
                }
                if (EMPRESA_FILIAL2 != null && !EMPRESA_FILIAL2.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL2.StartTracking();
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL3(EMPRESA_FILIAL previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ3.Contains(this))
            {
                previousValue.MOV_ESTQ3.Remove(this);
            }
    
            if (EMPRESA_FILIAL3 != null)
            {
                if (!EMPRESA_FILIAL3.MOV_ESTQ3.Contains(this))
                {
                    EMPRESA_FILIAL3.MOV_ESTQ3.Add(this);
                }
    
                MovEstqEmpDest = EMPRESA_FILIAL3.EmpCod;
            }
            else if (!skipKeys)
            {
                MovEstqEmpDest = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL3")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL3"] == EMPRESA_FILIAL3))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL3");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL3", previousValue);
                }
                if (EMPRESA_FILIAL3 != null && !EMPRESA_FILIAL3.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL3.StartTracking();
                }
            }
        }
    
        private void FixupMOV_ESTQ2(MOV_ESTQ previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ1.Contains(this))
            {
                previousValue.MOV_ESTQ1.Remove(this);
            }
    
            if (MOV_ESTQ2 != null)
            {
                if (!MOV_ESTQ2.MOV_ESTQ1.Contains(this))
                {
                    MOV_ESTQ2.MOV_ESTQ1.Add(this);
                }
    
                EmpCod = MOV_ESTQ2.EmpCod;
                MovEstqChvRef = MOV_ESTQ2.MovEstqChv;
            }
            else if (!skipKeys)
            {
                MovEstqChvRef = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MOV_ESTQ2")
                    && (ChangeTracker.OriginalValues["MOV_ESTQ2"] == MOV_ESTQ2))
                {
                    ChangeTracker.OriginalValues.Remove("MOV_ESTQ2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MOV_ESTQ2", previousValue);
                }
                if (MOV_ESTQ2 != null && !MOV_ESTQ2.ChangeTracker.ChangeTrackingEnabled)
                {
                    MOV_ESTQ2.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE(ENTIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ.Contains(this))
            {
                previousValue.MOV_ESTQ.Remove(this);
            }
    
            if (ENTIDADE != null)
            {
                if (!ENTIDADE.MOV_ESTQ.Contains(this))
                {
                    ENTIDADE.MOV_ESTQ.Add(this);
                }
    
                MovEstqDespachEntCod = ENTIDADE.EntCod;
            }
            else if (!skipKeys)
            {
                MovEstqDespachEntCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE")
                    && (ChangeTracker.OriginalValues["ENTIDADE"] == ENTIDADE))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE", previousValue);
                }
                if (ENTIDADE != null && !ENTIDADE.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE1(ENTIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ1.Contains(this))
            {
                previousValue.MOV_ESTQ1.Remove(this);
            }
    
            if (ENTIDADE1 != null)
            {
                if (!ENTIDADE1.MOV_ESTQ1.Contains(this))
                {
                    ENTIDADE1.MOV_ESTQ1.Add(this);
                }
    
                MovEstqSegDocEntCod = ENTIDADE1.EntCod;
            }
            else if (!skipKeys)
            {
                MovEstqSegDocEntCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE1")
                    && (ChangeTracker.OriginalValues["ENTIDADE1"] == ENTIDADE1))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE1", previousValue);
                }
                if (ENTIDADE1 != null && !ENTIDADE1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE1.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE2(ENTIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ2.Contains(this))
            {
                previousValue.MOV_ESTQ2.Remove(this);
            }
    
            if (ENTIDADE2 != null)
            {
                if (!ENTIDADE2.MOV_ESTQ2.Contains(this))
                {
                    ENTIDADE2.MOV_ESTQ2.Add(this);
                }
    
                MovEstqFreteDocEntCod = ENTIDADE2.EntCod;
            }
            else if (!skipKeys)
            {
                MovEstqFreteDocEntCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE2")
                    && (ChangeTracker.OriginalValues["ENTIDADE2"] == ENTIDADE2))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE2", previousValue);
                }
                if (ENTIDADE2 != null && !ENTIDADE2.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE2.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE3(ENTIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ3.Contains(this))
            {
                previousValue.MOV_ESTQ3.Remove(this);
            }
    
            if (ENTIDADE3 != null)
            {
                if (!ENTIDADE3.MOV_ESTQ3.Contains(this))
                {
                    ENTIDADE3.MOV_ESTQ3.Add(this);
                }
    
                MovEstqEntCodContato = ENTIDADE3.EntCod;
            }
            else if (!skipKeys)
            {
                MovEstqEntCodContato = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE3")
                    && (ChangeTracker.OriginalValues["ENTIDADE3"] == ENTIDADE3))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE3");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE3", previousValue);
                }
                if (ENTIDADE3 != null && !ENTIDADE3.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE3.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE4(ENTIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ4.Contains(this))
            {
                previousValue.MOV_ESTQ4.Remove(this);
            }
    
            if (ENTIDADE4 != null)
            {
                if (!ENTIDADE4.MOV_ESTQ4.Contains(this))
                {
                    ENTIDADE4.MOV_ESTQ4.Add(this);
                }
    
                EntCod = ENTIDADE4.EntCod;
            }
            else if (!skipKeys)
            {
                EntCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE4")
                    && (ChangeTracker.OriginalValues["ENTIDADE4"] == ENTIDADE4))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE4");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE4", previousValue);
                }
                if (ENTIDADE4 != null && !ENTIDADE4.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE4.StartTracking();
                }
            }
        }
    
        private void FixupCIDADE2(CIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ2.Contains(this))
            {
                previousValue.MOV_ESTQ2.Remove(this);
            }
    
            if (CIDADE2 != null)
            {
                if (!CIDADE2.MOV_ESTQ2.Contains(this))
                {
                    CIDADE2.MOV_ESTQ2.Add(this);
                }
    
                CidCodInicPrestServ = CIDADE2.CidCod;
            }
            else if (!skipKeys)
            {
                CidCodInicPrestServ = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CIDADE2")
                    && (ChangeTracker.OriginalValues["CIDADE2"] == CIDADE2))
                {
                    ChangeTracker.OriginalValues.Remove("CIDADE2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CIDADE2", previousValue);
                }
                if (CIDADE2 != null && !CIDADE2.ChangeTracker.ChangeTrackingEnabled)
                {
                    CIDADE2.StartTracking();
                }
            }
        }
    
        private void FixupCIDADE3(CIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ3.Contains(this))
            {
                previousValue.MOV_ESTQ3.Remove(this);
            }
    
            if (CIDADE3 != null)
            {
                if (!CIDADE3.MOV_ESTQ3.Contains(this))
                {
                    CIDADE3.MOV_ESTQ3.Add(this);
                }
    
                CidCodFinalPrestServ = CIDADE3.CidCod;
            }
            else if (!skipKeys)
            {
                CidCodFinalPrestServ = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CIDADE3")
                    && (ChangeTracker.OriginalValues["CIDADE3"] == CIDADE3))
                {
                    ChangeTracker.OriginalValues.Remove("CIDADE3");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CIDADE3", previousValue);
                }
                if (CIDADE3 != null && !CIDADE3.ChangeTracker.ChangeTrackingEnabled)
                {
                    CIDADE3.StartTracking();
                }
            }
        }
    
        private void FixupNAT_OPERACAO(NAT_OPERACAO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ.Contains(this))
            {
                previousValue.MOV_ESTQ.Remove(this);
            }
    
            if (NAT_OPERACAO != null)
            {
                if (!NAT_OPERACAO.MOV_ESTQ.Contains(this))
                {
                    NAT_OPERACAO.MOV_ESTQ.Add(this);
                }
    
                MovEstqNatOpServ = NAT_OPERACAO.NatOpCodEstr;
            }
            else if (!skipKeys)
            {
                MovEstqNatOpServ = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NAT_OPERACAO")
                    && (ChangeTracker.OriginalValues["NAT_OPERACAO"] == NAT_OPERACAO))
                {
                    ChangeTracker.OriginalValues.Remove("NAT_OPERACAO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NAT_OPERACAO", previousValue);
                }
                if (NAT_OPERACAO != null && !NAT_OPERACAO.ChangeTracker.ChangeTrackingEnabled)
                {
                    NAT_OPERACAO.StartTracking();
                }
            }
        }
    
        private void FixupCOND_PAG(COND_PAG previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ.Contains(this))
            {
                previousValue.MOV_ESTQ.Remove(this);
            }
    
            if (COND_PAG != null)
            {
                if (!COND_PAG.MOV_ESTQ.Contains(this))
                {
                    COND_PAG.MOV_ESTQ.Add(this);
                }
    
                MovEstqFreteDocCondPagCod = COND_PAG.CondPagCod;
            }
            else if (!skipKeys)
            {
                MovEstqFreteDocCondPagCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("COND_PAG")
                    && (ChangeTracker.OriginalValues["COND_PAG"] == COND_PAG))
                {
                    ChangeTracker.OriginalValues.Remove("COND_PAG");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("COND_PAG", previousValue);
                }
                if (COND_PAG != null && !COND_PAG.ChangeTracker.ChangeTrackingEnabled)
                {
                    COND_PAG.StartTracking();
                }
            }
        }
    
        private void FixupCOND_PAG1(COND_PAG previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ1.Contains(this))
            {
                previousValue.MOV_ESTQ1.Remove(this);
            }
    
            if (COND_PAG1 != null)
            {
                if (!COND_PAG1.MOV_ESTQ1.Contains(this))
                {
                    COND_PAG1.MOV_ESTQ1.Add(this);
                }
    
                MovEstqSegDocCondPagCod = COND_PAG1.CondPagCod;
            }
            else if (!skipKeys)
            {
                MovEstqSegDocCondPagCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("COND_PAG1")
                    && (ChangeTracker.OriginalValues["COND_PAG1"] == COND_PAG1))
                {
                    ChangeTracker.OriginalValues.Remove("COND_PAG1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("COND_PAG1", previousValue);
                }
                if (COND_PAG1 != null && !COND_PAG1.ChangeTracker.ChangeTrackingEnabled)
                {
                    COND_PAG1.StartTracking();
                }
            }
        }
    
        private void FixupCOND_PAG2(COND_PAG previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ2.Contains(this))
            {
                previousValue.MOV_ESTQ2.Remove(this);
            }
    
            if (COND_PAG2 != null)
            {
                if (!COND_PAG2.MOV_ESTQ2.Contains(this))
                {
                    COND_PAG2.MOV_ESTQ2.Add(this);
                }
    
                CondPagCod = COND_PAG2.CondPagCod;
            }
            else if (!skipKeys)
            {
                CondPagCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("COND_PAG2")
                    && (ChangeTracker.OriginalValues["COND_PAG2"] == COND_PAG2))
                {
                    ChangeTracker.OriginalValues.Remove("COND_PAG2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("COND_PAG2", previousValue);
                }
                if (COND_PAG2 != null && !COND_PAG2.ChangeTracker.ChangeTrackingEnabled)
                {
                    COND_PAG2.StartTracking();
                }
            }
        }
    
        private void FixupOBJETO(OBJETO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ.Contains(this))
            {
                previousValue.MOV_ESTQ.Remove(this);
            }
    
            if (OBJETO != null)
            {
                if (!OBJETO.MOV_ESTQ.Contains(this))
                {
                    OBJETO.MOV_ESTQ.Add(this);
                }
    
                OBJCODESTR = OBJETO.ObjCodEstr;
            }
            else if (!skipKeys)
            {
                OBJCODESTR = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OBJETO")
                    && (ChangeTracker.OriginalValues["OBJETO"] == OBJETO))
                {
                    ChangeTracker.OriginalValues.Remove("OBJETO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OBJETO", previousValue);
                }
                if (OBJETO != null && !OBJETO.ChangeTracker.ChangeTrackingEnabled)
                {
                    OBJETO.StartTracking();
                }
            }
        }
    
        private void FixupICMS_MOV_ESTQ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ICMS_MOV_ESTQ item in e.NewItems)
                {
                    item.MOV_ESTQ = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ICMS_MOV_ESTQ", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ICMS_MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.MOV_ESTQ, this))
                    {
                        item.MOV_ESTQ = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ICMS_MOV_ESTQ", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupMOV_ESTQ1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MOV_ESTQ item in e.NewItems)
                {
                    item.MOV_ESTQ2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MOV_ESTQ1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.MOV_ESTQ2, this))
                    {
                        item.MOV_ESTQ2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MOV_ESTQ1", item);
                    }
                }
            }
        }
    
        private void FixupMOV_ESTQ_CCTRL(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MOV_ESTQ_CCTRL item in e.NewItems)
                {
                    item.MOV_ESTQ = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MOV_ESTQ_CCTRL", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MOV_ESTQ_CCTRL item in e.OldItems)
                {
                    if (ReferenceEquals(item.MOV_ESTQ, this))
                    {
                        item.MOV_ESTQ = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MOV_ESTQ_CCTRL", item);
                    }
                }
            }
        }
    
        private void FixupMOV_ESTQ_CLASSE_REC_DESP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MOV_ESTQ_CLASSE_REC_DESP item in e.NewItems)
                {
                    item.MOV_ESTQ = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MOV_ESTQ_CLASSE_REC_DESP", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MOV_ESTQ_CLASSE_REC_DESP item in e.OldItems)
                {
                    if (ReferenceEquals(item.MOV_ESTQ, this))
                    {
                        item.MOV_ESTQ = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MOV_ESTQ_CLASSE_REC_DESP", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPARC_PAG_MOV_ESTQ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PARC_PAG_MOV_ESTQ item in e.NewItems)
                {
                    item.MOV_ESTQ = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PARC_PAG_MOV_ESTQ", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PARC_PAG_MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.MOV_ESTQ, this))
                    {
                        item.MOV_ESTQ = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PARC_PAG_MOV_ESTQ", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRATEIO_MOV_ESTQ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RATEIO_MOV_ESTQ item in e.NewItems)
                {
                    item.MOV_ESTQ = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RATEIO_MOV_ESTQ", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RATEIO_MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.MOV_ESTQ, this))
                    {
                        item.MOV_ESTQ = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RATEIO_MOV_ESTQ", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDOC_FIN(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DOC_FIN item in e.NewItems)
                {
                    item.MOV_ESTQ = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DOC_FIN", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DOC_FIN item in e.OldItems)
                {
                    if (ReferenceEquals(item.MOV_ESTQ, this))
                    {
                        item.MOV_ESTQ = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DOC_FIN", item);
                    }
                }
            }
        }
    
        private void FixupITEM_MOV_ESTQ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_MOV_ESTQ item in e.NewItems)
                {
                    item.MOV_ESTQ = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_MOV_ESTQ", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.MOV_ESTQ, this))
                    {
                        item.MOV_ESTQ = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_MOV_ESTQ", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
