//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MOV_ESTQ))]
    [KnownType(typeof(RATEIO_MOV_ESTQ))]
    [KnownType(typeof(CLASSE_REC_DESP))]
    public partial class MOV_ESTQ_CLASSE_REC_DESP: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (MOV_ESTQ != null && MOV_ESTQ.EmpCod != value)
                        {
                            MOV_ESTQ = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public int MovEstqChv
        {
            get { return _movEstqChv; }
            set
            {
                if (_movEstqChv != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MovEstqChv' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (MOV_ESTQ != null && MOV_ESTQ.MovEstqChv != value)
                        {
                            MOV_ESTQ = null;
                        }
                    }
                    _movEstqChv = value;
                    OnPropertyChanged("MovEstqChv");
                }
            }
        }
        private int _movEstqChv;
    
        [DataMember]
        public string ClasseRecDespCodEstr
        {
            get { return _classeRecDespCodEstr; }
            set
            {
                if (_classeRecDespCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ClasseRecDespCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (CLASSE_REC_DESP != null && CLASSE_REC_DESP.ClasseRecDespCodEstr != value)
                        {
                            CLASSE_REC_DESP = null;
                        }
                    }
                    _classeRecDespCodEstr = value;
                    OnPropertyChanged("ClasseRecDespCodEstr");
                }
            }
        }
        private string _classeRecDespCodEstr;
    
        [DataMember]
        public Nullable<decimal> MovEstqClasseRecDespVal
        {
            get { return _movEstqClasseRecDespVal; }
            set
            {
                if (_movEstqClasseRecDespVal != value)
                {
                    _movEstqClasseRecDespVal = value;
                    OnPropertyChanged("MovEstqClasseRecDespVal");
                }
            }
        }
        private Nullable<decimal> _movEstqClasseRecDespVal;
    
        [DataMember]
        public Nullable<decimal> MovEstqClasseRecDespPerc
        {
            get { return _movEstqClasseRecDespPerc; }
            set
            {
                if (_movEstqClasseRecDespPerc != value)
                {
                    _movEstqClasseRecDespPerc = value;
                    OnPropertyChanged("MovEstqClasseRecDespPerc");
                }
            }
        }
        private Nullable<decimal> _movEstqClasseRecDespPerc;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public MOV_ESTQ MOV_ESTQ
        {
            get { return _mOV_ESTQ; }
            set
            {
                if (!ReferenceEquals(_mOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || MovEstqChv != value.MovEstqChv)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _mOV_ESTQ;
                    _mOV_ESTQ = value;
                    FixupMOV_ESTQ(previousValue);
                    OnNavigationPropertyChanged("MOV_ESTQ");
                }
            }
        }
        private MOV_ESTQ _mOV_ESTQ;
    
        [DataMember]
        public TrackableCollection<RATEIO_MOV_ESTQ> RATEIO_MOV_ESTQ
        {
            get
            {
                if (_rATEIO_MOV_ESTQ == null)
                {
                    _rATEIO_MOV_ESTQ = new TrackableCollection<RATEIO_MOV_ESTQ>();
                    _rATEIO_MOV_ESTQ.CollectionChanged += FixupRATEIO_MOV_ESTQ;
                }
                return _rATEIO_MOV_ESTQ;
            }
            set
            {
                if (!ReferenceEquals(_rATEIO_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rATEIO_MOV_ESTQ != null)
                    {
                        _rATEIO_MOV_ESTQ.CollectionChanged -= FixupRATEIO_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RATEIO_MOV_ESTQ item in _rATEIO_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rATEIO_MOV_ESTQ = value;
                    if (_rATEIO_MOV_ESTQ != null)
                    {
                        _rATEIO_MOV_ESTQ.CollectionChanged += FixupRATEIO_MOV_ESTQ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RATEIO_MOV_ESTQ item in _rATEIO_MOV_ESTQ)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RATEIO_MOV_ESTQ");
                }
            }
        }
        private TrackableCollection<RATEIO_MOV_ESTQ> _rATEIO_MOV_ESTQ;
    
        [DataMember]
        public CLASSE_REC_DESP CLASSE_REC_DESP
        {
            get { return _cLASSE_REC_DESP; }
            set
            {
                if (!ReferenceEquals(_cLASSE_REC_DESP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ClasseRecDespCodEstr != value.ClasseRecDespCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _cLASSE_REC_DESP;
                    _cLASSE_REC_DESP = value;
                    FixupCLASSE_REC_DESP(previousValue);
                    OnNavigationPropertyChanged("CLASSE_REC_DESP");
                }
            }
        }
        private CLASSE_REC_DESP _cLASSE_REC_DESP;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MOV_ESTQ = null;
            RATEIO_MOV_ESTQ.Clear();
            CLASSE_REC_DESP = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupMOV_ESTQ(MOV_ESTQ previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ_CLASSE_REC_DESP.Contains(this))
            {
                previousValue.MOV_ESTQ_CLASSE_REC_DESP.Remove(this);
            }
    
            if (MOV_ESTQ != null)
            {
                if (!MOV_ESTQ.MOV_ESTQ_CLASSE_REC_DESP.Contains(this))
                {
                    MOV_ESTQ.MOV_ESTQ_CLASSE_REC_DESP.Add(this);
                }
    
                EmpCod = MOV_ESTQ.EmpCod;
                MovEstqChv = MOV_ESTQ.MovEstqChv;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MOV_ESTQ")
                    && (ChangeTracker.OriginalValues["MOV_ESTQ"] == MOV_ESTQ))
                {
                    ChangeTracker.OriginalValues.Remove("MOV_ESTQ");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MOV_ESTQ", previousValue);
                }
                if (MOV_ESTQ != null && !MOV_ESTQ.ChangeTracker.ChangeTrackingEnabled)
                {
                    MOV_ESTQ.StartTracking();
                }
            }
        }
    
        private void FixupCLASSE_REC_DESP(CLASSE_REC_DESP previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ_CLASSE_REC_DESP.Contains(this))
            {
                previousValue.MOV_ESTQ_CLASSE_REC_DESP.Remove(this);
            }
    
            if (CLASSE_REC_DESP != null)
            {
                if (!CLASSE_REC_DESP.MOV_ESTQ_CLASSE_REC_DESP.Contains(this))
                {
                    CLASSE_REC_DESP.MOV_ESTQ_CLASSE_REC_DESP.Add(this);
                }
    
                ClasseRecDespCodEstr = CLASSE_REC_DESP.ClasseRecDespCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CLASSE_REC_DESP")
                    && (ChangeTracker.OriginalValues["CLASSE_REC_DESP"] == CLASSE_REC_DESP))
                {
                    ChangeTracker.OriginalValues.Remove("CLASSE_REC_DESP");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CLASSE_REC_DESP", previousValue);
                }
                if (CLASSE_REC_DESP != null && !CLASSE_REC_DESP.ChangeTracker.ChangeTrackingEnabled)
                {
                    CLASSE_REC_DESP.StartTracking();
                }
            }
        }
    
        private void FixupRATEIO_MOV_ESTQ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RATEIO_MOV_ESTQ item in e.NewItems)
                {
                    item.MOV_ESTQ_CLASSE_REC_DESP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RATEIO_MOV_ESTQ", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RATEIO_MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.MOV_ESTQ_CLASSE_REC_DESP, this))
                    {
                        item.MOV_ESTQ_CLASSE_REC_DESP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RATEIO_MOV_ESTQ", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
