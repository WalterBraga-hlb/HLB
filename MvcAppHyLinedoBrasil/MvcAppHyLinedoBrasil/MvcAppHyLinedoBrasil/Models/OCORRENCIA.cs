//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EMPRESA_FILIAL))]
    [KnownType(typeof(ENTIDADE))]
    [KnownType(typeof(ENTIDADE1))]
    [KnownType(typeof(ITEM_OCOR))]
    [KnownType(typeof(PRODUTO))]
    [KnownType(typeof(VENDEDOR))]
    [KnownType(typeof(OCORRENCIA))]
    [KnownType(typeof(MOTIVO_OCOR))]
    [KnownType(typeof(COND_PAG))]
    public partial class OCORRENCIA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL != null && EMPRESA_FILIAL.EmpCod != value)
                        {
                            EMPRESA_FILIAL = null;
                        }
                        if (OCORRENCIA2 != null && OCORRENCIA2.EmpCod != value)
                        {
                            var previousValue = _oCORRENCIA2;
                            _oCORRENCIA2 = null;
                            FixupOCORRENCIA2(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("OCORRENCIA2");
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public int OcorCod
        {
            get { return _ocorCod; }
            set
            {
                if (_ocorCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OcorCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _ocorCod = value;
                    OnPropertyChanged("OcorCod");
                }
            }
        }
        private int _ocorCod;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    ChangeTracker.RecordOriginalValue("EntCod", _entCod);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE != null && ENTIDADE.EntCod != value)
                        {
                            ENTIDADE = null;
                        }
                    }
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string MotOcorCodEstr
        {
            get { return _motOcorCodEstr; }
            set
            {
                if (_motOcorCodEstr != value)
                {
                    ChangeTracker.RecordOriginalValue("MotOcorCodEstr", _motOcorCodEstr);
                    if (!IsDeserializing)
                    {
                        if (MOTIVO_OCOR != null && MOTIVO_OCOR.MotOcorCodEstr != value)
                        {
                            MOTIVO_OCOR = null;
                        }
                    }
                    _motOcorCodEstr = value;
                    OnPropertyChanged("MotOcorCodEstr");
                }
            }
        }
        private string _motOcorCodEstr;
    
        [DataMember]
        public string OcorRespAtend
        {
            get { return _ocorRespAtend; }
            set
            {
                if (_ocorRespAtend != value)
                {
                    _ocorRespAtend = value;
                    OnPropertyChanged("OcorRespAtend");
                }
            }
        }
        private string _ocorRespAtend;
    
        [DataMember]
        public Nullable<System.DateTime> OcorData
        {
            get { return _ocorData; }
            set
            {
                if (_ocorData != value)
                {
                    _ocorData = value;
                    OnPropertyChanged("OcorData");
                }
            }
        }
        private Nullable<System.DateTime> _ocorData;
    
        [DataMember]
        public Nullable<System.DateTime> OcorTempo
        {
            get { return _ocorTempo; }
            set
            {
                if (_ocorTempo != value)
                {
                    _ocorTempo = value;
                    OnPropertyChanged("OcorTempo");
                }
            }
        }
        private Nullable<System.DateTime> _ocorTempo;
    
        [DataMember]
        public Nullable<System.DateTime> OcorDataPrevSol
        {
            get { return _ocorDataPrevSol; }
            set
            {
                if (_ocorDataPrevSol != value)
                {
                    _ocorDataPrevSol = value;
                    OnPropertyChanged("OcorDataPrevSol");
                }
            }
        }
        private Nullable<System.DateTime> _ocorDataPrevSol;
    
        [DataMember]
        public string OcorAlarmePrevSol
        {
            get { return _ocorAlarmePrevSol; }
            set
            {
                if (_ocorAlarmePrevSol != value)
                {
                    _ocorAlarmePrevSol = value;
                    OnPropertyChanged("OcorAlarmePrevSol");
                }
            }
        }
        private string _ocorAlarmePrevSol;
    
        [DataMember]
        public string OcorStat
        {
            get { return _ocorStat; }
            set
            {
                if (_ocorStat != value)
                {
                    _ocorStat = value;
                    OnPropertyChanged("OcorStat");
                }
            }
        }
        private string _ocorStat;
    
        [DataMember]
        public string OcorContato
        {
            get { return _ocorContato; }
            set
            {
                if (_ocorContato != value)
                {
                    _ocorContato = value;
                    OnPropertyChanged("OcorContato");
                }
            }
        }
        private string _ocorContato;
    
        [DataMember]
        public Nullable<short> OcorPrior
        {
            get { return _ocorPrior; }
            set
            {
                if (_ocorPrior != value)
                {
                    _ocorPrior = value;
                    OnPropertyChanged("OcorPrior");
                }
            }
        }
        private Nullable<short> _ocorPrior;
    
        [DataMember]
        public string OcorTexto
        {
            get { return _ocorTexto; }
            set
            {
                if (_ocorTexto != value)
                {
                    _ocorTexto = value;
                    OnPropertyChanged("OcorTexto");
                }
            }
        }
        private string _ocorTexto;
    
        [DataMember]
        public string OcorGrpRespSol
        {
            get { return _ocorGrpRespSol; }
            set
            {
                if (_ocorGrpRespSol != value)
                {
                    _ocorGrpRespSol = value;
                    OnPropertyChanged("OcorGrpRespSol");
                }
            }
        }
        private string _ocorGrpRespSol;
    
        [DataMember]
        public string OcorRespSol
        {
            get { return _ocorRespSol; }
            set
            {
                if (_ocorRespSol != value)
                {
                    _ocorRespSol = value;
                    OnPropertyChanged("OcorRespSol");
                }
            }
        }
        private string _ocorRespSol;
    
        [DataMember]
        public Nullable<System.DateTime> OcorDataSol
        {
            get { return _ocorDataSol; }
            set
            {
                if (_ocorDataSol != value)
                {
                    _ocorDataSol = value;
                    OnPropertyChanged("OcorDataSol");
                }
            }
        }
        private Nullable<System.DateTime> _ocorDataSol;
    
        [DataMember]
        public Nullable<System.DateTime> OcorHoraInic
        {
            get { return _ocorHoraInic; }
            set
            {
                if (_ocorHoraInic != value)
                {
                    _ocorHoraInic = value;
                    OnPropertyChanged("OcorHoraInic");
                }
            }
        }
        private Nullable<System.DateTime> _ocorHoraInic;
    
        [DataMember]
        public Nullable<System.DateTime> OcorHoraFim
        {
            get { return _ocorHoraFim; }
            set
            {
                if (_ocorHoraFim != value)
                {
                    _ocorHoraFim = value;
                    OnPropertyChanged("OcorHoraFim");
                }
            }
        }
        private Nullable<System.DateTime> _ocorHoraFim;
    
        [DataMember]
        public Nullable<System.DateTime> OcorTempoSol
        {
            get { return _ocorTempoSol; }
            set
            {
                if (_ocorTempoSol != value)
                {
                    _ocorTempoSol = value;
                    OnPropertyChanged("OcorTempoSol");
                }
            }
        }
        private Nullable<System.DateTime> _ocorTempoSol;
    
        [DataMember]
        public string OcorRespTexto
        {
            get { return _ocorRespTexto; }
            set
            {
                if (_ocorRespTexto != value)
                {
                    _ocorRespTexto = value;
                    OnPropertyChanged("OcorRespTexto");
                }
            }
        }
        private string _ocorRespTexto;
    
        [DataMember]
        public Nullable<int> OcorCodAnt
        {
            get { return _ocorCodAnt; }
            set
            {
                if (_ocorCodAnt != value)
                {
                    _ocorCodAnt = value;
                    OnPropertyChanged("OcorCodAnt");
                }
            }
        }
        private Nullable<int> _ocorCodAnt;
    
        [DataMember]
        public Nullable<System.DateTime> OcorDataCanc
        {
            get { return _ocorDataCanc; }
            set
            {
                if (_ocorDataCanc != value)
                {
                    _ocorDataCanc = value;
                    OnPropertyChanged("OcorDataCanc");
                }
            }
        }
        private Nullable<System.DateTime> _ocorDataCanc;
    
        [DataMember]
        public string OcorRespCanc
        {
            get { return _ocorRespCanc; }
            set
            {
                if (_ocorRespCanc != value)
                {
                    _ocorRespCanc = value;
                    OnPropertyChanged("OcorRespCanc");
                }
            }
        }
        private string _ocorRespCanc;
    
        [DataMember]
        public string OcorMotCanc
        {
            get { return _ocorMotCanc; }
            set
            {
                if (_ocorMotCanc != value)
                {
                    _ocorMotCanc = value;
                    OnPropertyChanged("OcorMotCanc");
                }
            }
        }
        private string _ocorMotCanc;
    
        [DataMember]
        public string TipoSolOcorCod
        {
            get { return _tipoSolOcorCod; }
            set
            {
                if (_tipoSolOcorCod != value)
                {
                    _tipoSolOcorCod = value;
                    OnPropertyChanged("TipoSolOcorCod");
                }
            }
        }
        private string _tipoSolOcorCod;
    
        [DataMember]
        public string OrigCodEstr
        {
            get { return _origCodEstr; }
            set
            {
                if (_origCodEstr != value)
                {
                    _origCodEstr = value;
                    OnPropertyChanged("OrigCodEstr");
                }
            }
        }
        private string _origCodEstr;
    
        [DataMember]
        public string OcorOrigModulo
        {
            get { return _ocorOrigModulo; }
            set
            {
                if (_ocorOrigModulo != value)
                {
                    _ocorOrigModulo = value;
                    OnPropertyChanged("OcorOrigModulo");
                }
            }
        }
        private string _ocorOrigModulo;
    
        [DataMember]
        public string OcorOrigEspec
        {
            get { return _ocorOrigEspec; }
            set
            {
                if (_ocorOrigEspec != value)
                {
                    _ocorOrigEspec = value;
                    OnPropertyChanged("OcorOrigEspec");
                }
            }
        }
        private string _ocorOrigEspec;
    
        [DataMember]
        public string OcorOrigSerie
        {
            get { return _ocorOrigSerie; }
            set
            {
                if (_ocorOrigSerie != value)
                {
                    _ocorOrigSerie = value;
                    OnPropertyChanged("OcorOrigSerie");
                }
            }
        }
        private string _ocorOrigSerie;
    
        [DataMember]
        public string OcorOrigNum
        {
            get { return _ocorOrigNum; }
            set
            {
                if (_ocorOrigNum != value)
                {
                    _ocorOrigNum = value;
                    OnPropertyChanged("OcorOrigNum");
                }
            }
        }
        private string _ocorOrigNum;
    
        [DataMember]
        public Nullable<int> OcorOrigChv
        {
            get { return _ocorOrigChv; }
            set
            {
                if (_ocorOrigChv != value)
                {
                    _ocorOrigChv = value;
                    OnPropertyChanged("OcorOrigChv");
                }
            }
        }
        private Nullable<int> _ocorOrigChv;
    
        [DataMember]
        public string OcorEntNome
        {
            get { return _ocorEntNome; }
            set
            {
                if (_ocorEntNome != value)
                {
                    _ocorEntNome = value;
                    OnPropertyChanged("OcorEntNome");
                }
            }
        }
        private string _ocorEntNome;
    
        [DataMember]
        public string OcorMotOcorDescr
        {
            get { return _ocorMotOcorDescr; }
            set
            {
                if (_ocorMotOcorDescr != value)
                {
                    _ocorMotOcorDescr = value;
                    OnPropertyChanged("OcorMotOcorDescr");
                }
            }
        }
        private string _ocorMotOcorDescr;
    
        [DataMember]
        public string WebVersaoCod
        {
            get { return _webVersaoCod; }
            set
            {
                if (_webVersaoCod != value)
                {
                    _webVersaoCod = value;
                    OnPropertyChanged("WebVersaoCod");
                }
            }
        }
        private string _webVersaoCod;
    
        [DataMember]
        public string OcorSgdb
        {
            get { return _ocorSgdb; }
            set
            {
                if (_ocorSgdb != value)
                {
                    _ocorSgdb = value;
                    OnPropertyChanged("OcorSgdb");
                }
            }
        }
        private string _ocorSgdb;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    ChangeTracker.RecordOriginalValue("ProdCodEstr", _prodCodEstr);
                    if (!IsDeserializing)
                    {
                        if (PRODUTO != null && PRODUTO.ProdCodEstr != value)
                        {
                            PRODUTO = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public string UsuWebCod
        {
            get { return _usuWebCod; }
            set
            {
                if (_usuWebCod != value)
                {
                    _usuWebCod = value;
                    OnPropertyChanged("UsuWebCod");
                }
            }
        }
        private string _usuWebCod;
    
        [DataMember]
        public string OcorUsuWebCodCanc
        {
            get { return _ocorUsuWebCodCanc; }
            set
            {
                if (_ocorUsuWebCodCanc != value)
                {
                    _ocorUsuWebCodCanc = value;
                    OnPropertyChanged("OcorUsuWebCodCanc");
                }
            }
        }
        private string _ocorUsuWebCodCanc;
    
        [DataMember]
        public Nullable<int> OcorRefCod
        {
            get { return _ocorRefCod; }
            set
            {
                if (_ocorRefCod != value)
                {
                    ChangeTracker.RecordOriginalValue("OcorRefCod", _ocorRefCod);
                    if (!IsDeserializing)
                    {
                        if (OCORRENCIA2 != null && OCORRENCIA2.OcorCod != value)
                        {
                            var previousValue = _oCORRENCIA2;
                            _oCORRENCIA2 = null;
                            FixupOCORRENCIA2(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("OCORRENCIA2");
                        }
                    }
                    _ocorRefCod = value;
                    OnPropertyChanged("OcorRefCod");
                }
            }
        }
        private Nullable<int> _ocorRefCod;
    
        [DataMember]
        public Nullable<System.DateTime> OcorDataHoraDig
        {
            get { return _ocorDataHoraDig; }
            set
            {
                if (_ocorDataHoraDig != value)
                {
                    _ocorDataHoraDig = value;
                    OnPropertyChanged("OcorDataHoraDig");
                }
            }
        }
        private Nullable<System.DateTime> _ocorDataHoraDig;
    
        [DataMember]
        public Nullable<short> OcorOrigChvSeq
        {
            get { return _ocorOrigChvSeq; }
            set
            {
                if (_ocorOrigChvSeq != value)
                {
                    _ocorOrigChvSeq = value;
                    OnPropertyChanged("OcorOrigChvSeq");
                }
            }
        }
        private Nullable<short> _ocorOrigChvSeq;
    
        [DataMember]
        public string OcorMotDataPrevSolDescr
        {
            get { return _ocorMotDataPrevSolDescr; }
            set
            {
                if (_ocorMotDataPrevSolDescr != value)
                {
                    _ocorMotDataPrevSolDescr = value;
                    OnPropertyChanged("OcorMotDataPrevSolDescr");
                }
            }
        }
        private string _ocorMotDataPrevSolDescr;
    
        [DataMember]
        public Nullable<System.DateTime> OcorHistDataPrevSol
        {
            get { return _ocorHistDataPrevSol; }
            set
            {
                if (_ocorHistDataPrevSol != value)
                {
                    _ocorHistDataPrevSol = value;
                    OnPropertyChanged("OcorHistDataPrevSol");
                }
            }
        }
        private Nullable<System.DateTime> _ocorHistDataPrevSol;
    
        [DataMember]
        public string OcorHistMotDataPrevSolDescr
        {
            get { return _ocorHistMotDataPrevSolDescr; }
            set
            {
                if (_ocorHistMotDataPrevSolDescr != value)
                {
                    _ocorHistMotDataPrevSolDescr = value;
                    OnPropertyChanged("OcorHistMotDataPrevSolDescr");
                }
            }
        }
        private string _ocorHistMotDataPrevSolDescr;
    
        [DataMember]
        public Nullable<System.DateTime> OcorDataCad
        {
            get { return _ocorDataCad; }
            set
            {
                if (_ocorDataCad != value)
                {
                    _ocorDataCad = value;
                    OnPropertyChanged("OcorDataCad");
                }
            }
        }
        private Nullable<System.DateTime> _ocorDataCad;
    
        [DataMember]
        public string OcorEntNomeFant
        {
            get { return _ocorEntNomeFant; }
            set
            {
                if (_ocorEntNomeFant != value)
                {
                    _ocorEntNomeFant = value;
                    OnPropertyChanged("OcorEntNomeFant");
                }
            }
        }
        private string _ocorEntNomeFant;
    
        [DataMember]
        public string CtrlCargaNum
        {
            get { return _ctrlCargaNum; }
            set
            {
                if (_ctrlCargaNum != value)
                {
                    _ctrlCargaNum = value;
                    OnPropertyChanged("CtrlCargaNum");
                }
            }
        }
        private string _ctrlCargaNum;
    
        [DataMember]
        public string VendCod
        {
            get { return _vendCod; }
            set
            {
                if (_vendCod != value)
                {
                    ChangeTracker.RecordOriginalValue("VendCod", _vendCod);
                    if (!IsDeserializing)
                    {
                        if (VENDEDOR != null && VENDEDOR.VendCod != value)
                        {
                            VENDEDOR = null;
                        }
                    }
                    _vendCod = value;
                    OnPropertyChanged("VendCod");
                }
            }
        }
        private string _vendCod;
    
        [DataMember]
        public string MotFalhaOcorCod
        {
            get { return _motFalhaOcorCod; }
            set
            {
                if (_motFalhaOcorCod != value)
                {
                    _motFalhaOcorCod = value;
                    OnPropertyChanged("MotFalhaOcorCod");
                }
            }
        }
        private string _motFalhaOcorCod;
    
        [DataMember]
        public string OcorEntregador
        {
            get { return _ocorEntregador; }
            set
            {
                if (_ocorEntregador != value)
                {
                    _ocorEntregador = value;
                    OnPropertyChanged("OcorEntregador");
                }
            }
        }
        private string _ocorEntregador;
    
        [DataMember]
        public string OcorEntCodEntr
        {
            get { return _ocorEntCodEntr; }
            set
            {
                if (_ocorEntCodEntr != value)
                {
                    ChangeTracker.RecordOriginalValue("OcorEntCodEntr", _ocorEntCodEntr);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE1 != null && ENTIDADE1.EntCod != value)
                        {
                            ENTIDADE1 = null;
                        }
                    }
                    _ocorEntCodEntr = value;
                    OnPropertyChanged("OcorEntCodEntr");
                }
            }
        }
        private string _ocorEntCodEntr;
    
        [DataMember]
        public string OcorCondPagCod
        {
            get { return _ocorCondPagCod; }
            set
            {
                if (_ocorCondPagCod != value)
                {
                    ChangeTracker.RecordOriginalValue("OcorCondPagCod", _ocorCondPagCod);
                    if (!IsDeserializing)
                    {
                        if (COND_PAG != null && COND_PAG.CondPagCod != value)
                        {
                            COND_PAG = null;
                        }
                    }
                    _ocorCondPagCod = value;
                    OnPropertyChanged("OcorCondPagCod");
                }
            }
        }
        private string _ocorCondPagCod;
    
        [DataMember]
        public string OcorAltCondPag
        {
            get { return _ocorAltCondPag; }
            set
            {
                if (_ocorAltCondPag != value)
                {
                    _ocorAltCondPag = value;
                    OnPropertyChanged("OcorAltCondPag");
                }
            }
        }
        private string _ocorAltCondPag;
    
        [DataMember]
        public string OcorMotResOrcVenda
        {
            get { return _ocorMotResOrcVenda; }
            set
            {
                if (_ocorMotResOrcVenda != value)
                {
                    _ocorMotResOrcVenda = value;
                    OnPropertyChanged("OcorMotResOrcVenda");
                }
            }
        }
        private string _ocorMotResOrcVenda;
    
        [DataMember]
        public string OcorEntCodAutorizado
        {
            get { return _ocorEntCodAutorizado; }
            set
            {
                if (_ocorEntCodAutorizado != value)
                {
                    ChangeTracker.RecordOriginalValue("OcorEntCodAutorizado", _ocorEntCodAutorizado);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE11 != null && ENTIDADE11.EntCod != value)
                        {
                            ENTIDADE11 = null;
                        }
                    }
                    _ocorEntCodAutorizado = value;
                    OnPropertyChanged("OcorEntCodAutorizado");
                }
            }
        }
        private string _ocorEntCodAutorizado;
    
        [DataMember]
        public string CAMPNUM
        {
            get { return _cAMPNUM; }
            set
            {
                if (_cAMPNUM != value)
                {
                    _cAMPNUM = value;
                    OnPropertyChanged("CAMPNUM");
                }
            }
        }
        private string _cAMPNUM;
    
        [DataMember]
        public string expedcod
        {
            get { return _expedcod; }
            set
            {
                if (_expedcod != value)
                {
                    _expedcod = value;
                    OnPropertyChanged("expedcod");
                }
            }
        }
        private string _expedcod;
    
        [DataMember]
        public string OcorRefazAcert
        {
            get { return _ocorRefazAcert; }
            set
            {
                if (_ocorRefazAcert != value)
                {
                    _ocorRefazAcert = value;
                    OnPropertyChanged("OcorRefazAcert");
                }
            }
        }
        private string _ocorRefazAcert;
    
        [DataMember]
        public string OcorStatDisponib
        {
            get { return _ocorStatDisponib; }
            set
            {
                if (_ocorStatDisponib != value)
                {
                    _ocorStatDisponib = value;
                    OnPropertyChanged("OcorStatDisponib");
                }
            }
        }
        private string _ocorStatDisponib;
    
        [DataMember]
        public string OcorUsuCodEmUso
        {
            get { return _ocorUsuCodEmUso; }
            set
            {
                if (_ocorUsuCodEmUso != value)
                {
                    _ocorUsuCodEmUso = value;
                    OnPropertyChanged("OcorUsuCodEmUso");
                }
            }
        }
        private string _ocorUsuCodEmUso;
    
        [DataMember]
        public string USEREquipamento
        {
            get { return _uSEREquipamento; }
            set
            {
                if (_uSEREquipamento != value)
                {
                    _uSEREquipamento = value;
                    OnPropertyChanged("USEREquipamento");
                }
            }
        }
        private string _uSEREquipamento;
    
        [DataMember]
        public string USERTriturador
        {
            get { return _uSERTriturador; }
            set
            {
                if (_uSERTriturador != value)
                {
                    _uSERTriturador = value;
                    OnPropertyChanged("USERTriturador");
                }
            }
        }
        private string _uSERTriturador;
    
        [DataMember]
        public string USERDebicadora
        {
            get { return _uSERDebicadora; }
            set
            {
                if (_uSERDebicadora != value)
                {
                    _uSERDebicadora = value;
                    OnPropertyChanged("USERDebicadora");
                }
            }
        }
        private string _uSERDebicadora;
    
        [DataMember]
        public string USERNascedouro
        {
            get { return _uSERNascedouro; }
            set
            {
                if (_uSERNascedouro != value)
                {
                    _uSERNascedouro = value;
                    OnPropertyChanged("USERNascedouro");
                }
            }
        }
        private string _uSERNascedouro;
    
        [DataMember]
        public string USERIncubadora
        {
            get { return _uSERIncubadora; }
            set
            {
                if (_uSERIncubadora != value)
                {
                    _uSERIncubadora = value;
                    OnPropertyChanged("USERIncubadora");
                }
            }
        }
        private string _uSERIncubadora;
    
        [DataMember]
        public string USERChiller
        {
            get { return _uSERChiller; }
            set
            {
                if (_uSERChiller != value)
                {
                    _uSERChiller = value;
                    OnPropertyChanged("USERChiller");
                }
            }
        }
        private string _uSERChiller;
    
        [DataMember]
        public string USERFrancoil
        {
            get { return _uSERFrancoil; }
            set
            {
                if (_uSERFrancoil != value)
                {
                    _uSERFrancoil = value;
                    OnPropertyChanged("USERFrancoil");
                }
            }
        }
        private string _uSERFrancoil;
    
        [DataMember]
        public string USERGerador
        {
            get { return _uSERGerador; }
            set
            {
                if (_uSERGerador != value)
                {
                    _uSERGerador = value;
                    OnPropertyChanged("USERGerador");
                }
            }
        }
        private string _uSERGerador;
    
        [DataMember]
        public string USERLavadora
        {
            get { return _uSERLavadora; }
            set
            {
                if (_uSERLavadora != value)
                {
                    _uSERLavadora = value;
                    OnPropertyChanged("USERLavadora");
                }
            }
        }
        private string _uSERLavadora;
    
        [DataMember]
        public string USERAutomacaoProcesso
        {
            get { return _uSERAutomacaoProcesso; }
            set
            {
                if (_uSERAutomacaoProcesso != value)
                {
                    _uSERAutomacaoProcesso = value;
                    OnPropertyChanged("USERAutomacaoProcesso");
                }
            }
        }
        private string _uSERAutomacaoProcesso;
    
        [DataMember]
        public string USERRodoluvel
        {
            get { return _uSERRodoluvel; }
            set
            {
                if (_uSERRodoluvel != value)
                {
                    _uSERRodoluvel = value;
                    OnPropertyChanged("USERRodoluvel");
                }
            }
        }
        private string _uSERRodoluvel;
    
        [DataMember]
        public string USERResponsavelSolucao
        {
            get { return _uSERResponsavelSolucao; }
            set
            {
                if (_uSERResponsavelSolucao != value)
                {
                    _uSERResponsavelSolucao = value;
                    OnPropertyChanged("USERResponsavelSolucao");
                }
            }
        }
        private string _uSERResponsavelSolucao;
    
        [DataMember]
        public string OCORORIGNUMALT
        {
            get { return _oCORORIGNUMALT; }
            set
            {
                if (_oCORORIGNUMALT != value)
                {
                    _oCORORIGNUMALT = value;
                    OnPropertyChanged("OCORORIGNUMALT");
                }
            }
        }
        private string _oCORORIGNUMALT;
    
        [DataMember]
        public string OcorAcaoOrigem
        {
            get { return _ocorAcaoOrigem; }
            set
            {
                if (_ocorAcaoOrigem != value)
                {
                    _ocorAcaoOrigem = value;
                    OnPropertyChanged("OcorAcaoOrigem");
                }
            }
        }
        private string _ocorAcaoOrigem;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL
        {
            get { return _eMPRESA_FILIAL; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eMPRESA_FILIAL;
                    _eMPRESA_FILIAL = value;
                    FixupEMPRESA_FILIAL(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL;
    
        [DataMember]
        public ENTIDADE ENTIDADE
        {
            get { return _eNTIDADE; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE, value))
                {
                    var previousValue = _eNTIDADE;
                    _eNTIDADE = value;
                    FixupENTIDADE(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE");
                }
            }
        }
        private ENTIDADE _eNTIDADE;
    
        [DataMember]
        public ENTIDADE1 ENTIDADE1
        {
            get { return _eNTIDADE1; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE1, value))
                {
                    var previousValue = _eNTIDADE1;
                    _eNTIDADE1 = value;
                    FixupENTIDADE1(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE1");
                }
            }
        }
        private ENTIDADE1 _eNTIDADE1;
    
        [DataMember]
        public ENTIDADE1 ENTIDADE11
        {
            get { return _eNTIDADE11; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE11, value))
                {
                    var previousValue = _eNTIDADE11;
                    _eNTIDADE11 = value;
                    FixupENTIDADE11(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE11");
                }
            }
        }
        private ENTIDADE1 _eNTIDADE11;
    
        [DataMember]
        public TrackableCollection<ITEM_OCOR> ITEM_OCOR
        {
            get
            {
                if (_iTEM_OCOR == null)
                {
                    _iTEM_OCOR = new TrackableCollection<ITEM_OCOR>();
                    _iTEM_OCOR.CollectionChanged += FixupITEM_OCOR;
                }
                return _iTEM_OCOR;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_OCOR, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_OCOR != null)
                    {
                        _iTEM_OCOR.CollectionChanged -= FixupITEM_OCOR;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ITEM_OCOR item in _iTEM_OCOR)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _iTEM_OCOR = value;
                    if (_iTEM_OCOR != null)
                    {
                        _iTEM_OCOR.CollectionChanged += FixupITEM_OCOR;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ITEM_OCOR item in _iTEM_OCOR)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ITEM_OCOR");
                }
            }
        }
        private TrackableCollection<ITEM_OCOR> _iTEM_OCOR;
    
        [DataMember]
        public PRODUTO PRODUTO
        {
            get { return _pRODUTO; }
            set
            {
                if (!ReferenceEquals(_pRODUTO, value))
                {
                    var previousValue = _pRODUTO;
                    _pRODUTO = value;
                    FixupPRODUTO(previousValue);
                    OnNavigationPropertyChanged("PRODUTO");
                }
            }
        }
        private PRODUTO _pRODUTO;
    
        [DataMember]
        public VENDEDOR VENDEDOR
        {
            get { return _vENDEDOR; }
            set
            {
                if (!ReferenceEquals(_vENDEDOR, value))
                {
                    var previousValue = _vENDEDOR;
                    _vENDEDOR = value;
                    FixupVENDEDOR(previousValue);
                    OnNavigationPropertyChanged("VENDEDOR");
                }
            }
        }
        private VENDEDOR _vENDEDOR;
    
        [DataMember]
        public TrackableCollection<OCORRENCIA> OCORRENCIA1
        {
            get
            {
                if (_oCORRENCIA1 == null)
                {
                    _oCORRENCIA1 = new TrackableCollection<OCORRENCIA>();
                    _oCORRENCIA1.CollectionChanged += FixupOCORRENCIA1;
                }
                return _oCORRENCIA1;
            }
            set
            {
                if (!ReferenceEquals(_oCORRENCIA1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_oCORRENCIA1 != null)
                    {
                        _oCORRENCIA1.CollectionChanged -= FixupOCORRENCIA1;
                    }
                    _oCORRENCIA1 = value;
                    if (_oCORRENCIA1 != null)
                    {
                        _oCORRENCIA1.CollectionChanged += FixupOCORRENCIA1;
                    }
                    OnNavigationPropertyChanged("OCORRENCIA1");
                }
            }
        }
        private TrackableCollection<OCORRENCIA> _oCORRENCIA1;
    
        [DataMember]
        public OCORRENCIA OCORRENCIA2
        {
            get { return _oCORRENCIA2; }
            set
            {
                if (!ReferenceEquals(_oCORRENCIA2, value))
                {
                    var previousValue = _oCORRENCIA2;
                    _oCORRENCIA2 = value;
                    FixupOCORRENCIA2(previousValue);
                    OnNavigationPropertyChanged("OCORRENCIA2");
                }
            }
        }
        private OCORRENCIA _oCORRENCIA2;
    
        [DataMember]
        public MOTIVO_OCOR MOTIVO_OCOR
        {
            get { return _mOTIVO_OCOR; }
            set
            {
                if (!ReferenceEquals(_mOTIVO_OCOR, value))
                {
                    var previousValue = _mOTIVO_OCOR;
                    _mOTIVO_OCOR = value;
                    FixupMOTIVO_OCOR(previousValue);
                    OnNavigationPropertyChanged("MOTIVO_OCOR");
                }
            }
        }
        private MOTIVO_OCOR _mOTIVO_OCOR;
    
        [DataMember]
        public COND_PAG COND_PAG
        {
            get { return _cOND_PAG; }
            set
            {
                if (!ReferenceEquals(_cOND_PAG, value))
                {
                    var previousValue = _cOND_PAG;
                    _cOND_PAG = value;
                    FixupCOND_PAG(previousValue);
                    OnNavigationPropertyChanged("COND_PAG");
                }
            }
        }
        private COND_PAG _cOND_PAG;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            EMPRESA_FILIAL = null;
            ENTIDADE = null;
            ENTIDADE1 = null;
            ENTIDADE11 = null;
            ITEM_OCOR.Clear();
            PRODUTO = null;
            VENDEDOR = null;
            OCORRENCIA1.Clear();
            OCORRENCIA2 = null;
            MOTIVO_OCOR = null;
            COND_PAG = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupEMPRESA_FILIAL(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OCORRENCIA.Contains(this))
            {
                previousValue.OCORRENCIA.Remove(this);
            }
    
            if (EMPRESA_FILIAL != null)
            {
                if (!EMPRESA_FILIAL.OCORRENCIA.Contains(this))
                {
                    EMPRESA_FILIAL.OCORRENCIA.Add(this);
                }
    
                EmpCod = EMPRESA_FILIAL.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL"] == EMPRESA_FILIAL))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL", previousValue);
                }
                if (EMPRESA_FILIAL != null && !EMPRESA_FILIAL.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE(ENTIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OCORRENCIA.Contains(this))
            {
                previousValue.OCORRENCIA.Remove(this);
            }
    
            if (ENTIDADE != null)
            {
                if (!ENTIDADE.OCORRENCIA.Contains(this))
                {
                    ENTIDADE.OCORRENCIA.Add(this);
                }
    
                EntCod = ENTIDADE.EntCod;
            }
            else if (!skipKeys)
            {
                EntCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE")
                    && (ChangeTracker.OriginalValues["ENTIDADE"] == ENTIDADE))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE", previousValue);
                }
                if (ENTIDADE != null && !ENTIDADE.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE1(ENTIDADE1 previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OCORRENCIA.Contains(this))
            {
                previousValue.OCORRENCIA.Remove(this);
            }
    
            if (ENTIDADE1 != null)
            {
                if (!ENTIDADE1.OCORRENCIA.Contains(this))
                {
                    ENTIDADE1.OCORRENCIA.Add(this);
                }
    
                OcorEntCodEntr = ENTIDADE1.EntCod;
            }
            else if (!skipKeys)
            {
                OcorEntCodEntr = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE1")
                    && (ChangeTracker.OriginalValues["ENTIDADE1"] == ENTIDADE1))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE1", previousValue);
                }
                if (ENTIDADE1 != null && !ENTIDADE1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE1.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE11(ENTIDADE1 previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OCORRENCIA1.Contains(this))
            {
                previousValue.OCORRENCIA1.Remove(this);
            }
    
            if (ENTIDADE11 != null)
            {
                if (!ENTIDADE11.OCORRENCIA1.Contains(this))
                {
                    ENTIDADE11.OCORRENCIA1.Add(this);
                }
    
                OcorEntCodAutorizado = ENTIDADE11.EntCod;
            }
            else if (!skipKeys)
            {
                OcorEntCodAutorizado = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE11")
                    && (ChangeTracker.OriginalValues["ENTIDADE11"] == ENTIDADE11))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE11");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE11", previousValue);
                }
                if (ENTIDADE11 != null && !ENTIDADE11.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE11.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO(PRODUTO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OCORRENCIA.Contains(this))
            {
                previousValue.OCORRENCIA.Remove(this);
            }
    
            if (PRODUTO != null)
            {
                if (!PRODUTO.OCORRENCIA.Contains(this))
                {
                    PRODUTO.OCORRENCIA.Add(this);
                }
    
                ProdCodEstr = PRODUTO.ProdCodEstr;
            }
            else if (!skipKeys)
            {
                ProdCodEstr = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO")
                    && (ChangeTracker.OriginalValues["PRODUTO"] == PRODUTO))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO", previousValue);
                }
                if (PRODUTO != null && !PRODUTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO.StartTracking();
                }
            }
        }
    
        private void FixupVENDEDOR(VENDEDOR previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OCORRENCIA.Contains(this))
            {
                previousValue.OCORRENCIA.Remove(this);
            }
    
            if (VENDEDOR != null)
            {
                if (!VENDEDOR.OCORRENCIA.Contains(this))
                {
                    VENDEDOR.OCORRENCIA.Add(this);
                }
    
                VendCod = VENDEDOR.VendCod;
            }
            else if (!skipKeys)
            {
                VendCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VENDEDOR")
                    && (ChangeTracker.OriginalValues["VENDEDOR"] == VENDEDOR))
                {
                    ChangeTracker.OriginalValues.Remove("VENDEDOR");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VENDEDOR", previousValue);
                }
                if (VENDEDOR != null && !VENDEDOR.ChangeTracker.ChangeTrackingEnabled)
                {
                    VENDEDOR.StartTracking();
                }
            }
        }
    
        private void FixupOCORRENCIA2(OCORRENCIA previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OCORRENCIA1.Contains(this))
            {
                previousValue.OCORRENCIA1.Remove(this);
            }
    
            if (OCORRENCIA2 != null)
            {
                if (!OCORRENCIA2.OCORRENCIA1.Contains(this))
                {
                    OCORRENCIA2.OCORRENCIA1.Add(this);
                }
    
                EmpCod = OCORRENCIA2.EmpCod;
                OcorRefCod = OCORRENCIA2.OcorCod;
            }
            else if (!skipKeys)
            {
                OcorRefCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OCORRENCIA2")
                    && (ChangeTracker.OriginalValues["OCORRENCIA2"] == OCORRENCIA2))
                {
                    ChangeTracker.OriginalValues.Remove("OCORRENCIA2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OCORRENCIA2", previousValue);
                }
                if (OCORRENCIA2 != null && !OCORRENCIA2.ChangeTracker.ChangeTrackingEnabled)
                {
                    OCORRENCIA2.StartTracking();
                }
            }
        }
    
        private void FixupMOTIVO_OCOR(MOTIVO_OCOR previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OCORRENCIA.Contains(this))
            {
                previousValue.OCORRENCIA.Remove(this);
            }
    
            if (MOTIVO_OCOR != null)
            {
                if (!MOTIVO_OCOR.OCORRENCIA.Contains(this))
                {
                    MOTIVO_OCOR.OCORRENCIA.Add(this);
                }
    
                MotOcorCodEstr = MOTIVO_OCOR.MotOcorCodEstr;
            }
            else if (!skipKeys)
            {
                MotOcorCodEstr = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MOTIVO_OCOR")
                    && (ChangeTracker.OriginalValues["MOTIVO_OCOR"] == MOTIVO_OCOR))
                {
                    ChangeTracker.OriginalValues.Remove("MOTIVO_OCOR");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MOTIVO_OCOR", previousValue);
                }
                if (MOTIVO_OCOR != null && !MOTIVO_OCOR.ChangeTracker.ChangeTrackingEnabled)
                {
                    MOTIVO_OCOR.StartTracking();
                }
            }
        }
    
        private void FixupCOND_PAG(COND_PAG previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OCORRENCIA.Contains(this))
            {
                previousValue.OCORRENCIA.Remove(this);
            }
    
            if (COND_PAG != null)
            {
                if (!COND_PAG.OCORRENCIA.Contains(this))
                {
                    COND_PAG.OCORRENCIA.Add(this);
                }
    
                OcorCondPagCod = COND_PAG.CondPagCod;
            }
            else if (!skipKeys)
            {
                OcorCondPagCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("COND_PAG")
                    && (ChangeTracker.OriginalValues["COND_PAG"] == COND_PAG))
                {
                    ChangeTracker.OriginalValues.Remove("COND_PAG");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("COND_PAG", previousValue);
                }
                if (COND_PAG != null && !COND_PAG.ChangeTracker.ChangeTrackingEnabled)
                {
                    COND_PAG.StartTracking();
                }
            }
        }
    
        private void FixupITEM_OCOR(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_OCOR item in e.NewItems)
                {
                    item.OCORRENCIA = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_OCOR", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_OCOR item in e.OldItems)
                {
                    if (ReferenceEquals(item.OCORRENCIA, this))
                    {
                        item.OCORRENCIA = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_OCOR", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupOCORRENCIA1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OCORRENCIA item in e.NewItems)
                {
                    item.OCORRENCIA2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OCORRENCIA1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OCORRENCIA item in e.OldItems)
                {
                    if (ReferenceEquals(item.OCORRENCIA2, this))
                    {
                        item.OCORRENCIA2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OCORRENCIA1", item);
                    }
                }
            }
        }

        #endregion

    }
}
