//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.Apolo
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(VENDEDOR))]
    [KnownType(typeof(NOTA_FISCAL))]
    public partial class VEND_NF: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (NOTA_FISCAL != null && NOTA_FISCAL.EmpCod != value)
                        {
                            NOTA_FISCAL = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string CtrlDFModForm
        {
            get { return _ctrlDFModForm; }
            set
            {
                if (_ctrlDFModForm != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CtrlDFModForm' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (NOTA_FISCAL != null && NOTA_FISCAL.CtrlDFModForm != value)
                        {
                            NOTA_FISCAL = null;
                        }
                    }
                    _ctrlDFModForm = value;
                    OnPropertyChanged("CtrlDFModForm");
                }
            }
        }
        private string _ctrlDFModForm;
    
        [DataMember]
        public string CtrlDFSerie
        {
            get { return _ctrlDFSerie; }
            set
            {
                if (_ctrlDFSerie != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CtrlDFSerie' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (NOTA_FISCAL != null && NOTA_FISCAL.CtrlDFSerie != value)
                        {
                            NOTA_FISCAL = null;
                        }
                    }
                    _ctrlDFSerie = value;
                    OnPropertyChanged("CtrlDFSerie");
                }
            }
        }
        private string _ctrlDFSerie;
    
        [DataMember]
        public string NFNum
        {
            get { return _nFNum; }
            set
            {
                if (_nFNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NFNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (NOTA_FISCAL != null && NOTA_FISCAL.NFNum != value)
                        {
                            NOTA_FISCAL = null;
                        }
                    }
                    _nFNum = value;
                    OnPropertyChanged("NFNum");
                }
            }
        }
        private string _nFNum;
    
        [DataMember]
        public string VendCod
        {
            get { return _vendCod; }
            set
            {
                if (_vendCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'VendCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (VENDEDOR != null && VENDEDOR.VendCod != value)
                        {
                            VENDEDOR = null;
                        }
                    }
                    _vendCod = value;
                    OnPropertyChanged("VendCod");
                }
            }
        }
        private string _vendCod;
    
        [DataMember]
        public string VendNfPrinc
        {
            get { return _vendNfPrinc; }
            set
            {
                if (_vendNfPrinc != value)
                {
                    _vendNfPrinc = value;
                    OnPropertyChanged("VendNfPrinc");
                }
            }
        }
        private string _vendNfPrinc;
    
        [DataMember]
        public Nullable<decimal> VendNFPercRat
        {
            get { return _vendNFPercRat; }
            set
            {
                if (_vendNFPercRat != value)
                {
                    _vendNFPercRat = value;
                    OnPropertyChanged("VendNFPercRat");
                }
            }
        }
        private Nullable<decimal> _vendNFPercRat;
    
        [DataMember]
        public Nullable<decimal> VendNFPercPartVenda
        {
            get { return _vendNFPercPartVenda; }
            set
            {
                if (_vendNFPercPartVenda != value)
                {
                    _vendNFPercPartVenda = value;
                    OnPropertyChanged("VendNFPercPartVenda");
                }
            }
        }
        private Nullable<decimal> _vendNFPercPartVenda;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public VENDEDOR VENDEDOR
        {
            get { return _vENDEDOR; }
            set
            {
                if (!ReferenceEquals(_vENDEDOR, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (VendCod != value.VendCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _vENDEDOR;
                    _vENDEDOR = value;
                    FixupVENDEDOR(previousValue);
                    OnNavigationPropertyChanged("VENDEDOR");
                }
            }
        }
        private VENDEDOR _vENDEDOR;
    
        [DataMember]
        public NOTA_FISCAL NOTA_FISCAL
        {
            get { return _nOTA_FISCAL; }
            set
            {
                if (!ReferenceEquals(_nOTA_FISCAL, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || CtrlDFModForm != value.CtrlDFModForm || CtrlDFSerie != value.CtrlDFSerie || NFNum != value.NFNum)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _nOTA_FISCAL;
                    _nOTA_FISCAL = value;
                    FixupNOTA_FISCAL(previousValue);
                    OnNavigationPropertyChanged("NOTA_FISCAL");
                }
            }
        }
        private NOTA_FISCAL _nOTA_FISCAL;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            VENDEDOR = null;
            NOTA_FISCAL = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupVENDEDOR(VENDEDOR previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VEND_NF.Contains(this))
            {
                previousValue.VEND_NF.Remove(this);
            }
    
            if (VENDEDOR != null)
            {
                if (!VENDEDOR.VEND_NF.Contains(this))
                {
                    VENDEDOR.VEND_NF.Add(this);
                }
    
                VendCod = VENDEDOR.VendCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VENDEDOR")
                    && (ChangeTracker.OriginalValues["VENDEDOR"] == VENDEDOR))
                {
                    ChangeTracker.OriginalValues.Remove("VENDEDOR");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VENDEDOR", previousValue);
                }
                if (VENDEDOR != null && !VENDEDOR.ChangeTracker.ChangeTrackingEnabled)
                {
                    VENDEDOR.StartTracking();
                }
            }
        }
    
        private void FixupNOTA_FISCAL(NOTA_FISCAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VEND_NF.Contains(this))
            {
                previousValue.VEND_NF.Remove(this);
            }
    
            if (NOTA_FISCAL != null)
            {
                if (!NOTA_FISCAL.VEND_NF.Contains(this))
                {
                    NOTA_FISCAL.VEND_NF.Add(this);
                }
    
                EmpCod = NOTA_FISCAL.EmpCod;
                CtrlDFModForm = NOTA_FISCAL.CtrlDFModForm;
                CtrlDFSerie = NOTA_FISCAL.CtrlDFSerie;
                NFNum = NOTA_FISCAL.NFNum;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NOTA_FISCAL")
                    && (ChangeTracker.OriginalValues["NOTA_FISCAL"] == NOTA_FISCAL))
                {
                    ChangeTracker.OriginalValues.Remove("NOTA_FISCAL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NOTA_FISCAL", previousValue);
                }
                if (NOTA_FISCAL != null && !NOTA_FISCAL.ChangeTracker.ChangeTrackingEnabled)
                {
                    NOTA_FISCAL.StartTracking();
                }
            }
        }

        #endregion

    }
}
