//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.Apolo
{
    [DataContract(IsReference = true)]
    public partial class VU_Lista_Entregas: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<System.DateTime> Data_Nascimento
        {
            get { return _data_Nascimento; }
            set
            {
                if (_data_Nascimento != value)
                {
                    _data_Nascimento = value;
                    OnPropertyChanged("Data_Nascimento");
                }
            }
        }
        private Nullable<System.DateTime> _data_Nascimento;
    
        [DataMember]
        public string Caminhão
        {
            get { return _caminhão; }
            set
            {
                if (_caminhão != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Caminhão' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _caminhão = value;
                    OnPropertyChanged("Caminhão");
                }
            }
        }
        private string _caminhão;
    
        [DataMember]
        public string Placa
        {
            get { return _placa; }
            set
            {
                if (_placa != value)
                {
                    _placa = value;
                    OnPropertyChanged("Placa");
                }
            }
        }
        private string _placa;
    
        [DataMember]
        public string Marca
        {
            get { return _marca; }
            set
            {
                if (_marca != value)
                {
                    _marca = value;
                    OnPropertyChanged("Marca");
                }
            }
        }
        private string _marca;
    
        [DataMember]
        public string Modelo
        {
            get { return _modelo; }
            set
            {
                if (_modelo != value)
                {
                    _modelo = value;
                    OnPropertyChanged("Modelo");
                }
            }
        }
        private string _modelo;
    
        [DataMember]
        public string Baú
        {
            get { return _baú; }
            set
            {
                if (_baú != value)
                {
                    _baú = value;
                    OnPropertyChanged("Baú");
                }
            }
        }
        private string _baú;
    
        [DataMember]
        public string NFVeicPlaca
        {
            get { return _nFVeicPlaca; }
            set
            {
                if (_nFVeicPlaca != value)
                {
                    _nFVeicPlaca = value;
                    OnPropertyChanged("NFVeicPlaca");
                }
            }
        }
        private string _nFVeicPlaca;
    
        [DataMember]
        public Nullable<int> Logger_Importado
        {
            get { return _logger_Importado; }
            set
            {
                if (_logger_Importado != value)
                {
                    _logger_Importado = value;
                    OnPropertyChanged("Logger_Importado");
                }
            }
        }
        private Nullable<int> _logger_Importado;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
