//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CLAS_FISCAL_AUX))]
    [KnownType(typeof(CLAS_FISCAL))]
    [KnownType(typeof(ITEM_PED_COMP))]
    [KnownType(typeof(PRODUTO))]
    [KnownType(typeof(CLAS_FISCAL_COFINS))]
    [KnownType(typeof(CLAS_FISCAL_PIS))]
    [KnownType(typeof(ITEM_MOV_ESTQ))]
    public partial class CLAS_FISCAL: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ClasFiscCod
        {
            get { return _clasFiscCod; }
            set
            {
                if (_clasFiscCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ClasFiscCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _clasFiscCod = value;
                    OnPropertyChanged("ClasFiscCod");
                }
            }
        }
        private string _clasFiscCod;
    
        [DataMember]
        public string ClasFiscCodNbm
        {
            get { return _clasFiscCodNbm; }
            set
            {
                if (_clasFiscCodNbm != value)
                {
                    _clasFiscCodNbm = value;
                    OnPropertyChanged("ClasFiscCodNbm");
                }
            }
        }
        private string _clasFiscCodNbm;
    
        [DataMember]
        public string ClasFiscCodTec
        {
            get { return _clasFiscCodTec; }
            set
            {
                if (_clasFiscCodTec != value)
                {
                    _clasFiscCodTec = value;
                    OnPropertyChanged("ClasFiscCodTec");
                }
            }
        }
        private string _clasFiscCodTec;
    
        [DataMember]
        public string ClasFiscNome
        {
            get { return _clasFiscNome; }
            set
            {
                if (_clasFiscNome != value)
                {
                    _clasFiscNome = value;
                    OnPropertyChanged("ClasFiscNome");
                }
            }
        }
        private string _clasFiscNome;
    
        [DataMember]
        public string ClasFiscIcmsAjust
        {
            get { return _clasFiscIcmsAjust; }
            set
            {
                if (_clasFiscIcmsAjust != value)
                {
                    _clasFiscIcmsAjust = value;
                    OnPropertyChanged("ClasFiscIcmsAjust");
                }
            }
        }
        private string _clasFiscIcmsAjust;
    
        [DataMember]
        public string ClasFiscFunrural
        {
            get { return _clasFiscFunrural; }
            set
            {
                if (_clasFiscFunrural != value)
                {
                    _clasFiscFunrural = value;
                    OnPropertyChanged("ClasFiscFunrural");
                }
            }
        }
        private string _clasFiscFunrural;
    
        [DataMember]
        public string ClasFiscFunruralIsencao
        {
            get { return _clasFiscFunruralIsencao; }
            set
            {
                if (_clasFiscFunruralIsencao != value)
                {
                    _clasFiscFunruralIsencao = value;
                    OnPropertyChanged("ClasFiscFunruralIsencao");
                }
            }
        }
        private string _clasFiscFunruralIsencao;
    
        [DataMember]
        public string ClasFiscCodRelac
        {
            get { return _clasFiscCodRelac; }
            set
            {
                if (_clasFiscCodRelac != value)
                {
                    ChangeTracker.RecordOriginalValue("ClasFiscCodRelac", _clasFiscCodRelac);
                    if (!IsDeserializing)
                    {
                        if (CLAS_FISCAL2 != null && CLAS_FISCAL2.ClasFiscCod != value)
                        {
                            CLAS_FISCAL2 = null;
                        }
                    }
                    _clasFiscCodRelac = value;
                    OnPropertyChanged("ClasFiscCodRelac");
                }
            }
        }
        private string _clasFiscCodRelac;
    
        [DataMember]
        public string ClasFiscMensCodFunrural
        {
            get { return _clasFiscMensCodFunrural; }
            set
            {
                if (_clasFiscMensCodFunrural != value)
                {
                    _clasFiscMensCodFunrural = value;
                    OnPropertyChanged("ClasFiscMensCodFunrural");
                }
            }
        }
        private string _clasFiscMensCodFunrural;
    
        [DataMember]
        public string ClasFiscIIEx
        {
            get { return _clasFiscIIEx; }
            set
            {
                if (_clasFiscIIEx != value)
                {
                    _clasFiscIIEx = value;
                    OnPropertyChanged("ClasFiscIIEx");
                }
            }
        }
        private string _clasFiscIIEx;
    
        [DataMember]
        public string ClasFiscIpiEx
        {
            get { return _clasFiscIpiEx; }
            set
            {
                if (_clasFiscIpiEx != value)
                {
                    _clasFiscIpiEx = value;
                    OnPropertyChanged("ClasFiscIpiEx");
                }
            }
        }
        private string _clasFiscIpiEx;
    
        [DataMember]
        public string ClasFiscIpiSujIsencImport
        {
            get { return _clasFiscIpiSujIsencImport; }
            set
            {
                if (_clasFiscIpiSujIsencImport != value)
                {
                    _clasFiscIpiSujIsencImport = value;
                    OnPropertyChanged("ClasFiscIpiSujIsencImport");
                }
            }
        }
        private string _clasFiscIpiSujIsencImport;
    
        [DataMember]
        public Nullable<decimal> ClasFiscIrrfPerc
        {
            get { return _clasFiscIrrfPerc; }
            set
            {
                if (_clasFiscIrrfPerc != value)
                {
                    _clasFiscIrrfPerc = value;
                    OnPropertyChanged("ClasFiscIrrfPerc");
                }
            }
        }
        private Nullable<decimal> _clasFiscIrrfPerc;
    
        [DataMember]
        public string ClasFiscNumItem
        {
            get { return _clasFiscNumItem; }
            set
            {
                if (_clasFiscNumItem != value)
                {
                    _clasFiscNumItem = value;
                    OnPropertyChanged("ClasFiscNumItem");
                }
            }
        }
        private string _clasFiscNumItem;
    
        [DataMember]
        public string ClasFiscDescrComp
        {
            get { return _clasFiscDescrComp; }
            set
            {
                if (_clasFiscDescrComp != value)
                {
                    _clasFiscDescrComp = value;
                    OnPropertyChanged("ClasFiscDescrComp");
                }
            }
        }
        private string _clasFiscDescrComp;
    
        [DataMember]
        public string ClasFiscMedicLista
        {
            get { return _clasFiscMedicLista; }
            set
            {
                if (_clasFiscMedicLista != value)
                {
                    _clasFiscMedicLista = value;
                    OnPropertyChanged("ClasFiscMedicLista");
                }
            }
        }
        private string _clasFiscMedicLista;
    
        [DataMember]
        public string ClasFiscCalcCargaTribICMS
        {
            get { return _clasFiscCalcCargaTribICMS; }
            set
            {
                if (_clasFiscCalcCargaTribICMS != value)
                {
                    _clasFiscCalcCargaTribICMS = value;
                    OnPropertyChanged("ClasFiscCalcCargaTribICMS");
                }
            }
        }
        private string _clasFiscCalcCargaTribICMS;
    
        [DataMember]
        public string ClasFiscUsuCod
        {
            get { return _clasFiscUsuCod; }
            set
            {
                if (_clasFiscUsuCod != value)
                {
                    _clasFiscUsuCod = value;
                    OnPropertyChanged("ClasFiscUsuCod");
                }
            }
        }
        private string _clasFiscUsuCod;
    
        [DataMember]
        public string ClasFiscCodInsumo
        {
            get { return _clasFiscCodInsumo; }
            set
            {
                if (_clasFiscCodInsumo != value)
                {
                    _clasFiscCodInsumo = value;
                    OnPropertyChanged("ClasFiscCodInsumo");
                }
            }
        }
        private string _clasFiscCodInsumo;
    
        [DataMember]
        public string ClasFiscCodServ
        {
            get { return _clasFiscCodServ; }
            set
            {
                if (_clasFiscCodServ != value)
                {
                    _clasFiscCodServ = value;
                    OnPropertyChanged("ClasFiscCodServ");
                }
            }
        }
        private string _clasFiscCodServ;
    
        [DataMember]
        public string EFDBaseCalcCredCod
        {
            get { return _eFDBaseCalcCredCod; }
            set
            {
                if (_eFDBaseCalcCredCod != value)
                {
                    _eFDBaseCalcCredCod = value;
                    OnPropertyChanged("EFDBaseCalcCredCod");
                }
            }
        }
        private string _eFDBaseCalcCredCod;
    
        [DataMember]
        public string ClasFiscCodNBS
        {
            get { return _clasFiscCodNBS; }
            set
            {
                if (_clasFiscCodNBS != value)
                {
                    _clasFiscCodNBS = value;
                    OnPropertyChanged("ClasFiscCodNBS");
                }
            }
        }
        private string _clasFiscCodNBS;
    
        [DataMember]
        public string ClasFiscEntraDesonFolha
        {
            get { return _clasFiscEntraDesonFolha; }
            set
            {
                if (_clasFiscEntraDesonFolha != value)
                {
                    _clasFiscEntraDesonFolha = value;
                    OnPropertyChanged("ClasFiscEntraDesonFolha");
                }
            }
        }
        private string _clasFiscEntraDesonFolha;
    
        [DataMember]
        public Nullable<decimal> ClasFiscPercAproxImposNac
        {
            get { return _clasFiscPercAproxImposNac; }
            set
            {
                if (_clasFiscPercAproxImposNac != value)
                {
                    _clasFiscPercAproxImposNac = value;
                    OnPropertyChanged("ClasFiscPercAproxImposNac");
                }
            }
        }
        private Nullable<decimal> _clasFiscPercAproxImposNac;
    
        [DataMember]
        public Nullable<decimal> ClasFiscPercAproxImposImp
        {
            get { return _clasFiscPercAproxImposImp; }
            set
            {
                if (_clasFiscPercAproxImposImp != value)
                {
                    _clasFiscPercAproxImposImp = value;
                    OnPropertyChanged("ClasFiscPercAproxImposImp");
                }
            }
        }
        private Nullable<decimal> _clasFiscPercAproxImposImp;
    
        [DataMember]
        public string ClasFiscNVE
        {
            get { return _clasFiscNVE; }
            set
            {
                if (_clasFiscNVE != value)
                {
                    _clasFiscNVE = value;
                    OnPropertyChanged("ClasFiscNVE");
                }
            }
        }
        private string _clasFiscNVE;
    
        [DataMember]
        public Nullable<decimal> USERAliqAproxTributos
        {
            get { return _uSERAliqAproxTributos; }
            set
            {
                if (_uSERAliqAproxTributos != value)
                {
                    _uSERAliqAproxTributos = value;
                    OnPropertyChanged("USERAliqAproxTributos");
                }
            }
        }
        private Nullable<decimal> _uSERAliqAproxTributos;
    
        [DataMember]
        public Nullable<decimal> ClasFiscPercBenINVESTES
        {
            get { return _clasFiscPercBenINVESTES; }
            set
            {
                if (_clasFiscPercBenINVESTES != value)
                {
                    _clasFiscPercBenINVESTES = value;
                    OnPropertyChanged("ClasFiscPercBenINVESTES");
                }
            }
        }
        private Nullable<decimal> _clasFiscPercBenINVESTES;
    
        [DataMember]
        public Nullable<System.DateTime> ClasFiscDtUltAtualiz
        {
            get { return _clasFiscDtUltAtualiz; }
            set
            {
                if (_clasFiscDtUltAtualiz != value)
                {
                    _clasFiscDtUltAtualiz = value;
                    OnPropertyChanged("ClasFiscDtUltAtualiz");
                }
            }
        }
        private Nullable<System.DateTime> _clasFiscDtUltAtualiz;
    
        [DataMember]
        public string ClasFiscCEST
        {
            get { return _clasFiscCEST; }
            set
            {
                if (_clasFiscCEST != value)
                {
                    _clasFiscCEST = value;
                    OnPropertyChanged("ClasFiscCEST");
                }
            }
        }
        private string _clasFiscCEST;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CLAS_FISCAL_AUX> CLAS_FISCAL_AUX
        {
            get
            {
                if (_cLAS_FISCAL_AUX == null)
                {
                    _cLAS_FISCAL_AUX = new TrackableCollection<CLAS_FISCAL_AUX>();
                    _cLAS_FISCAL_AUX.CollectionChanged += FixupCLAS_FISCAL_AUX;
                }
                return _cLAS_FISCAL_AUX;
            }
            set
            {
                if (!ReferenceEquals(_cLAS_FISCAL_AUX, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cLAS_FISCAL_AUX != null)
                    {
                        _cLAS_FISCAL_AUX.CollectionChanged -= FixupCLAS_FISCAL_AUX;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CLAS_FISCAL_AUX item in _cLAS_FISCAL_AUX)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _cLAS_FISCAL_AUX = value;
                    if (_cLAS_FISCAL_AUX != null)
                    {
                        _cLAS_FISCAL_AUX.CollectionChanged += FixupCLAS_FISCAL_AUX;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CLAS_FISCAL_AUX item in _cLAS_FISCAL_AUX)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CLAS_FISCAL_AUX");
                }
            }
        }
        private TrackableCollection<CLAS_FISCAL_AUX> _cLAS_FISCAL_AUX;
    
        [DataMember]
        public TrackableCollection<CLAS_FISCAL> CLAS_FISCAL1
        {
            get
            {
                if (_cLAS_FISCAL1 == null)
                {
                    _cLAS_FISCAL1 = new TrackableCollection<CLAS_FISCAL>();
                    _cLAS_FISCAL1.CollectionChanged += FixupCLAS_FISCAL1;
                }
                return _cLAS_FISCAL1;
            }
            set
            {
                if (!ReferenceEquals(_cLAS_FISCAL1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cLAS_FISCAL1 != null)
                    {
                        _cLAS_FISCAL1.CollectionChanged -= FixupCLAS_FISCAL1;
                    }
                    _cLAS_FISCAL1 = value;
                    if (_cLAS_FISCAL1 != null)
                    {
                        _cLAS_FISCAL1.CollectionChanged += FixupCLAS_FISCAL1;
                    }
                    OnNavigationPropertyChanged("CLAS_FISCAL1");
                }
            }
        }
        private TrackableCollection<CLAS_FISCAL> _cLAS_FISCAL1;
    
        [DataMember]
        public CLAS_FISCAL CLAS_FISCAL2
        {
            get { return _cLAS_FISCAL2; }
            set
            {
                if (!ReferenceEquals(_cLAS_FISCAL2, value))
                {
                    var previousValue = _cLAS_FISCAL2;
                    _cLAS_FISCAL2 = value;
                    FixupCLAS_FISCAL2(previousValue);
                    OnNavigationPropertyChanged("CLAS_FISCAL2");
                }
            }
        }
        private CLAS_FISCAL _cLAS_FISCAL2;
    
        [DataMember]
        public TrackableCollection<ITEM_PED_COMP> ITEM_PED_COMP
        {
            get
            {
                if (_iTEM_PED_COMP == null)
                {
                    _iTEM_PED_COMP = new TrackableCollection<ITEM_PED_COMP>();
                    _iTEM_PED_COMP.CollectionChanged += FixupITEM_PED_COMP;
                }
                return _iTEM_PED_COMP;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_PED_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_PED_COMP != null)
                    {
                        _iTEM_PED_COMP.CollectionChanged -= FixupITEM_PED_COMP;
                    }
                    _iTEM_PED_COMP = value;
                    if (_iTEM_PED_COMP != null)
                    {
                        _iTEM_PED_COMP.CollectionChanged += FixupITEM_PED_COMP;
                    }
                    OnNavigationPropertyChanged("ITEM_PED_COMP");
                }
            }
        }
        private TrackableCollection<ITEM_PED_COMP> _iTEM_PED_COMP;
    
        [DataMember]
        public TrackableCollection<PRODUTO> PRODUTO
        {
            get
            {
                if (_pRODUTO == null)
                {
                    _pRODUTO = new TrackableCollection<PRODUTO>();
                    _pRODUTO.CollectionChanged += FixupPRODUTO;
                }
                return _pRODUTO;
            }
            set
            {
                if (!ReferenceEquals(_pRODUTO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pRODUTO != null)
                    {
                        _pRODUTO.CollectionChanged -= FixupPRODUTO;
                    }
                    _pRODUTO = value;
                    if (_pRODUTO != null)
                    {
                        _pRODUTO.CollectionChanged += FixupPRODUTO;
                    }
                    OnNavigationPropertyChanged("PRODUTO");
                }
            }
        }
        private TrackableCollection<PRODUTO> _pRODUTO;
    
        [DataMember]
        public TrackableCollection<CLAS_FISCAL_COFINS> CLAS_FISCAL_COFINS
        {
            get
            {
                if (_cLAS_FISCAL_COFINS == null)
                {
                    _cLAS_FISCAL_COFINS = new TrackableCollection<CLAS_FISCAL_COFINS>();
                    _cLAS_FISCAL_COFINS.CollectionChanged += FixupCLAS_FISCAL_COFINS;
                }
                return _cLAS_FISCAL_COFINS;
            }
            set
            {
                if (!ReferenceEquals(_cLAS_FISCAL_COFINS, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cLAS_FISCAL_COFINS != null)
                    {
                        _cLAS_FISCAL_COFINS.CollectionChanged -= FixupCLAS_FISCAL_COFINS;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CLAS_FISCAL_COFINS item in _cLAS_FISCAL_COFINS)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _cLAS_FISCAL_COFINS = value;
                    if (_cLAS_FISCAL_COFINS != null)
                    {
                        _cLAS_FISCAL_COFINS.CollectionChanged += FixupCLAS_FISCAL_COFINS;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CLAS_FISCAL_COFINS item in _cLAS_FISCAL_COFINS)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CLAS_FISCAL_COFINS");
                }
            }
        }
        private TrackableCollection<CLAS_FISCAL_COFINS> _cLAS_FISCAL_COFINS;
    
        [DataMember]
        public TrackableCollection<CLAS_FISCAL_PIS> CLAS_FISCAL_PIS
        {
            get
            {
                if (_cLAS_FISCAL_PIS == null)
                {
                    _cLAS_FISCAL_PIS = new TrackableCollection<CLAS_FISCAL_PIS>();
                    _cLAS_FISCAL_PIS.CollectionChanged += FixupCLAS_FISCAL_PIS;
                }
                return _cLAS_FISCAL_PIS;
            }
            set
            {
                if (!ReferenceEquals(_cLAS_FISCAL_PIS, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cLAS_FISCAL_PIS != null)
                    {
                        _cLAS_FISCAL_PIS.CollectionChanged -= FixupCLAS_FISCAL_PIS;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CLAS_FISCAL_PIS item in _cLAS_FISCAL_PIS)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _cLAS_FISCAL_PIS = value;
                    if (_cLAS_FISCAL_PIS != null)
                    {
                        _cLAS_FISCAL_PIS.CollectionChanged += FixupCLAS_FISCAL_PIS;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CLAS_FISCAL_PIS item in _cLAS_FISCAL_PIS)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CLAS_FISCAL_PIS");
                }
            }
        }
        private TrackableCollection<CLAS_FISCAL_PIS> _cLAS_FISCAL_PIS;
    
        [DataMember]
        public TrackableCollection<ITEM_MOV_ESTQ> ITEM_MOV_ESTQ
        {
            get
            {
                if (_iTEM_MOV_ESTQ == null)
                {
                    _iTEM_MOV_ESTQ = new TrackableCollection<ITEM_MOV_ESTQ>();
                    _iTEM_MOV_ESTQ.CollectionChanged += FixupITEM_MOV_ESTQ;
                }
                return _iTEM_MOV_ESTQ;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_MOV_ESTQ != null)
                    {
                        _iTEM_MOV_ESTQ.CollectionChanged -= FixupITEM_MOV_ESTQ;
                    }
                    _iTEM_MOV_ESTQ = value;
                    if (_iTEM_MOV_ESTQ != null)
                    {
                        _iTEM_MOV_ESTQ.CollectionChanged += FixupITEM_MOV_ESTQ;
                    }
                    OnNavigationPropertyChanged("ITEM_MOV_ESTQ");
                }
            }
        }
        private TrackableCollection<ITEM_MOV_ESTQ> _iTEM_MOV_ESTQ;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CLAS_FISCAL_AUX.Clear();
            CLAS_FISCAL1.Clear();
            CLAS_FISCAL2 = null;
            ITEM_PED_COMP.Clear();
            PRODUTO.Clear();
            CLAS_FISCAL_COFINS.Clear();
            CLAS_FISCAL_PIS.Clear();
            ITEM_MOV_ESTQ.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCLAS_FISCAL2(CLAS_FISCAL previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CLAS_FISCAL1.Contains(this))
            {
                previousValue.CLAS_FISCAL1.Remove(this);
            }
    
            if (CLAS_FISCAL2 != null)
            {
                if (!CLAS_FISCAL2.CLAS_FISCAL1.Contains(this))
                {
                    CLAS_FISCAL2.CLAS_FISCAL1.Add(this);
                }
    
                ClasFiscCodRelac = CLAS_FISCAL2.ClasFiscCod;
            }
            else if (!skipKeys)
            {
                ClasFiscCodRelac = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CLAS_FISCAL2")
                    && (ChangeTracker.OriginalValues["CLAS_FISCAL2"] == CLAS_FISCAL2))
                {
                    ChangeTracker.OriginalValues.Remove("CLAS_FISCAL2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CLAS_FISCAL2", previousValue);
                }
                if (CLAS_FISCAL2 != null && !CLAS_FISCAL2.ChangeTracker.ChangeTrackingEnabled)
                {
                    CLAS_FISCAL2.StartTracking();
                }
            }
        }
    
        private void FixupCLAS_FISCAL_AUX(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CLAS_FISCAL_AUX item in e.NewItems)
                {
                    item.CLAS_FISCAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CLAS_FISCAL_AUX", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CLAS_FISCAL_AUX item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLAS_FISCAL, this))
                    {
                        item.CLAS_FISCAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CLAS_FISCAL_AUX", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCLAS_FISCAL1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CLAS_FISCAL item in e.NewItems)
                {
                    item.CLAS_FISCAL2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CLAS_FISCAL1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CLAS_FISCAL item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLAS_FISCAL2, this))
                    {
                        item.CLAS_FISCAL2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CLAS_FISCAL1", item);
                    }
                }
            }
        }
    
        private void FixupITEM_PED_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_PED_COMP item in e.NewItems)
                {
                    item.CLAS_FISCAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_PED_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLAS_FISCAL, this))
                    {
                        item.CLAS_FISCAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_PED_COMP", item);
                    }
                }
            }
        }
    
        private void FixupPRODUTO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PRODUTO item in e.NewItems)
                {
                    item.CLAS_FISCAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PRODUTO", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PRODUTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLAS_FISCAL, this))
                    {
                        item.CLAS_FISCAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PRODUTO", item);
                    }
                }
            }
        }
    
        private void FixupCLAS_FISCAL_COFINS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CLAS_FISCAL_COFINS item in e.NewItems)
                {
                    item.CLAS_FISCAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CLAS_FISCAL_COFINS", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CLAS_FISCAL_COFINS item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLAS_FISCAL, this))
                    {
                        item.CLAS_FISCAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CLAS_FISCAL_COFINS", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCLAS_FISCAL_PIS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CLAS_FISCAL_PIS item in e.NewItems)
                {
                    item.CLAS_FISCAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CLAS_FISCAL_PIS", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CLAS_FISCAL_PIS item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLAS_FISCAL, this))
                    {
                        item.CLAS_FISCAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CLAS_FISCAL_PIS", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupITEM_MOV_ESTQ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_MOV_ESTQ item in e.NewItems)
                {
                    item.CLAS_FISCAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_MOV_ESTQ", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.CLAS_FISCAL, this))
                    {
                        item.CLAS_FISCAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_MOV_ESTQ", item);
                    }
                }
            }
        }

        #endregion

    }
}
