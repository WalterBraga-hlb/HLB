//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CLAS_FISCAL))]
    [KnownType(typeof(EMPRESA_FILIAL))]
    public partial class CLAS_FISCAL_COFINS: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL != null && EMPRESA_FILIAL.EmpCod != value)
                        {
                            EMPRESA_FILIAL = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string ClasFiscCod
        {
            get { return _clasFiscCod; }
            set
            {
                if (_clasFiscCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ClasFiscCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (CLAS_FISCAL != null && CLAS_FISCAL.ClasFiscCod != value)
                        {
                            CLAS_FISCAL = null;
                        }
                    }
                    _clasFiscCod = value;
                    OnPropertyChanged("ClasFiscCod");
                }
            }
        }
        private string _clasFiscCod;
    
        [DataMember]
        public string ClasFiscCofinsImpNorm
        {
            get { return _clasFiscCofinsImpNorm; }
            set
            {
                if (_clasFiscCofinsImpNorm != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ClasFiscCofinsImpNorm' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _clasFiscCofinsImpNorm = value;
                    OnPropertyChanged("ClasFiscCofinsImpNorm");
                }
            }
        }
        private string _clasFiscCofinsImpNorm;
    
        [DataMember]
        public short ClasFiscCofinsSeq
        {
            get { return _clasFiscCofinsSeq; }
            set
            {
                if (_clasFiscCofinsSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ClasFiscCofinsSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _clasFiscCofinsSeq = value;
                    OnPropertyChanged("ClasFiscCofinsSeq");
                }
            }
        }
        private short _clasFiscCofinsSeq;
    
        [DataMember]
        public string ClasFiscCofinsSit
        {
            get { return _clasFiscCofinsSit; }
            set
            {
                if (_clasFiscCofinsSit != value)
                {
                    _clasFiscCofinsSit = value;
                    OnPropertyChanged("ClasFiscCofinsSit");
                }
            }
        }
        private string _clasFiscCofinsSit;
    
        [DataMember]
        public Nullable<System.DateTime> ClasFiscCofinsDataInic
        {
            get { return _clasFiscCofinsDataInic; }
            set
            {
                if (_clasFiscCofinsDataInic != value)
                {
                    _clasFiscCofinsDataInic = value;
                    OnPropertyChanged("ClasFiscCofinsDataInic");
                }
            }
        }
        private Nullable<System.DateTime> _clasFiscCofinsDataInic;
    
        [DataMember]
        public Nullable<System.DateTime> ClasFiscCofinsDataFim
        {
            get { return _clasFiscCofinsDataFim; }
            set
            {
                if (_clasFiscCofinsDataFim != value)
                {
                    _clasFiscCofinsDataFim = value;
                    OnPropertyChanged("ClasFiscCofinsDataFim");
                }
            }
        }
        private Nullable<System.DateTime> _clasFiscCofinsDataFim;
    
        [DataMember]
        public Nullable<decimal> ClasFiscCofinsPerc
        {
            get { return _clasFiscCofinsPerc; }
            set
            {
                if (_clasFiscCofinsPerc != value)
                {
                    _clasFiscCofinsPerc = value;
                    OnPropertyChanged("ClasFiscCofinsPerc");
                }
            }
        }
        private Nullable<decimal> _clasFiscCofinsPerc;
    
        [DataMember]
        public Nullable<decimal> ClasFiscCofinsRedBaseCalcPerc
        {
            get { return _clasFiscCofinsRedBaseCalcPerc; }
            set
            {
                if (_clasFiscCofinsRedBaseCalcPerc != value)
                {
                    _clasFiscCofinsRedBaseCalcPerc = value;
                    OnPropertyChanged("ClasFiscCofinsRedBaseCalcPerc");
                }
            }
        }
        private Nullable<decimal> _clasFiscCofinsRedBaseCalcPerc;
    
        [DataMember]
        public string ClasFiscCofinsObs
        {
            get { return _clasFiscCofinsObs; }
            set
            {
                if (_clasFiscCofinsObs != value)
                {
                    _clasFiscCofinsObs = value;
                    OnPropertyChanged("ClasFiscCofinsObs");
                }
            }
        }
        private string _clasFiscCofinsObs;
    
        [DataMember]
        public string ClasFiscCofinsRed
        {
            get { return _clasFiscCofinsRed; }
            set
            {
                if (_clasFiscCofinsRed != value)
                {
                    _clasFiscCofinsRed = value;
                    OnPropertyChanged("ClasFiscCofinsRed");
                }
            }
        }
        private string _clasFiscCofinsRed;
    
        [DataMember]
        public string ConfTribCodEntrada
        {
            get { return _confTribCodEntrada; }
            set
            {
                if (_confTribCodEntrada != value)
                {
                    _confTribCodEntrada = value;
                    OnPropertyChanged("ConfTribCodEntrada");
                }
            }
        }
        private string _confTribCodEntrada;
    
        [DataMember]
        public string ConfTribTipoEntrada
        {
            get { return _confTribTipoEntrada; }
            set
            {
                if (_confTribTipoEntrada != value)
                {
                    _confTribTipoEntrada = value;
                    OnPropertyChanged("ConfTribTipoEntrada");
                }
            }
        }
        private string _confTribTipoEntrada;
    
        [DataMember]
        public string ConfTribCodSaida
        {
            get { return _confTribCodSaida; }
            set
            {
                if (_confTribCodSaida != value)
                {
                    _confTribCodSaida = value;
                    OnPropertyChanged("ConfTribCodSaida");
                }
            }
        }
        private string _confTribCodSaida;
    
        [DataMember]
        public string ConfTribTipoSaida
        {
            get { return _confTribTipoSaida; }
            set
            {
                if (_confTribTipoSaida != value)
                {
                    _confTribTipoSaida = value;
                    OnPropertyChanged("ConfTribTipoSaida");
                }
            }
        }
        private string _confTribTipoSaida;
    
        [DataMember]
        public string ClasFiscCofinsOper
        {
            get { return _clasFiscCofinsOper; }
            set
            {
                if (_clasFiscCofinsOper != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ClasFiscCofinsOper' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _clasFiscCofinsOper = value;
                    OnPropertyChanged("ClasFiscCofinsOper");
                }
            }
        }
        private string _clasFiscCofinsOper;
    
        [DataMember]
        public Nullable<System.DateTime> ClasFiscCofinsDtUltAtualiz
        {
            get { return _clasFiscCofinsDtUltAtualiz; }
            set
            {
                if (_clasFiscCofinsDtUltAtualiz != value)
                {
                    _clasFiscCofinsDtUltAtualiz = value;
                    OnPropertyChanged("ClasFiscCofinsDtUltAtualiz");
                }
            }
        }
        private Nullable<System.DateTime> _clasFiscCofinsDtUltAtualiz;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CLAS_FISCAL CLAS_FISCAL
        {
            get { return _cLAS_FISCAL; }
            set
            {
                if (!ReferenceEquals(_cLAS_FISCAL, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ClasFiscCod != value.ClasFiscCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _cLAS_FISCAL;
                    _cLAS_FISCAL = value;
                    FixupCLAS_FISCAL(previousValue);
                    OnNavigationPropertyChanged("CLAS_FISCAL");
                }
            }
        }
        private CLAS_FISCAL _cLAS_FISCAL;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL
        {
            get { return _eMPRESA_FILIAL; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eMPRESA_FILIAL;
                    _eMPRESA_FILIAL = value;
                    FixupEMPRESA_FILIAL(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CLAS_FISCAL = null;
            EMPRESA_FILIAL = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCLAS_FISCAL(CLAS_FISCAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CLAS_FISCAL_COFINS.Contains(this))
            {
                previousValue.CLAS_FISCAL_COFINS.Remove(this);
            }
    
            if (CLAS_FISCAL != null)
            {
                if (!CLAS_FISCAL.CLAS_FISCAL_COFINS.Contains(this))
                {
                    CLAS_FISCAL.CLAS_FISCAL_COFINS.Add(this);
                }
    
                ClasFiscCod = CLAS_FISCAL.ClasFiscCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CLAS_FISCAL")
                    && (ChangeTracker.OriginalValues["CLAS_FISCAL"] == CLAS_FISCAL))
                {
                    ChangeTracker.OriginalValues.Remove("CLAS_FISCAL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CLAS_FISCAL", previousValue);
                }
                if (CLAS_FISCAL != null && !CLAS_FISCAL.ChangeTracker.ChangeTrackingEnabled)
                {
                    CLAS_FISCAL.StartTracking();
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CLAS_FISCAL_COFINS.Contains(this))
            {
                previousValue.CLAS_FISCAL_COFINS.Remove(this);
            }
    
            if (EMPRESA_FILIAL != null)
            {
                if (!EMPRESA_FILIAL.CLAS_FISCAL_COFINS.Contains(this))
                {
                    EMPRESA_FILIAL.CLAS_FISCAL_COFINS.Add(this);
                }
    
                EmpCod = EMPRESA_FILIAL.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL"] == EMPRESA_FILIAL))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL", previousValue);
                }
                if (EMPRESA_FILIAL != null && !EMPRESA_FILIAL.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL.StartTracking();
                }
            }
        }

        #endregion

    }
}
