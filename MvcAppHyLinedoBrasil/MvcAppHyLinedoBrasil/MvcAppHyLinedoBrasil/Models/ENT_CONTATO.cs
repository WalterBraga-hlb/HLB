//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CIDADE))]
    [KnownType(typeof(ENTIDADE1))]
    [KnownType(typeof(ENTIDADE))]
    public partial class ENT_CONTATO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EntCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE1 != null && ENTIDADE1.EntCod != value)
                        {
                            ENTIDADE1 = null;
                        }
                    }
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string EntCodContato
        {
            get { return _entCodContato; }
            set
            {
                if (_entCodContato != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EntCodContato' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE != null && ENTIDADE.EntCod != value)
                        {
                            ENTIDADE = null;
                        }
                    }
                    _entCodContato = value;
                    OnPropertyChanged("EntCodContato");
                }
            }
        }
        private string _entCodContato;
    
        [DataMember]
        public string TipoTratCod
        {
            get { return _tipoTratCod; }
            set
            {
                if (_tipoTratCod != value)
                {
                    _tipoTratCod = value;
                    OnPropertyChanged("TipoTratCod");
                }
            }
        }
        private string _tipoTratCod;
    
        [DataMember]
        public string CargoCodEstr
        {
            get { return _cargoCodEstr; }
            set
            {
                if (_cargoCodEstr != value)
                {
                    _cargoCodEstr = value;
                    OnPropertyChanged("CargoCodEstr");
                }
            }
        }
        private string _cargoCodEstr;
    
        [DataMember]
        public string EntContatoGrauDecis
        {
            get { return _entContatoGrauDecis; }
            set
            {
                if (_entContatoGrauDecis != value)
                {
                    _entContatoGrauDecis = value;
                    OnPropertyChanged("EntContatoGrauDecis");
                }
            }
        }
        private string _entContatoGrauDecis;
    
        [DataMember]
        public string EntContatoConv
        {
            get { return _entContatoConv; }
            set
            {
                if (_entContatoConv != value)
                {
                    _entContatoConv = value;
                    OnPropertyChanged("EntContatoConv");
                }
            }
        }
        private string _entContatoConv;
    
        [DataMember]
        public Nullable<decimal> EntContatoConvValLim
        {
            get { return _entContatoConvValLim; }
            set
            {
                if (_entContatoConvValLim != value)
                {
                    _entContatoConvValLim = value;
                    OnPropertyChanged("EntContatoConvValLim");
                }
            }
        }
        private Nullable<decimal> _entContatoConvValLim;
    
        [DataMember]
        public string TipoLogradAbrev
        {
            get { return _tipoLogradAbrev; }
            set
            {
                if (_tipoLogradAbrev != value)
                {
                    _tipoLogradAbrev = value;
                    OnPropertyChanged("TipoLogradAbrev");
                }
            }
        }
        private string _tipoLogradAbrev;
    
        [DataMember]
        public string EntContatoEnder
        {
            get { return _entContatoEnder; }
            set
            {
                if (_entContatoEnder != value)
                {
                    _entContatoEnder = value;
                    OnPropertyChanged("EntContatoEnder");
                }
            }
        }
        private string _entContatoEnder;
    
        [DataMember]
        public string EntContatoEnderNo
        {
            get { return _entContatoEnderNo; }
            set
            {
                if (_entContatoEnderNo != value)
                {
                    _entContatoEnderNo = value;
                    OnPropertyChanged("EntContatoEnderNo");
                }
            }
        }
        private string _entContatoEnderNo;
    
        [DataMember]
        public string EntContatoEnderNoPI
        {
            get { return _entContatoEnderNoPI; }
            set
            {
                if (_entContatoEnderNoPI != value)
                {
                    _entContatoEnderNoPI = value;
                    OnPropertyChanged("EntContatoEnderNoPI");
                }
            }
        }
        private string _entContatoEnderNoPI;
    
        [DataMember]
        public string EntContatoEnderComp
        {
            get { return _entContatoEnderComp; }
            set
            {
                if (_entContatoEnderComp != value)
                {
                    _entContatoEnderComp = value;
                    OnPropertyChanged("EntContatoEnderComp");
                }
            }
        }
        private string _entContatoEnderComp;
    
        [DataMember]
        public string EntContatoBair
        {
            get { return _entContatoBair; }
            set
            {
                if (_entContatoBair != value)
                {
                    _entContatoBair = value;
                    OnPropertyChanged("EntContatoBair");
                }
            }
        }
        private string _entContatoBair;
    
        [DataMember]
        public string EntContatoCep
        {
            get { return _entContatoCep; }
            set
            {
                if (_entContatoCep != value)
                {
                    _entContatoCep = value;
                    OnPropertyChanged("EntContatoCep");
                }
            }
        }
        private string _entContatoCep;
    
        [DataMember]
        public string CidCod
        {
            get { return _cidCod; }
            set
            {
                if (_cidCod != value)
                {
                    ChangeTracker.RecordOriginalValue("CidCod", _cidCod);
                    if (!IsDeserializing)
                    {
                        if (CIDADE != null && CIDADE.CidCod != value)
                        {
                            CIDADE = null;
                        }
                    }
                    _cidCod = value;
                    OnPropertyChanged("CidCod");
                }
            }
        }
        private string _cidCod;
    
        [DataMember]
        public string EntContatoCxaPost
        {
            get { return _entContatoCxaPost; }
            set
            {
                if (_entContatoCxaPost != value)
                {
                    _entContatoCxaPost = value;
                    OnPropertyChanged("EntContatoCxaPost");
                }
            }
        }
        private string _entContatoCxaPost;
    
        [DataMember]
        public string EntContatoEMail
        {
            get { return _entContatoEMail; }
            set
            {
                if (_entContatoEMail != value)
                {
                    _entContatoEMail = value;
                    OnPropertyChanged("EntContatoEMail");
                }
            }
        }
        private string _entContatoEMail;
    
        [DataMember]
        public string EntContatoStat
        {
            get { return _entContatoStat; }
            set
            {
                if (_entContatoStat != value)
                {
                    _entContatoStat = value;
                    OnPropertyChanged("EntContatoStat");
                }
            }
        }
        private string _entContatoStat;
    
        [DataMember]
        public string EntContatoEnderCorresp
        {
            get { return _entContatoEnderCorresp; }
            set
            {
                if (_entContatoEnderCorresp != value)
                {
                    _entContatoEnderCorresp = value;
                    OnPropertyChanged("EntContatoEnderCorresp");
                }
            }
        }
        private string _entContatoEnderCorresp;
    
        [DataMember]
        public string EntContatoEnderEntrega
        {
            get { return _entContatoEnderEntrega; }
            set
            {
                if (_entContatoEnderEntrega != value)
                {
                    _entContatoEnderEntrega = value;
                    OnPropertyChanged("EntContatoEnderEntrega");
                }
            }
        }
        private string _entContatoEnderEntrega;
    
        [DataMember]
        public string EnderEntCodEntrega
        {
            get { return _enderEntCodEntrega; }
            set
            {
                if (_enderEntCodEntrega != value)
                {
                    _enderEntCodEntrega = value;
                    OnPropertyChanged("EnderEntCodEntrega");
                }
            }
        }
        private string _enderEntCodEntrega;
    
        [DataMember]
        public Nullable<short> EnderEntSeqEntrega
        {
            get { return _enderEntSeqEntrega; }
            set
            {
                if (_enderEntSeqEntrega != value)
                {
                    _enderEntSeqEntrega = value;
                    OnPropertyChanged("EnderEntSeqEntrega");
                }
            }
        }
        private Nullable<short> _enderEntSeqEntrega;
    
        [DataMember]
        public string EntContatoEnderCobranca
        {
            get { return _entContatoEnderCobranca; }
            set
            {
                if (_entContatoEnderCobranca != value)
                {
                    _entContatoEnderCobranca = value;
                    OnPropertyChanged("EntContatoEnderCobranca");
                }
            }
        }
        private string _entContatoEnderCobranca;
    
        [DataMember]
        public string EnderEntCodCobranca
        {
            get { return _enderEntCodCobranca; }
            set
            {
                if (_enderEntCodCobranca != value)
                {
                    _enderEntCodCobranca = value;
                    OnPropertyChanged("EnderEntCodCobranca");
                }
            }
        }
        private string _enderEntCodCobranca;
    
        [DataMember]
        public Nullable<short> EnderEntSeqCobranca
        {
            get { return _enderEntSeqCobranca; }
            set
            {
                if (_enderEntSeqCobranca != value)
                {
                    _enderEntSeqCobranca = value;
                    OnPropertyChanged("EnderEntSeqCobranca");
                }
            }
        }
        private Nullable<short> _enderEntSeqCobranca;
    
        [DataMember]
        public string EntContatoUsaEMail
        {
            get { return _entContatoUsaEMail; }
            set
            {
                if (_entContatoUsaEMail != value)
                {
                    _entContatoUsaEMail = value;
                    OnPropertyChanged("EntContatoUsaEMail");
                }
            }
        }
        private string _entContatoUsaEMail;
    
        [DataMember]
        public string EntContatoUsaFone
        {
            get { return _entContatoUsaFone; }
            set
            {
                if (_entContatoUsaFone != value)
                {
                    _entContatoUsaFone = value;
                    OnPropertyChanged("EntContatoUsaFone");
                }
            }
        }
        private string _entContatoUsaFone;
    
        [DataMember]
        public string EntContatoTipoFone
        {
            get { return _entContatoTipoFone; }
            set
            {
                if (_entContatoTipoFone != value)
                {
                    _entContatoTipoFone = value;
                    OnPropertyChanged("EntContatoTipoFone");
                }
            }
        }
        private string _entContatoTipoFone;
    
        [DataMember]
        public string EntContatoUsaFax
        {
            get { return _entContatoUsaFax; }
            set
            {
                if (_entContatoUsaFax != value)
                {
                    _entContatoUsaFax = value;
                    OnPropertyChanged("EntContatoUsaFax");
                }
            }
        }
        private string _entContatoUsaFax;
    
        [DataMember]
        public string EntContatoRespDesp
        {
            get { return _entContatoRespDesp; }
            set
            {
                if (_entContatoRespDesp != value)
                {
                    _entContatoRespDesp = value;
                    OnPropertyChanged("EntContatoRespDesp");
                }
            }
        }
        private string _entContatoRespDesp;
    
        [DataMember]
        public string EntContatoAdm
        {
            get { return _entContatoAdm; }
            set
            {
                if (_entContatoAdm != value)
                {
                    _entContatoAdm = value;
                    OnPropertyChanged("EntContatoAdm");
                }
            }
        }
        private string _entContatoAdm;
    
        [DataMember]
        public Nullable<decimal> EntContatoAdmPercComis
        {
            get { return _entContatoAdmPercComis; }
            set
            {
                if (_entContatoAdmPercComis != value)
                {
                    _entContatoAdmPercComis = value;
                    OnPropertyChanged("EntContatoAdmPercComis");
                }
            }
        }
        private Nullable<decimal> _entContatoAdmPercComis;
    
        [DataMember]
        public string EntContatoRespFin
        {
            get { return _entContatoRespFin; }
            set
            {
                if (_entContatoRespFin != value)
                {
                    _entContatoRespFin = value;
                    OnPropertyChanged("EntContatoRespFin");
                }
            }
        }
        private string _entContatoRespFin;
    
        [DataMember]
        public string CategCodEstr
        {
            get { return _categCodEstr; }
            set
            {
                if (_categCodEstr != value)
                {
                    _categCodEstr = value;
                    OnPropertyChanged("CategCodEstr");
                }
            }
        }
        private string _categCodEstr;
    
        [DataMember]
        public string EntContatoCategPrinc
        {
            get { return _entContatoCategPrinc; }
            set
            {
                if (_entContatoCategPrinc != value)
                {
                    _entContatoCategPrinc = value;
                    OnPropertyChanged("EntContatoCategPrinc");
                }
            }
        }
        private string _entContatoCategPrinc;
    
        [DataMember]
        public string CCtrlCodEstr
        {
            get { return _cCtrlCodEstr; }
            set
            {
                if (_cCtrlCodEstr != value)
                {
                    _cCtrlCodEstr = value;
                    OnPropertyChanged("CCtrlCodEstr");
                }
            }
        }
        private string _cCtrlCodEstr;
    
        [DataMember]
        public Nullable<int> EnderSeq
        {
            get { return _enderSeq; }
            set
            {
                if (_enderSeq != value)
                {
                    _enderSeq = value;
                    OnPropertyChanged("EnderSeq");
                }
            }
        }
        private Nullable<int> _enderSeq;
    
        [DataMember]
        public System.Guid RowGuid
        {
            get { return _rowGuid; }
            set
            {
                if (_rowGuid != value)
                {
                    _rowGuid = value;
                    OnPropertyChanged("RowGuid");
                }
            }
        }
        private System.Guid _rowGuid;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CIDADE CIDADE
        {
            get { return _cIDADE; }
            set
            {
                if (!ReferenceEquals(_cIDADE, value))
                {
                    var previousValue = _cIDADE;
                    _cIDADE = value;
                    FixupCIDADE(previousValue);
                    OnNavigationPropertyChanged("CIDADE");
                }
            }
        }
        private CIDADE _cIDADE;
    
        [DataMember]
        public ENTIDADE1 ENTIDADE1
        {
            get { return _eNTIDADE1; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EntCod != value.EntCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eNTIDADE1;
                    _eNTIDADE1 = value;
                    FixupENTIDADE1(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE1");
                }
            }
        }
        private ENTIDADE1 _eNTIDADE1;
    
        [DataMember]
        public ENTIDADE ENTIDADE
        {
            get { return _eNTIDADE; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EntCodContato != value.EntCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eNTIDADE;
                    _eNTIDADE = value;
                    FixupENTIDADE(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE");
                }
            }
        }
        private ENTIDADE _eNTIDADE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CIDADE = null;
            ENTIDADE1 = null;
            ENTIDADE = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCIDADE(CIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ENT_CONTATO.Contains(this))
            {
                previousValue.ENT_CONTATO.Remove(this);
            }
    
            if (CIDADE != null)
            {
                if (!CIDADE.ENT_CONTATO.Contains(this))
                {
                    CIDADE.ENT_CONTATO.Add(this);
                }
    
                CidCod = CIDADE.CidCod;
            }
            else if (!skipKeys)
            {
                CidCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CIDADE")
                    && (ChangeTracker.OriginalValues["CIDADE"] == CIDADE))
                {
                    ChangeTracker.OriginalValues.Remove("CIDADE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CIDADE", previousValue);
                }
                if (CIDADE != null && !CIDADE.ChangeTracker.ChangeTrackingEnabled)
                {
                    CIDADE.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE1(ENTIDADE1 previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ENT_CONTATO.Contains(this))
            {
                previousValue.ENT_CONTATO.Remove(this);
            }
    
            if (ENTIDADE1 != null)
            {
                if (!ENTIDADE1.ENT_CONTATO.Contains(this))
                {
                    ENTIDADE1.ENT_CONTATO.Add(this);
                }
    
                EntCod = ENTIDADE1.EntCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE1")
                    && (ChangeTracker.OriginalValues["ENTIDADE1"] == ENTIDADE1))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE1", previousValue);
                }
                if (ENTIDADE1 != null && !ENTIDADE1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE1.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE(ENTIDADE previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ENT_CONTATO.Contains(this))
            {
                previousValue.ENT_CONTATO.Remove(this);
            }
    
            if (ENTIDADE != null)
            {
                if (!ENTIDADE.ENT_CONTATO.Contains(this))
                {
                    ENTIDADE.ENT_CONTATO.Add(this);
                }
    
                EntCodContato = ENTIDADE.EntCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE")
                    && (ChangeTracker.OriginalValues["ENTIDADE"] == ENTIDADE))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE", previousValue);
                }
                if (ENTIDADE != null && !ENTIDADE.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE.StartTracking();
                }
            }
        }

        #endregion

    }
}
