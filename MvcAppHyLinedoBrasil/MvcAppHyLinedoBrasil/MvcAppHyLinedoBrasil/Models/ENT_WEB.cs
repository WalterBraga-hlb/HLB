//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ENTIDADE1))]
    public partial class ENT_WEB: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EntCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE1 != null && ENTIDADE1.EntCod != value)
                        {
                            ENTIDADE1 = null;
                        }
                    }
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public short EntWebSeq
        {
            get { return _entWebSeq; }
            set
            {
                if (_entWebSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EntWebSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _entWebSeq = value;
                    OnPropertyChanged("EntWebSeq");
                }
            }
        }
        private short _entWebSeq;
    
        [DataMember]
        public string EntWebTipo
        {
            get { return _entWebTipo; }
            set
            {
                if (_entWebTipo != value)
                {
                    _entWebTipo = value;
                    OnPropertyChanged("EntWebTipo");
                }
            }
        }
        private string _entWebTipo;
    
        [DataMember]
        public string EntWebWWW
        {
            get { return _entWebWWW; }
            set
            {
                if (_entWebWWW != value)
                {
                    _entWebWWW = value;
                    OnPropertyChanged("EntWebWWW");
                }
            }
        }
        private string _entWebWWW;
    
        [DataMember]
        public string EntWebEMail
        {
            get { return _entWebEMail; }
            set
            {
                if (_entWebEMail != value)
                {
                    _entWebEMail = value;
                    OnPropertyChanged("EntWebEMail");
                }
            }
        }
        private string _entWebEMail;
    
        [DataMember]
        public string EntWebEMailPrinc
        {
            get { return _entWebEMailPrinc; }
            set
            {
                if (_entWebEMailPrinc != value)
                {
                    _entWebEMailPrinc = value;
                    OnPropertyChanged("EntWebEMailPrinc");
                }
            }
        }
        private string _entWebEMailPrinc;
    
        [DataMember]
        public string EntWebEMailPedComp
        {
            get { return _entWebEMailPedComp; }
            set
            {
                if (_entWebEMailPedComp != value)
                {
                    _entWebEMailPedComp = value;
                    OnPropertyChanged("EntWebEMailPedComp");
                }
            }
        }
        private string _entWebEMailPedComp;
    
        [DataMember]
        public string EntWebRecebeEmailOcor
        {
            get { return _entWebRecebeEmailOcor; }
            set
            {
                if (_entWebRecebeEmailOcor != value)
                {
                    _entWebRecebeEmailOcor = value;
                    OnPropertyChanged("EntWebRecebeEmailOcor");
                }
            }
        }
        private string _entWebRecebeEmailOcor;
    
        [DataMember]
        public string EntWebDisparaEmailAgenda
        {
            get { return _entWebDisparaEmailAgenda; }
            set
            {
                if (_entWebDisparaEmailAgenda != value)
                {
                    _entWebDisparaEmailAgenda = value;
                    OnPropertyChanged("EntWebDisparaEmailAgenda");
                }
            }
        }
        private string _entWebDisparaEmailAgenda;
    
        [DataMember]
        public string EntWebEmailNFe
        {
            get { return _entWebEmailNFe; }
            set
            {
                if (_entWebEmailNFe != value)
                {
                    _entWebEmailNFe = value;
                    OnPropertyChanged("EntWebEmailNFe");
                }
            }
        }
        private string _entWebEmailNFe;
    
        [DataMember]
        public string EntWebEmailNFSe
        {
            get { return _entWebEmailNFSe; }
            set
            {
                if (_entWebEmailNFSe != value)
                {
                    _entWebEmailNFSe = value;
                    OnPropertyChanged("EntWebEmailNFSe");
                }
            }
        }
        private string _entWebEmailNFSe;
    
        [DataMember]
        public Nullable<System.DateTime> EntWebDtUltAtualiz
        {
            get { return _entWebDtUltAtualiz; }
            set
            {
                if (_entWebDtUltAtualiz != value)
                {
                    _entWebDtUltAtualiz = value;
                    OnPropertyChanged("EntWebDtUltAtualiz");
                }
            }
        }
        private Nullable<System.DateTime> _entWebDtUltAtualiz;
    
        [DataMember]
        public System.Guid RowGuid
        {
            get { return _rowGuid; }
            set
            {
                if (_rowGuid != value)
                {
                    _rowGuid = value;
                    OnPropertyChanged("RowGuid");
                }
            }
        }
        private System.Guid _rowGuid;
    
        [DataMember]
        public string EntWebDescr
        {
            get { return _entWebDescr; }
            set
            {
                if (_entWebDescr != value)
                {
                    _entWebDescr = value;
                    OnPropertyChanged("EntWebDescr");
                }
            }
        }
        private string _entWebDescr;
    
        [DataMember]
        public string ENTWEBORIGEM
        {
            get { return _eNTWEBORIGEM; }
            set
            {
                if (_eNTWEBORIGEM != value)
                {
                    _eNTWEBORIGEM = value;
                    OnPropertyChanged("ENTWEBORIGEM");
                }
            }
        }
        private string _eNTWEBORIGEM;
    
        [DataMember]
        public Nullable<System.DateTime> ENTWEBDTHRCAD
        {
            get { return _eNTWEBDTHRCAD; }
            set
            {
                if (_eNTWEBDTHRCAD != value)
                {
                    _eNTWEBDTHRCAD = value;
                    OnPropertyChanged("ENTWEBDTHRCAD");
                }
            }
        }
        private Nullable<System.DateTime> _eNTWEBDTHRCAD;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ENTIDADE1 ENTIDADE1
        {
            get { return _eNTIDADE1; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EntCod != value.EntCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eNTIDADE1;
                    _eNTIDADE1 = value;
                    FixupENTIDADE1(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE1");
                }
            }
        }
        private ENTIDADE1 _eNTIDADE1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ENTIDADE1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupENTIDADE1(ENTIDADE1 previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ENT_WEB.Contains(this))
            {
                previousValue.ENT_WEB.Remove(this);
            }
    
            if (ENTIDADE1 != null)
            {
                if (!ENTIDADE1.ENT_WEB.Contains(this))
                {
                    ENTIDADE1.ENT_WEB.Add(this);
                }
    
                EntCod = ENTIDADE1.EntCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE1")
                    && (ChangeTracker.OriginalValues["ENTIDADE1"] == ENTIDADE1))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE1", previousValue);
                }
                if (ENTIDADE1 != null && !ENTIDADE1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE1.StartTracking();
                }
            }
        }

        #endregion

    }
}
