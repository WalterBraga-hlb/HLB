//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.HLBAPP
{
    [DataContract(IsReference = true)]
    public partial class Lancamentos_Classificadora_Excel_02: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<double> Lote
        {
            get { return _lote; }
            set
            {
                if (_lote != value)
                {
                    _lote = value;
                    OnPropertyChanged("Lote");
                }
            }
        }
        private Nullable<double> _lote;
    
        [DataMember]
        public Nullable<double> Saída
        {
            get { return _saída; }
            set
            {
                if (_saída != value)
                {
                    _saída = value;
                    OnPropertyChanged("Saída");
                }
            }
        }
        private Nullable<double> _saída;
    
        [DataMember]
        public string Tipo
        {
            get { return _tipo; }
            set
            {
                if (_tipo != value)
                {
                    _tipo = value;
                    OnPropertyChanged("Tipo");
                }
            }
        }
        private string _tipo;
    
        [DataMember]
        public Nullable<System.DateTime> Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    OnPropertyChanged("Data");
                }
            }
        }
        private Nullable<System.DateTime> _data;
    
        [DataMember]
        public string Balança
        {
            get { return _balança; }
            set
            {
                if (_balança != value)
                {
                    _balança = value;
                    OnPropertyChanged("Balança");
                }
            }
        }
        private string _balança;
    
        [DataMember]
        public Nullable<double> C1_C2_C3
        {
            get { return _c1_C2_C3; }
            set
            {
                if (_c1_C2_C3 != value)
                {
                    _c1_C2_C3 = value;
                    OnPropertyChanged("C1_C2_C3");
                }
            }
        }
        private Nullable<double> _c1_C2_C3;
    
        [DataMember]
        public Nullable<double> C4_C5_C6
        {
            get { return _c4_C5_C6; }
            set
            {
                if (_c4_C5_C6 != value)
                {
                    _c4_C5_C6 = value;
                    OnPropertyChanged("C4_C5_C6");
                }
            }
        }
        private Nullable<double> _c4_C5_C6;
    
        [DataMember]
        public Nullable<double> C7_C8_C9
        {
            get { return _c7_C8_C9; }
            set
            {
                if (_c7_C8_C9 != value)
                {
                    _c7_C8_C9 = value;
                    OnPropertyChanged("C7_C8_C9");
                }
            }
        }
        private Nullable<double> _c7_C8_C9;
    
        [DataMember]
        public Nullable<double> C10_C11_C12
        {
            get { return _c10_C11_C12; }
            set
            {
                if (_c10_C11_C12 != value)
                {
                    _c10_C11_C12 = value;
                    OnPropertyChanged("C10_C11_C12");
                }
            }
        }
        private Nullable<double> _c10_C11_C12;
    
        [DataMember]
        public Nullable<double> C13_C14_C15
        {
            get { return _c13_C14_C15; }
            set
            {
                if (_c13_C14_C15 != value)
                {
                    _c13_C14_C15 = value;
                    OnPropertyChanged("C13_C14_C15");
                }
            }
        }
        private Nullable<double> _c13_C14_C15;
    
        [DataMember]
        public Nullable<double> C16_C17_C18
        {
            get { return _c16_C17_C18; }
            set
            {
                if (_c16_C17_C18 != value)
                {
                    _c16_C17_C18 = value;
                    OnPropertyChanged("C16_C17_C18");
                }
            }
        }
        private Nullable<double> _c16_C17_C18;
    
        [DataMember]
        public Nullable<double> C19_C20_C21
        {
            get { return _c19_C20_C21; }
            set
            {
                if (_c19_C20_C21 != value)
                {
                    _c19_C20_C21 = value;
                    OnPropertyChanged("C19_C20_C21");
                }
            }
        }
        private Nullable<double> _c19_C20_C21;
    
        [DataMember]
        public Nullable<double> C22_C23_C24
        {
            get { return _c22_C23_C24; }
            set
            {
                if (_c22_C23_C24 != value)
                {
                    _c22_C23_C24 = value;
                    OnPropertyChanged("C22_C23_C24");
                }
            }
        }
        private Nullable<double> _c22_C23_C24;
    
        [DataMember]
        public Nullable<double> Quantos_Ovos_Virados_
        {
            get { return _quantos_Ovos_Virados_; }
            set
            {
                if (_quantos_Ovos_Virados_ != value)
                {
                    _quantos_Ovos_Virados_ = value;
                    OnPropertyChanged("Quantos_Ovos_Virados_");
                }
            }
        }
        private Nullable<double> _quantos_Ovos_Virados_;
    
        [DataMember]
        public string LoteCompleto
        {
            get { return _loteCompleto; }
            set
            {
                if (_loteCompleto != value)
                {
                    _loteCompleto = value;
                    OnPropertyChanged("LoteCompleto");
                }
            }
        }
        private string _loteCompleto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
