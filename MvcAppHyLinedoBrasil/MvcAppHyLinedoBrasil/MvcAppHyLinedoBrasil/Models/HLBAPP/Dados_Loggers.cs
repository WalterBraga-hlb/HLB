//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.HLBAPP
{
    [DataContract(IsReference = true)]
    public partial class Dados_Loggers: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<System.DateTime> DataEntrega
        {
            get { return _dataEntrega; }
            set
            {
                if (_dataEntrega != value)
                {
                    _dataEntrega = value;
                    OnPropertyChanged("DataEntrega");
                }
            }
        }
        private Nullable<System.DateTime> _dataEntrega;
    
        [DataMember]
        public string PlacaVeiculo
        {
            get { return _placaVeiculo; }
            set
            {
                if (_placaVeiculo != value)
                {
                    _placaVeiculo = value;
                    OnPropertyChanged("PlacaVeiculo");
                }
            }
        }
        private string _placaVeiculo;
    
        [DataMember]
        public string NumeroLogger
        {
            get { return _numeroLogger; }
            set
            {
                if (_numeroLogger != value)
                {
                    _numeroLogger = value;
                    OnPropertyChanged("NumeroLogger");
                }
            }
        }
        private string _numeroLogger;
    
        [DataMember]
        public Nullable<System.DateTime> DataHoraLogger
        {
            get { return _dataHoraLogger; }
            set
            {
                if (_dataHoraLogger != value)
                {
                    _dataHoraLogger = value;
                    OnPropertyChanged("DataHoraLogger");
                }
            }
        }
        private Nullable<System.DateTime> _dataHoraLogger;
    
        [DataMember]
        public Nullable<decimal> Temperatura
        {
            get { return _temperatura; }
            set
            {
                if (_temperatura != value)
                {
                    _temperatura = value;
                    OnPropertyChanged("Temperatura");
                }
            }
        }
        private Nullable<decimal> _temperatura;
    
        [DataMember]
        public string Usuario
        {
            get { return _usuario; }
            set
            {
                if (_usuario != value)
                {
                    _usuario = value;
                    OnPropertyChanged("Usuario");
                }
            }
        }
        private string _usuario;
    
        [DataMember]
        public Nullable<System.DateTime> DataHoraImportacao
        {
            get { return _dataHoraImportacao; }
            set
            {
                if (_dataHoraImportacao != value)
                {
                    _dataHoraImportacao = value;
                    OnPropertyChanged("DataHoraImportacao");
                }
            }
        }
        private Nullable<System.DateTime> _dataHoraImportacao;
    
        [DataMember]
        public Nullable<decimal> Umidade
        {
            get { return _umidade; }
            set
            {
                if (_umidade != value)
                {
                    _umidade = value;
                    OnPropertyChanged("Umidade");
                }
            }
        }
        private Nullable<decimal> _umidade;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
