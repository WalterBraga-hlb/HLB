//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.HLBAPP
{
    [DataContract(IsReference = true)]
    public partial class VU_Resumo_Dados_Lotes_Clientes: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string Empresa
        {
            get { return _empresa; }
            set
            {
                if (_empresa != value)
                {
                    _empresa = value;
                    OnPropertyChanged("Empresa");
                }
            }
        }
        private string _empresa;
    
        [DataMember]
        public string CodigoCliente
        {
            get { return _codigoCliente; }
            set
            {
                if (_codigoCliente != value)
                {
                    _codigoCliente = value;
                    OnPropertyChanged("CodigoCliente");
                }
            }
        }
        private string _codigoCliente;
    
        [DataMember]
        public string Nome
        {
            get { return _nome; }
            set
            {
                if (_nome != value)
                {
                    _nome = value;
                    OnPropertyChanged("Nome");
                }
            }
        }
        private string _nome;
    
        [DataMember]
        public string Regiao
        {
            get { return _regiao; }
            set
            {
                if (_regiao != value)
                {
                    _regiao = value;
                    OnPropertyChanged("Regiao");
                }
            }
        }
        private string _regiao;
    
        [DataMember]
        public string Cidade
        {
            get { return _cidade; }
            set
            {
                if (_cidade != value)
                {
                    _cidade = value;
                    OnPropertyChanged("Cidade");
                }
            }
        }
        private string _cidade;
    
        [DataMember]
        public string UF
        {
            get { return _uF; }
            set
            {
                if (_uF != value)
                {
                    _uF = value;
                    OnPropertyChanged("UF");
                }
            }
        }
        private string _uF;
    
        [DataMember]
        public string TipoAviario
        {
            get { return _tipoAviario; }
            set
            {
                if (_tipoAviario != value)
                {
                    _tipoAviario = value;
                    OnPropertyChanged("TipoAviario");
                }
            }
        }
        private string _tipoAviario;
    
        [DataMember]
        public string TipoDebicagem
        {
            get { return _tipoDebicagem; }
            set
            {
                if (_tipoDebicagem != value)
                {
                    _tipoDebicagem = value;
                    OnPropertyChanged("TipoDebicagem");
                }
            }
        }
        private string _tipoDebicagem;
    
        [DataMember]
        public string Linhagem
        {
            get { return _linhagem; }
            set
            {
                if (_linhagem != value)
                {
                    _linhagem = value;
                    OnPropertyChanged("Linhagem");
                }
            }
        }
        private string _linhagem;
    
        [DataMember]
        public string Lote
        {
            get { return _lote; }
            set
            {
                if (_lote != value)
                {
                    _lote = value;
                    OnPropertyChanged("Lote");
                }
            }
        }
        private string _lote;
    
        [DataMember]
        public Nullable<System.DateTime> DataAlojamento
        {
            get { return _dataAlojamento; }
            set
            {
                if (_dataAlojamento != value)
                {
                    _dataAlojamento = value;
                    OnPropertyChanged("DataAlojamento");
                }
            }
        }
        private Nullable<System.DateTime> _dataAlojamento;
    
        [DataMember]
        public Nullable<int> UltimaIdade
        {
            get { return _ultimaIdade; }
            set
            {
                if (_ultimaIdade != value)
                {
                    _ultimaIdade = value;
                    OnPropertyChanged("UltimaIdade");
                }
            }
        }
        private Nullable<int> _ultimaIdade;
    
        [DataMember]
        public string Chave
        {
            get { return _chave; }
            set
            {
                if (_chave != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Chave' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _chave = value;
                    OnPropertyChanged("Chave");
                }
            }
        }
        private string _chave;
    
        [DataMember]
        public Nullable<System.DateTime> DataNascimento
        {
            get { return _dataNascimento; }
            set
            {
                if (_dataNascimento != value)
                {
                    _dataNascimento = value;
                    OnPropertyChanged("DataNascimento");
                }
            }
        }
        private Nullable<System.DateTime> _dataNascimento;
    
        [DataMember]
        public Nullable<int> NumeroAvesAlojadas
        {
            get { return _numeroAvesAlojadas; }
            set
            {
                if (_numeroAvesAlojadas != value)
                {
                    _numeroAvesAlojadas = value;
                    OnPropertyChanged("NumeroAvesAlojadas");
                }
            }
        }
        private Nullable<int> _numeroAvesAlojadas;
    
        [DataMember]
        public string EmpresaImportacao
        {
            get { return _empresaImportacao; }
            set
            {
                if (_empresaImportacao != value)
                {
                    _empresaImportacao = value;
                    OnPropertyChanged("EmpresaImportacao");
                }
            }
        }
        private string _empresaImportacao;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
