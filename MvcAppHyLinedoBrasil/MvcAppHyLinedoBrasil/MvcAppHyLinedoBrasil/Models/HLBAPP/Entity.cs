//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.HLBAPP
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PAIS))]
    public partial class Entity: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("Address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    OnPropertyChanged("State");
                }
            }
        }
        private string _state;
    
        [DataMember]
        public Nullable<int> IDCountry
        {
            get { return _iDCountry; }
            set
            {
                if (_iDCountry != value)
                {
                    ChangeTracker.RecordOriginalValue("IDCountry", _iDCountry);
                    if (!IsDeserializing)
                    {
                        if (PAIS != null && PAIS.ID != value)
                        {
                            PAIS = null;
                        }
                    }
                    _iDCountry = value;
                    OnPropertyChanged("IDCountry");
                }
            }
        }
        private Nullable<int> _iDCountry;
    
        [DataMember]
        public string ZIPCode
        {
            get { return _zIPCode; }
            set
            {
                if (_zIPCode != value)
                {
                    _zIPCode = value;
                    OnPropertyChanged("ZIPCode");
                }
            }
        }
        private string _zIPCode;
    
        [DataMember]
        public string EntityType
        {
            get { return _entityType; }
            set
            {
                if (_entityType != value)
                {
                    _entityType = value;
                    OnPropertyChanged("EntityType");
                }
            }
        }
        private string _entityType;
    
        [DataMember]
        public string TypePeriodCollect
        {
            get { return _typePeriodCollect; }
            set
            {
                if (_typePeriodCollect != value)
                {
                    _typePeriodCollect = value;
                    OnPropertyChanged("TypePeriodCollect");
                }
            }
        }
        private string _typePeriodCollect;
    
        [DataMember]
        public string Contact
        {
            get { return _contact; }
            set
            {
                if (_contact != value)
                {
                    _contact = value;
                    OnPropertyChanged("Contact");
                }
            }
        }
        private string _contact;
    
        [DataMember]
        public string ContactEmail
        {
            get { return _contactEmail; }
            set
            {
                if (_contactEmail != value)
                {
                    _contactEmail = value;
                    OnPropertyChanged("ContactEmail");
                }
            }
        }
        private string _contactEmail;
    
        [DataMember]
        public string UserInsert
        {
            get { return _userInsert; }
            set
            {
                if (_userInsert != value)
                {
                    _userInsert = value;
                    OnPropertyChanged("UserInsert");
                }
            }
        }
        private string _userInsert;
    
        [DataMember]
        public Nullable<System.DateTime> DateTimeInsert
        {
            get { return _dateTimeInsert; }
            set
            {
                if (_dateTimeInsert != value)
                {
                    _dateTimeInsert = value;
                    OnPropertyChanged("DateTimeInsert");
                }
            }
        }
        private Nullable<System.DateTime> _dateTimeInsert;
    
        [DataMember]
        public string CustomerCode
        {
            get { return _customerCode; }
            set
            {
                if (_customerCode != value)
                {
                    _customerCode = value;
                    OnPropertyChanged("CustomerCode");
                }
            }
        }
        private string _customerCode;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public PAIS PAIS
        {
            get { return _pAIS; }
            set
            {
                if (!ReferenceEquals(_pAIS, value))
                {
                    var previousValue = _pAIS;
                    _pAIS = value;
                    FixupPAIS(previousValue);
                    OnNavigationPropertyChanged("PAIS");
                }
            }
        }
        private PAIS _pAIS;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PAIS = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPAIS(PAIS previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Entity.Contains(this))
            {
                previousValue.Entity.Remove(this);
            }
    
            if (PAIS != null)
            {
                if (!PAIS.Entity.Contains(this))
                {
                    PAIS.Entity.Add(this);
                }
    
                IDCountry = PAIS.ID;
            }
            else if (!skipKeys)
            {
                IDCountry = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PAIS")
                    && (ChangeTracker.OriginalValues["PAIS"] == PAIS))
                {
                    ChangeTracker.OriginalValues.Remove("PAIS");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PAIS", previousValue);
                }
                if (PAIS != null && !PAIS.ChangeTracker.ChangeTrackingEnabled)
                {
                    PAIS.StartTracking();
                }
            }
        }

        #endregion

    }
}
