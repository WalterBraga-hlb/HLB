//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.HLBAPP
{
    [DataContract(IsReference = true)]
    public partial class PDI: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> Ano_Avaliação
        {
            get { return _ano_Avaliação; }
            set
            {
                if (_ano_Avaliação != value)
                {
                    _ano_Avaliação = value;
                    OnPropertyChanged("Ano_Avaliação");
                }
            }
        }
        private Nullable<int> _ano_Avaliação;
    
        [DataMember]
        public string Usuario_Colaborador
        {
            get { return _usuario_Colaborador; }
            set
            {
                if (_usuario_Colaborador != value)
                {
                    _usuario_Colaborador = value;
                    OnPropertyChanged("Usuario_Colaborador");
                }
            }
        }
        private string _usuario_Colaborador;
    
        [DataMember]
        public string Colaborador
        {
            get { return _colaborador; }
            set
            {
                if (_colaborador != value)
                {
                    _colaborador = value;
                    OnPropertyChanged("Colaborador");
                }
            }
        }
        private string _colaborador;
    
        [DataMember]
        public string Usuario_Lider
        {
            get { return _usuario_Lider; }
            set
            {
                if (_usuario_Lider != value)
                {
                    _usuario_Lider = value;
                    OnPropertyChanged("Usuario_Lider");
                }
            }
        }
        private string _usuario_Lider;
    
        [DataMember]
        public string Líder
        {
            get { return _líder; }
            set
            {
                if (_líder != value)
                {
                    _líder = value;
                    OnPropertyChanged("Líder");
                }
            }
        }
        private string _líder;
    
        [DataMember]
        public string Comportamento
        {
            get { return _comportamento; }
            set
            {
                if (_comportamento != value)
                {
                    _comportamento = value;
                    OnPropertyChanged("Comportamento");
                }
            }
        }
        private string _comportamento;
    
        [DataMember]
        public string Competência
        {
            get { return _competência; }
            set
            {
                if (_competência != value)
                {
                    _competência = value;
                    OnPropertyChanged("Competência");
                }
            }
        }
        private string _competência;
    
        [DataMember]
        public string Classificação
        {
            get { return _classificação; }
            set
            {
                if (_classificação != value)
                {
                    _classificação = value;
                    OnPropertyChanged("Classificação");
                }
            }
        }
        private string _classificação;
    
        [DataMember]
        public Nullable<decimal> Média_Final
        {
            get { return _média_Final; }
            set
            {
                if (_média_Final != value)
                {
                    _média_Final = value;
                    OnPropertyChanged("Média_Final");
                }
            }
        }
        private Nullable<decimal> _média_Final;
    
        [DataMember]
        public string PLANO_DE_AÇÃO_PARA_MELHORAR_O_COMPORTAMENTO
        {
            get { return _pLANO_DE_AÇÃO_PARA_MELHORAR_O_COMPORTAMENTO; }
            set
            {
                if (_pLANO_DE_AÇÃO_PARA_MELHORAR_O_COMPORTAMENTO != value)
                {
                    _pLANO_DE_AÇÃO_PARA_MELHORAR_O_COMPORTAMENTO = value;
                    OnPropertyChanged("PLANO_DE_AÇÃO_PARA_MELHORAR_O_COMPORTAMENTO");
                }
            }
        }
        private string _pLANO_DE_AÇÃO_PARA_MELHORAR_O_COMPORTAMENTO;
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
