//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ITEM_MOV_ESTQ))]
    public partial class LOC_ARMAZ_ITEM_MOV_ESTQ: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_MOV_ESTQ != null && ITEM_MOV_ESTQ.EmpCod != value)
                        {
                            ITEM_MOV_ESTQ = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public int MovEstqChv
        {
            get { return _movEstqChv; }
            set
            {
                if (_movEstqChv != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MovEstqChv' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_MOV_ESTQ != null && ITEM_MOV_ESTQ.MovEstqChv != value)
                        {
                            ITEM_MOV_ESTQ = null;
                        }
                    }
                    _movEstqChv = value;
                    OnPropertyChanged("MovEstqChv");
                }
            }
        }
        private int _movEstqChv;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_MOV_ESTQ != null && ITEM_MOV_ESTQ.ProdCodEstr != value)
                        {
                            ITEM_MOV_ESTQ = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public short ItMovEstqSeq
        {
            get { return _itMovEstqSeq; }
            set
            {
                if (_itMovEstqSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ItMovEstqSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_MOV_ESTQ != null && ITEM_MOV_ESTQ.ItMovEstqSeq != value)
                        {
                            ITEM_MOV_ESTQ = null;
                        }
                    }
                    _itMovEstqSeq = value;
                    OnPropertyChanged("ItMovEstqSeq");
                }
            }
        }
        private short _itMovEstqSeq;
    
        [DataMember]
        public string LocArmazCodEstr
        {
            get { return _locArmazCodEstr; }
            set
            {
                if (_locArmazCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LocArmazCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _locArmazCodEstr = value;
                    OnPropertyChanged("LocArmazCodEstr");
                }
            }
        }
        private string _locArmazCodEstr;
    
        [DataMember]
        public Nullable<decimal> LocArmazItMovEstqQtd
        {
            get { return _locArmazItMovEstqQtd; }
            set
            {
                if (_locArmazItMovEstqQtd != value)
                {
                    _locArmazItMovEstqQtd = value;
                    OnPropertyChanged("LocArmazItMovEstqQtd");
                }
            }
        }
        private Nullable<decimal> _locArmazItMovEstqQtd;
    
        [DataMember]
        public string LocArmazItMovEstqLocaliz
        {
            get { return _locArmazItMovEstqLocaliz; }
            set
            {
                if (_locArmazItMovEstqLocaliz != value)
                {
                    _locArmazItMovEstqLocaliz = value;
                    OnPropertyChanged("LocArmazItMovEstqLocaliz");
                }
            }
        }
        private string _locArmazItMovEstqLocaliz;
    
        [DataMember]
        public string LocArmazCodEstrDest
        {
            get { return _locArmazCodEstrDest; }
            set
            {
                if (_locArmazCodEstrDest != value)
                {
                    _locArmazCodEstrDest = value;
                    OnPropertyChanged("LocArmazCodEstrDest");
                }
            }
        }
        private string _locArmazCodEstrDest;
    
        [DataMember]
        public Nullable<decimal> LocArmazItMovEstqQtdCalc
        {
            get { return _locArmazItMovEstqQtdCalc; }
            set
            {
                if (_locArmazItMovEstqQtdCalc != value)
                {
                    _locArmazItMovEstqQtdCalc = value;
                    OnPropertyChanged("LocArmazItMovEstqQtdCalc");
                }
            }
        }
        private Nullable<decimal> _locArmazItMovEstqQtdCalc;
    
        [DataMember]
        public string CtrlProjNum
        {
            get { return _ctrlProjNum; }
            set
            {
                if (_ctrlProjNum != value)
                {
                    _ctrlProjNum = value;
                    OnPropertyChanged("CtrlProjNum");
                }
            }
        }
        private string _ctrlProjNum;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ITEM_MOV_ESTQ ITEM_MOV_ESTQ
        {
            get { return _iTEM_MOV_ESTQ; }
            set
            {
                if (!ReferenceEquals(_iTEM_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || ProdCodEstr != value.ProdCodEstr || MovEstqChv != value.MovEstqChv || ItMovEstqSeq != value.ItMovEstqSeq)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _iTEM_MOV_ESTQ;
                    _iTEM_MOV_ESTQ = value;
                    FixupITEM_MOV_ESTQ(previousValue);
                    OnNavigationPropertyChanged("ITEM_MOV_ESTQ");
                }
            }
        }
        private ITEM_MOV_ESTQ _iTEM_MOV_ESTQ;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ITEM_MOV_ESTQ = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupITEM_MOV_ESTQ(ITEM_MOV_ESTQ previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LOC_ARMAZ_ITEM_MOV_ESTQ.Contains(this))
            {
                previousValue.LOC_ARMAZ_ITEM_MOV_ESTQ.Remove(this);
            }
    
            if (ITEM_MOV_ESTQ != null)
            {
                if (!ITEM_MOV_ESTQ.LOC_ARMAZ_ITEM_MOV_ESTQ.Contains(this))
                {
                    ITEM_MOV_ESTQ.LOC_ARMAZ_ITEM_MOV_ESTQ.Add(this);
                }
    
                EmpCod = ITEM_MOV_ESTQ.EmpCod;
                ProdCodEstr = ITEM_MOV_ESTQ.ProdCodEstr;
                MovEstqChv = ITEM_MOV_ESTQ.MovEstqChv;
                ItMovEstqSeq = ITEM_MOV_ESTQ.ItMovEstqSeq;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ITEM_MOV_ESTQ")
                    && (ChangeTracker.OriginalValues["ITEM_MOV_ESTQ"] == ITEM_MOV_ESTQ))
                {
                    ChangeTracker.OriginalValues.Remove("ITEM_MOV_ESTQ");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ITEM_MOV_ESTQ", previousValue);
                }
                if (ITEM_MOV_ESTQ != null && !ITEM_MOV_ESTQ.ChangeTracker.ChangeTrackingEnabled)
                {
                    ITEM_MOV_ESTQ.StartTracking();
                }
            }
        }

        #endregion

    }
}
