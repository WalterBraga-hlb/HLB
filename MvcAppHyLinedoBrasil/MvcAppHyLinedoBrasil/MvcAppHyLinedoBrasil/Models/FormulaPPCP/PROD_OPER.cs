//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.FormulaPPCP
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PRODUTO))]
    [KnownType(typeof(PROD_OPER_ITEM))]
    public partial class PROD_OPER: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PRODUTO2 != null && PRODUTO2.ProdCodEstr != value)
                        {
                            PRODUTO2 = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public short ProdOperSeq
        {
            get { return _prodOperSeq; }
            set
            {
                if (_prodOperSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdOperSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _prodOperSeq = value;
                    OnPropertyChanged("ProdOperSeq");
                }
            }
        }
        private short _prodOperSeq;
    
        [DataMember]
        public string OperCod
        {
            get { return _operCod; }
            set
            {
                if (_operCod != value)
                {
                    _operCod = value;
                    OnPropertyChanged("OperCod");
                }
            }
        }
        private string _operCod;
    
        [DataMember]
        public string EquipCodEstr
        {
            get { return _equipCodEstr; }
            set
            {
                if (_equipCodEstr != value)
                {
                    _equipCodEstr = value;
                    OnPropertyChanged("EquipCodEstr");
                }
            }
        }
        private string _equipCodEstr;
    
        [DataMember]
        public Nullable<short> ProdOperQtdDias
        {
            get { return _prodOperQtdDias; }
            set
            {
                if (_prodOperQtdDias != value)
                {
                    _prodOperQtdDias = value;
                    OnPropertyChanged("ProdOperQtdDias");
                }
            }
        }
        private Nullable<short> _prodOperQtdDias;
    
        [DataMember]
        public Nullable<System.DateTime> ProdOperHoraEntrega
        {
            get { return _prodOperHoraEntrega; }
            set
            {
                if (_prodOperHoraEntrega != value)
                {
                    _prodOperHoraEntrega = value;
                    OnPropertyChanged("ProdOperHoraEntrega");
                }
            }
        }
        private Nullable<System.DateTime> _prodOperHoraEntrega;
    
        [DataMember]
        public string ProdOperTemApont
        {
            get { return _prodOperTemApont; }
            set
            {
                if (_prodOperTemApont != value)
                {
                    _prodOperTemApont = value;
                    OnPropertyChanged("ProdOperTemApont");
                }
            }
        }
        private string _prodOperTemApont;
    
        [DataMember]
        public string ProdOperTemReaprov
        {
            get { return _prodOperTemReaprov; }
            set
            {
                if (_prodOperTemReaprov != value)
                {
                    _prodOperTemReaprov = value;
                    OnPropertyChanged("ProdOperTemReaprov");
                }
            }
        }
        private string _prodOperTemReaprov;
    
        [DataMember]
        public string ProdCodEstrSucata
        {
            get { return _prodCodEstrSucata; }
            set
            {
                if (_prodCodEstrSucata != value)
                {
                    ChangeTracker.RecordOriginalValue("ProdCodEstrSucata", _prodCodEstrSucata);
                    if (!IsDeserializing)
                    {
                        if (PRODUTO1 != null && PRODUTO1.ProdCodEstr != value)
                        {
                            PRODUTO1 = null;
                        }
                    }
                    _prodCodEstrSucata = value;
                    OnPropertyChanged("ProdCodEstrSucata");
                }
            }
        }
        private string _prodCodEstrSucata;
    
        [DataMember]
        public string CCtrlCodEstrSucata
        {
            get { return _cCtrlCodEstrSucata; }
            set
            {
                if (_cCtrlCodEstrSucata != value)
                {
                    _cCtrlCodEstrSucata = value;
                    OnPropertyChanged("CCtrlCodEstrSucata");
                }
            }
        }
        private string _cCtrlCodEstrSucata;
    
        [DataMember]
        public Nullable<System.DateTime> ProdOperDataInic
        {
            get { return _prodOperDataInic; }
            set
            {
                if (_prodOperDataInic != value)
                {
                    _prodOperDataInic = value;
                    OnPropertyChanged("ProdOperDataInic");
                }
            }
        }
        private Nullable<System.DateTime> _prodOperDataInic;
    
        [DataMember]
        public Nullable<System.DateTime> ProdOperDataFim
        {
            get { return _prodOperDataFim; }
            set
            {
                if (_prodOperDataFim != value)
                {
                    _prodOperDataFim = value;
                    OnPropertyChanged("ProdOperDataFim");
                }
            }
        }
        private Nullable<System.DateTime> _prodOperDataFim;
    
        [DataMember]
        public string ProdOperTexto
        {
            get { return _prodOperTexto; }
            set
            {
                if (_prodOperTexto != value)
                {
                    _prodOperTexto = value;
                    OnPropertyChanged("ProdOperTexto");
                }
            }
        }
        private string _prodOperTexto;
    
        [DataMember]
        public string LocArmazCodEstr
        {
            get { return _locArmazCodEstr; }
            set
            {
                if (_locArmazCodEstr != value)
                {
                    _locArmazCodEstr = value;
                    OnPropertyChanged("LocArmazCodEstr");
                }
            }
        }
        private string _locArmazCodEstr;
    
        [DataMember]
        public string ProdCodEstrRetalho
        {
            get { return _prodCodEstrRetalho; }
            set
            {
                if (_prodCodEstrRetalho != value)
                {
                    ChangeTracker.RecordOriginalValue("ProdCodEstrRetalho", _prodCodEstrRetalho);
                    if (!IsDeserializing)
                    {
                        if (PRODUTO != null && PRODUTO.ProdCodEstr != value)
                        {
                            PRODUTO = null;
                        }
                    }
                    _prodCodEstrRetalho = value;
                    OnPropertyChanged("ProdCodEstrRetalho");
                }
            }
        }
        private string _prodCodEstrRetalho;
    
        [DataMember]
        public string CCtrlCodEstrRetalho
        {
            get { return _cCtrlCodEstrRetalho; }
            set
            {
                if (_cCtrlCodEstrRetalho != value)
                {
                    _cCtrlCodEstrRetalho = value;
                    OnPropertyChanged("CCtrlCodEstrRetalho");
                }
            }
        }
        private string _cCtrlCodEstrRetalho;
    
        [DataMember]
        public string ProdOperRetalhoMovEstq
        {
            get { return _prodOperRetalhoMovEstq; }
            set
            {
                if (_prodOperRetalhoMovEstq != value)
                {
                    _prodOperRetalhoMovEstq = value;
                    OnPropertyChanged("ProdOperRetalhoMovEstq");
                }
            }
        }
        private string _prodOperRetalhoMovEstq;
    
        [DataMember]
        public string ProdOperRetalhoBxaComp
        {
            get { return _prodOperRetalhoBxaComp; }
            set
            {
                if (_prodOperRetalhoBxaComp != value)
                {
                    _prodOperRetalhoBxaComp = value;
                    OnPropertyChanged("ProdOperRetalhoBxaComp");
                }
            }
        }
        private string _prodOperRetalhoBxaComp;
    
        [DataMember]
        public string ProdOperProcConfApont
        {
            get { return _prodOperProcConfApont; }
            set
            {
                if (_prodOperProcConfApont != value)
                {
                    _prodOperProcConfApont = value;
                    OnPropertyChanged("ProdOperProcConfApont");
                }
            }
        }
        private string _prodOperProcConfApont;
    
        [DataMember]
        public string ProdOperObs
        {
            get { return _prodOperObs; }
            set
            {
                if (_prodOperObs != value)
                {
                    _prodOperObs = value;
                    OnPropertyChanged("ProdOperObs");
                }
            }
        }
        private string _prodOperObs;
    
        [DataMember]
        public string ProdOperEnrolamento
        {
            get { return _prodOperEnrolamento; }
            set
            {
                if (_prodOperEnrolamento != value)
                {
                    _prodOperEnrolamento = value;
                    OnPropertyChanged("ProdOperEnrolamento");
                }
            }
        }
        private string _prodOperEnrolamento;
    
        [DataMember]
        public string ProdOperImprimeEtiqueta
        {
            get { return _prodOperImprimeEtiqueta; }
            set
            {
                if (_prodOperImprimeEtiqueta != value)
                {
                    _prodOperImprimeEtiqueta = value;
                    OnPropertyChanged("ProdOperImprimeEtiqueta");
                }
            }
        }
        private string _prodOperImprimeEtiqueta;
    
        [DataMember]
        public string ProdOperIntegraBalanca
        {
            get { return _prodOperIntegraBalanca; }
            set
            {
                if (_prodOperIntegraBalanca != value)
                {
                    _prodOperIntegraBalanca = value;
                    OnPropertyChanged("ProdOperIntegraBalanca");
                }
            }
        }
        private string _prodOperIntegraBalanca;
    
        [DataMember]
        public string ProdOperAtualizaLote
        {
            get { return _prodOperAtualizaLote; }
            set
            {
                if (_prodOperAtualizaLote != value)
                {
                    _prodOperAtualizaLote = value;
                    OnPropertyChanged("ProdOperAtualizaLote");
                }
            }
        }
        private string _prodOperAtualizaLote;
    
        [DataMember]
        public string ProdOperGerPVRemInd
        {
            get { return _prodOperGerPVRemInd; }
            set
            {
                if (_prodOperGerPVRemInd != value)
                {
                    _prodOperGerPVRemInd = value;
                    OnPropertyChanged("ProdOperGerPVRemInd");
                }
            }
        }
        private string _prodOperGerPVRemInd;
    
        [DataMember]
        public string ProdOperGeraLote
        {
            get { return _prodOperGeraLote; }
            set
            {
                if (_prodOperGeraLote != value)
                {
                    _prodOperGeraLote = value;
                    OnPropertyChanged("ProdOperGeraLote");
                }
            }
        }
        private string _prodOperGeraLote;
    
        [DataMember]
        public string ProdOperCtrlEsteriliz
        {
            get { return _prodOperCtrlEsteriliz; }
            set
            {
                if (_prodOperCtrlEsteriliz != value)
                {
                    _prodOperCtrlEsteriliz = value;
                    OnPropertyChanged("ProdOperCtrlEsteriliz");
                }
            }
        }
        private string _prodOperCtrlEsteriliz;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public PRODUTO PRODUTO
        {
            get { return _pRODUTO; }
            set
            {
                if (!ReferenceEquals(_pRODUTO, value))
                {
                    var previousValue = _pRODUTO;
                    _pRODUTO = value;
                    FixupPRODUTO(previousValue);
                    OnNavigationPropertyChanged("PRODUTO");
                }
            }
        }
        private PRODUTO _pRODUTO;
    
        [DataMember]
        public TrackableCollection<PROD_OPER_ITEM> PROD_OPER_ITEM
        {
            get
            {
                if (_pROD_OPER_ITEM == null)
                {
                    _pROD_OPER_ITEM = new TrackableCollection<PROD_OPER_ITEM>();
                    _pROD_OPER_ITEM.CollectionChanged += FixupPROD_OPER_ITEM;
                }
                return _pROD_OPER_ITEM;
            }
            set
            {
                if (!ReferenceEquals(_pROD_OPER_ITEM, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pROD_OPER_ITEM != null)
                    {
                        _pROD_OPER_ITEM.CollectionChanged -= FixupPROD_OPER_ITEM;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (PROD_OPER_ITEM item in _pROD_OPER_ITEM)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _pROD_OPER_ITEM = value;
                    if (_pROD_OPER_ITEM != null)
                    {
                        _pROD_OPER_ITEM.CollectionChanged += FixupPROD_OPER_ITEM;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (PROD_OPER_ITEM item in _pROD_OPER_ITEM)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PROD_OPER_ITEM");
                }
            }
        }
        private TrackableCollection<PROD_OPER_ITEM> _pROD_OPER_ITEM;
    
        [DataMember]
        public PRODUTO PRODUTO1
        {
            get { return _pRODUTO1; }
            set
            {
                if (!ReferenceEquals(_pRODUTO1, value))
                {
                    var previousValue = _pRODUTO1;
                    _pRODUTO1 = value;
                    FixupPRODUTO1(previousValue);
                    OnNavigationPropertyChanged("PRODUTO1");
                }
            }
        }
        private PRODUTO _pRODUTO1;
    
        [DataMember]
        public PRODUTO PRODUTO2
        {
            get { return _pRODUTO2; }
            set
            {
                if (!ReferenceEquals(_pRODUTO2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProdCodEstr != value.ProdCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pRODUTO2;
                    _pRODUTO2 = value;
                    FixupPRODUTO2(previousValue);
                    OnNavigationPropertyChanged("PRODUTO2");
                }
            }
        }
        private PRODUTO _pRODUTO2;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PRODUTO = null;
            PROD_OPER_ITEM.Clear();
            PRODUTO1 = null;
            PRODUTO2 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPRODUTO(PRODUTO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PROD_OPER.Contains(this))
            {
                previousValue.PROD_OPER.Remove(this);
            }
    
            if (PRODUTO != null)
            {
                if (!PRODUTO.PROD_OPER.Contains(this))
                {
                    PRODUTO.PROD_OPER.Add(this);
                }
    
                ProdCodEstrRetalho = PRODUTO.ProdCodEstr;
            }
            else if (!skipKeys)
            {
                ProdCodEstrRetalho = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO")
                    && (ChangeTracker.OriginalValues["PRODUTO"] == PRODUTO))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO", previousValue);
                }
                if (PRODUTO != null && !PRODUTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO1(PRODUTO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PROD_OPER1.Contains(this))
            {
                previousValue.PROD_OPER1.Remove(this);
            }
    
            if (PRODUTO1 != null)
            {
                if (!PRODUTO1.PROD_OPER1.Contains(this))
                {
                    PRODUTO1.PROD_OPER1.Add(this);
                }
    
                ProdCodEstrSucata = PRODUTO1.ProdCodEstr;
            }
            else if (!skipKeys)
            {
                ProdCodEstrSucata = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO1")
                    && (ChangeTracker.OriginalValues["PRODUTO1"] == PRODUTO1))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO1", previousValue);
                }
                if (PRODUTO1 != null && !PRODUTO1.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO1.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO2(PRODUTO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PROD_OPER2.Contains(this))
            {
                previousValue.PROD_OPER2.Remove(this);
            }
    
            if (PRODUTO2 != null)
            {
                if (!PRODUTO2.PROD_OPER2.Contains(this))
                {
                    PRODUTO2.PROD_OPER2.Add(this);
                }
    
                ProdCodEstr = PRODUTO2.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO2")
                    && (ChangeTracker.OriginalValues["PRODUTO2"] == PRODUTO2))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO2", previousValue);
                }
                if (PRODUTO2 != null && !PRODUTO2.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO2.StartTracking();
                }
            }
        }
    
        private void FixupPROD_OPER_ITEM(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PROD_OPER_ITEM item in e.NewItems)
                {
                    item.PROD_OPER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PROD_OPER_ITEM", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PROD_OPER_ITEM item in e.OldItems)
                {
                    if (ReferenceEquals(item.PROD_OPER, this))
                    {
                        item.PROD_OPER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PROD_OPER_ITEM", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
