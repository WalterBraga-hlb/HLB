//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.FormulaPPCP
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PROD_OPER))]
    [KnownType(typeof(PRODUTO))]
    public partial class PROD_OPER_ITEM: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PROD_OPER != null && PROD_OPER.ProdCodEstr != value)
                        {
                            PROD_OPER = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public short ProdOperSeq
        {
            get { return _prodOperSeq; }
            set
            {
                if (_prodOperSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdOperSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PROD_OPER != null && PROD_OPER.ProdOperSeq != value)
                        {
                            PROD_OPER = null;
                        }
                    }
                    _prodOperSeq = value;
                    OnPropertyChanged("ProdOperSeq");
                }
            }
        }
        private short _prodOperSeq;
    
        [DataMember]
        public string ProdOperItProdCodEstr
        {
            get { return _prodOperItProdCodEstr; }
            set
            {
                if (_prodOperItProdCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdOperItProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PRODUTO != null && PRODUTO.ProdCodEstr != value)
                        {
                            PRODUTO = null;
                        }
                    }
                    _prodOperItProdCodEstr = value;
                    OnPropertyChanged("ProdOperItProdCodEstr");
                }
            }
        }
        private string _prodOperItProdCodEstr;
    
        [DataMember]
        public int ProdOperItSeq
        {
            get { return _prodOperItSeq; }
            set
            {
                if (_prodOperItSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdOperItSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _prodOperItSeq = value;
                    OnPropertyChanged("ProdOperItSeq");
                }
            }
        }
        private int _prodOperItSeq;
    
        [DataMember]
        public string ProdGradeCorCod
        {
            get { return _prodGradeCorCod; }
            set
            {
                if (_prodGradeCorCod != value)
                {
                    _prodGradeCorCod = value;
                    OnPropertyChanged("ProdGradeCorCod");
                }
            }
        }
        private string _prodGradeCorCod;
    
        [DataMember]
        public Nullable<decimal> ProdOperItQtd
        {
            get { return _prodOperItQtd; }
            set
            {
                if (_prodOperItQtd != value)
                {
                    _prodOperItQtd = value;
                    OnPropertyChanged("ProdOperItQtd");
                }
            }
        }
        private Nullable<decimal> _prodOperItQtd;
    
        [DataMember]
        public Nullable<System.DateTime> ProdOperItDataValidInic
        {
            get { return _prodOperItDataValidInic; }
            set
            {
                if (_prodOperItDataValidInic != value)
                {
                    _prodOperItDataValidInic = value;
                    OnPropertyChanged("ProdOperItDataValidInic");
                }
            }
        }
        private Nullable<System.DateTime> _prodOperItDataValidInic;
    
        [DataMember]
        public Nullable<System.DateTime> ProdOperItDataValidFim
        {
            get { return _prodOperItDataValidFim; }
            set
            {
                if (_prodOperItDataValidFim != value)
                {
                    _prodOperItDataValidFim = value;
                    OnPropertyChanged("ProdOperItDataValidFim");
                }
            }
        }
        private Nullable<System.DateTime> _prodOperItDataValidFim;
    
        [DataMember]
        public string ProdOperItQtdFicTecAlter
        {
            get { return _prodOperItQtdFicTecAlter; }
            set
            {
                if (_prodOperItQtdFicTecAlter != value)
                {
                    _prodOperItQtdFicTecAlter = value;
                    OnPropertyChanged("ProdOperItQtdFicTecAlter");
                }
            }
        }
        private string _prodOperItQtdFicTecAlter;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public PROD_OPER PROD_OPER
        {
            get { return _pROD_OPER; }
            set
            {
                if (!ReferenceEquals(_pROD_OPER, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProdCodEstr != value.ProdCodEstr || ProdOperSeq != value.ProdOperSeq)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pROD_OPER;
                    _pROD_OPER = value;
                    FixupPROD_OPER(previousValue);
                    OnNavigationPropertyChanged("PROD_OPER");
                }
            }
        }
        private PROD_OPER _pROD_OPER;
    
        [DataMember]
        public PRODUTO PRODUTO
        {
            get { return _pRODUTO; }
            set
            {
                if (!ReferenceEquals(_pRODUTO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProdOperItProdCodEstr != value.ProdCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pRODUTO;
                    _pRODUTO = value;
                    FixupPRODUTO(previousValue);
                    OnNavigationPropertyChanged("PRODUTO");
                }
            }
        }
        private PRODUTO _pRODUTO;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PROD_OPER = null;
            PRODUTO = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPROD_OPER(PROD_OPER previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PROD_OPER_ITEM.Contains(this))
            {
                previousValue.PROD_OPER_ITEM.Remove(this);
            }
    
            if (PROD_OPER != null)
            {
                if (!PROD_OPER.PROD_OPER_ITEM.Contains(this))
                {
                    PROD_OPER.PROD_OPER_ITEM.Add(this);
                }
    
                ProdCodEstr = PROD_OPER.ProdCodEstr;
                ProdOperSeq = PROD_OPER.ProdOperSeq;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PROD_OPER")
                    && (ChangeTracker.OriginalValues["PROD_OPER"] == PROD_OPER))
                {
                    ChangeTracker.OriginalValues.Remove("PROD_OPER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PROD_OPER", previousValue);
                }
                if (PROD_OPER != null && !PROD_OPER.ChangeTracker.ChangeTrackingEnabled)
                {
                    PROD_OPER.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO(PRODUTO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PROD_OPER_ITEM.Contains(this))
            {
                previousValue.PROD_OPER_ITEM.Remove(this);
            }
    
            if (PRODUTO != null)
            {
                if (!PRODUTO.PROD_OPER_ITEM.Contains(this))
                {
                    PRODUTO.PROD_OPER_ITEM.Add(this);
                }
    
                ProdOperItProdCodEstr = PRODUTO.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO")
                    && (ChangeTracker.OriginalValues["PRODUTO"] == PRODUTO))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO", previousValue);
                }
                if (PRODUTO != null && !PRODUTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO.StartTracking();
                }
            }
        }

        #endregion

    }
}
