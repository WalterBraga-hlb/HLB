//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.FormulaPPCP
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PRODUTO1))]
    public partial class DESCR_TECN_PROD: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PRODUTO1 != null && PRODUTO1.ProdCodEstr != value)
                        {
                            PRODUTO1 = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public string DescrTecnProdNum
        {
            get { return _descrTecnProdNum; }
            set
            {
                if (_descrTecnProdNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DescrTecnProdNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _descrTecnProdNum = value;
                    OnPropertyChanged("DescrTecnProdNum");
                }
            }
        }
        private string _descrTecnProdNum;
    
        [DataMember]
        public string DescrTecnProdTexto
        {
            get { return _descrTecnProdTexto; }
            set
            {
                if (_descrTecnProdTexto != value)
                {
                    _descrTecnProdTexto = value;
                    OnPropertyChanged("DescrTecnProdTexto");
                }
            }
        }
        private string _descrTecnProdTexto;
    
        [DataMember]
        public string DescrTecnProdEntraPesqInternet
        {
            get { return _descrTecnProdEntraPesqInternet; }
            set
            {
                if (_descrTecnProdEntraPesqInternet != value)
                {
                    _descrTecnProdEntraPesqInternet = value;
                    OnPropertyChanged("DescrTecnProdEntraPesqInternet");
                }
            }
        }
        private string _descrTecnProdEntraPesqInternet;
    
        [DataMember]
        public string DescrTecnProdTitulo
        {
            get { return _descrTecnProdTitulo; }
            set
            {
                if (_descrTecnProdTitulo != value)
                {
                    _descrTecnProdTitulo = value;
                    OnPropertyChanged("DescrTecnProdTitulo");
                }
            }
        }
        private string _descrTecnProdTitulo;
    
        [DataMember]
        public Nullable<System.DateTime> descrtecnproddata
        {
            get { return _descrtecnproddata; }
            set
            {
                if (_descrtecnproddata != value)
                {
                    _descrtecnproddata = value;
                    OnPropertyChanged("descrtecnproddata");
                }
            }
        }
        private Nullable<System.DateTime> _descrtecnproddata;
    
        [DataMember]
        public Nullable<System.DateTime> DescrTecnProdDataIni
        {
            get { return _descrTecnProdDataIni; }
            set
            {
                if (_descrTecnProdDataIni != value)
                {
                    _descrTecnProdDataIni = value;
                    OnPropertyChanged("DescrTecnProdDataIni");
                }
            }
        }
        private Nullable<System.DateTime> _descrTecnProdDataIni;
    
        [DataMember]
        public Nullable<System.DateTime> DescrTecnProdDataFim
        {
            get { return _descrTecnProdDataFim; }
            set
            {
                if (_descrTecnProdDataFim != value)
                {
                    _descrTecnProdDataFim = value;
                    OnPropertyChanged("DescrTecnProdDataFim");
                }
            }
        }
        private Nullable<System.DateTime> _descrTecnProdDataFim;
    
        [DataMember]
        public string DescrTecnProdTextoPara
        {
            get { return _descrTecnProdTextoPara; }
            set
            {
                if (_descrTecnProdTextoPara != value)
                {
                    _descrTecnProdTextoPara = value;
                    OnPropertyChanged("DescrTecnProdTextoPara");
                }
            }
        }
        private string _descrTecnProdTextoPara;
    
        [DataMember]
        public string LingCod
        {
            get { return _lingCod; }
            set
            {
                if (_lingCod != value)
                {
                    _lingCod = value;
                    OnPropertyChanged("LingCod");
                }
            }
        }
        private string _lingCod;
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string ProdContrTurCod
        {
            get { return _prodContrTurCod; }
            set
            {
                if (_prodContrTurCod != value)
                {
                    _prodContrTurCod = value;
                    OnPropertyChanged("ProdContrTurCod");
                }
            }
        }
        private string _prodContrTurCod;
    
        [DataMember]
        public string CLASTURCODESTR
        {
            get { return _cLASTURCODESTR; }
            set
            {
                if (_cLASTURCODESTR != value)
                {
                    _cLASTURCODESTR = value;
                    OnPropertyChanged("CLASTURCODESTR");
                }
            }
        }
        private string _cLASTURCODESTR;
    
        [DataMember]
        public string REGIMETURCODESTR
        {
            get { return _rEGIMETURCODESTR; }
            set
            {
                if (_rEGIMETURCODESTR != value)
                {
                    _rEGIMETURCODESTR = value;
                    OnPropertyChanged("REGIMETURCODESTR");
                }
            }
        }
        private string _rEGIMETURCODESTR;
    
        [DataMember]
        public string DESCRTECNPATH
        {
            get { return _dESCRTECNPATH; }
            set
            {
                if (_dESCRTECNPATH != value)
                {
                    _dESCRTECNPATH = value;
                    OnPropertyChanged("DESCRTECNPATH");
                }
            }
        }
        private string _dESCRTECNPATH;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public PRODUTO1 PRODUTO1
        {
            get { return _pRODUTO1; }
            set
            {
                if (!ReferenceEquals(_pRODUTO1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProdCodEstr != value.ProdCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pRODUTO1;
                    _pRODUTO1 = value;
                    FixupPRODUTO1(previousValue);
                    OnNavigationPropertyChanged("PRODUTO1");
                }
            }
        }
        private PRODUTO1 _pRODUTO1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PRODUTO1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPRODUTO1(PRODUTO1 previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DESCR_TECN_PROD.Contains(this))
            {
                previousValue.DESCR_TECN_PROD.Remove(this);
            }
    
            if (PRODUTO1 != null)
            {
                if (!PRODUTO1.DESCR_TECN_PROD.Contains(this))
                {
                    PRODUTO1.DESCR_TECN_PROD.Add(this);
                }
    
                ProdCodEstr = PRODUTO1.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO1")
                    && (ChangeTracker.OriginalValues["PRODUTO1"] == PRODUTO1))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO1", previousValue);
                }
                if (PRODUTO1 != null && !PRODUTO1.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO1.StartTracking();
                }
            }
        }

        #endregion

    }
}
