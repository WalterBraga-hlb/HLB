//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace MvcAppHyLinedoBrasil.Models.FormulaPPCP
{
    public partial class FormulaPPCPEntities : ObjectContext
    {
        public const string ConnectionString = "name=FormulaPPCPEntities";
        public const string ContainerName = "FormulaPPCPEntities";
    
        #region Constructors
    
        public FormulaPPCPEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public FormulaPPCPEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public FormulaPPCPEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<FIC_TEC_PROD> FIC_TEC_PROD
        {
            get { return _fIC_TEC_PROD  ?? (_fIC_TEC_PROD = CreateObjectSet<FIC_TEC_PROD>("FIC_TEC_PROD")); }
        }
        private ObjectSet<FIC_TEC_PROD> _fIC_TEC_PROD;
    
        public ObjectSet<FIC_TEC_PROD_DATA> FIC_TEC_PROD_DATA
        {
            get { return _fIC_TEC_PROD_DATA  ?? (_fIC_TEC_PROD_DATA = CreateObjectSet<FIC_TEC_PROD_DATA>("FIC_TEC_PROD_DATA")); }
        }
        private ObjectSet<FIC_TEC_PROD_DATA> _fIC_TEC_PROD_DATA;
    
        public ObjectSet<PROD_OPER> PROD_OPER
        {
            get { return _pROD_OPER  ?? (_pROD_OPER = CreateObjectSet<PROD_OPER>("PROD_OPER")); }
        }
        private ObjectSet<PROD_OPER> _pROD_OPER;
    
        public ObjectSet<PROD_OPER_ITEM> PROD_OPER_ITEM
        {
            get { return _pROD_OPER_ITEM  ?? (_pROD_OPER_ITEM = CreateObjectSet<PROD_OPER_ITEM>("PROD_OPER_ITEM")); }
        }
        private ObjectSet<PROD_OPER_ITEM> _pROD_OPER_ITEM;
    
        public ObjectSet<PROD_UNID_MED1> PROD_UNID_MED1
        {
            get { return _pROD_UNID_MED1  ?? (_pROD_UNID_MED1 = CreateObjectSet<PROD_UNID_MED1>("PROD_UNID_MED1")); }
        }
        private ObjectSet<PROD_UNID_MED1> _pROD_UNID_MED1;
    
        public ObjectSet<PRODUTO> PRODUTO
        {
            get { return _pRODUTO  ?? (_pRODUTO = CreateObjectSet<PRODUTO>("PRODUTO")); }
        }
        private ObjectSet<PRODUTO> _pRODUTO;
    
        public ObjectSet<PRODUTO1> PRODUTO1
        {
            get { return _pRODUTO1  ?? (_pRODUTO1 = CreateObjectSet<PRODUTO1>("PRODUTO1")); }
        }
        private ObjectSet<PRODUTO1> _pRODUTO1;
    
        public ObjectSet<DESCR_TECN_PROD> DESCR_TECN_PROD
        {
            get { return _dESCR_TECN_PROD  ?? (_dESCR_TECN_PROD = CreateObjectSet<DESCR_TECN_PROD>("DESCR_TECN_PROD")); }
        }
        private ObjectSet<DESCR_TECN_PROD> _dESCR_TECN_PROD;

        #endregion

        #region Function Imports
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="cODIGO_PRODUTO">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="cODIGO_EMPRESA">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="cHAVE">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="iTMOVESTQSEQ">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int CustoFicTec(string cODIGO_PRODUTO, string cODIGO_EMPRESA, Nullable<int> cHAVE, Nullable<int> iTMOVESTQSEQ)
        {
    
            ObjectParameter cODIGO_PRODUTOParameter;
    
            if (cODIGO_PRODUTO != null)
            {
                cODIGO_PRODUTOParameter = new ObjectParameter("CODIGO_PRODUTO", cODIGO_PRODUTO);
            }
            else
            {
                cODIGO_PRODUTOParameter = new ObjectParameter("CODIGO_PRODUTO", typeof(string));
            }
    
            ObjectParameter cODIGO_EMPRESAParameter;
    
            if (cODIGO_EMPRESA != null)
            {
                cODIGO_EMPRESAParameter = new ObjectParameter("CODIGO_EMPRESA", cODIGO_EMPRESA);
            }
            else
            {
                cODIGO_EMPRESAParameter = new ObjectParameter("CODIGO_EMPRESA", typeof(string));
            }
    
            ObjectParameter cHAVEParameter;
    
            if (cHAVE.HasValue)
            {
                cHAVEParameter = new ObjectParameter("CHAVE", cHAVE);
            }
            else
            {
                cHAVEParameter = new ObjectParameter("CHAVE", typeof(int));
            }
    
            ObjectParameter iTMOVESTQSEQParameter;
    
            if (iTMOVESTQSEQ.HasValue)
            {
                iTMOVESTQSEQParameter = new ObjectParameter("ITMOVESTQSEQ", iTMOVESTQSEQ);
            }
            else
            {
                iTMOVESTQSEQParameter = new ObjectParameter("ITMOVESTQSEQ", typeof(int));
            }
            return base.ExecuteFunction("CustoFicTec", cODIGO_PRODUTOParameter, cODIGO_EMPRESAParameter, cHAVEParameter, iTMOVESTQSEQParameter);
        }

        #endregion

    }
}
