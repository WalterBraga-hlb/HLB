//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.FormulaPPCP
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FIC_TEC_PROD))]
    [KnownType(typeof(PRODUTO))]
    public partial class PROD_UNID_MED1: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PRODUTO != null && PRODUTO.ProdCodEstr != value)
                        {
                            PRODUTO = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public string ProdUnidMedCod
        {
            get { return _prodUnidMedCod; }
            set
            {
                if (_prodUnidMedCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdUnidMedCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _prodUnidMedCod = value;
                    OnPropertyChanged("ProdUnidMedCod");
                }
            }
        }
        private string _prodUnidMedCod;
    
        [DataMember]
        public short ProdUnidMedPos
        {
            get { return _prodUnidMedPos; }
            set
            {
                if (_prodUnidMedPos != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdUnidMedPos' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _prodUnidMedPos = value;
                    OnPropertyChanged("ProdUnidMedPos");
                }
            }
        }
        private short _prodUnidMedPos;
    
        [DataMember]
        public Nullable<decimal> ProdUnidMedPeso
        {
            get { return _prodUnidMedPeso; }
            set
            {
                if (_prodUnidMedPeso != value)
                {
                    _prodUnidMedPeso = value;
                    OnPropertyChanged("ProdUnidMedPeso");
                }
            }
        }
        private Nullable<decimal> _prodUnidMedPeso;
    
        [DataMember]
        public string ProdUnidMedPesoFD
        {
            get { return _prodUnidMedPesoFD; }
            set
            {
                if (_prodUnidMedPesoFD != value)
                {
                    _prodUnidMedPesoFD = value;
                    OnPropertyChanged("ProdUnidMedPesoFD");
                }
            }
        }
        private string _prodUnidMedPesoFD;
    
        [DataMember]
        public string ProdUnidMedCodBar
        {
            get { return _prodUnidMedCodBar; }
            set
            {
                if (_prodUnidMedCodBar != value)
                {
                    _prodUnidMedCodBar = value;
                    OnPropertyChanged("ProdUnidMedCodBar");
                }
            }
        }
        private string _prodUnidMedCodBar;
    
        [DataMember]
        public Nullable<decimal> ProdUnidMedQtdMinFat
        {
            get { return _prodUnidMedQtdMinFat; }
            set
            {
                if (_prodUnidMedQtdMinFat != value)
                {
                    _prodUnidMedQtdMinFat = value;
                    OnPropertyChanged("ProdUnidMedQtdMinFat");
                }
            }
        }
        private Nullable<decimal> _prodUnidMedQtdMinFat;
    
        [DataMember]
        public Nullable<decimal> ProdUnidMedPesoQtd
        {
            get { return _prodUnidMedPesoQtd; }
            set
            {
                if (_prodUnidMedPesoQtd != value)
                {
                    _prodUnidMedPesoQtd = value;
                    OnPropertyChanged("ProdUnidMedPesoQtd");
                }
            }
        }
        private Nullable<decimal> _prodUnidMedPesoQtd;
    
        [DataMember]
        public Nullable<decimal> ProdUnidMedFatorMult
        {
            get { return _prodUnidMedFatorMult; }
            set
            {
                if (_prodUnidMedFatorMult != value)
                {
                    _prodUnidMedFatorMult = value;
                    OnPropertyChanged("ProdUnidMedFatorMult");
                }
            }
        }
        private Nullable<decimal> _prodUnidMedFatorMult;
    
        [DataMember]
        public Nullable<System.DateTime> ProdUnidMedDataValidInic
        {
            get { return _prodUnidMedDataValidInic; }
            set
            {
                if (_prodUnidMedDataValidInic != value)
                {
                    _prodUnidMedDataValidInic = value;
                    OnPropertyChanged("ProdUnidMedDataValidInic");
                }
            }
        }
        private Nullable<System.DateTime> _prodUnidMedDataValidInic;
    
        [DataMember]
        public Nullable<System.DateTime> ProdUnidMedDataValidFim
        {
            get { return _prodUnidMedDataValidFim; }
            set
            {
                if (_prodUnidMedDataValidFim != value)
                {
                    _prodUnidMedDataValidFim = value;
                    OnPropertyChanged("ProdUnidMedDataValidFim");
                }
            }
        }
        private Nullable<System.DateTime> _prodUnidMedDataValidFim;
    
        [DataMember]
        public string ProdUnidMedLoteUnico
        {
            get { return _prodUnidMedLoteUnico; }
            set
            {
                if (_prodUnidMedLoteUnico != value)
                {
                    _prodUnidMedLoteUnico = value;
                    OnPropertyChanged("ProdUnidMedLoteUnico");
                }
            }
        }
        private string _prodUnidMedLoteUnico;
    
        [DataMember]
        public string ProdUnidMedEstat
        {
            get { return _prodUnidMedEstat; }
            set
            {
                if (_prodUnidMedEstat != value)
                {
                    _prodUnidMedEstat = value;
                    OnPropertyChanged("ProdUnidMedEstat");
                }
            }
        }
        private string _prodUnidMedEstat;
    
        [DataMember]
        public string ProdUnidMedCompra
        {
            get { return _prodUnidMedCompra; }
            set
            {
                if (_prodUnidMedCompra != value)
                {
                    _prodUnidMedCompra = value;
                    OnPropertyChanged("ProdUnidMedCompra");
                }
            }
        }
        private string _prodUnidMedCompra;
    
        [DataMember]
        public string ProdUnidMedProduc
        {
            get { return _prodUnidMedProduc; }
            set
            {
                if (_prodUnidMedProduc != value)
                {
                    _prodUnidMedProduc = value;
                    OnPropertyChanged("ProdUnidMedProduc");
                }
            }
        }
        private string _prodUnidMedProduc;
    
        [DataMember]
        public string ProdUnidMedPadVenda
        {
            get { return _prodUnidMedPadVenda; }
            set
            {
                if (_prodUnidMedPadVenda != value)
                {
                    _prodUnidMedPadVenda = value;
                    OnPropertyChanged("ProdUnidMedPadVenda");
                }
            }
        }
        private string _prodUnidMedPadVenda;
    
        [DataMember]
        public Nullable<short> ProdUnidMedSeq
        {
            get { return _prodUnidMedSeq; }
            set
            {
                if (_prodUnidMedSeq != value)
                {
                    _prodUnidMedSeq = value;
                    OnPropertyChanged("ProdUnidMedSeq");
                }
            }
        }
        private Nullable<short> _prodUnidMedSeq;
    
        [DataMember]
        public string ProdUnidMedExibeComprimVenda
        {
            get { return _prodUnidMedExibeComprimVenda; }
            set
            {
                if (_prodUnidMedExibeComprimVenda != value)
                {
                    _prodUnidMedExibeComprimVenda = value;
                    OnPropertyChanged("ProdUnidMedExibeComprimVenda");
                }
            }
        }
        private string _prodUnidMedExibeComprimVenda;
    
        [DataMember]
        public string ProdUnidMedExibeLargVenda
        {
            get { return _prodUnidMedExibeLargVenda; }
            set
            {
                if (_prodUnidMedExibeLargVenda != value)
                {
                    _prodUnidMedExibeLargVenda = value;
                    OnPropertyChanged("ProdUnidMedExibeLargVenda");
                }
            }
        }
        private string _prodUnidMedExibeLargVenda;
    
        [DataMember]
        public string ProdUnidMedExibeAltVenda
        {
            get { return _prodUnidMedExibeAltVenda; }
            set
            {
                if (_prodUnidMedExibeAltVenda != value)
                {
                    _prodUnidMedExibeAltVenda = value;
                    OnPropertyChanged("ProdUnidMedExibeAltVenda");
                }
            }
        }
        private string _prodUnidMedExibeAltVenda;
    
        [DataMember]
        public string ProdUnidMedDep
        {
            get { return _prodUnidMedDep; }
            set
            {
                if (_prodUnidMedDep != value)
                {
                    _prodUnidMedDep = value;
                    OnPropertyChanged("ProdUnidMedDep");
                }
            }
        }
        private string _prodUnidMedDep;
    
        [DataMember]
        public string ProdUnidMedCodAlt
        {
            get { return _prodUnidMedCodAlt; }
            set
            {
                if (_prodUnidMedCodAlt != value)
                {
                    _prodUnidMedCodAlt = value;
                    OnPropertyChanged("ProdUnidMedCodAlt");
                }
            }
        }
        private string _prodUnidMedCodAlt;
    
        [DataMember]
        public string ProdUnidMedPadMovEstq
        {
            get { return _prodUnidMedPadMovEstq; }
            set
            {
                if (_prodUnidMedPadMovEstq != value)
                {
                    _prodUnidMedPadMovEstq = value;
                    OnPropertyChanged("ProdUnidMedPadMovEstq");
                }
            }
        }
        private string _prodUnidMedPadMovEstq;
    
        [DataMember]
        public Nullable<System.DateTime> ProdUnidMedUltDataMod
        {
            get { return _prodUnidMedUltDataMod; }
            set
            {
                if (_prodUnidMedUltDataMod != value)
                {
                    _prodUnidMedUltDataMod = value;
                    OnPropertyChanged("ProdUnidMedUltDataMod");
                }
            }
        }
        private Nullable<System.DateTime> _prodUnidMedUltDataMod;
    
        [DataMember]
        public Nullable<decimal> ProdUnidMedCubagRod
        {
            get { return _prodUnidMedCubagRod; }
            set
            {
                if (_prodUnidMedCubagRod != value)
                {
                    _prodUnidMedCubagRod = value;
                    OnPropertyChanged("ProdUnidMedCubagRod");
                }
            }
        }
        private Nullable<decimal> _prodUnidMedCubagRod;
    
        [DataMember]
        public string ProdUnidMedEntrega
        {
            get { return _prodUnidMedEntrega; }
            set
            {
                if (_prodUnidMedEntrega != value)
                {
                    _prodUnidMedEntrega = value;
                    OnPropertyChanged("ProdUnidMedEntrega");
                }
            }
        }
        private string _prodUnidMedEntrega;
    
        [DataMember]
        public string ProdUnidMedObjVenda
        {
            get { return _prodUnidMedObjVenda; }
            set
            {
                if (_prodUnidMedObjVenda != value)
                {
                    _prodUnidMedObjVenda = value;
                    OnPropertyChanged("ProdUnidMedObjVenda");
                }
            }
        }
        private string _prodUnidMedObjVenda;
    
        [DataMember]
        public Nullable<decimal> ProdUnidMedFatorMultFornecto
        {
            get { return _prodUnidMedFatorMultFornecto; }
            set
            {
                if (_prodUnidMedFatorMultFornecto != value)
                {
                    _prodUnidMedFatorMultFornecto = value;
                    OnPropertyChanged("ProdUnidMedFatorMultFornecto");
                }
            }
        }
        private Nullable<decimal> _prodUnidMedFatorMultFornecto;
    
        [DataMember]
        public Nullable<decimal> ProdUnidMedFatorFCI
        {
            get { return _prodUnidMedFatorFCI; }
            set
            {
                if (_prodUnidMedFatorFCI != value)
                {
                    _prodUnidMedFatorFCI = value;
                    OnPropertyChanged("ProdUnidMedFatorFCI");
                }
            }
        }
        private Nullable<decimal> _prodUnidMedFatorFCI;
    
        [DataMember]
        public Nullable<int> ProdUnidMedSeqFCI
        {
            get { return _prodUnidMedSeqFCI; }
            set
            {
                if (_prodUnidMedSeqFCI != value)
                {
                    _prodUnidMedSeqFCI = value;
                    OnPropertyChanged("ProdUnidMedSeqFCI");
                }
            }
        }
        private Nullable<int> _prodUnidMedSeqFCI;
    
        [DataMember]
        public string PRODUNIDMEDTRIBUT
        {
            get { return _pRODUNIDMEDTRIBUT; }
            set
            {
                if (_pRODUNIDMEDTRIBUT != value)
                {
                    _pRODUNIDMEDTRIBUT = value;
                    OnPropertyChanged("PRODUNIDMEDTRIBUT");
                }
            }
        }
        private string _pRODUNIDMEDTRIBUT;
    
        [DataMember]
        public string ProdUnidMedTributExport
        {
            get { return _prodUnidMedTributExport; }
            set
            {
                if (_prodUnidMedTributExport != value)
                {
                    _prodUnidMedTributExport = value;
                    OnPropertyChanged("ProdUnidMedTributExport");
                }
            }
        }
        private string _prodUnidMedTributExport;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<FIC_TEC_PROD> FIC_TEC_PROD
        {
            get
            {
                if (_fIC_TEC_PROD == null)
                {
                    _fIC_TEC_PROD = new TrackableCollection<FIC_TEC_PROD>();
                    _fIC_TEC_PROD.CollectionChanged += FixupFIC_TEC_PROD;
                }
                return _fIC_TEC_PROD;
            }
            set
            {
                if (!ReferenceEquals(_fIC_TEC_PROD, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fIC_TEC_PROD != null)
                    {
                        _fIC_TEC_PROD.CollectionChanged -= FixupFIC_TEC_PROD;
                    }
                    _fIC_TEC_PROD = value;
                    if (_fIC_TEC_PROD != null)
                    {
                        _fIC_TEC_PROD.CollectionChanged += FixupFIC_TEC_PROD;
                    }
                    OnNavigationPropertyChanged("FIC_TEC_PROD");
                }
            }
        }
        private TrackableCollection<FIC_TEC_PROD> _fIC_TEC_PROD;
    
        [DataMember]
        public PRODUTO PRODUTO
        {
            get { return _pRODUTO; }
            set
            {
                if (!ReferenceEquals(_pRODUTO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProdCodEstr != value.ProdCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pRODUTO;
                    _pRODUTO = value;
                    FixupPRODUTO(previousValue);
                    OnNavigationPropertyChanged("PRODUTO");
                }
            }
        }
        private PRODUTO _pRODUTO;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            FIC_TEC_PROD.Clear();
            PRODUTO = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPRODUTO(PRODUTO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PROD_UNID_MED.Contains(this))
            {
                previousValue.PROD_UNID_MED.Remove(this);
            }
    
            if (PRODUTO != null)
            {
                if (!PRODUTO.PROD_UNID_MED.Contains(this))
                {
                    PRODUTO.PROD_UNID_MED.Add(this);
                }
    
                ProdCodEstr = PRODUTO.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO")
                    && (ChangeTracker.OriginalValues["PRODUTO"] == PRODUTO))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO", previousValue);
                }
                if (PRODUTO != null && !PRODUTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO.StartTracking();
                }
            }
        }
    
        private void FixupFIC_TEC_PROD(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FIC_TEC_PROD item in e.NewItems)
                {
                    item.PROD_UNID_MED = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FIC_TEC_PROD", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FIC_TEC_PROD item in e.OldItems)
                {
                    if (ReferenceEquals(item.PROD_UNID_MED, this))
                    {
                        item.PROD_UNID_MED = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FIC_TEC_PROD", item);
                    }
                }
            }
        }

        #endregion

    }
}
