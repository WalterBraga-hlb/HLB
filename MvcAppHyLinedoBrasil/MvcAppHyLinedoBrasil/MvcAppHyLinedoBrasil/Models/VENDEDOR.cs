//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(VEND_ENT))]
    [KnownType(typeof(ENTIDADE))]
    [KnownType(typeof(PARC_DOC_FIN))]
    [KnownType(typeof(OCORRENCIA))]
    [KnownType(typeof(ITEM_MOV_ESTQ))]
    public partial class VENDEDOR: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string VendCod
        {
            get { return _vendCod; }
            set
            {
                if (_vendCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'VendCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _vendCod = value;
                    OnPropertyChanged("VendCod");
                }
            }
        }
        private string _vendCod;
    
        [DataMember]
        public string VendNome
        {
            get { return _vendNome; }
            set
            {
                if (_vendNome != value)
                {
                    _vendNome = value;
                    OnPropertyChanged("VendNome");
                }
            }
        }
        private string _vendNome;
    
        [DataMember]
        public string VendFxComis
        {
            get { return _vendFxComis; }
            set
            {
                if (_vendFxComis != value)
                {
                    _vendFxComis = value;
                    OnPropertyChanged("VendFxComis");
                }
            }
        }
        private string _vendFxComis;
    
        [DataMember]
        public string FxaCod
        {
            get { return _fxaCod; }
            set
            {
                if (_fxaCod != value)
                {
                    _fxaCod = value;
                    OnPropertyChanged("FxaCod");
                }
            }
        }
        private string _fxaCod;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    ChangeTracker.RecordOriginalValue("EntCod", _entCod);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE != null && ENTIDADE.EntCod != value)
                        {
                            ENTIDADE = null;
                        }
                    }
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;
    
        [DataMember]
        public string VendUltSel
        {
            get { return _vendUltSel; }
            set
            {
                if (_vendUltSel != value)
                {
                    _vendUltSel = value;
                    OnPropertyChanged("VendUltSel");
                }
            }
        }
        private string _vendUltSel;
    
        [DataMember]
        public string VendStat
        {
            get { return _vendStat; }
            set
            {
                if (_vendStat != value)
                {
                    _vendStat = value;
                    OnPropertyChanged("VendStat");
                }
            }
        }
        private string _vendStat;
    
        [DataMember]
        public Nullable<System.DateTime> VendDataHoraInicAfast
        {
            get { return _vendDataHoraInicAfast; }
            set
            {
                if (_vendDataHoraInicAfast != value)
                {
                    _vendDataHoraInicAfast = value;
                    OnPropertyChanged("VendDataHoraInicAfast");
                }
            }
        }
        private Nullable<System.DateTime> _vendDataHoraInicAfast;
    
        [DataMember]
        public Nullable<System.DateTime> VendDataHoraFimAfast
        {
            get { return _vendDataHoraFimAfast; }
            set
            {
                if (_vendDataHoraFimAfast != value)
                {
                    _vendDataHoraFimAfast = value;
                    OnPropertyChanged("VendDataHoraFimAfast");
                }
            }
        }
        private Nullable<System.DateTime> _vendDataHoraFimAfast;
    
        [DataMember]
        public string LocArmazCodEstr
        {
            get { return _locArmazCodEstr; }
            set
            {
                if (_locArmazCodEstr != value)
                {
                    _locArmazCodEstr = value;
                    OnPropertyChanged("LocArmazCodEstr");
                }
            }
        }
        private string _locArmazCodEstr;
    
        [DataMember]
        public Nullable<decimal> USERVendComiss
        {
            get { return _uSERVendComiss; }
            set
            {
                if (_uSERVendComiss != value)
                {
                    _uSERVendComiss = value;
                    OnPropertyChanged("USERVendComiss");
                }
            }
        }
        private Nullable<decimal> _uSERVendComiss;
    
        [DataMember]
        public string RegCodEstr
        {
            get { return _regCodEstr; }
            set
            {
                if (_regCodEstr != value)
                {
                    _regCodEstr = value;
                    OnPropertyChanged("RegCodEstr");
                }
            }
        }
        private string _regCodEstr;
    
        [DataMember]
        public string VendClasseCod
        {
            get { return _vendClasseCod; }
            set
            {
                if (_vendClasseCod != value)
                {
                    _vendClasseCod = value;
                    OnPropertyChanged("VendClasseCod");
                }
            }
        }
        private string _vendClasseCod;
    
        [DataMember]
        public string USEREmpresa
        {
            get { return _uSEREmpresa; }
            set
            {
                if (_uSEREmpresa != value)
                {
                    _uSEREmpresa = value;
                    OnPropertyChanged("USEREmpresa");
                }
            }
        }
        private string _uSEREmpresa;
    
        [DataMember]
        public string VendMarcaProdTipo
        {
            get { return _vendMarcaProdTipo; }
            set
            {
                if (_vendMarcaProdTipo != value)
                {
                    _vendMarcaProdTipo = value;
                    OnPropertyChanged("VendMarcaProdTipo");
                }
            }
        }
        private string _vendMarcaProdTipo;
    
        [DataMember]
        public string GRPVENDCOD
        {
            get { return _gRPVENDCOD; }
            set
            {
                if (_gRPVENDCOD != value)
                {
                    _gRPVENDCOD = value;
                    OnPropertyChanged("GRPVENDCOD");
                }
            }
        }
        private string _gRPVENDCOD;
    
        [DataMember]
        public string USERLoginSite
        {
            get { return _uSERLoginSite; }
            set
            {
                if (_uSERLoginSite != value)
                {
                    _uSERLoginSite = value;
                    OnPropertyChanged("USERLoginSite");
                }
            }
        }
        private string _uSERLoginSite;
    
        [DataMember]
        public string GRPVENDCODANUAL
        {
            get { return _gRPVENDCODANUAL; }
            set
            {
                if (_gRPVENDCODANUAL != value)
                {
                    _gRPVENDCODANUAL = value;
                    OnPropertyChanged("GRPVENDCODANUAL");
                }
            }
        }
        private string _gRPVENDCODANUAL;
    
        [DataMember]
        public string USERTipoValorCalculoComissao
        {
            get { return _uSERTipoValorCalculoComissao; }
            set
            {
                if (_uSERTipoValorCalculoComissao != value)
                {
                    _uSERTipoValorCalculoComissao = value;
                    OnPropertyChanged("USERTipoValorCalculoComissao");
                }
            }
        }
        private string _uSERTipoValorCalculoComissao;
    
        [DataMember]
        public string USERRecebeEmailComercial
        {
            get { return _uSERRecebeEmailComercial; }
            set
            {
                if (_uSERRecebeEmailComercial != value)
                {
                    _uSERRecebeEmailComercial = value;
                    OnPropertyChanged("USERRecebeEmailComercial");
                }
            }
        }
        private string _uSERRecebeEmailComercial;
    
        [DataMember]
        public string USERParticipaControleRDVWeb
        {
            get { return _uSERParticipaControleRDVWeb; }
            set
            {
                if (_uSERParticipaControleRDVWeb != value)
                {
                    _uSERParticipaControleRDVWeb = value;
                    OnPropertyChanged("USERParticipaControleRDVWeb");
                }
            }
        }
        private string _uSERParticipaControleRDVWeb;
    
        [DataMember]
        public Nullable<System.DateTime> VendDtUltAtualiz
        {
            get { return _vendDtUltAtualiz; }
            set
            {
                if (_vendDtUltAtualiz != value)
                {
                    _vendDtUltAtualiz = value;
                    OnPropertyChanged("VendDtUltAtualiz");
                }
            }
        }
        private Nullable<System.DateTime> _vendDtUltAtualiz;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<VEND_ENT> VEND_ENT
        {
            get
            {
                if (_vEND_ENT == null)
                {
                    _vEND_ENT = new TrackableCollection<VEND_ENT>();
                    _vEND_ENT.CollectionChanged += FixupVEND_ENT;
                }
                return _vEND_ENT;
            }
            set
            {
                if (!ReferenceEquals(_vEND_ENT, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vEND_ENT != null)
                    {
                        _vEND_ENT.CollectionChanged -= FixupVEND_ENT;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (VEND_ENT item in _vEND_ENT)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _vEND_ENT = value;
                    if (_vEND_ENT != null)
                    {
                        _vEND_ENT.CollectionChanged += FixupVEND_ENT;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (VEND_ENT item in _vEND_ENT)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("VEND_ENT");
                }
            }
        }
        private TrackableCollection<VEND_ENT> _vEND_ENT;
    
        [DataMember]
        public ENTIDADE ENTIDADE
        {
            get { return _eNTIDADE; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE, value))
                {
                    var previousValue = _eNTIDADE;
                    _eNTIDADE = value;
                    FixupENTIDADE(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE");
                }
            }
        }
        private ENTIDADE _eNTIDADE;
    
        [DataMember]
        public TrackableCollection<PARC_DOC_FIN> PARC_DOC_FIN
        {
            get
            {
                if (_pARC_DOC_FIN == null)
                {
                    _pARC_DOC_FIN = new TrackableCollection<PARC_DOC_FIN>();
                    _pARC_DOC_FIN.CollectionChanged += FixupPARC_DOC_FIN;
                }
                return _pARC_DOC_FIN;
            }
            set
            {
                if (!ReferenceEquals(_pARC_DOC_FIN, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pARC_DOC_FIN != null)
                    {
                        _pARC_DOC_FIN.CollectionChanged -= FixupPARC_DOC_FIN;
                    }
                    _pARC_DOC_FIN = value;
                    if (_pARC_DOC_FIN != null)
                    {
                        _pARC_DOC_FIN.CollectionChanged += FixupPARC_DOC_FIN;
                    }
                    OnNavigationPropertyChanged("PARC_DOC_FIN");
                }
            }
        }
        private TrackableCollection<PARC_DOC_FIN> _pARC_DOC_FIN;
    
        [DataMember]
        public TrackableCollection<OCORRENCIA> OCORRENCIA
        {
            get
            {
                if (_oCORRENCIA == null)
                {
                    _oCORRENCIA = new TrackableCollection<OCORRENCIA>();
                    _oCORRENCIA.CollectionChanged += FixupOCORRENCIA;
                }
                return _oCORRENCIA;
            }
            set
            {
                if (!ReferenceEquals(_oCORRENCIA, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_oCORRENCIA != null)
                    {
                        _oCORRENCIA.CollectionChanged -= FixupOCORRENCIA;
                    }
                    _oCORRENCIA = value;
                    if (_oCORRENCIA != null)
                    {
                        _oCORRENCIA.CollectionChanged += FixupOCORRENCIA;
                    }
                    OnNavigationPropertyChanged("OCORRENCIA");
                }
            }
        }
        private TrackableCollection<OCORRENCIA> _oCORRENCIA;
    
        [DataMember]
        public TrackableCollection<ITEM_MOV_ESTQ> ITEM_MOV_ESTQ
        {
            get
            {
                if (_iTEM_MOV_ESTQ == null)
                {
                    _iTEM_MOV_ESTQ = new TrackableCollection<ITEM_MOV_ESTQ>();
                    _iTEM_MOV_ESTQ.CollectionChanged += FixupITEM_MOV_ESTQ;
                }
                return _iTEM_MOV_ESTQ;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_MOV_ESTQ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_MOV_ESTQ != null)
                    {
                        _iTEM_MOV_ESTQ.CollectionChanged -= FixupITEM_MOV_ESTQ;
                    }
                    _iTEM_MOV_ESTQ = value;
                    if (_iTEM_MOV_ESTQ != null)
                    {
                        _iTEM_MOV_ESTQ.CollectionChanged += FixupITEM_MOV_ESTQ;
                    }
                    OnNavigationPropertyChanged("ITEM_MOV_ESTQ");
                }
            }
        }
        private TrackableCollection<ITEM_MOV_ESTQ> _iTEM_MOV_ESTQ;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            VEND_ENT.Clear();
            ENTIDADE = null;
            PARC_DOC_FIN.Clear();
            OCORRENCIA.Clear();
            ITEM_MOV_ESTQ.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupENTIDADE(ENTIDADE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VENDEDOR.Contains(this))
            {
                previousValue.VENDEDOR.Remove(this);
            }
    
            if (ENTIDADE != null)
            {
                if (!ENTIDADE.VENDEDOR.Contains(this))
                {
                    ENTIDADE.VENDEDOR.Add(this);
                }
    
                EntCod = ENTIDADE.EntCod;
            }
            else if (!skipKeys)
            {
                EntCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE")
                    && (ChangeTracker.OriginalValues["ENTIDADE"] == ENTIDADE))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE", previousValue);
                }
                if (ENTIDADE != null && !ENTIDADE.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE.StartTracking();
                }
            }
        }
    
        private void FixupVEND_ENT(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VEND_ENT item in e.NewItems)
                {
                    item.VENDEDOR = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VEND_ENT", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VEND_ENT item in e.OldItems)
                {
                    if (ReferenceEquals(item.VENDEDOR, this))
                    {
                        item.VENDEDOR = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VEND_ENT", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPARC_DOC_FIN(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PARC_DOC_FIN item in e.NewItems)
                {
                    item.VENDEDOR = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PARC_DOC_FIN", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PARC_DOC_FIN item in e.OldItems)
                {
                    if (ReferenceEquals(item.VENDEDOR, this))
                    {
                        item.VENDEDOR = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PARC_DOC_FIN", item);
                    }
                }
            }
        }
    
        private void FixupOCORRENCIA(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OCORRENCIA item in e.NewItems)
                {
                    item.VENDEDOR = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OCORRENCIA", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OCORRENCIA item in e.OldItems)
                {
                    if (ReferenceEquals(item.VENDEDOR, this))
                    {
                        item.VENDEDOR = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OCORRENCIA", item);
                    }
                }
            }
        }
    
        private void FixupITEM_MOV_ESTQ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_MOV_ESTQ item in e.NewItems)
                {
                    item.VENDEDOR = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_MOV_ESTQ", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_MOV_ESTQ item in e.OldItems)
                {
                    if (ReferenceEquals(item.VENDEDOR, this))
                    {
                        item.VENDEDOR = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_MOV_ESTQ", item);
                    }
                }
            }
        }

        #endregion

    }
}
