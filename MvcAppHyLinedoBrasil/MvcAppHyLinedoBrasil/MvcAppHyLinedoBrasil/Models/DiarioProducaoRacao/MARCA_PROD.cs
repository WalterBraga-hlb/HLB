//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    public partial class MARCA_PROD: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string MarcaProdCod
        {
            get { return _marcaProdCod; }
            set
            {
                if (_marcaProdCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MarcaProdCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _marcaProdCod = value;
                    OnPropertyChanged("MarcaProdCod");
                }
            }
        }
        private string _marcaProdCod;
    
        [DataMember]
        public string MarcaProdNome
        {
            get { return _marcaProdNome; }
            set
            {
                if (_marcaProdNome != value)
                {
                    _marcaProdNome = value;
                    OnPropertyChanged("MarcaProdNome");
                }
            }
        }
        private string _marcaProdNome;
    
        [DataMember]
        public string MarcaProdVisualizaWeb
        {
            get { return _marcaProdVisualizaWeb; }
            set
            {
                if (_marcaProdVisualizaWeb != value)
                {
                    _marcaProdVisualizaWeb = value;
                    OnPropertyChanged("MarcaProdVisualizaWeb");
                }
            }
        }
        private string _marcaProdVisualizaWeb;
    
        [DataMember]
        public Nullable<System.DateTime> MarcaProdDataInic
        {
            get { return _marcaProdDataInic; }
            set
            {
                if (_marcaProdDataInic != value)
                {
                    _marcaProdDataInic = value;
                    OnPropertyChanged("MarcaProdDataInic");
                }
            }
        }
        private Nullable<System.DateTime> _marcaProdDataInic;
    
        [DataMember]
        public Nullable<System.DateTime> MarcaProdDataFim
        {
            get { return _marcaProdDataFim; }
            set
            {
                if (_marcaProdDataFim != value)
                {
                    _marcaProdDataFim = value;
                    OnPropertyChanged("MarcaProdDataFim");
                }
            }
        }
        private Nullable<System.DateTime> _marcaProdDataFim;
    
        [DataMember]
        public string MarcaProdEntraCalcComis
        {
            get { return _marcaProdEntraCalcComis; }
            set
            {
                if (_marcaProdEntraCalcComis != value)
                {
                    _marcaProdEntraCalcComis = value;
                    OnPropertyChanged("MarcaProdEntraCalcComis");
                }
            }
        }
        private string _marcaProdEntraCalcComis;
    
        [DataMember]
        public Nullable<decimal> MarcaProdPesoPrem
        {
            get { return _marcaProdPesoPrem; }
            set
            {
                if (_marcaProdPesoPrem != value)
                {
                    _marcaProdPesoPrem = value;
                    OnPropertyChanged("MarcaProdPesoPrem");
                }
            }
        }
        private Nullable<decimal> _marcaProdPesoPrem;
    
        [DataMember]
        public Nullable<int> MarcaProdPos
        {
            get { return _marcaProdPos; }
            set
            {
                if (_marcaProdPos != value)
                {
                    _marcaProdPos = value;
                    OnPropertyChanged("MarcaProdPos");
                }
            }
        }
        private Nullable<int> _marcaProdPos;
    
        [DataMember]
        public string MarcaProdTipo
        {
            get { return _marcaProdTipo; }
            set
            {
                if (_marcaProdTipo != value)
                {
                    _marcaProdTipo = value;
                    OnPropertyChanged("MarcaProdTipo");
                }
            }
        }
        private string _marcaProdTipo;
    
        [DataMember]
        public string CategProdCodEstr
        {
            get { return _categProdCodEstr; }
            set
            {
                if (_categProdCodEstr != value)
                {
                    _categProdCodEstr = value;
                    OnPropertyChanged("CategProdCodEstr");
                }
            }
        }
        private string _categProdCodEstr;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
