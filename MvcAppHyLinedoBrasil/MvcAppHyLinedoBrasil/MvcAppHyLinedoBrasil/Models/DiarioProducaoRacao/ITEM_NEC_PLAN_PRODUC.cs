//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ORD_PRODUC))]
    [KnownType(typeof(NEC_PLAN_PRODUC))]
    [KnownType(typeof(PROD_UNID_MED))]
    [KnownType(typeof(PRODUTO1))]
    public partial class ITEM_NEC_PLAN_PRODUC: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (NEC_PLAN_PRODUC != null && NEC_PLAN_PRODUC.EmpCod != value)
                        {
                            NEC_PLAN_PRODUC = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string PlanProducNum
        {
            get { return _planProducNum; }
            set
            {
                if (_planProducNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PlanProducNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (NEC_PLAN_PRODUC != null && NEC_PLAN_PRODUC.PlanProducNum != value)
                        {
                            NEC_PLAN_PRODUC = null;
                        }
                    }
                    _planProducNum = value;
                    OnPropertyChanged("PlanProducNum");
                }
            }
        }
        private string _planProducNum;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PROD_UNID_MED != null && PROD_UNID_MED.ProdCodEstr != value)
                        {
                            var previousValue = _pROD_UNID_MED;
                            _pROD_UNID_MED = null;
                            FixupPROD_UNID_MED(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("PROD_UNID_MED");
                        }
                        if (PRODUTO1 != null && PRODUTO1.ProdCodEstr != value)
                        {
                            PRODUTO1 = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public int ItNecPlanProducSeq
        {
            get { return _itNecPlanProducSeq; }
            set
            {
                if (_itNecPlanProducSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ItNecPlanProducSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _itNecPlanProducSeq = value;
                    OnPropertyChanged("ItNecPlanProducSeq");
                }
            }
        }
        private int _itNecPlanProducSeq;
    
        [DataMember]
        public string ProdGradeCorCod
        {
            get { return _prodGradeCorCod; }
            set
            {
                if (_prodGradeCorCod != value)
                {
                    _prodGradeCorCod = value;
                    OnPropertyChanged("ProdGradeCorCod");
                }
            }
        }
        private string _prodGradeCorCod;
    
        [DataMember]
        public string ItNecPlanProducUnidMedCod
        {
            get { return _itNecPlanProducUnidMedCod; }
            set
            {
                if (_itNecPlanProducUnidMedCod != value)
                {
                    ChangeTracker.RecordOriginalValue("ItNecPlanProducUnidMedCod", _itNecPlanProducUnidMedCod);
                    if (!IsDeserializing)
                    {
                        if (PROD_UNID_MED != null && PROD_UNID_MED.ProdUnidMedCod != value)
                        {
                            var previousValue = _pROD_UNID_MED;
                            _pROD_UNID_MED = null;
                            FixupPROD_UNID_MED(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("PROD_UNID_MED");
                        }
                    }
                    _itNecPlanProducUnidMedCod = value;
                    OnPropertyChanged("ItNecPlanProducUnidMedCod");
                }
            }
        }
        private string _itNecPlanProducUnidMedCod;
    
        [DataMember]
        public Nullable<short> ItNecPlanProducUnidMedPos
        {
            get { return _itNecPlanProducUnidMedPos; }
            set
            {
                if (_itNecPlanProducUnidMedPos != value)
                {
                    ChangeTracker.RecordOriginalValue("ItNecPlanProducUnidMedPos", _itNecPlanProducUnidMedPos);
                    if (!IsDeserializing)
                    {
                        if (PROD_UNID_MED != null && PROD_UNID_MED.ProdUnidMedPos != value)
                        {
                            var previousValue = _pROD_UNID_MED;
                            _pROD_UNID_MED = null;
                            FixupPROD_UNID_MED(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("PROD_UNID_MED");
                        }
                    }
                    _itNecPlanProducUnidMedPos = value;
                    OnPropertyChanged("ItNecPlanProducUnidMedPos");
                }
            }
        }
        private Nullable<short> _itNecPlanProducUnidMedPos;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdOrig
        {
            get { return _itNecPlanProducQtdOrig; }
            set
            {
                if (_itNecPlanProducQtdOrig != value)
                {
                    _itNecPlanProducQtdOrig = value;
                    OnPropertyChanged("ItNecPlanProducQtdOrig");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdOrig;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdReal
        {
            get { return _itNecPlanProducQtdReal; }
            set
            {
                if (_itNecPlanProducQtdReal != value)
                {
                    _itNecPlanProducQtdReal = value;
                    OnPropertyChanged("ItNecPlanProducQtdReal");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdReal;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdEstq
        {
            get { return _itNecPlanProducQtdEstq; }
            set
            {
                if (_itNecPlanProducQtdEstq != value)
                {
                    _itNecPlanProducQtdEstq = value;
                    OnPropertyChanged("ItNecPlanProducQtdEstq");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdEstq;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdReserv
        {
            get { return _itNecPlanProducQtdReserv; }
            set
            {
                if (_itNecPlanProducQtdReserv != value)
                {
                    _itNecPlanProducQtdReserv = value;
                    OnPropertyChanged("ItNecPlanProducQtdReserv");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdReserv;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdEmp
        {
            get { return _itNecPlanProducQtdEmp; }
            set
            {
                if (_itNecPlanProducQtdEmp != value)
                {
                    _itNecPlanProducQtdEmp = value;
                    OnPropertyChanged("ItNecPlanProducQtdEmp");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdEmp;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdNec
        {
            get { return _itNecPlanProducQtdNec; }
            set
            {
                if (_itNecPlanProducQtdNec != value)
                {
                    _itNecPlanProducQtdNec = value;
                    OnPropertyChanged("ItNecPlanProducQtdNec");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdNec;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdDisp
        {
            get { return _itNecPlanProducQtdDisp; }
            set
            {
                if (_itNecPlanProducQtdDisp != value)
                {
                    _itNecPlanProducQtdDisp = value;
                    OnPropertyChanged("ItNecPlanProducQtdDisp");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdDisp;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdDesm
        {
            get { return _itNecPlanProducQtdDesm; }
            set
            {
                if (_itNecPlanProducQtdDesm != value)
                {
                    _itNecPlanProducQtdDesm = value;
                    OnPropertyChanged("ItNecPlanProducQtdDesm");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdDesm;
    
        [DataMember]
        public string ItNecPlanProducUtiliz
        {
            get { return _itNecPlanProducUtiliz; }
            set
            {
                if (_itNecPlanProducUtiliz != value)
                {
                    _itNecPlanProducUtiliz = value;
                    OnPropertyChanged("ItNecPlanProducUtiliz");
                }
            }
        }
        private string _itNecPlanProducUtiliz;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdComp
        {
            get { return _itNecPlanProducQtdComp; }
            set
            {
                if (_itNecPlanProducQtdComp != value)
                {
                    _itNecPlanProducQtdComp = value;
                    OnPropertyChanged("ItNecPlanProducQtdComp");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdComp;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdNecPeso
        {
            get { return _itNecPlanProducQtdNecPeso; }
            set
            {
                if (_itNecPlanProducQtdNecPeso != value)
                {
                    _itNecPlanProducQtdNecPeso = value;
                    OnPropertyChanged("ItNecPlanProducQtdNecPeso");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdNecPeso;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducIndRetalho
        {
            get { return _itNecPlanProducIndRetalho; }
            set
            {
                if (_itNecPlanProducIndRetalho != value)
                {
                    _itNecPlanProducIndRetalho = value;
                    OnPropertyChanged("ItNecPlanProducIndRetalho");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducIndRetalho;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdNecPesoTot
        {
            get { return _itNecPlanProducQtdNecPesoTot; }
            set
            {
                if (_itNecPlanProducQtdNecPesoTot != value)
                {
                    _itNecPlanProducQtdNecPesoTot = value;
                    OnPropertyChanged("ItNecPlanProducQtdNecPesoTot");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdNecPesoTot;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducCapHrMaq
        {
            get { return _itNecPlanProducCapHrMaq; }
            set
            {
                if (_itNecPlanProducCapHrMaq != value)
                {
                    _itNecPlanProducCapHrMaq = value;
                    OnPropertyChanged("ItNecPlanProducCapHrMaq");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducCapHrMaq;
    
        [DataMember]
        public Nullable<int> ItNecPlanProducSeqLeit
        {
            get { return _itNecPlanProducSeqLeit; }
            set
            {
                if (_itNecPlanProducSeqLeit != value)
                {
                    _itNecPlanProducSeqLeit = value;
                    OnPropertyChanged("ItNecPlanProducSeqLeit");
                }
            }
        }
        private Nullable<int> _itNecPlanProducSeqLeit;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdEstqMin
        {
            get { return _itNecPlanProducQtdEstqMin; }
            set
            {
                if (_itNecPlanProducQtdEstqMin != value)
                {
                    _itNecPlanProducQtdEstqMin = value;
                    OnPropertyChanged("ItNecPlanProducQtdEstqMin");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdEstqMin;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdEstqProd
        {
            get { return _itNecPlanProducQtdEstqProd; }
            set
            {
                if (_itNecPlanProducQtdEstqProd != value)
                {
                    _itNecPlanProducQtdEstqProd = value;
                    OnPropertyChanged("ItNecPlanProducQtdEstqProd");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdEstqProd;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdFatMult
        {
            get { return _itNecPlanProducQtdFatMult; }
            set
            {
                if (_itNecPlanProducQtdFatMult != value)
                {
                    _itNecPlanProducQtdFatMult = value;
                    OnPropertyChanged("ItNecPlanProducQtdFatMult");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdFatMult;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdEstqUso
        {
            get { return _itNecPlanProducQtdEstqUso; }
            set
            {
                if (_itNecPlanProducQtdEstqUso != value)
                {
                    _itNecPlanProducQtdEstqUso = value;
                    OnPropertyChanged("ItNecPlanProducQtdEstqUso");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdEstqUso;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdEstqUtil
        {
            get { return _itNecPlanProducQtdEstqUtil; }
            set
            {
                if (_itNecPlanProducQtdEstqUtil != value)
                {
                    _itNecPlanProducQtdEstqUtil = value;
                    OnPropertyChanged("ItNecPlanProducQtdEstqUtil");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdEstqUtil;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdDispProduc
        {
            get { return _itNecPlanProducQtdDispProduc; }
            set
            {
                if (_itNecPlanProducQtdDispProduc != value)
                {
                    _itNecPlanProducQtdDispProduc = value;
                    OnPropertyChanged("ItNecPlanProducQtdDispProduc");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdDispProduc;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProdQtdFatEstq
        {
            get { return _itNecPlanProdQtdFatEstq; }
            set
            {
                if (_itNecPlanProdQtdFatEstq != value)
                {
                    _itNecPlanProdQtdFatEstq = value;
                    OnPropertyChanged("ItNecPlanProdQtdFatEstq");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProdQtdFatEstq;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProdPercFatEstq
        {
            get { return _itNecPlanProdPercFatEstq; }
            set
            {
                if (_itNecPlanProdPercFatEstq != value)
                {
                    _itNecPlanProdPercFatEstq = value;
                    OnPropertyChanged("ItNecPlanProdPercFatEstq");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProdPercFatEstq;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProdQtdEstqProj
        {
            get { return _itNecPlanProdQtdEstqProj; }
            set
            {
                if (_itNecPlanProdQtdEstqProj != value)
                {
                    _itNecPlanProdQtdEstqProj = value;
                    OnPropertyChanged("ItNecPlanProdQtdEstqProj");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProdQtdEstqProj;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProdQtdInic
        {
            get { return _itNecPlanProdQtdInic; }
            set
            {
                if (_itNecPlanProdQtdInic != value)
                {
                    _itNecPlanProdQtdInic = value;
                    OnPropertyChanged("ItNecPlanProdQtdInic");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProdQtdInic;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProdIndPerdaRet
        {
            get { return _itNecPlanProdIndPerdaRet; }
            set
            {
                if (_itNecPlanProdIndPerdaRet != value)
                {
                    _itNecPlanProdIndPerdaRet = value;
                    OnPropertyChanged("ItNecPlanProdIndPerdaRet");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProdIndPerdaRet;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProdQtdDispAnt
        {
            get { return _itNecPlanProdQtdDispAnt; }
            set
            {
                if (_itNecPlanProdQtdDispAnt != value)
                {
                    _itNecPlanProdQtdDispAnt = value;
                    OnPropertyChanged("ItNecPlanProdQtdDispAnt");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProdQtdDispAnt;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProdQtdEstqProjAnt
        {
            get { return _itNecPlanProdQtdEstqProjAnt; }
            set
            {
                if (_itNecPlanProdQtdEstqProjAnt != value)
                {
                    _itNecPlanProdQtdEstqProjAnt = value;
                    OnPropertyChanged("ItNecPlanProdQtdEstqProjAnt");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProdQtdEstqProjAnt;
    
        [DataMember]
        public Nullable<decimal> ItNecPlanProducQtdEstqMax
        {
            get { return _itNecPlanProducQtdEstqMax; }
            set
            {
                if (_itNecPlanProducQtdEstqMax != value)
                {
                    _itNecPlanProducQtdEstqMax = value;
                    OnPropertyChanged("ItNecPlanProducQtdEstqMax");
                }
            }
        }
        private Nullable<decimal> _itNecPlanProducQtdEstqMax;
    
        [DataMember]
        public decimal ItNecPlanProducQtdConsMed
        {
            get { return _itNecPlanProducQtdConsMed; }
            set
            {
                if (_itNecPlanProducQtdConsMed != value)
                {
                    _itNecPlanProducQtdConsMed = value;
                    OnPropertyChanged("ItNecPlanProducQtdConsMed");
                }
            }
        }
        private decimal _itNecPlanProducQtdConsMed;
    
        [DataMember]
        public Nullable<decimal> ItemNecPlanProducQtdSldComp
        {
            get { return _itemNecPlanProducQtdSldComp; }
            set
            {
                if (_itemNecPlanProducQtdSldComp != value)
                {
                    _itemNecPlanProducQtdSldComp = value;
                    OnPropertyChanged("ItemNecPlanProducQtdSldComp");
                }
            }
        }
        private Nullable<decimal> _itemNecPlanProducQtdSldComp;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ORD_PRODUC> ORD_PRODUC
        {
            get
            {
                if (_oRD_PRODUC == null)
                {
                    _oRD_PRODUC = new TrackableCollection<ORD_PRODUC>();
                    _oRD_PRODUC.CollectionChanged += FixupORD_PRODUC;
                }
                return _oRD_PRODUC;
            }
            set
            {
                if (!ReferenceEquals(_oRD_PRODUC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_oRD_PRODUC != null)
                    {
                        _oRD_PRODUC.CollectionChanged -= FixupORD_PRODUC;
                    }
                    _oRD_PRODUC = value;
                    if (_oRD_PRODUC != null)
                    {
                        _oRD_PRODUC.CollectionChanged += FixupORD_PRODUC;
                    }
                    OnNavigationPropertyChanged("ORD_PRODUC");
                }
            }
        }
        private TrackableCollection<ORD_PRODUC> _oRD_PRODUC;
    
        [DataMember]
        public NEC_PLAN_PRODUC NEC_PLAN_PRODUC
        {
            get { return _nEC_PLAN_PRODUC; }
            set
            {
                if (!ReferenceEquals(_nEC_PLAN_PRODUC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || PlanProducNum != value.PlanProducNum)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _nEC_PLAN_PRODUC;
                    _nEC_PLAN_PRODUC = value;
                    FixupNEC_PLAN_PRODUC(previousValue);
                    OnNavigationPropertyChanged("NEC_PLAN_PRODUC");
                }
            }
        }
        private NEC_PLAN_PRODUC _nEC_PLAN_PRODUC;
    
        [DataMember]
        public PROD_UNID_MED PROD_UNID_MED
        {
            get { return _pROD_UNID_MED; }
            set
            {
                if (!ReferenceEquals(_pROD_UNID_MED, value))
                {
                    var previousValue = _pROD_UNID_MED;
                    _pROD_UNID_MED = value;
                    FixupPROD_UNID_MED(previousValue);
                    OnNavigationPropertyChanged("PROD_UNID_MED");
                }
            }
        }
        private PROD_UNID_MED _pROD_UNID_MED;
    
        [DataMember]
        public PRODUTO1 PRODUTO1
        {
            get { return _pRODUTO1; }
            set
            {
                if (!ReferenceEquals(_pRODUTO1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProdCodEstr != value.ProdCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pRODUTO1;
                    _pRODUTO1 = value;
                    FixupPRODUTO1(previousValue);
                    OnNavigationPropertyChanged("PRODUTO1");
                }
            }
        }
        private PRODUTO1 _pRODUTO1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ORD_PRODUC.Clear();
            NEC_PLAN_PRODUC = null;
            PROD_UNID_MED = null;
            PRODUTO1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupNEC_PLAN_PRODUC(NEC_PLAN_PRODUC previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ITEM_NEC_PLAN_PRODUC.Contains(this))
            {
                previousValue.ITEM_NEC_PLAN_PRODUC.Remove(this);
            }
    
            if (NEC_PLAN_PRODUC != null)
            {
                if (!NEC_PLAN_PRODUC.ITEM_NEC_PLAN_PRODUC.Contains(this))
                {
                    NEC_PLAN_PRODUC.ITEM_NEC_PLAN_PRODUC.Add(this);
                }
    
                EmpCod = NEC_PLAN_PRODUC.EmpCod;
                PlanProducNum = NEC_PLAN_PRODUC.PlanProducNum;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NEC_PLAN_PRODUC")
                    && (ChangeTracker.OriginalValues["NEC_PLAN_PRODUC"] == NEC_PLAN_PRODUC))
                {
                    ChangeTracker.OriginalValues.Remove("NEC_PLAN_PRODUC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NEC_PLAN_PRODUC", previousValue);
                }
                if (NEC_PLAN_PRODUC != null && !NEC_PLAN_PRODUC.ChangeTracker.ChangeTrackingEnabled)
                {
                    NEC_PLAN_PRODUC.StartTracking();
                }
            }
        }
    
        private void FixupPROD_UNID_MED(PROD_UNID_MED previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ITEM_NEC_PLAN_PRODUC.Contains(this))
            {
                previousValue.ITEM_NEC_PLAN_PRODUC.Remove(this);
            }
    
            if (PROD_UNID_MED != null)
            {
                if (!PROD_UNID_MED.ITEM_NEC_PLAN_PRODUC.Contains(this))
                {
                    PROD_UNID_MED.ITEM_NEC_PLAN_PRODUC.Add(this);
                }
    
                ProdCodEstr = PROD_UNID_MED.ProdCodEstr;
                ItNecPlanProducUnidMedCod = PROD_UNID_MED.ProdUnidMedCod;
                ItNecPlanProducUnidMedPos = PROD_UNID_MED.ProdUnidMedPos;
            }
            else if (!skipKeys)
            {
                ItNecPlanProducUnidMedCod = null;
                ItNecPlanProducUnidMedPos = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PROD_UNID_MED")
                    && (ChangeTracker.OriginalValues["PROD_UNID_MED"] == PROD_UNID_MED))
                {
                    ChangeTracker.OriginalValues.Remove("PROD_UNID_MED");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PROD_UNID_MED", previousValue);
                }
                if (PROD_UNID_MED != null && !PROD_UNID_MED.ChangeTracker.ChangeTrackingEnabled)
                {
                    PROD_UNID_MED.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO1(PRODUTO1 previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ITEM_NEC_PLAN_PRODUC.Contains(this))
            {
                previousValue.ITEM_NEC_PLAN_PRODUC.Remove(this);
            }
    
            if (PRODUTO1 != null)
            {
                if (!PRODUTO1.ITEM_NEC_PLAN_PRODUC.Contains(this))
                {
                    PRODUTO1.ITEM_NEC_PLAN_PRODUC.Add(this);
                }
    
                ProdCodEstr = PRODUTO1.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO1")
                    && (ChangeTracker.OriginalValues["PRODUTO1"] == PRODUTO1))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO1", previousValue);
                }
                if (PRODUTO1 != null && !PRODUTO1.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO1.StartTracking();
                }
            }
        }
    
        private void FixupORD_PRODUC(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ORD_PRODUC item in e.NewItems)
                {
                    item.ITEM_NEC_PLAN_PRODUC = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ORD_PRODUC", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ORD_PRODUC item in e.OldItems)
                {
                    if (ReferenceEquals(item.ITEM_NEC_PLAN_PRODUC, this))
                    {
                        item.ITEM_NEC_PLAN_PRODUC = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ORD_PRODUC", item);
                    }
                }
            }
        }

        #endregion

    }
}
