//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    public partial class DiarioProducaoRacaoEntities : ObjectContext
    {
        public const string ConnectionString = "name=DiarioProducaoRacaoEntities";
        public const string ContainerName = "DiarioProducaoRacaoEntities";
    
        #region Constructors
    
        public DiarioProducaoRacaoEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public DiarioProducaoRacaoEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public DiarioProducaoRacaoEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<ITEM_NEC_PLAN_PRODUC> ITEM_NEC_PLAN_PRODUC
        {
            get { return _iTEM_NEC_PLAN_PRODUC  ?? (_iTEM_NEC_PLAN_PRODUC = CreateObjectSet<ITEM_NEC_PLAN_PRODUC>("ITEM_NEC_PLAN_PRODUC")); }
        }
        private ObjectSet<ITEM_NEC_PLAN_PRODUC> _iTEM_NEC_PLAN_PRODUC;
    
        public ObjectSet<ITEM_PLAN_PRODUC> ITEM_PLAN_PRODUC
        {
            get { return _iTEM_PLAN_PRODUC  ?? (_iTEM_PLAN_PRODUC = CreateObjectSet<ITEM_PLAN_PRODUC>("ITEM_PLAN_PRODUC")); }
        }
        private ObjectSet<ITEM_PLAN_PRODUC> _iTEM_PLAN_PRODUC;
    
        public ObjectSet<NEC_PLAN_PRODUC> NEC_PLAN_PRODUC
        {
            get { return _nEC_PLAN_PRODUC  ?? (_nEC_PLAN_PRODUC = CreateObjectSet<NEC_PLAN_PRODUC>("NEC_PLAN_PRODUC")); }
        }
        private ObjectSet<NEC_PLAN_PRODUC> _nEC_PLAN_PRODUC;
    
        public ObjectSet<OPER_ORD_PRODUC> OPER_ORD_PRODUC
        {
            get { return _oPER_ORD_PRODUC  ?? (_oPER_ORD_PRODUC = CreateObjectSet<OPER_ORD_PRODUC>("OPER_ORD_PRODUC")); }
        }
        private ObjectSet<OPER_ORD_PRODUC> _oPER_ORD_PRODUC;
    
        public ObjectSet<OPER_ORD_PRODUC_FUNC> OPER_ORD_PRODUC_FUNC
        {
            get { return _oPER_ORD_PRODUC_FUNC  ?? (_oPER_ORD_PRODUC_FUNC = CreateObjectSet<OPER_ORD_PRODUC_FUNC>("OPER_ORD_PRODUC_FUNC")); }
        }
        private ObjectSet<OPER_ORD_PRODUC_FUNC> _oPER_ORD_PRODUC_FUNC;
    
        public ObjectSet<ORD_PRODUC> ORD_PRODUC
        {
            get { return _oRD_PRODUC  ?? (_oRD_PRODUC = CreateObjectSet<ORD_PRODUC>("ORD_PRODUC")); }
        }
        private ObjectSet<ORD_PRODUC> _oRD_PRODUC;
    
        public ObjectSet<PLAN_PRODUC> PLAN_PRODUC
        {
            get { return _pLAN_PRODUC  ?? (_pLAN_PRODUC = CreateObjectSet<PLAN_PRODUC>("PLAN_PRODUC")); }
        }
        private ObjectSet<PLAN_PRODUC> _pLAN_PRODUC;
    
        public ObjectSet<PLAN_PRODUC_FIC_TEC> PLAN_PRODUC_FIC_TEC
        {
            get { return _pLAN_PRODUC_FIC_TEC  ?? (_pLAN_PRODUC_FIC_TEC = CreateObjectSet<PLAN_PRODUC_FIC_TEC>("PLAN_PRODUC_FIC_TEC")); }
        }
        private ObjectSet<PLAN_PRODUC_FIC_TEC> _pLAN_PRODUC_FIC_TEC;
    
        public ObjectSet<FIC_TEC_PROD> FIC_TEC_PROD
        {
            get { return _fIC_TEC_PROD  ?? (_fIC_TEC_PROD = CreateObjectSet<FIC_TEC_PROD>("FIC_TEC_PROD")); }
        }
        private ObjectSet<FIC_TEC_PROD> _fIC_TEC_PROD;
    
        public ObjectSet<LOC_ARMAZ> LOC_ARMAZ
        {
            get { return _lOC_ARMAZ  ?? (_lOC_ARMAZ = CreateObjectSet<LOC_ARMAZ>("LOC_ARMAZ")); }
        }
        private ObjectSet<LOC_ARMAZ> _lOC_ARMAZ;
    
        public ObjectSet<ITEM_REQ_MAT> ITEM_REQ_MAT
        {
            get { return _iTEM_REQ_MAT  ?? (_iTEM_REQ_MAT = CreateObjectSet<ITEM_REQ_MAT>("ITEM_REQ_MAT")); }
        }
        private ObjectSet<ITEM_REQ_MAT> _iTEM_REQ_MAT;
    
        public ObjectSet<RATEIO_REQ_MAT> RATEIO_REQ_MAT
        {
            get { return _rATEIO_REQ_MAT  ?? (_rATEIO_REQ_MAT = CreateObjectSet<RATEIO_REQ_MAT>("RATEIO_REQ_MAT")); }
        }
        private ObjectSet<RATEIO_REQ_MAT> _rATEIO_REQ_MAT;
    
        public ObjectSet<REQ_MAT> REQ_MAT
        {
            get { return _rEQ_MAT  ?? (_rEQ_MAT = CreateObjectSet<REQ_MAT>("REQ_MAT")); }
        }
        private ObjectSet<REQ_MAT> _rEQ_MAT;
    
        public ObjectSet<REQ_MAT_CLASSE_REC_DESP> REQ_MAT_CLASSE_REC_DESP
        {
            get { return _rEQ_MAT_CLASSE_REC_DESP  ?? (_rEQ_MAT_CLASSE_REC_DESP = CreateObjectSet<REQ_MAT_CLASSE_REC_DESP>("REQ_MAT_CLASSE_REC_DESP")); }
        }
        private ObjectSet<REQ_MAT_CLASSE_REC_DESP> _rEQ_MAT_CLASSE_REC_DESP;
    
        public ObjectSet<ESTQ_LOC_ARMAZ> ESTQ_LOC_ARMAZ
        {
            get { return _eSTQ_LOC_ARMAZ  ?? (_eSTQ_LOC_ARMAZ = CreateObjectSet<ESTQ_LOC_ARMAZ>("ESTQ_LOC_ARMAZ")); }
        }
        private ObjectSet<ESTQ_LOC_ARMAZ> _eSTQ_LOC_ARMAZ;
    
        public ObjectSet<PROD_UNID_MED> PROD_UNID_MED
        {
            get { return _pROD_UNID_MED  ?? (_pROD_UNID_MED = CreateObjectSet<PROD_UNID_MED>("PROD_UNID_MED")); }
        }
        private ObjectSet<PROD_UNID_MED> _pROD_UNID_MED;
    
        public ObjectSet<PRODUTO1> PRODUTO1
        {
            get { return _pRODUTO1  ?? (_pRODUTO1 = CreateObjectSet<PRODUTO1>("PRODUTO1")); }
        }
        private ObjectSet<PRODUTO1> _pRODUTO1;
    
        public ObjectSet<SALDO_ESTQ_DATA> SALDO_ESTQ_DATA
        {
            get { return _sALDO_ESTQ_DATA  ?? (_sALDO_ESTQ_DATA = CreateObjectSet<SALDO_ESTQ_DATA>("SALDO_ESTQ_DATA")); }
        }
        private ObjectSet<SALDO_ESTQ_DATA> _sALDO_ESTQ_DATA;
    
        public ObjectSet<PRODUTO> PRODUTO
        {
            get { return _pRODUTO  ?? (_pRODUTO = CreateObjectSet<PRODUTO>("PRODUTO")); }
        }
        private ObjectSet<PRODUTO> _pRODUTO;
    
        public ObjectSet<MARCA_PROD> MARCA_PROD
        {
            get { return _mARCA_PROD  ?? (_mARCA_PROD = CreateObjectSet<MARCA_PROD>("MARCA_PROD")); }
        }
        private ObjectSet<MARCA_PROD> _mARCA_PROD;
    
        public ObjectSet<PROD_GRUPO_SUBGRUPO> PROD_GRUPO_SUBGRUPO
        {
            get { return _pROD_GRUPO_SUBGRUPO  ?? (_pROD_GRUPO_SUBGRUPO = CreateObjectSet<PROD_GRUPO_SUBGRUPO>("PROD_GRUPO_SUBGRUPO")); }
        }
        private ObjectSet<PROD_GRUPO_SUBGRUPO> _pROD_GRUPO_SUBGRUPO;

        #endregion

        #region Function Imports
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="cODIGO_PLANEJAMENTO">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="cODIGO_PRODUTO">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="sEQUENCIA">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vPRODGRADECORCOD">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="cODIGO_EMPRESA">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="dATA">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="uSUCOD">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int GeraOrdemProducao(string cODIGO_PLANEJAMENTO, string cODIGO_PRODUTO, Nullable<int> sEQUENCIA, string vPRODGRADECORCOD, string cODIGO_EMPRESA, Nullable<System.DateTime> dATA, string uSUCOD)
        {
    
            ObjectParameter cODIGO_PLANEJAMENTOParameter;
    
            if (cODIGO_PLANEJAMENTO != null)
            {
                cODIGO_PLANEJAMENTOParameter = new ObjectParameter("CODIGO_PLANEJAMENTO", cODIGO_PLANEJAMENTO);
            }
            else
            {
                cODIGO_PLANEJAMENTOParameter = new ObjectParameter("CODIGO_PLANEJAMENTO", typeof(string));
            }
    
            ObjectParameter cODIGO_PRODUTOParameter;
    
            if (cODIGO_PRODUTO != null)
            {
                cODIGO_PRODUTOParameter = new ObjectParameter("CODIGO_PRODUTO", cODIGO_PRODUTO);
            }
            else
            {
                cODIGO_PRODUTOParameter = new ObjectParameter("CODIGO_PRODUTO", typeof(string));
            }
    
            ObjectParameter sEQUENCIAParameter;
    
            if (sEQUENCIA.HasValue)
            {
                sEQUENCIAParameter = new ObjectParameter("SEQUENCIA", sEQUENCIA);
            }
            else
            {
                sEQUENCIAParameter = new ObjectParameter("SEQUENCIA", typeof(int));
            }
    
            ObjectParameter vPRODGRADECORCODParameter;
    
            if (vPRODGRADECORCOD != null)
            {
                vPRODGRADECORCODParameter = new ObjectParameter("VPRODGRADECORCOD", vPRODGRADECORCOD);
            }
            else
            {
                vPRODGRADECORCODParameter = new ObjectParameter("VPRODGRADECORCOD", typeof(string));
            }
    
            ObjectParameter cODIGO_EMPRESAParameter;
    
            if (cODIGO_EMPRESA != null)
            {
                cODIGO_EMPRESAParameter = new ObjectParameter("CODIGO_EMPRESA", cODIGO_EMPRESA);
            }
            else
            {
                cODIGO_EMPRESAParameter = new ObjectParameter("CODIGO_EMPRESA", typeof(string));
            }
    
            ObjectParameter dATAParameter;
    
            if (dATA.HasValue)
            {
                dATAParameter = new ObjectParameter("DATA", dATA);
            }
            else
            {
                dATAParameter = new ObjectParameter("DATA", typeof(System.DateTime));
            }
    
            ObjectParameter uSUCODParameter;
    
            if (uSUCOD != null)
            {
                uSUCODParameter = new ObjectParameter("USUCOD", uSUCOD);
            }
            else
            {
                uSUCODParameter = new ObjectParameter("USUCOD", typeof(string));
            }
            return base.ExecuteFunction("GeraOrdemProducao", cODIGO_PLANEJAMENTOParameter, cODIGO_PRODUTOParameter, sEQUENCIAParameter, vPRODGRADECORCODParameter, cODIGO_EMPRESAParameter, dATAParameter, uSUCODParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="vEMPCOD">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vORDPRODUCNUM">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vOPERORDPRODUCSEQ">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vPRODUTO">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int InsertOperOrdProducProc(string vEMPCOD, string vORDPRODUCNUM, Nullable<int> vOPERORDPRODUCSEQ, string vPRODUTO)
        {
    
            ObjectParameter vEMPCODParameter;
    
            if (vEMPCOD != null)
            {
                vEMPCODParameter = new ObjectParameter("VEMPCOD", vEMPCOD);
            }
            else
            {
                vEMPCODParameter = new ObjectParameter("VEMPCOD", typeof(string));
            }
    
            ObjectParameter vORDPRODUCNUMParameter;
    
            if (vORDPRODUCNUM != null)
            {
                vORDPRODUCNUMParameter = new ObjectParameter("VORDPRODUCNUM", vORDPRODUCNUM);
            }
            else
            {
                vORDPRODUCNUMParameter = new ObjectParameter("VORDPRODUCNUM", typeof(string));
            }
    
            ObjectParameter vOPERORDPRODUCSEQParameter;
    
            if (vOPERORDPRODUCSEQ.HasValue)
            {
                vOPERORDPRODUCSEQParameter = new ObjectParameter("VOPERORDPRODUCSEQ", vOPERORDPRODUCSEQ);
            }
            else
            {
                vOPERORDPRODUCSEQParameter = new ObjectParameter("VOPERORDPRODUCSEQ", typeof(int));
            }
    
            ObjectParameter vPRODUTOParameter;
    
            if (vPRODUTO != null)
            {
                vPRODUTOParameter = new ObjectParameter("VPRODUTO", vPRODUTO);
            }
            else
            {
                vPRODUTOParameter = new ObjectParameter("VPRODUTO", typeof(string));
            }
            return base.ExecuteFunction("InsertOperOrdProducProc", vEMPCODParameter, vORDPRODUCNUMParameter, vOPERORDPRODUCSEQParameter, vPRODUTOParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empresa">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="tabela">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="codigo">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int GerarCodigo(string empresa, string tabela, ObjectParameter codigo)
        {
    
            ObjectParameter empresaParameter;
    
            if (empresa != null)
            {
                empresaParameter = new ObjectParameter("empresa", empresa);
            }
            else
            {
                empresaParameter = new ObjectParameter("empresa", typeof(string));
            }
    
            ObjectParameter tabelaParameter;
    
            if (tabela != null)
            {
                tabelaParameter = new ObjectParameter("tabela", tabela);
            }
            else
            {
                tabelaParameter = new ObjectParameter("tabela", typeof(string));
            }
            return base.ExecuteFunction("GerarCodigo", empresaParameter, tabelaParameter, codigo);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="reqmatnum">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="usucod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="operacao">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="bxaautom">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int ReqMaterialAtendeAutomatico(string empcod, string reqmatnum, string usucod, string operacao, string bxaautom)
        {
    
            ObjectParameter empcodParameter;
    
            if (empcod != null)
            {
                empcodParameter = new ObjectParameter("empcod", empcod);
            }
            else
            {
                empcodParameter = new ObjectParameter("empcod", typeof(string));
            }
    
            ObjectParameter reqmatnumParameter;
    
            if (reqmatnum != null)
            {
                reqmatnumParameter = new ObjectParameter("reqmatnum", reqmatnum);
            }
            else
            {
                reqmatnumParameter = new ObjectParameter("reqmatnum", typeof(string));
            }
    
            ObjectParameter usucodParameter;
    
            if (usucod != null)
            {
                usucodParameter = new ObjectParameter("usucod", usucod);
            }
            else
            {
                usucodParameter = new ObjectParameter("usucod", typeof(string));
            }
    
            ObjectParameter operacaoParameter;
    
            if (operacao != null)
            {
                operacaoParameter = new ObjectParameter("operacao", operacao);
            }
            else
            {
                operacaoParameter = new ObjectParameter("operacao", typeof(string));
            }
    
            ObjectParameter bxaautomParameter;
    
            if (bxaautom != null)
            {
                bxaautomParameter = new ObjectParameter("bxaautom", bxaautom);
            }
            else
            {
                bxaautomParameter = new ObjectParameter("bxaautom", typeof(string));
            }
            return base.ExecuteFunction("ReqMaterialAtendeAutomatico", empcodParameter, reqmatnumParameter, usucodParameter, operacaoParameter, bxaautomParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="numorig">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="reqmatnumatual">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="reqmatnumant">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="reqmatnumprox">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="usucod">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int EstornaAtendReqMat(string empcod, string numorig, string reqmatnumatual, string reqmatnumant, string reqmatnumprox, string usucod)
        {
    
            ObjectParameter empcodParameter;
    
            if (empcod != null)
            {
                empcodParameter = new ObjectParameter("empcod", empcod);
            }
            else
            {
                empcodParameter = new ObjectParameter("empcod", typeof(string));
            }
    
            ObjectParameter numorigParameter;
    
            if (numorig != null)
            {
                numorigParameter = new ObjectParameter("numorig", numorig);
            }
            else
            {
                numorigParameter = new ObjectParameter("numorig", typeof(string));
            }
    
            ObjectParameter reqmatnumatualParameter;
    
            if (reqmatnumatual != null)
            {
                reqmatnumatualParameter = new ObjectParameter("reqmatnumatual", reqmatnumatual);
            }
            else
            {
                reqmatnumatualParameter = new ObjectParameter("reqmatnumatual", typeof(string));
            }
    
            ObjectParameter reqmatnumantParameter;
    
            if (reqmatnumant != null)
            {
                reqmatnumantParameter = new ObjectParameter("reqmatnumant", reqmatnumant);
            }
            else
            {
                reqmatnumantParameter = new ObjectParameter("reqmatnumant", typeof(string));
            }
    
            ObjectParameter reqmatnumproxParameter;
    
            if (reqmatnumprox != null)
            {
                reqmatnumproxParameter = new ObjectParameter("reqmatnumprox", reqmatnumprox);
            }
            else
            {
                reqmatnumproxParameter = new ObjectParameter("reqmatnumprox", typeof(string));
            }
    
            ObjectParameter usucodParameter;
    
            if (usucod != null)
            {
                usucodParameter = new ObjectParameter("usucod", usucod);
            }
            else
            {
                usucodParameter = new ObjectParameter("usucod", typeof(string));
            }
            return base.ExecuteFunction("EstornaAtendReqMat", empcodParameter, numorigParameter, reqmatnumatualParameter, reqmatnumantParameter, reqmatnumproxParameter, usucodParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="reqmatnum">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int DeleteReqmat(string empcod, string reqmatnum)
        {
    
            ObjectParameter empcodParameter;
    
            if (empcod != null)
            {
                empcodParameter = new ObjectParameter("empcod", empcod);
            }
            else
            {
                empcodParameter = new ObjectParameter("empcod", typeof(string));
            }
    
            ObjectParameter reqmatnumParameter;
    
            if (reqmatnum != null)
            {
                reqmatnumParameter = new ObjectParameter("reqmatnum", reqmatnum);
            }
            else
            {
                reqmatnumParameter = new ObjectParameter("reqmatnum", typeof(string));
            }
            return base.ExecuteFunction("DeleteReqmat", empcodParameter, reqmatnumParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="vempcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vORDPRODUCNUM">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vPRODCODESTR">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vUSUCOD">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int DeleteOrdProduc(string vempcod, string vORDPRODUCNUM, string vPRODCODESTR, string vUSUCOD)
        {
    
            ObjectParameter vempcodParameter;
    
            if (vempcod != null)
            {
                vempcodParameter = new ObjectParameter("Vempcod", vempcod);
            }
            else
            {
                vempcodParameter = new ObjectParameter("Vempcod", typeof(string));
            }
    
            ObjectParameter vORDPRODUCNUMParameter;
    
            if (vORDPRODUCNUM != null)
            {
                vORDPRODUCNUMParameter = new ObjectParameter("VORDPRODUCNUM", vORDPRODUCNUM);
            }
            else
            {
                vORDPRODUCNUMParameter = new ObjectParameter("VORDPRODUCNUM", typeof(string));
            }
    
            ObjectParameter vPRODCODESTRParameter;
    
            if (vPRODCODESTR != null)
            {
                vPRODCODESTRParameter = new ObjectParameter("VPRODCODESTR", vPRODCODESTR);
            }
            else
            {
                vPRODCODESTRParameter = new ObjectParameter("VPRODCODESTR", typeof(string));
            }
    
            ObjectParameter vUSUCODParameter;
    
            if (vUSUCOD != null)
            {
                vUSUCODParameter = new ObjectParameter("VUSUCOD", vUSUCOD);
            }
            else
            {
                vUSUCODParameter = new ObjectParameter("VUSUCOD", typeof(string));
            }
            return base.ExecuteFunction("DeleteOrdProduc", vempcodParameter, vORDPRODUCNUMParameter, vPRODCODESTRParameter, vUSUCODParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="vEMPCOD">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vPLANPRODUCNUM">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vUSUCOD">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int DeleteNecPlanProduc(string vEMPCOD, string vPLANPRODUCNUM, string vUSUCOD)
        {
    
            ObjectParameter vEMPCODParameter;
    
            if (vEMPCOD != null)
            {
                vEMPCODParameter = new ObjectParameter("VEMPCOD", vEMPCOD);
            }
            else
            {
                vEMPCODParameter = new ObjectParameter("VEMPCOD", typeof(string));
            }
    
            ObjectParameter vPLANPRODUCNUMParameter;
    
            if (vPLANPRODUCNUM != null)
            {
                vPLANPRODUCNUMParameter = new ObjectParameter("VPLANPRODUCNUM", vPLANPRODUCNUM);
            }
            else
            {
                vPLANPRODUCNUMParameter = new ObjectParameter("VPLANPRODUCNUM", typeof(string));
            }
    
            ObjectParameter vUSUCODParameter;
    
            if (vUSUCOD != null)
            {
                vUSUCODParameter = new ObjectParameter("VUSUCOD", vUSUCOD);
            }
            else
            {
                vUSUCODParameter = new ObjectParameter("VUSUCOD", typeof(string));
            }
            return base.ExecuteFunction("DeleteNecPlanProduc", vEMPCODParameter, vPLANPRODUCNUMParameter, vUSUCODParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="vempcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vPLANPRODUCNUM">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int DeletePlanProduc(string vempcod, string vPLANPRODUCNUM)
        {
    
            ObjectParameter vempcodParameter;
    
            if (vempcod != null)
            {
                vempcodParameter = new ObjectParameter("Vempcod", vempcod);
            }
            else
            {
                vempcodParameter = new ObjectParameter("Vempcod", typeof(string));
            }
    
            ObjectParameter vPLANPRODUCNUMParameter;
    
            if (vPLANPRODUCNUM != null)
            {
                vPLANPRODUCNUMParameter = new ObjectParameter("VPLANPRODUCNUM", vPLANPRODUCNUM);
            }
            else
            {
                vPLANPRODUCNUMParameter = new ObjectParameter("VPLANPRODUCNUM", typeof(string));
            }
            return base.ExecuteFunction("DeletePlanProduc", vempcodParameter, vPLANPRODUCNUMParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="vempcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vORDPRODUCNUM">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int DeleteApontOrdProduc(string vempcod, string vORDPRODUCNUM)
        {
    
            ObjectParameter vempcodParameter;
    
            if (vempcod != null)
            {
                vempcodParameter = new ObjectParameter("Vempcod", vempcod);
            }
            else
            {
                vempcodParameter = new ObjectParameter("Vempcod", typeof(string));
            }
    
            ObjectParameter vORDPRODUCNUMParameter;
    
            if (vORDPRODUCNUM != null)
            {
                vORDPRODUCNUMParameter = new ObjectParameter("VORDPRODUCNUM", vORDPRODUCNUM);
            }
            else
            {
                vORDPRODUCNUMParameter = new ObjectParameter("VORDPRODUCNUM", typeof(string));
            }
            return base.ExecuteFunction("DeleteApontOrdProduc", vempcodParameter, vORDPRODUCNUMParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="vempcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vORDPRODUCNUM">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vProdCodEstr">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vProdOperSeq">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vOperOrdProducSeq">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vUSUCOD">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vMOTIVO">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="vUSUCODDELECAO">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int DeleteOperOrdProduc(string vempcod, string vORDPRODUCNUM, string vProdCodEstr, Nullable<short> vProdOperSeq, Nullable<int> vOperOrdProducSeq, string vUSUCOD, string vMOTIVO, string vUSUCODDELECAO)
        {
    
            ObjectParameter vempcodParameter;
    
            if (vempcod != null)
            {
                vempcodParameter = new ObjectParameter("Vempcod", vempcod);
            }
            else
            {
                vempcodParameter = new ObjectParameter("Vempcod", typeof(string));
            }
    
            ObjectParameter vORDPRODUCNUMParameter;
    
            if (vORDPRODUCNUM != null)
            {
                vORDPRODUCNUMParameter = new ObjectParameter("VORDPRODUCNUM", vORDPRODUCNUM);
            }
            else
            {
                vORDPRODUCNUMParameter = new ObjectParameter("VORDPRODUCNUM", typeof(string));
            }
    
            ObjectParameter vProdCodEstrParameter;
    
            if (vProdCodEstr != null)
            {
                vProdCodEstrParameter = new ObjectParameter("vProdCodEstr", vProdCodEstr);
            }
            else
            {
                vProdCodEstrParameter = new ObjectParameter("vProdCodEstr", typeof(string));
            }
    
            ObjectParameter vProdOperSeqParameter;
    
            if (vProdOperSeq.HasValue)
            {
                vProdOperSeqParameter = new ObjectParameter("vProdOperSeq", vProdOperSeq);
            }
            else
            {
                vProdOperSeqParameter = new ObjectParameter("vProdOperSeq", typeof(short));
            }
    
            ObjectParameter vOperOrdProducSeqParameter;
    
            if (vOperOrdProducSeq.HasValue)
            {
                vOperOrdProducSeqParameter = new ObjectParameter("vOperOrdProducSeq", vOperOrdProducSeq);
            }
            else
            {
                vOperOrdProducSeqParameter = new ObjectParameter("vOperOrdProducSeq", typeof(int));
            }
    
            ObjectParameter vUSUCODParameter;
    
            if (vUSUCOD != null)
            {
                vUSUCODParameter = new ObjectParameter("VUSUCOD", vUSUCOD);
            }
            else
            {
                vUSUCODParameter = new ObjectParameter("VUSUCOD", typeof(string));
            }
    
            ObjectParameter vMOTIVOParameter;
    
            if (vMOTIVO != null)
            {
                vMOTIVOParameter = new ObjectParameter("VMOTIVO", vMOTIVO);
            }
            else
            {
                vMOTIVOParameter = new ObjectParameter("VMOTIVO", typeof(string));
            }
    
            ObjectParameter vUSUCODDELECAOParameter;
    
            if (vUSUCODDELECAO != null)
            {
                vUSUCODDELECAOParameter = new ObjectParameter("VUSUCODDELECAO", vUSUCODDELECAO);
            }
            else
            {
                vUSUCODDELECAOParameter = new ObjectParameter("VUSUCODDELECAO", typeof(string));
            }
            return base.ExecuteFunction("DeleteOperOrdProduc", vempcodParameter, vORDPRODUCNUMParameter, vProdCodEstrParameter, vProdOperSeqParameter, vOperOrdProducSeqParameter, vUSUCODParameter, vMOTIVOParameter, vUSUCODDELECAOParameter);
        }

        #endregion

    }
}
