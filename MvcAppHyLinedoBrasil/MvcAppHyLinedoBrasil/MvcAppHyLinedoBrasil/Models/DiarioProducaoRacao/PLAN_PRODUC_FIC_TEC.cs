//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ITEM_PLAN_PRODUC))]
    [KnownType(typeof(FIC_TEC_PROD))]
    [KnownType(typeof(PRODUTO))]
    public partial class PLAN_PRODUC_FIC_TEC: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_PLAN_PRODUC != null && ITEM_PLAN_PRODUC.EmpCod != value)
                        {
                            ITEM_PLAN_PRODUC = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string PlanProducNum
        {
            get { return _planProducNum; }
            set
            {
                if (_planProducNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PlanProducNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_PLAN_PRODUC != null && ITEM_PLAN_PRODUC.PlanProducNum != value)
                        {
                            ITEM_PLAN_PRODUC = null;
                        }
                    }
                    _planProducNum = value;
                    OnPropertyChanged("PlanProducNum");
                }
            }
        }
        private string _planProducNum;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_PLAN_PRODUC != null && ITEM_PLAN_PRODUC.ProdCodEstr != value)
                        {
                            ITEM_PLAN_PRODUC = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public short ItPlanProducSeq
        {
            get { return _itPlanProducSeq; }
            set
            {
                if (_itPlanProducSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ItPlanProducSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_PLAN_PRODUC != null && ITEM_PLAN_PRODUC.ItPlanProducSeq != value)
                        {
                            ITEM_PLAN_PRODUC = null;
                        }
                    }
                    _itPlanProducSeq = value;
                    OnPropertyChanged("ItPlanProducSeq");
                }
            }
        }
        private short _itPlanProducSeq;
    
        [DataMember]
        public string FTProdCodEstr
        {
            get { return _fTProdCodEstr; }
            set
            {
                if (_fTProdCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FTProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (FIC_TEC_PROD != null && FIC_TEC_PROD.ProdCodEstr != value)
                        {
                            FIC_TEC_PROD = null;
                        }
                    }
                    _fTProdCodEstr = value;
                    OnPropertyChanged("FTProdCodEstr");
                }
            }
        }
        private string _fTProdCodEstr;
    
        [DataMember]
        public int FicTecProdSeq
        {
            get { return _ficTecProdSeq; }
            set
            {
                if (_ficTecProdSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FicTecProdSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (FIC_TEC_PROD != null && FIC_TEC_PROD.FicTecProdSeq != value)
                        {
                            FIC_TEC_PROD = null;
                        }
                    }
                    _ficTecProdSeq = value;
                    OnPropertyChanged("FicTecProdSeq");
                }
            }
        }
        private int _ficTecProdSeq;
    
        [DataMember]
        public string PlanProducFicTecProdCodEstr
        {
            get { return _planProducFicTecProdCodEstr; }
            set
            {
                if (_planProducFicTecProdCodEstr != value)
                {
                    ChangeTracker.RecordOriginalValue("PlanProducFicTecProdCodEstr", _planProducFicTecProdCodEstr);
                    if (!IsDeserializing)
                    {
                        if (PRODUTO != null && PRODUTO.ProdCodEstr != value)
                        {
                            PRODUTO = null;
                        }
                    }
                    _planProducFicTecProdCodEstr = value;
                    OnPropertyChanged("PlanProducFicTecProdCodEstr");
                }
            }
        }
        private string _planProducFicTecProdCodEstr;
    
        [DataMember]
        public Nullable<decimal> PlanProducFicTecQtd
        {
            get { return _planProducFicTecQtd; }
            set
            {
                if (_planProducFicTecQtd != value)
                {
                    _planProducFicTecQtd = value;
                    OnPropertyChanged("PlanProducFicTecQtd");
                }
            }
        }
        private Nullable<decimal> _planProducFicTecQtd;
    
        [DataMember]
        public Nullable<decimal> PlanProducFicTecQtdEstq
        {
            get { return _planProducFicTecQtdEstq; }
            set
            {
                if (_planProducFicTecQtdEstq != value)
                {
                    _planProducFicTecQtdEstq = value;
                    OnPropertyChanged("PlanProducFicTecQtdEstq");
                }
            }
        }
        private Nullable<decimal> _planProducFicTecQtdEstq;
    
        [DataMember]
        public Nullable<decimal> PlanProducFicTecQtdReserv
        {
            get { return _planProducFicTecQtdReserv; }
            set
            {
                if (_planProducFicTecQtdReserv != value)
                {
                    _planProducFicTecQtdReserv = value;
                    OnPropertyChanged("PlanProducFicTecQtdReserv");
                }
            }
        }
        private Nullable<decimal> _planProducFicTecQtdReserv;
    
        [DataMember]
        public Nullable<decimal> PlanProducFicTecQtdEmp
        {
            get { return _planProducFicTecQtdEmp; }
            set
            {
                if (_planProducFicTecQtdEmp != value)
                {
                    _planProducFicTecQtdEmp = value;
                    OnPropertyChanged("PlanProducFicTecQtdEmp");
                }
            }
        }
        private Nullable<decimal> _planProducFicTecQtdEmp;
    
        [DataMember]
        public Nullable<decimal> PlanProducFicTecQtdNec
        {
            get { return _planProducFicTecQtdNec; }
            set
            {
                if (_planProducFicTecQtdNec != value)
                {
                    _planProducFicTecQtdNec = value;
                    OnPropertyChanged("PlanProducFicTecQtdNec");
                }
            }
        }
        private Nullable<decimal> _planProducFicTecQtdNec;
    
        [DataMember]
        public Nullable<decimal> PlanProducFicTecQtdComp
        {
            get { return _planProducFicTecQtdComp; }
            set
            {
                if (_planProducFicTecQtdComp != value)
                {
                    _planProducFicTecQtdComp = value;
                    OnPropertyChanged("PlanProducFicTecQtdComp");
                }
            }
        }
        private Nullable<decimal> _planProducFicTecQtdComp;
    
        [DataMember]
        public Nullable<decimal> PlanProducFicTecQtdEstqProd
        {
            get { return _planProducFicTecQtdEstqProd; }
            set
            {
                if (_planProducFicTecQtdEstqProd != value)
                {
                    _planProducFicTecQtdEstqProd = value;
                    OnPropertyChanged("PlanProducFicTecQtdEstqProd");
                }
            }
        }
        private Nullable<decimal> _planProducFicTecQtdEstqProd;
    
        [DataMember]
        public Nullable<decimal> PlanProducFicTecQtdFatMult
        {
            get { return _planProducFicTecQtdFatMult; }
            set
            {
                if (_planProducFicTecQtdFatMult != value)
                {
                    _planProducFicTecQtdFatMult = value;
                    OnPropertyChanged("PlanProducFicTecQtdFatMult");
                }
            }
        }
        private Nullable<decimal> _planProducFicTecQtdFatMult;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ITEM_PLAN_PRODUC ITEM_PLAN_PRODUC
        {
            get { return _iTEM_PLAN_PRODUC; }
            set
            {
                if (!ReferenceEquals(_iTEM_PLAN_PRODUC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || PlanProducNum != value.PlanProducNum || ProdCodEstr != value.ProdCodEstr || ItPlanProducSeq != value.ItPlanProducSeq)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _iTEM_PLAN_PRODUC;
                    _iTEM_PLAN_PRODUC = value;
                    FixupITEM_PLAN_PRODUC(previousValue);
                    OnNavigationPropertyChanged("ITEM_PLAN_PRODUC");
                }
            }
        }
        private ITEM_PLAN_PRODUC _iTEM_PLAN_PRODUC;
    
        [DataMember]
        public FIC_TEC_PROD FIC_TEC_PROD
        {
            get { return _fIC_TEC_PROD; }
            set
            {
                if (!ReferenceEquals(_fIC_TEC_PROD, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (FTProdCodEstr != value.ProdCodEstr || FicTecProdSeq != value.FicTecProdSeq)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _fIC_TEC_PROD;
                    _fIC_TEC_PROD = value;
                    FixupFIC_TEC_PROD(previousValue);
                    OnNavigationPropertyChanged("FIC_TEC_PROD");
                }
            }
        }
        private FIC_TEC_PROD _fIC_TEC_PROD;
    
        [DataMember]
        public PRODUTO PRODUTO
        {
            get { return _pRODUTO; }
            set
            {
                if (!ReferenceEquals(_pRODUTO, value))
                {
                    var previousValue = _pRODUTO;
                    _pRODUTO = value;
                    FixupPRODUTO(previousValue);
                    OnNavigationPropertyChanged("PRODUTO");
                }
            }
        }
        private PRODUTO _pRODUTO;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ITEM_PLAN_PRODUC = null;
            FIC_TEC_PROD = null;
            PRODUTO = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupITEM_PLAN_PRODUC(ITEM_PLAN_PRODUC previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PLAN_PRODUC_FIC_TEC.Contains(this))
            {
                previousValue.PLAN_PRODUC_FIC_TEC.Remove(this);
            }
    
            if (ITEM_PLAN_PRODUC != null)
            {
                if (!ITEM_PLAN_PRODUC.PLAN_PRODUC_FIC_TEC.Contains(this))
                {
                    ITEM_PLAN_PRODUC.PLAN_PRODUC_FIC_TEC.Add(this);
                }
    
                EmpCod = ITEM_PLAN_PRODUC.EmpCod;
                PlanProducNum = ITEM_PLAN_PRODUC.PlanProducNum;
                ProdCodEstr = ITEM_PLAN_PRODUC.ProdCodEstr;
                ItPlanProducSeq = ITEM_PLAN_PRODUC.ItPlanProducSeq;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ITEM_PLAN_PRODUC")
                    && (ChangeTracker.OriginalValues["ITEM_PLAN_PRODUC"] == ITEM_PLAN_PRODUC))
                {
                    ChangeTracker.OriginalValues.Remove("ITEM_PLAN_PRODUC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ITEM_PLAN_PRODUC", previousValue);
                }
                if (ITEM_PLAN_PRODUC != null && !ITEM_PLAN_PRODUC.ChangeTracker.ChangeTrackingEnabled)
                {
                    ITEM_PLAN_PRODUC.StartTracking();
                }
            }
        }
    
        private void FixupFIC_TEC_PROD(FIC_TEC_PROD previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PLAN_PRODUC_FIC_TEC.Contains(this))
            {
                previousValue.PLAN_PRODUC_FIC_TEC.Remove(this);
            }
    
            if (FIC_TEC_PROD != null)
            {
                if (!FIC_TEC_PROD.PLAN_PRODUC_FIC_TEC.Contains(this))
                {
                    FIC_TEC_PROD.PLAN_PRODUC_FIC_TEC.Add(this);
                }
    
                FTProdCodEstr = FIC_TEC_PROD.ProdCodEstr;
                FicTecProdSeq = FIC_TEC_PROD.FicTecProdSeq;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FIC_TEC_PROD")
                    && (ChangeTracker.OriginalValues["FIC_TEC_PROD"] == FIC_TEC_PROD))
                {
                    ChangeTracker.OriginalValues.Remove("FIC_TEC_PROD");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FIC_TEC_PROD", previousValue);
                }
                if (FIC_TEC_PROD != null && !FIC_TEC_PROD.ChangeTracker.ChangeTrackingEnabled)
                {
                    FIC_TEC_PROD.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO(PRODUTO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PLAN_PRODUC_FIC_TEC.Contains(this))
            {
                previousValue.PLAN_PRODUC_FIC_TEC.Remove(this);
            }
    
            if (PRODUTO != null)
            {
                if (!PRODUTO.PLAN_PRODUC_FIC_TEC.Contains(this))
                {
                    PRODUTO.PLAN_PRODUC_FIC_TEC.Add(this);
                }
    
                PlanProducFicTecProdCodEstr = PRODUTO.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO")
                    && (ChangeTracker.OriginalValues["PRODUTO"] == PRODUTO))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO", previousValue);
                }
                if (PRODUTO != null && !PRODUTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO.StartTracking();
                }
            }
        }

        #endregion

    }
}
