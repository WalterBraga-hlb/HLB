//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ITEM_NEC_PLAN_PRODUC))]
    [KnownType(typeof(PLAN_PRODUC))]
    public partial class NEC_PLAN_PRODUC: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PLAN_PRODUC != null && PLAN_PRODUC.EmpCod != value)
                        {
                            PLAN_PRODUC = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string PlanProducNum
        {
            get { return _planProducNum; }
            set
            {
                if (_planProducNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PlanProducNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PLAN_PRODUC != null && PLAN_PRODUC.PlanProducNum != value)
                        {
                            PLAN_PRODUC = null;
                        }
                    }
                    _planProducNum = value;
                    OnPropertyChanged("PlanProducNum");
                }
            }
        }
        private string _planProducNum;
    
        [DataMember]
        public Nullable<System.DateTime> NecPlanProducDataEmis
        {
            get { return _necPlanProducDataEmis; }
            set
            {
                if (_necPlanProducDataEmis != value)
                {
                    _necPlanProducDataEmis = value;
                    OnPropertyChanged("NecPlanProducDataEmis");
                }
            }
        }
        private Nullable<System.DateTime> _necPlanProducDataEmis;
    
        [DataMember]
        public Nullable<System.DateTime> NecPlanProducDataInic
        {
            get { return _necPlanProducDataInic; }
            set
            {
                if (_necPlanProducDataInic != value)
                {
                    _necPlanProducDataInic = value;
                    OnPropertyChanged("NecPlanProducDataInic");
                }
            }
        }
        private Nullable<System.DateTime> _necPlanProducDataInic;
    
        [DataMember]
        public Nullable<System.DateTime> NecPlanProducDataFim
        {
            get { return _necPlanProducDataFim; }
            set
            {
                if (_necPlanProducDataFim != value)
                {
                    _necPlanProducDataFim = value;
                    OnPropertyChanged("NecPlanProducDataFim");
                }
            }
        }
        private Nullable<System.DateTime> _necPlanProducDataFim;
    
        [DataMember]
        public string NecPlanProducGerouOp
        {
            get { return _necPlanProducGerouOp; }
            set
            {
                if (_necPlanProducGerouOp != value)
                {
                    _necPlanProducGerouOp = value;
                    OnPropertyChanged("NecPlanProducGerouOp");
                }
            }
        }
        private string _necPlanProducGerouOp;
    
        [DataMember]
        public string NecPlanProducReqMat
        {
            get { return _necPlanProducReqMat; }
            set
            {
                if (_necPlanProducReqMat != value)
                {
                    _necPlanProducReqMat = value;
                    OnPropertyChanged("NecPlanProducReqMat");
                }
            }
        }
        private string _necPlanProducReqMat;
    
        [DataMember]
        public string NecPlanProducReqComp
        {
            get { return _necPlanProducReqComp; }
            set
            {
                if (_necPlanProducReqComp != value)
                {
                    _necPlanProducReqComp = value;
                    OnPropertyChanged("NecPlanProducReqComp");
                }
            }
        }
        private string _necPlanProducReqComp;
    
        [DataMember]
        public string NecPlanProducVerEstqMat
        {
            get { return _necPlanProducVerEstqMat; }
            set
            {
                if (_necPlanProducVerEstqMat != value)
                {
                    _necPlanProducVerEstqMat = value;
                    OnPropertyChanged("NecPlanProducVerEstqMat");
                }
            }
        }
        private string _necPlanProducVerEstqMat;
    
        [DataMember]
        public string NecPlanProducVerEstqAcab
        {
            get { return _necPlanProducVerEstqAcab; }
            set
            {
                if (_necPlanProducVerEstqAcab != value)
                {
                    _necPlanProducVerEstqAcab = value;
                    OnPropertyChanged("NecPlanProducVerEstqAcab");
                }
            }
        }
        private string _necPlanProducVerEstqAcab;
    
        [DataMember]
        public string NecPlanProducVerEstqSemiAcab
        {
            get { return _necPlanProducVerEstqSemiAcab; }
            set
            {
                if (_necPlanProducVerEstqSemiAcab != value)
                {
                    _necPlanProducVerEstqSemiAcab = value;
                    OnPropertyChanged("NecPlanProducVerEstqSemiAcab");
                }
            }
        }
        private string _necPlanProducVerEstqSemiAcab;
    
        [DataMember]
        public string NecPlanProducVerEstqAlt
        {
            get { return _necPlanProducVerEstqAlt; }
            set
            {
                if (_necPlanProducVerEstqAlt != value)
                {
                    _necPlanProducVerEstqAlt = value;
                    OnPropertyChanged("NecPlanProducVerEstqAlt");
                }
            }
        }
        private string _necPlanProducVerEstqAlt;
    
        [DataMember]
        public string NecPlanProducTexto
        {
            get { return _necPlanProducTexto; }
            set
            {
                if (_necPlanProducTexto != value)
                {
                    _necPlanProducTexto = value;
                    OnPropertyChanged("NecPlanProducTexto");
                }
            }
        }
        private string _necPlanProducTexto;
    
        [DataMember]
        public string NecPlanProducVerPedComp
        {
            get { return _necPlanProducVerPedComp; }
            set
            {
                if (_necPlanProducVerPedComp != value)
                {
                    _necPlanProducVerPedComp = value;
                    OnPropertyChanged("NecPlanProducVerPedComp");
                }
            }
        }
        private string _necPlanProducVerPedComp;
    
        [DataMember]
        public Nullable<System.DateTime> NecPlanProducDataEntPedComp
        {
            get { return _necPlanProducDataEntPedComp; }
            set
            {
                if (_necPlanProducDataEntPedComp != value)
                {
                    _necPlanProducDataEntPedComp = value;
                    OnPropertyChanged("NecPlanProducDataEntPedComp");
                }
            }
        }
        private Nullable<System.DateTime> _necPlanProducDataEntPedComp;
    
        [DataMember]
        public string NecPlanProducDesmSemiAcab
        {
            get { return _necPlanProducDesmSemiAcab; }
            set
            {
                if (_necPlanProducDesmSemiAcab != value)
                {
                    _necPlanProducDesmSemiAcab = value;
                    OnPropertyChanged("NecPlanProducDesmSemiAcab");
                }
            }
        }
        private string _necPlanProducDesmSemiAcab;
    
        [DataMember]
        public string NecPlanProducDesativada
        {
            get { return _necPlanProducDesativada; }
            set
            {
                if (_necPlanProducDesativada != value)
                {
                    _necPlanProducDesativada = value;
                    OnPropertyChanged("NecPlanProducDesativada");
                }
            }
        }
        private string _necPlanProducDesativada;
    
        [DataMember]
        public string NecPlanProducConsEstqMinMat
        {
            get { return _necPlanProducConsEstqMinMat; }
            set
            {
                if (_necPlanProducConsEstqMinMat != value)
                {
                    _necPlanProducConsEstqMinMat = value;
                    OnPropertyChanged("NecPlanProducConsEstqMinMat");
                }
            }
        }
        private string _necPlanProducConsEstqMinMat;
    
        [DataMember]
        public string NecPlanProduConsEstqMinAcab
        {
            get { return _necPlanProduConsEstqMinAcab; }
            set
            {
                if (_necPlanProduConsEstqMinAcab != value)
                {
                    _necPlanProduConsEstqMinAcab = value;
                    OnPropertyChanged("NecPlanProduConsEstqMinAcab");
                }
            }
        }
        private string _necPlanProduConsEstqMinAcab;
    
        [DataMember]
        public string NecPlanProducConsEstqMinSem
        {
            get { return _necPlanProducConsEstqMinSem; }
            set
            {
                if (_necPlanProducConsEstqMinSem != value)
                {
                    _necPlanProducConsEstqMinSem = value;
                    OnPropertyChanged("NecPlanProducConsEstqMinSem");
                }
            }
        }
        private string _necPlanProducConsEstqMinSem;
    
        [DataMember]
        public string NecPlanProducConsEstqMinAlt
        {
            get { return _necPlanProducConsEstqMinAlt; }
            set
            {
                if (_necPlanProducConsEstqMinAlt != value)
                {
                    _necPlanProducConsEstqMinAlt = value;
                    OnPropertyChanged("NecPlanProducConsEstqMinAlt");
                }
            }
        }
        private string _necPlanProducConsEstqMinAlt;
    
        [DataMember]
        public string NecPlanProdConsEstqProdAcab
        {
            get { return _necPlanProdConsEstqProdAcab; }
            set
            {
                if (_necPlanProdConsEstqProdAcab != value)
                {
                    _necPlanProdConsEstqProdAcab = value;
                    OnPropertyChanged("NecPlanProdConsEstqProdAcab");
                }
            }
        }
        private string _necPlanProdConsEstqProdAcab;
    
        [DataMember]
        public string NecPlanProdConsEstqProdSemi
        {
            get { return _necPlanProdConsEstqProdSemi; }
            set
            {
                if (_necPlanProdConsEstqProdSemi != value)
                {
                    _necPlanProdConsEstqProdSemi = value;
                    OnPropertyChanged("NecPlanProdConsEstqProdSemi");
                }
            }
        }
        private string _necPlanProdConsEstqProdSemi;
    
        [DataMember]
        public string NecPlanProdConsFatMultAcab
        {
            get { return _necPlanProdConsFatMultAcab; }
            set
            {
                if (_necPlanProdConsFatMultAcab != value)
                {
                    _necPlanProdConsFatMultAcab = value;
                    OnPropertyChanged("NecPlanProdConsFatMultAcab");
                }
            }
        }
        private string _necPlanProdConsFatMultAcab;
    
        [DataMember]
        public string NecPlanProdConsFatMultSemi
        {
            get { return _necPlanProdConsFatMultSemi; }
            set
            {
                if (_necPlanProdConsFatMultSemi != value)
                {
                    _necPlanProdConsFatMultSemi = value;
                    OnPropertyChanged("NecPlanProdConsFatMultSemi");
                }
            }
        }
        private string _necPlanProdConsFatMultSemi;
    
        [DataMember]
        public string NecPlanProdSimul
        {
            get { return _necPlanProdSimul; }
            set
            {
                if (_necPlanProdSimul != value)
                {
                    _necPlanProdSimul = value;
                    OnPropertyChanged("NecPlanProdSimul");
                }
            }
        }
        private string _necPlanProdSimul;
    
        [DataMember]
        public Nullable<System.DateTime> NecPlanProducDtHoraNec
        {
            get { return _necPlanProducDtHoraNec; }
            set
            {
                if (_necPlanProducDtHoraNec != value)
                {
                    _necPlanProducDtHoraNec = value;
                    OnPropertyChanged("NecPlanProducDtHoraNec");
                }
            }
        }
        private Nullable<System.DateTime> _necPlanProducDtHoraNec;
    
        [DataMember]
        public string NecPlanProdConsFatMultMat
        {
            get { return _necPlanProdConsFatMultMat; }
            set
            {
                if (_necPlanProdConsFatMultMat != value)
                {
                    _necPlanProdConsFatMultMat = value;
                    OnPropertyChanged("NecPlanProdConsFatMultMat");
                }
            }
        }
        private string _necPlanProdConsFatMultMat;
    
        [DataMember]
        public string NecPlanProdConsFatMultAlt
        {
            get { return _necPlanProdConsFatMultAlt; }
            set
            {
                if (_necPlanProdConsFatMultAlt != value)
                {
                    _necPlanProdConsFatMultAlt = value;
                    OnPropertyChanged("NecPlanProdConsFatMultAlt");
                }
            }
        }
        private string _necPlanProdConsFatMultAlt;
    
        [DataMember]
        public string NecPlanProdConsFatEstqMat
        {
            get { return _necPlanProdConsFatEstqMat; }
            set
            {
                if (_necPlanProdConsFatEstqMat != value)
                {
                    _necPlanProdConsFatEstqMat = value;
                    OnPropertyChanged("NecPlanProdConsFatEstqMat");
                }
            }
        }
        private string _necPlanProdConsFatEstqMat;
    
        [DataMember]
        public string NecPlanProdConsFatEstqAcab
        {
            get { return _necPlanProdConsFatEstqAcab; }
            set
            {
                if (_necPlanProdConsFatEstqAcab != value)
                {
                    _necPlanProdConsFatEstqAcab = value;
                    OnPropertyChanged("NecPlanProdConsFatEstqAcab");
                }
            }
        }
        private string _necPlanProdConsFatEstqAcab;
    
        [DataMember]
        public string NecPlanProdConsFatEstqSemAc
        {
            get { return _necPlanProdConsFatEstqSemAc; }
            set
            {
                if (_necPlanProdConsFatEstqSemAc != value)
                {
                    _necPlanProdConsFatEstqSemAc = value;
                    OnPropertyChanged("NecPlanProdConsFatEstqSemAc");
                }
            }
        }
        private string _necPlanProdConsFatEstqSemAc;
    
        [DataMember]
        public string NecPlanProdConsFatEstqAlt
        {
            get { return _necPlanProdConsFatEstqAlt; }
            set
            {
                if (_necPlanProdConsFatEstqAlt != value)
                {
                    _necPlanProdConsFatEstqAlt = value;
                    OnPropertyChanged("NecPlanProdConsFatEstqAlt");
                }
            }
        }
        private string _necPlanProdConsFatEstqAlt;
    
        [DataMember]
        public string NecPlanProdConsEstqProjMat
        {
            get { return _necPlanProdConsEstqProjMat; }
            set
            {
                if (_necPlanProdConsEstqProjMat != value)
                {
                    _necPlanProdConsEstqProjMat = value;
                    OnPropertyChanged("NecPlanProdConsEstqProjMat");
                }
            }
        }
        private string _necPlanProdConsEstqProjMat;
    
        [DataMember]
        public string NecPlanProdConsEstqProjAcab
        {
            get { return _necPlanProdConsEstqProjAcab; }
            set
            {
                if (_necPlanProdConsEstqProjAcab != value)
                {
                    _necPlanProdConsEstqProjAcab = value;
                    OnPropertyChanged("NecPlanProdConsEstqProjAcab");
                }
            }
        }
        private string _necPlanProdConsEstqProjAcab;
    
        [DataMember]
        public string NecPlanProdConsEstqProjSemA
        {
            get { return _necPlanProdConsEstqProjSemA; }
            set
            {
                if (_necPlanProdConsEstqProjSemA != value)
                {
                    _necPlanProdConsEstqProjSemA = value;
                    OnPropertyChanged("NecPlanProdConsEstqProjSemA");
                }
            }
        }
        private string _necPlanProdConsEstqProjSemA;
    
        [DataMember]
        public string NecPlanProdConsEstqProjAlt
        {
            get { return _necPlanProdConsEstqProjAlt; }
            set
            {
                if (_necPlanProdConsEstqProjAlt != value)
                {
                    _necPlanProdConsEstqProjAlt = value;
                    OnPropertyChanged("NecPlanProdConsEstqProjAlt");
                }
            }
        }
        private string _necPlanProdConsEstqProjAlt;
    
        [DataMember]
        public Nullable<System.DateTime> NecPlanProducDtPosEstq
        {
            get { return _necPlanProducDtPosEstq; }
            set
            {
                if (_necPlanProducDtPosEstq != value)
                {
                    _necPlanProducDtPosEstq = value;
                    OnPropertyChanged("NecPlanProducDtPosEstq");
                }
            }
        }
        private Nullable<System.DateTime> _necPlanProducDtPosEstq;
    
        [DataMember]
        public string NecPlanProducEmUso
        {
            get { return _necPlanProducEmUso; }
            set
            {
                if (_necPlanProducEmUso != value)
                {
                    _necPlanProducEmUso = value;
                    OnPropertyChanged("NecPlanProducEmUso");
                }
            }
        }
        private string _necPlanProducEmUso;
    
        [DataMember]
        public string NecPlanProducEstqMaxAlt
        {
            get { return _necPlanProducEstqMaxAlt; }
            set
            {
                if (_necPlanProducEstqMaxAlt != value)
                {
                    _necPlanProducEstqMaxAlt = value;
                    OnPropertyChanged("NecPlanProducEstqMaxAlt");
                }
            }
        }
        private string _necPlanProducEstqMaxAlt;
    
        [DataMember]
        public string NecPlanProducEstqMaxMat
        {
            get { return _necPlanProducEstqMaxMat; }
            set
            {
                if (_necPlanProducEstqMaxMat != value)
                {
                    _necPlanProducEstqMaxMat = value;
                    OnPropertyChanged("NecPlanProducEstqMaxMat");
                }
            }
        }
        private string _necPlanProducEstqMaxMat;
    
        [DataMember]
        public string NecPlanProducEstqMaxAcab
        {
            get { return _necPlanProducEstqMaxAcab; }
            set
            {
                if (_necPlanProducEstqMaxAcab != value)
                {
                    _necPlanProducEstqMaxAcab = value;
                    OnPropertyChanged("NecPlanProducEstqMaxAcab");
                }
            }
        }
        private string _necPlanProducEstqMaxAcab;
    
        [DataMember]
        public string NecPlanProducEstqMaxSemAcab
        {
            get { return _necPlanProducEstqMaxSemAcab; }
            set
            {
                if (_necPlanProducEstqMaxSemAcab != value)
                {
                    _necPlanProducEstqMaxSemAcab = value;
                    OnPropertyChanged("NecPlanProducEstqMaxSemAcab");
                }
            }
        }
        private string _necPlanProducEstqMaxSemAcab;
    
        [DataMember]
        public string NecPlanProducConsMedSemAcab
        {
            get { return _necPlanProducConsMedSemAcab; }
            set
            {
                if (_necPlanProducConsMedSemAcab != value)
                {
                    _necPlanProducConsMedSemAcab = value;
                    OnPropertyChanged("NecPlanProducConsMedSemAcab");
                }
            }
        }
        private string _necPlanProducConsMedSemAcab;
    
        [DataMember]
        public string NecPlanProducConsMedMat
        {
            get { return _necPlanProducConsMedMat; }
            set
            {
                if (_necPlanProducConsMedMat != value)
                {
                    _necPlanProducConsMedMat = value;
                    OnPropertyChanged("NecPlanProducConsMedMat");
                }
            }
        }
        private string _necPlanProducConsMedMat;
    
        [DataMember]
        public string NecPlanProducConsMedAlt
        {
            get { return _necPlanProducConsMedAlt; }
            set
            {
                if (_necPlanProducConsMedAlt != value)
                {
                    _necPlanProducConsMedAlt = value;
                    OnPropertyChanged("NecPlanProducConsMedAlt");
                }
            }
        }
        private string _necPlanProducConsMedAlt;
    
        [DataMember]
        public string NecPlanProducConsMedAcab
        {
            get { return _necPlanProducConsMedAcab; }
            set
            {
                if (_necPlanProducConsMedAcab != value)
                {
                    _necPlanProducConsMedAcab = value;
                    OnPropertyChanged("NecPlanProducConsMedAcab");
                }
            }
        }
        private string _necPlanProducConsMedAcab;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ITEM_NEC_PLAN_PRODUC> ITEM_NEC_PLAN_PRODUC
        {
            get
            {
                if (_iTEM_NEC_PLAN_PRODUC == null)
                {
                    _iTEM_NEC_PLAN_PRODUC = new TrackableCollection<ITEM_NEC_PLAN_PRODUC>();
                    _iTEM_NEC_PLAN_PRODUC.CollectionChanged += FixupITEM_NEC_PLAN_PRODUC;
                }
                return _iTEM_NEC_PLAN_PRODUC;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_NEC_PLAN_PRODUC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_NEC_PLAN_PRODUC != null)
                    {
                        _iTEM_NEC_PLAN_PRODUC.CollectionChanged -= FixupITEM_NEC_PLAN_PRODUC;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ITEM_NEC_PLAN_PRODUC item in _iTEM_NEC_PLAN_PRODUC)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _iTEM_NEC_PLAN_PRODUC = value;
                    if (_iTEM_NEC_PLAN_PRODUC != null)
                    {
                        _iTEM_NEC_PLAN_PRODUC.CollectionChanged += FixupITEM_NEC_PLAN_PRODUC;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ITEM_NEC_PLAN_PRODUC item in _iTEM_NEC_PLAN_PRODUC)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ITEM_NEC_PLAN_PRODUC");
                }
            }
        }
        private TrackableCollection<ITEM_NEC_PLAN_PRODUC> _iTEM_NEC_PLAN_PRODUC;
    
        [DataMember]
        public PLAN_PRODUC PLAN_PRODUC
        {
            get { return _pLAN_PRODUC; }
            set
            {
                if (!ReferenceEquals(_pLAN_PRODUC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || PlanProducNum != value.PlanProducNum)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pLAN_PRODUC;
                    _pLAN_PRODUC = value;
                    FixupPLAN_PRODUC(previousValue);
                    OnNavigationPropertyChanged("PLAN_PRODUC");
                }
            }
        }
        private PLAN_PRODUC _pLAN_PRODUC;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ITEM_NEC_PLAN_PRODUC.Clear();
            PLAN_PRODUC = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPLAN_PRODUC(PLAN_PRODUC previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.NEC_PLAN_PRODUC, this))
            {
                previousValue.NEC_PLAN_PRODUC = null;
            }
    
            if (PLAN_PRODUC != null)
            {
                PLAN_PRODUC.NEC_PLAN_PRODUC = this;
                EmpCod = PLAN_PRODUC.EmpCod;
                PlanProducNum = PLAN_PRODUC.PlanProducNum;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PLAN_PRODUC")
                    && (ChangeTracker.OriginalValues["PLAN_PRODUC"] == PLAN_PRODUC))
                {
                    ChangeTracker.OriginalValues.Remove("PLAN_PRODUC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PLAN_PRODUC", previousValue);
                }
                if (PLAN_PRODUC != null && !PLAN_PRODUC.ChangeTracker.ChangeTrackingEnabled)
                {
                    PLAN_PRODUC.StartTracking();
                }
            }
        }
    
        private void FixupITEM_NEC_PLAN_PRODUC(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_NEC_PLAN_PRODUC item in e.NewItems)
                {
                    item.NEC_PLAN_PRODUC = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_NEC_PLAN_PRODUC", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_NEC_PLAN_PRODUC item in e.OldItems)
                {
                    if (ReferenceEquals(item.NEC_PLAN_PRODUC, this))
                    {
                        item.NEC_PLAN_PRODUC = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_NEC_PLAN_PRODUC", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
