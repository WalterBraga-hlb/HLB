//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(OPER_ORD_PRODUC))]
    public partial class OPER_ORD_PRODUC_FUNC: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (OPER_ORD_PRODUC != null && OPER_ORD_PRODUC.EmpCod != value)
                        {
                            OPER_ORD_PRODUC = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string OrdProducNum
        {
            get { return _ordProducNum; }
            set
            {
                if (_ordProducNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrdProducNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (OPER_ORD_PRODUC != null && OPER_ORD_PRODUC.OrdProducNum != value)
                        {
                            OPER_ORD_PRODUC = null;
                        }
                    }
                    _ordProducNum = value;
                    OnPropertyChanged("OrdProducNum");
                }
            }
        }
        private string _ordProducNum;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (OPER_ORD_PRODUC != null && OPER_ORD_PRODUC.ProdCodEstr != value)
                        {
                            OPER_ORD_PRODUC = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public short ProdOperSeq
        {
            get { return _prodOperSeq; }
            set
            {
                if (_prodOperSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdOperSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (OPER_ORD_PRODUC != null && OPER_ORD_PRODUC.ProdOperSeq != value)
                        {
                            OPER_ORD_PRODUC = null;
                        }
                    }
                    _prodOperSeq = value;
                    OnPropertyChanged("ProdOperSeq");
                }
            }
        }
        private short _prodOperSeq;
    
        [DataMember]
        public int OperOrdProducSeq
        {
            get { return _operOrdProducSeq; }
            set
            {
                if (_operOrdProducSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OperOrdProducSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (OPER_ORD_PRODUC != null && OPER_ORD_PRODUC.OperOrdProducSeq != value)
                        {
                            OPER_ORD_PRODUC = null;
                        }
                    }
                    _operOrdProducSeq = value;
                    OnPropertyChanged("OperOrdProducSeq");
                }
            }
        }
        private int _operOrdProducSeq;
    
        [DataMember]
        public string FuncCod
        {
            get { return _funcCod; }
            set
            {
                if (_funcCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FuncCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _funcCod = value;
                    OnPropertyChanged("FuncCod");
                }
            }
        }
        private string _funcCod;
    
        [DataMember]
        public string OperOrdProducFuncApont
        {
            get { return _operOrdProducFuncApont; }
            set
            {
                if (_operOrdProducFuncApont != value)
                {
                    _operOrdProducFuncApont = value;
                    OnPropertyChanged("OperOrdProducFuncApont");
                }
            }
        }
        private string _operOrdProducFuncApont;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public OPER_ORD_PRODUC OPER_ORD_PRODUC
        {
            get { return _oPER_ORD_PRODUC; }
            set
            {
                if (!ReferenceEquals(_oPER_ORD_PRODUC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || OrdProducNum != value.OrdProducNum || ProdCodEstr != value.ProdCodEstr || ProdOperSeq != value.ProdOperSeq || OperOrdProducSeq != value.OperOrdProducSeq)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _oPER_ORD_PRODUC;
                    _oPER_ORD_PRODUC = value;
                    FixupOPER_ORD_PRODUC(previousValue);
                    OnNavigationPropertyChanged("OPER_ORD_PRODUC");
                }
            }
        }
        private OPER_ORD_PRODUC _oPER_ORD_PRODUC;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            OPER_ORD_PRODUC = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupOPER_ORD_PRODUC(OPER_ORD_PRODUC previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OPER_ORD_PRODUC_FUNC.Contains(this))
            {
                previousValue.OPER_ORD_PRODUC_FUNC.Remove(this);
            }
    
            if (OPER_ORD_PRODUC != null)
            {
                if (!OPER_ORD_PRODUC.OPER_ORD_PRODUC_FUNC.Contains(this))
                {
                    OPER_ORD_PRODUC.OPER_ORD_PRODUC_FUNC.Add(this);
                }
    
                EmpCod = OPER_ORD_PRODUC.EmpCod;
                OrdProducNum = OPER_ORD_PRODUC.OrdProducNum;
                ProdCodEstr = OPER_ORD_PRODUC.ProdCodEstr;
                ProdOperSeq = OPER_ORD_PRODUC.ProdOperSeq;
                OperOrdProducSeq = OPER_ORD_PRODUC.OperOrdProducSeq;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OPER_ORD_PRODUC")
                    && (ChangeTracker.OriginalValues["OPER_ORD_PRODUC"] == OPER_ORD_PRODUC))
                {
                    ChangeTracker.OriginalValues.Remove("OPER_ORD_PRODUC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OPER_ORD_PRODUC", previousValue);
                }
                if (OPER_ORD_PRODUC != null && !OPER_ORD_PRODUC.ChangeTracker.ChangeTrackingEnabled)
                {
                    OPER_ORD_PRODUC.StartTracking();
                }
            }
        }

        #endregion

    }
}
