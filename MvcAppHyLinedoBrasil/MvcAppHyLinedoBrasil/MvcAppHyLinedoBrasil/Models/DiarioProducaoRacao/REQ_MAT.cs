//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ITEM_REQ_MAT))]
    [KnownType(typeof(LOC_ARMAZ))]
    [KnownType(typeof(RATEIO_REQ_MAT))]
    [KnownType(typeof(REQ_MAT_CLASSE_REC_DESP))]
    [KnownType(typeof(REQ_MAT))]
    [KnownType(typeof(PRODUTO))]
    [KnownType(typeof(ORD_PRODUC))]
    public partial class REQ_MAT: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (REQ_MAT2 != null && REQ_MAT2.EmpCod != value)
                        {
                            var previousValue = _rEQ_MAT2;
                            _rEQ_MAT2 = null;
                            FixupREQ_MAT2(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("REQ_MAT2");
                        }
                        if (ORD_PRODUC != null && ORD_PRODUC.EmpCod != value)
                        {
                            var previousValue = _oRD_PRODUC;
                            _oRD_PRODUC = null;
                            FixupORD_PRODUC(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("ORD_PRODUC");
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string ReqMatNum
        {
            get { return _reqMatNum; }
            set
            {
                if (_reqMatNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReqMatNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reqMatNum = value;
                    OnPropertyChanged("ReqMatNum");
                }
            }
        }
        private string _reqMatNum;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatData
        {
            get { return _reqMatData; }
            set
            {
                if (_reqMatData != value)
                {
                    _reqMatData = value;
                    OnPropertyChanged("ReqMatData");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatData;
    
        [DataMember]
        public string ReqMatDescr
        {
            get { return _reqMatDescr; }
            set
            {
                if (_reqMatDescr != value)
                {
                    _reqMatDescr = value;
                    OnPropertyChanged("ReqMatDescr");
                }
            }
        }
        private string _reqMatDescr;
    
        [DataMember]
        public string CCtrlCodEstr
        {
            get { return _cCtrlCodEstr; }
            set
            {
                if (_cCtrlCodEstr != value)
                {
                    _cCtrlCodEstr = value;
                    OnPropertyChanged("CCtrlCodEstr");
                }
            }
        }
        private string _cCtrlCodEstr;
    
        [DataMember]
        public string FuncCod
        {
            get { return _funcCod; }
            set
            {
                if (_funcCod != value)
                {
                    _funcCod = value;
                    OnPropertyChanged("FuncCod");
                }
            }
        }
        private string _funcCod;
    
        [DataMember]
        public string ReqMatEspecDoc
        {
            get { return _reqMatEspecDoc; }
            set
            {
                if (_reqMatEspecDoc != value)
                {
                    _reqMatEspecDoc = value;
                    OnPropertyChanged("ReqMatEspecDoc");
                }
            }
        }
        private string _reqMatEspecDoc;
    
        [DataMember]
        public string ReqMatSerieDoc
        {
            get { return _reqMatSerieDoc; }
            set
            {
                if (_reqMatSerieDoc != value)
                {
                    _reqMatSerieDoc = value;
                    OnPropertyChanged("ReqMatSerieDoc");
                }
            }
        }
        private string _reqMatSerieDoc;
    
        [DataMember]
        public string ReqMatNumDoc
        {
            get { return _reqMatNumDoc; }
            set
            {
                if (_reqMatNumDoc != value)
                {
                    _reqMatNumDoc = value;
                    OnPropertyChanged("ReqMatNumDoc");
                }
            }
        }
        private string _reqMatNumDoc;
    
        [DataMember]
        public string ReqMatStat
        {
            get { return _reqMatStat; }
            set
            {
                if (_reqMatStat != value)
                {
                    _reqMatStat = value;
                    OnPropertyChanged("ReqMatStat");
                }
            }
        }
        private string _reqMatStat;
    
        [DataMember]
        public string ReqMatRef
        {
            get { return _reqMatRef; }
            set
            {
                if (_reqMatRef != value)
                {
                    ChangeTracker.RecordOriginalValue("ReqMatRef", _reqMatRef);
                    if (!IsDeserializing)
                    {
                        if (REQ_MAT2 != null && REQ_MAT2.ReqMatNum != value)
                        {
                            var previousValue = _rEQ_MAT2;
                            _rEQ_MAT2 = null;
                            FixupREQ_MAT2(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("REQ_MAT2");
                        }
                    }
                    _reqMatRef = value;
                    OnPropertyChanged("ReqMatRef");
                }
            }
        }
        private string _reqMatRef;
    
        [DataMember]
        public string ReqMatBaixouEstq
        {
            get { return _reqMatBaixouEstq; }
            set
            {
                if (_reqMatBaixouEstq != value)
                {
                    _reqMatBaixouEstq = value;
                    OnPropertyChanged("ReqMatBaixouEstq");
                }
            }
        }
        private string _reqMatBaixouEstq;
    
        [DataMember]
        public string TipoLancCod
        {
            get { return _tipoLancCod; }
            set
            {
                if (_tipoLancCod != value)
                {
                    _tipoLancCod = value;
                    OnPropertyChanged("TipoLancCod");
                }
            }
        }
        private string _tipoLancCod;
    
        [DataMember]
        public string ReqMatTexto
        {
            get { return _reqMatTexto; }
            set
            {
                if (_reqMatTexto != value)
                {
                    _reqMatTexto = value;
                    OnPropertyChanged("ReqMatTexto");
                }
            }
        }
        private string _reqMatTexto;
    
        [DataMember]
        public Nullable<int> ReqMatSeqDoc
        {
            get { return _reqMatSeqDoc; }
            set
            {
                if (_reqMatSeqDoc != value)
                {
                    _reqMatSeqDoc = value;
                    OnPropertyChanged("ReqMatSeqDoc");
                }
            }
        }
        private Nullable<int> _reqMatSeqDoc;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataEntrega
        {
            get { return _reqMatDataEntrega; }
            set
            {
                if (_reqMatDataEntrega != value)
                {
                    _reqMatDataEntrega = value;
                    OnPropertyChanged("ReqMatDataEntrega");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataEntrega;
    
        [DataMember]
        public string ReqMatFuncCodEntregou
        {
            get { return _reqMatFuncCodEntregou; }
            set
            {
                if (_reqMatFuncCodEntregou != value)
                {
                    _reqMatFuncCodEntregou = value;
                    OnPropertyChanged("ReqMatFuncCodEntregou");
                }
            }
        }
        private string _reqMatFuncCodEntregou;
    
        [DataMember]
        public string ReqMatFuncCodRetirou
        {
            get { return _reqMatFuncCodRetirou; }
            set
            {
                if (_reqMatFuncCodRetirou != value)
                {
                    _reqMatFuncCodRetirou = value;
                    OnPropertyChanged("ReqMatFuncCodRetirou");
                }
            }
        }
        private string _reqMatFuncCodRetirou;
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;
    
        [DataMember]
        public string ReqMatOper
        {
            get { return _reqMatOper; }
            set
            {
                if (_reqMatOper != value)
                {
                    _reqMatOper = value;
                    OnPropertyChanged("ReqMatOper");
                }
            }
        }
        private string _reqMatOper;
    
        [DataMember]
        public string AreaRespCod
        {
            get { return _areaRespCod; }
            set
            {
                if (_areaRespCod != value)
                {
                    _areaRespCod = value;
                    OnPropertyChanged("AreaRespCod");
                }
            }
        }
        private string _areaRespCod;
    
        [DataMember]
        public string ReqMatNumDocEmit
        {
            get { return _reqMatNumDocEmit; }
            set
            {
                if (_reqMatNumDocEmit != value)
                {
                    _reqMatNumDocEmit = value;
                    OnPropertyChanged("ReqMatNumDocEmit");
                }
            }
        }
        private string _reqMatNumDocEmit;
    
        [DataMember]
        public string ReqMatContatoNome
        {
            get { return _reqMatContatoNome; }
            set
            {
                if (_reqMatContatoNome != value)
                {
                    _reqMatContatoNome = value;
                    OnPropertyChanged("ReqMatContatoNome");
                }
            }
        }
        private string _reqMatContatoNome;
    
        [DataMember]
        public string ReqMatContatoFone
        {
            get { return _reqMatContatoFone; }
            set
            {
                if (_reqMatContatoFone != value)
                {
                    _reqMatContatoFone = value;
                    OnPropertyChanged("ReqMatContatoFone");
                }
            }
        }
        private string _reqMatContatoFone;
    
        [DataMember]
        public string ReqMatFuncCodAprov
        {
            get { return _reqMatFuncCodAprov; }
            set
            {
                if (_reqMatFuncCodAprov != value)
                {
                    _reqMatFuncCodAprov = value;
                    OnPropertyChanged("ReqMatFuncCodAprov");
                }
            }
        }
        private string _reqMatFuncCodAprov;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataAprov
        {
            get { return _reqMatDataAprov; }
            set
            {
                if (_reqMatDataAprov != value)
                {
                    _reqMatDataAprov = value;
                    OnPropertyChanged("ReqMatDataAprov");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataAprov;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataSeparac
        {
            get { return _reqMatDataSeparac; }
            set
            {
                if (_reqMatDataSeparac != value)
                {
                    _reqMatDataSeparac = value;
                    OnPropertyChanged("ReqMatDataSeparac");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataSeparac;
    
        [DataMember]
        public string ReqMatFuncCodSeparac
        {
            get { return _reqMatFuncCodSeparac; }
            set
            {
                if (_reqMatFuncCodSeparac != value)
                {
                    _reqMatFuncCodSeparac = value;
                    OnPropertyChanged("ReqMatFuncCodSeparac");
                }
            }
        }
        private string _reqMatFuncCodSeparac;
    
        [DataMember]
        public string ReqMatTipoAtend
        {
            get { return _reqMatTipoAtend; }
            set
            {
                if (_reqMatTipoAtend != value)
                {
                    _reqMatTipoAtend = value;
                    OnPropertyChanged("ReqMatTipoAtend");
                }
            }
        }
        private string _reqMatTipoAtend;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataValidade
        {
            get { return _reqMatDataValidade; }
            set
            {
                if (_reqMatDataValidade != value)
                {
                    _reqMatDataValidade = value;
                    OnPropertyChanged("ReqMatDataValidade");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataValidade;
    
        [DataMember]
        public string ReqMatAlarmeValidade
        {
            get { return _reqMatAlarmeValidade; }
            set
            {
                if (_reqMatAlarmeValidade != value)
                {
                    _reqMatAlarmeValidade = value;
                    OnPropertyChanged("ReqMatAlarmeValidade");
                }
            }
        }
        private string _reqMatAlarmeValidade;
    
        [DataMember]
        public string LocArmazCodEstr
        {
            get { return _locArmazCodEstr; }
            set
            {
                if (_locArmazCodEstr != value)
                {
                    ChangeTracker.RecordOriginalValue("LocArmazCodEstr", _locArmazCodEstr);
                    if (!IsDeserializing)
                    {
                        if (LOC_ARMAZ != null && LOC_ARMAZ.LocArmazCodEstr != value)
                        {
                            LOC_ARMAZ = null;
                        }
                    }
                    _locArmazCodEstr = value;
                    OnPropertyChanged("LocArmazCodEstr");
                }
            }
        }
        private string _locArmazCodEstr;
    
        [DataMember]
        public string ReqMatNomeRespRet
        {
            get { return _reqMatNomeRespRet; }
            set
            {
                if (_reqMatNomeRespRet != value)
                {
                    _reqMatNomeRespRet = value;
                    OnPropertyChanged("ReqMatNomeRespRet");
                }
            }
        }
        private string _reqMatNomeRespRet;
    
        [DataMember]
        public string ReqMatDocRespRet
        {
            get { return _reqMatDocRespRet; }
            set
            {
                if (_reqMatDocRespRet != value)
                {
                    _reqMatDocRespRet = value;
                    OnPropertyChanged("ReqMatDocRespRet");
                }
            }
        }
        private string _reqMatDocRespRet;
    
        [DataMember]
        public string ReqMatEmpen
        {
            get { return _reqMatEmpen; }
            set
            {
                if (_reqMatEmpen != value)
                {
                    _reqMatEmpen = value;
                    OnPropertyChanged("ReqMatEmpen");
                }
            }
        }
        private string _reqMatEmpen;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string ReqMatNumPedEnt
        {
            get { return _reqMatNumPedEnt; }
            set
            {
                if (_reqMatNumPedEnt != value)
                {
                    _reqMatNumPedEnt = value;
                    OnPropertyChanged("ReqMatNumPedEnt");
                }
            }
        }
        private string _reqMatNumPedEnt;
    
        [DataMember]
        public string ReqMatNumAltDoc
        {
            get { return _reqMatNumAltDoc; }
            set
            {
                if (_reqMatNumAltDoc != value)
                {
                    _reqMatNumAltDoc = value;
                    OnPropertyChanged("ReqMatNumAltDoc");
                }
            }
        }
        private string _reqMatNumAltDoc;
    
        [DataMember]
        public string ReqMatControle
        {
            get { return _reqMatControle; }
            set
            {
                if (_reqMatControle != value)
                {
                    _reqMatControle = value;
                    OnPropertyChanged("ReqMatControle");
                }
            }
        }
        private string _reqMatControle;
    
        [DataMember]
        public string ReqMatEmpCod
        {
            get { return _reqMatEmpCod; }
            set
            {
                if (_reqMatEmpCod != value)
                {
                    _reqMatEmpCod = value;
                    OnPropertyChanged("ReqMatEmpCod");
                }
            }
        }
        private string _reqMatEmpCod;
    
        [DataMember]
        public string ReqMatCodRota
        {
            get { return _reqMatCodRota; }
            set
            {
                if (_reqMatCodRota != value)
                {
                    _reqMatCodRota = value;
                    OnPropertyChanged("ReqMatCodRota");
                }
            }
        }
        private string _reqMatCodRota;
    
        [DataMember]
        public Nullable<decimal> ReqMatValLimite
        {
            get { return _reqMatValLimite; }
            set
            {
                if (_reqMatValLimite != value)
                {
                    _reqMatValLimite = value;
                    OnPropertyChanged("ReqMatValLimite");
                }
            }
        }
        private Nullable<decimal> _reqMatValLimite;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataNec
        {
            get { return _reqMatDataNec; }
            set
            {
                if (_reqMatDataNec != value)
                {
                    _reqMatDataNec = value;
                    OnPropertyChanged("ReqMatDataNec");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataNec;
    
        [DataMember]
        public string CtrlProjNum
        {
            get { return _ctrlProjNum; }
            set
            {
                if (_ctrlProjNum != value)
                {
                    _ctrlProjNum = value;
                    OnPropertyChanged("CtrlProjNum");
                }
            }
        }
        private string _ctrlProjNum;
    
        [DataMember]
        public string TipoReqMatCod
        {
            get { return _tipoReqMatCod; }
            set
            {
                if (_tipoReqMatCod != value)
                {
                    _tipoReqMatCod = value;
                    OnPropertyChanged("TipoReqMatCod");
                }
            }
        }
        private string _tipoReqMatCod;
    
        [DataMember]
        public string MatrizCod
        {
            get { return _matrizCod; }
            set
            {
                if (_matrizCod != value)
                {
                    _matrizCod = value;
                    OnPropertyChanged("MatrizCod");
                }
            }
        }
        private string _matrizCod;
    
        [DataMember]
        public string LinhaCod
        {
            get { return _linhaCod; }
            set
            {
                if (_linhaCod != value)
                {
                    _linhaCod = value;
                    OnPropertyChanged("LinhaCod");
                }
            }
        }
        private string _linhaCod;
    
        [DataMember]
        public string ColunaCod
        {
            get { return _colunaCod; }
            set
            {
                if (_colunaCod != value)
                {
                    _colunaCod = value;
                    OnPropertyChanged("ColunaCod");
                }
            }
        }
        private string _colunaCod;
    
        [DataMember]
        public Nullable<int> VerbaCtrlProjSeq
        {
            get { return _verbaCtrlProjSeq; }
            set
            {
                if (_verbaCtrlProjSeq != value)
                {
                    _verbaCtrlProjSeq = value;
                    OnPropertyChanged("VerbaCtrlProjSeq");
                }
            }
        }
        private Nullable<int> _verbaCtrlProjSeq;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataRMOrig
        {
            get { return _reqMatDataRMOrig; }
            set
            {
                if (_reqMatDataRMOrig != value)
                {
                    _reqMatDataRMOrig = value;
                    OnPropertyChanged("ReqMatDataRMOrig");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataRMOrig;
    
        [DataMember]
        public string ReqMatSucata
        {
            get { return _reqMatSucata; }
            set
            {
                if (_reqMatSucata != value)
                {
                    _reqMatSucata = value;
                    OnPropertyChanged("ReqMatSucata");
                }
            }
        }
        private string _reqMatSucata;
    
        [DataMember]
        public string ReqMatGerouPed
        {
            get { return _reqMatGerouPed; }
            set
            {
                if (_reqMatGerouPed != value)
                {
                    _reqMatGerouPed = value;
                    OnPropertyChanged("ReqMatGerouPed");
                }
            }
        }
        private string _reqMatGerouPed;
    
        [DataMember]
        public string ReqMatTipoConsumo
        {
            get { return _reqMatTipoConsumo; }
            set
            {
                if (_reqMatTipoConsumo != value)
                {
                    _reqMatTipoConsumo = value;
                    OnPropertyChanged("ReqMatTipoConsumo");
                }
            }
        }
        private string _reqMatTipoConsumo;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataConfere
        {
            get { return _reqMatDataConfere; }
            set
            {
                if (_reqMatDataConfere != value)
                {
                    _reqMatDataConfere = value;
                    OnPropertyChanged("ReqMatDataConfere");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataConfere;
    
        [DataMember]
        public string ReqMatFuncCodConfere
        {
            get { return _reqMatFuncCodConfere; }
            set
            {
                if (_reqMatFuncCodConfere != value)
                {
                    _reqMatFuncCodConfere = value;
                    OnPropertyChanged("ReqMatFuncCodConfere");
                }
            }
        }
        private string _reqMatFuncCodConfere;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataPrevRetirada
        {
            get { return _reqMatDataPrevRetirada; }
            set
            {
                if (_reqMatDataPrevRetirada != value)
                {
                    _reqMatDataPrevRetirada = value;
                    OnPropertyChanged("ReqMatDataPrevRetirada");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataPrevRetirada;
    
        [DataMember]
        public string ReqMatAlarmePrevRetirada
        {
            get { return _reqMatAlarmePrevRetirada; }
            set
            {
                if (_reqMatAlarmePrevRetirada != value)
                {
                    _reqMatAlarmePrevRetirada = value;
                    OnPropertyChanged("ReqMatAlarmePrevRetirada");
                }
            }
        }
        private string _reqMatAlarmePrevRetirada;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataPrevSeparac
        {
            get { return _reqMatDataPrevSeparac; }
            set
            {
                if (_reqMatDataPrevSeparac != value)
                {
                    _reqMatDataPrevSeparac = value;
                    OnPropertyChanged("ReqMatDataPrevSeparac");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataPrevSeparac;
    
        [DataMember]
        public string ReqMatAlarmePrevSeparac
        {
            get { return _reqMatAlarmePrevSeparac; }
            set
            {
                if (_reqMatAlarmePrevSeparac != value)
                {
                    _reqMatAlarmePrevSeparac = value;
                    OnPropertyChanged("ReqMatAlarmePrevSeparac");
                }
            }
        }
        private string _reqMatAlarmePrevSeparac;
    
        [DataMember]
        public string ReqMatUsuCodCanc
        {
            get { return _reqMatUsuCodCanc; }
            set
            {
                if (_reqMatUsuCodCanc != value)
                {
                    _reqMatUsuCodCanc = value;
                    OnPropertyChanged("ReqMatUsuCodCanc");
                }
            }
        }
        private string _reqMatUsuCodCanc;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataCanc
        {
            get { return _reqMatDataCanc; }
            set
            {
                if (_reqMatDataCanc != value)
                {
                    _reqMatDataCanc = value;
                    OnPropertyChanged("ReqMatDataCanc");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataCanc;
    
        [DataMember]
        public string ProdCodEstrRefer
        {
            get { return _prodCodEstrRefer; }
            set
            {
                if (_prodCodEstrRefer != value)
                {
                    ChangeTracker.RecordOriginalValue("ProdCodEstrRefer", _prodCodEstrRefer);
                    if (!IsDeserializing)
                    {
                        if (PRODUTO != null && PRODUTO.ProdCodEstr != value)
                        {
                            PRODUTO = null;
                        }
                    }
                    _prodCodEstrRefer = value;
                    OnPropertyChanged("ProdCodEstrRefer");
                }
            }
        }
        private string _prodCodEstrRefer;
    
        [DataMember]
        public string ReqMatOrig
        {
            get { return _reqMatOrig; }
            set
            {
                if (_reqMatOrig != value)
                {
                    _reqMatOrig = value;
                    OnPropertyChanged("ReqMatOrig");
                }
            }
        }
        private string _reqMatOrig;
    
        [DataMember]
        public string FinCompCod
        {
            get { return _finCompCod; }
            set
            {
                if (_finCompCod != value)
                {
                    _finCompCod = value;
                    OnPropertyChanged("FinCompCod");
                }
            }
        }
        private string _finCompCod;
    
        [DataMember]
        public string MotCancCodEstr
        {
            get { return _motCancCodEstr; }
            set
            {
                if (_motCancCodEstr != value)
                {
                    _motCancCodEstr = value;
                    OnPropertyChanged("MotCancCodEstr");
                }
            }
        }
        private string _motCancCodEstr;
    
        [DataMember]
        public string ReqMatTextoCanc
        {
            get { return _reqMatTextoCanc; }
            set
            {
                if (_reqMatTextoCanc != value)
                {
                    _reqMatTextoCanc = value;
                    OnPropertyChanged("ReqMatTextoCanc");
                }
            }
        }
        private string _reqMatTextoCanc;
    
        [DataMember]
        public string REQMATENTCOD
        {
            get { return _rEQMATENTCOD; }
            set
            {
                if (_rEQMATENTCOD != value)
                {
                    _rEQMATENTCOD = value;
                    OnPropertyChanged("REQMATENTCOD");
                }
            }
        }
        private string _rEQMATENTCOD;
    
        [DataMember]
        public string OBJCODESTR
        {
            get { return _oBJCODESTR; }
            set
            {
                if (_oBJCODESTR != value)
                {
                    _oBJCODESTR = value;
                    OnPropertyChanged("OBJCODESTR");
                }
            }
        }
        private string _oBJCODESTR;
    
        [DataMember]
        public string EntCodSolic
        {
            get { return _entCodSolic; }
            set
            {
                if (_entCodSolic != value)
                {
                    _entCodSolic = value;
                    OnPropertyChanged("EntCodSolic");
                }
            }
        }
        private string _entCodSolic;
    
        [DataMember]
        public string EntCodRetirou
        {
            get { return _entCodRetirou; }
            set
            {
                if (_entCodRetirou != value)
                {
                    _entCodRetirou = value;
                    OnPropertyChanged("EntCodRetirou");
                }
            }
        }
        private string _entCodRetirou;
    
        [DataMember]
        public Nullable<System.DateTime> REQMATDATAINISEPARAC
        {
            get { return _rEQMATDATAINISEPARAC; }
            set
            {
                if (_rEQMATDATAINISEPARAC != value)
                {
                    _rEQMATDATAINISEPARAC = value;
                    OnPropertyChanged("REQMATDATAINISEPARAC");
                }
            }
        }
        private Nullable<System.DateTime> _rEQMATDATAINISEPARAC;
    
        [DataMember]
        public Nullable<System.DateTime> REQMATDATAFIMSEPARAC
        {
            get { return _rEQMATDATAFIMSEPARAC; }
            set
            {
                if (_rEQMATDATAFIMSEPARAC != value)
                {
                    _rEQMATDATAFIMSEPARAC = value;
                    OnPropertyChanged("REQMATDATAFIMSEPARAC");
                }
            }
        }
        private Nullable<System.DateTime> _rEQMATDATAFIMSEPARAC;
    
        [DataMember]
        public string REQMATCONFERESEPARAC
        {
            get { return _rEQMATCONFERESEPARAC; }
            set
            {
                if (_rEQMATCONFERESEPARAC != value)
                {
                    _rEQMATCONFERESEPARAC = value;
                    OnPropertyChanged("REQMATCONFERESEPARAC");
                }
            }
        }
        private string _rEQMATCONFERESEPARAC;
    
        [DataMember]
        public string REQMATUSUCODRETIROU
        {
            get { return _rEQMATUSUCODRETIROU; }
            set
            {
                if (_rEQMATUSUCODRETIROU != value)
                {
                    _rEQMATUSUCODRETIROU = value;
                    OnPropertyChanged("REQMATUSUCODRETIROU");
                }
            }
        }
        private string _rEQMATUSUCODRETIROU;
    
        [DataMember]
        public string OrdProducNum
        {
            get { return _ordProducNum; }
            set
            {
                if (_ordProducNum != value)
                {
                    ChangeTracker.RecordOriginalValue("OrdProducNum", _ordProducNum);
                    if (!IsDeserializing)
                    {
                        if (ORD_PRODUC != null && ORD_PRODUC.OrdProducNum != value)
                        {
                            var previousValue = _oRD_PRODUC;
                            _oRD_PRODUC = null;
                            FixupORD_PRODUC(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("ORD_PRODUC");
                        }
                    }
                    _ordProducNum = value;
                    OnPropertyChanged("OrdProducNum");
                }
            }
        }
        private string _ordProducNum;
    
        [DataMember]
        public Nullable<System.DateTime> REQMATDATAHORADIG
        {
            get { return _rEQMATDATAHORADIG; }
            set
            {
                if (_rEQMATDATAHORADIG != value)
                {
                    _rEQMATDATAHORADIG = value;
                    OnPropertyChanged("REQMATDATAHORADIG");
                }
            }
        }
        private Nullable<System.DateTime> _rEQMATDATAHORADIG;
    
        [DataMember]
        public Nullable<int> IdVerbaGerencProj
        {
            get { return _idVerbaGerencProj; }
            set
            {
                if (_idVerbaGerencProj != value)
                {
                    _idVerbaGerencProj = value;
                    OnPropertyChanged("IdVerbaGerencProj");
                }
            }
        }
        private Nullable<int> _idVerbaGerencProj;
    
        [DataMember]
        public Nullable<int> IDGERENCPROJ
        {
            get { return _iDGERENCPROJ; }
            set
            {
                if (_iDGERENCPROJ != value)
                {
                    _iDGERENCPROJ = value;
                    OnPropertyChanged("IDGERENCPROJ");
                }
            }
        }
        private Nullable<int> _iDGERENCPROJ;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataMenorAtend
        {
            get { return _reqMatDataMenorAtend; }
            set
            {
                if (_reqMatDataMenorAtend != value)
                {
                    _reqMatDataMenorAtend = value;
                    OnPropertyChanged("ReqMatDataMenorAtend");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataMenorAtend;
    
        [DataMember]
        public Nullable<System.DateTime> ReqMatDataMaiorAtend
        {
            get { return _reqMatDataMaiorAtend; }
            set
            {
                if (_reqMatDataMaiorAtend != value)
                {
                    _reqMatDataMaiorAtend = value;
                    OnPropertyChanged("ReqMatDataMaiorAtend");
                }
            }
        }
        private Nullable<System.DateTime> _reqMatDataMaiorAtend;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ITEM_REQ_MAT> ITEM_REQ_MAT
        {
            get
            {
                if (_iTEM_REQ_MAT == null)
                {
                    _iTEM_REQ_MAT = new TrackableCollection<ITEM_REQ_MAT>();
                    _iTEM_REQ_MAT.CollectionChanged += FixupITEM_REQ_MAT;
                }
                return _iTEM_REQ_MAT;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_REQ_MAT, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_REQ_MAT != null)
                    {
                        _iTEM_REQ_MAT.CollectionChanged -= FixupITEM_REQ_MAT;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ITEM_REQ_MAT item in _iTEM_REQ_MAT)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _iTEM_REQ_MAT = value;
                    if (_iTEM_REQ_MAT != null)
                    {
                        _iTEM_REQ_MAT.CollectionChanged += FixupITEM_REQ_MAT;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ITEM_REQ_MAT item in _iTEM_REQ_MAT)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ITEM_REQ_MAT");
                }
            }
        }
        private TrackableCollection<ITEM_REQ_MAT> _iTEM_REQ_MAT;
    
        [DataMember]
        public LOC_ARMAZ LOC_ARMAZ
        {
            get { return _lOC_ARMAZ; }
            set
            {
                if (!ReferenceEquals(_lOC_ARMAZ, value))
                {
                    var previousValue = _lOC_ARMAZ;
                    _lOC_ARMAZ = value;
                    FixupLOC_ARMAZ(previousValue);
                    OnNavigationPropertyChanged("LOC_ARMAZ");
                }
            }
        }
        private LOC_ARMAZ _lOC_ARMAZ;
    
        [DataMember]
        public TrackableCollection<RATEIO_REQ_MAT> RATEIO_REQ_MAT
        {
            get
            {
                if (_rATEIO_REQ_MAT == null)
                {
                    _rATEIO_REQ_MAT = new TrackableCollection<RATEIO_REQ_MAT>();
                    _rATEIO_REQ_MAT.CollectionChanged += FixupRATEIO_REQ_MAT;
                }
                return _rATEIO_REQ_MAT;
            }
            set
            {
                if (!ReferenceEquals(_rATEIO_REQ_MAT, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rATEIO_REQ_MAT != null)
                    {
                        _rATEIO_REQ_MAT.CollectionChanged -= FixupRATEIO_REQ_MAT;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RATEIO_REQ_MAT item in _rATEIO_REQ_MAT)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rATEIO_REQ_MAT = value;
                    if (_rATEIO_REQ_MAT != null)
                    {
                        _rATEIO_REQ_MAT.CollectionChanged += FixupRATEIO_REQ_MAT;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RATEIO_REQ_MAT item in _rATEIO_REQ_MAT)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RATEIO_REQ_MAT");
                }
            }
        }
        private TrackableCollection<RATEIO_REQ_MAT> _rATEIO_REQ_MAT;
    
        [DataMember]
        public TrackableCollection<REQ_MAT_CLASSE_REC_DESP> REQ_MAT_CLASSE_REC_DESP
        {
            get
            {
                if (_rEQ_MAT_CLASSE_REC_DESP == null)
                {
                    _rEQ_MAT_CLASSE_REC_DESP = new TrackableCollection<REQ_MAT_CLASSE_REC_DESP>();
                    _rEQ_MAT_CLASSE_REC_DESP.CollectionChanged += FixupREQ_MAT_CLASSE_REC_DESP;
                }
                return _rEQ_MAT_CLASSE_REC_DESP;
            }
            set
            {
                if (!ReferenceEquals(_rEQ_MAT_CLASSE_REC_DESP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rEQ_MAT_CLASSE_REC_DESP != null)
                    {
                        _rEQ_MAT_CLASSE_REC_DESP.CollectionChanged -= FixupREQ_MAT_CLASSE_REC_DESP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (REQ_MAT_CLASSE_REC_DESP item in _rEQ_MAT_CLASSE_REC_DESP)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rEQ_MAT_CLASSE_REC_DESP = value;
                    if (_rEQ_MAT_CLASSE_REC_DESP != null)
                    {
                        _rEQ_MAT_CLASSE_REC_DESP.CollectionChanged += FixupREQ_MAT_CLASSE_REC_DESP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (REQ_MAT_CLASSE_REC_DESP item in _rEQ_MAT_CLASSE_REC_DESP)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("REQ_MAT_CLASSE_REC_DESP");
                }
            }
        }
        private TrackableCollection<REQ_MAT_CLASSE_REC_DESP> _rEQ_MAT_CLASSE_REC_DESP;
    
        [DataMember]
        public TrackableCollection<REQ_MAT> REQ_MAT1
        {
            get
            {
                if (_rEQ_MAT1 == null)
                {
                    _rEQ_MAT1 = new TrackableCollection<REQ_MAT>();
                    _rEQ_MAT1.CollectionChanged += FixupREQ_MAT1;
                }
                return _rEQ_MAT1;
            }
            set
            {
                if (!ReferenceEquals(_rEQ_MAT1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rEQ_MAT1 != null)
                    {
                        _rEQ_MAT1.CollectionChanged -= FixupREQ_MAT1;
                    }
                    _rEQ_MAT1 = value;
                    if (_rEQ_MAT1 != null)
                    {
                        _rEQ_MAT1.CollectionChanged += FixupREQ_MAT1;
                    }
                    OnNavigationPropertyChanged("REQ_MAT1");
                }
            }
        }
        private TrackableCollection<REQ_MAT> _rEQ_MAT1;
    
        [DataMember]
        public REQ_MAT REQ_MAT2
        {
            get { return _rEQ_MAT2; }
            set
            {
                if (!ReferenceEquals(_rEQ_MAT2, value))
                {
                    var previousValue = _rEQ_MAT2;
                    _rEQ_MAT2 = value;
                    FixupREQ_MAT2(previousValue);
                    OnNavigationPropertyChanged("REQ_MAT2");
                }
            }
        }
        private REQ_MAT _rEQ_MAT2;
    
        [DataMember]
        public PRODUTO PRODUTO
        {
            get { return _pRODUTO; }
            set
            {
                if (!ReferenceEquals(_pRODUTO, value))
                {
                    var previousValue = _pRODUTO;
                    _pRODUTO = value;
                    FixupPRODUTO(previousValue);
                    OnNavigationPropertyChanged("PRODUTO");
                }
            }
        }
        private PRODUTO _pRODUTO;
    
        [DataMember]
        public ORD_PRODUC ORD_PRODUC
        {
            get { return _oRD_PRODUC; }
            set
            {
                if (!ReferenceEquals(_oRD_PRODUC, value))
                {
                    var previousValue = _oRD_PRODUC;
                    _oRD_PRODUC = value;
                    FixupORD_PRODUC(previousValue);
                    OnNavigationPropertyChanged("ORD_PRODUC");
                }
            }
        }
        private ORD_PRODUC _oRD_PRODUC;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ITEM_REQ_MAT.Clear();
            LOC_ARMAZ = null;
            RATEIO_REQ_MAT.Clear();
            REQ_MAT_CLASSE_REC_DESP.Clear();
            REQ_MAT1.Clear();
            REQ_MAT2 = null;
            PRODUTO = null;
            ORD_PRODUC = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupLOC_ARMAZ(LOC_ARMAZ previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REQ_MAT.Contains(this))
            {
                previousValue.REQ_MAT.Remove(this);
            }
    
            if (LOC_ARMAZ != null)
            {
                if (!LOC_ARMAZ.REQ_MAT.Contains(this))
                {
                    LOC_ARMAZ.REQ_MAT.Add(this);
                }
    
                LocArmazCodEstr = LOC_ARMAZ.LocArmazCodEstr;
            }
            else if (!skipKeys)
            {
                LocArmazCodEstr = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LOC_ARMAZ")
                    && (ChangeTracker.OriginalValues["LOC_ARMAZ"] == LOC_ARMAZ))
                {
                    ChangeTracker.OriginalValues.Remove("LOC_ARMAZ");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LOC_ARMAZ", previousValue);
                }
                if (LOC_ARMAZ != null && !LOC_ARMAZ.ChangeTracker.ChangeTrackingEnabled)
                {
                    LOC_ARMAZ.StartTracking();
                }
            }
        }
    
        private void FixupREQ_MAT2(REQ_MAT previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REQ_MAT1.Contains(this))
            {
                previousValue.REQ_MAT1.Remove(this);
            }
    
            if (REQ_MAT2 != null)
            {
                if (!REQ_MAT2.REQ_MAT1.Contains(this))
                {
                    REQ_MAT2.REQ_MAT1.Add(this);
                }
    
                EmpCod = REQ_MAT2.EmpCod;
                ReqMatRef = REQ_MAT2.ReqMatNum;
            }
            else if (!skipKeys)
            {
                ReqMatRef = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("REQ_MAT2")
                    && (ChangeTracker.OriginalValues["REQ_MAT2"] == REQ_MAT2))
                {
                    ChangeTracker.OriginalValues.Remove("REQ_MAT2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("REQ_MAT2", previousValue);
                }
                if (REQ_MAT2 != null && !REQ_MAT2.ChangeTracker.ChangeTrackingEnabled)
                {
                    REQ_MAT2.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO(PRODUTO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REQ_MAT.Contains(this))
            {
                previousValue.REQ_MAT.Remove(this);
            }
    
            if (PRODUTO != null)
            {
                if (!PRODUTO.REQ_MAT.Contains(this))
                {
                    PRODUTO.REQ_MAT.Add(this);
                }
    
                ProdCodEstrRefer = PRODUTO.ProdCodEstr;
            }
            else if (!skipKeys)
            {
                ProdCodEstrRefer = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO")
                    && (ChangeTracker.OriginalValues["PRODUTO"] == PRODUTO))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO", previousValue);
                }
                if (PRODUTO != null && !PRODUTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO.StartTracking();
                }
            }
        }
    
        private void FixupORD_PRODUC(ORD_PRODUC previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REQ_MAT.Contains(this))
            {
                previousValue.REQ_MAT.Remove(this);
            }
    
            if (ORD_PRODUC != null)
            {
                if (!ORD_PRODUC.REQ_MAT.Contains(this))
                {
                    ORD_PRODUC.REQ_MAT.Add(this);
                }
    
                EmpCod = ORD_PRODUC.EmpCod;
                OrdProducNum = ORD_PRODUC.OrdProducNum;
            }
            else if (!skipKeys)
            {
                OrdProducNum = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ORD_PRODUC")
                    && (ChangeTracker.OriginalValues["ORD_PRODUC"] == ORD_PRODUC))
                {
                    ChangeTracker.OriginalValues.Remove("ORD_PRODUC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ORD_PRODUC", previousValue);
                }
                if (ORD_PRODUC != null && !ORD_PRODUC.ChangeTracker.ChangeTrackingEnabled)
                {
                    ORD_PRODUC.StartTracking();
                }
            }
        }
    
        private void FixupITEM_REQ_MAT(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_REQ_MAT item in e.NewItems)
                {
                    item.REQ_MAT = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_REQ_MAT", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_REQ_MAT item in e.OldItems)
                {
                    if (ReferenceEquals(item.REQ_MAT, this))
                    {
                        item.REQ_MAT = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_REQ_MAT", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRATEIO_REQ_MAT(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RATEIO_REQ_MAT item in e.NewItems)
                {
                    item.REQ_MAT = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RATEIO_REQ_MAT", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RATEIO_REQ_MAT item in e.OldItems)
                {
                    if (ReferenceEquals(item.REQ_MAT, this))
                    {
                        item.REQ_MAT = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RATEIO_REQ_MAT", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupREQ_MAT_CLASSE_REC_DESP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (REQ_MAT_CLASSE_REC_DESP item in e.NewItems)
                {
                    item.REQ_MAT = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("REQ_MAT_CLASSE_REC_DESP", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REQ_MAT_CLASSE_REC_DESP item in e.OldItems)
                {
                    if (ReferenceEquals(item.REQ_MAT, this))
                    {
                        item.REQ_MAT = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("REQ_MAT_CLASSE_REC_DESP", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupREQ_MAT1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (REQ_MAT item in e.NewItems)
                {
                    item.REQ_MAT2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("REQ_MAT1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REQ_MAT item in e.OldItems)
                {
                    if (ReferenceEquals(item.REQ_MAT2, this))
                    {
                        item.REQ_MAT2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("REQ_MAT1", item);
                    }
                }
            }
        }

        #endregion

    }
}
