//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LOC_ARMAZ))]
    [KnownType(typeof(PRODUTO1))]
    public partial class ESTQ_LOC_ARMAZ: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string LocArmazCodEstr
        {
            get { return _locArmazCodEstr; }
            set
            {
                if (_locArmazCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LocArmazCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (LOC_ARMAZ != null && LOC_ARMAZ.LocArmazCodEstr != value)
                        {
                            LOC_ARMAZ = null;
                        }
                    }
                    _locArmazCodEstr = value;
                    OnPropertyChanged("LocArmazCodEstr");
                }
            }
        }
        private string _locArmazCodEstr;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PRODUTO1 != null && PRODUTO1.ProdCodEstr != value)
                        {
                            PRODUTO1 = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public Nullable<decimal> EstqLocArmazQtd
        {
            get { return _estqLocArmazQtd; }
            set
            {
                if (_estqLocArmazQtd != value)
                {
                    _estqLocArmazQtd = value;
                    OnPropertyChanged("EstqLocArmazQtd");
                }
            }
        }
        private Nullable<decimal> _estqLocArmazQtd;
    
        [DataMember]
        public Nullable<short> EstqLocArmazPrior
        {
            get { return _estqLocArmazPrior; }
            set
            {
                if (_estqLocArmazPrior != value)
                {
                    _estqLocArmazPrior = value;
                    OnPropertyChanged("EstqLocArmazPrior");
                }
            }
        }
        private Nullable<short> _estqLocArmazPrior;
    
        [DataMember]
        public string EstqLocArmazLocaliz
        {
            get { return _estqLocArmazLocaliz; }
            set
            {
                if (_estqLocArmazLocaliz != value)
                {
                    _estqLocArmazLocaliz = value;
                    OnPropertyChanged("EstqLocArmazLocaliz");
                }
            }
        }
        private string _estqLocArmazLocaliz;
    
        [DataMember]
        public Nullable<decimal> EstqLocArmazQtdLim
        {
            get { return _estqLocArmazQtdLim; }
            set
            {
                if (_estqLocArmazQtdLim != value)
                {
                    _estqLocArmazQtdLim = value;
                    OnPropertyChanged("EstqLocArmazQtdLim");
                }
            }
        }
        private Nullable<decimal> _estqLocArmazQtdLim;
    
        [DataMember]
        public string EstqLocArmazEntraRatSldZero
        {
            get { return _estqLocArmazEntraRatSldZero; }
            set
            {
                if (_estqLocArmazEntraRatSldZero != value)
                {
                    _estqLocArmazEntraRatSldZero = value;
                    OnPropertyChanged("EstqLocArmazEntraRatSldZero");
                }
            }
        }
        private string _estqLocArmazEntraRatSldZero;
    
        [DataMember]
        public string EstqLocArmazStat
        {
            get { return _estqLocArmazStat; }
            set
            {
                if (_estqLocArmazStat != value)
                {
                    _estqLocArmazStat = value;
                    OnPropertyChanged("EstqLocArmazStat");
                }
            }
        }
        private string _estqLocArmazStat;
    
        [DataMember]
        public Nullable<int> IdProdId
        {
            get { return _idProdId; }
            set
            {
                if (_idProdId != value)
                {
                    _idProdId = value;
                    OnPropertyChanged("IdProdId");
                }
            }
        }
        private Nullable<int> _idProdId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public LOC_ARMAZ LOC_ARMAZ
        {
            get { return _lOC_ARMAZ; }
            set
            {
                if (!ReferenceEquals(_lOC_ARMAZ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (LocArmazCodEstr != value.LocArmazCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _lOC_ARMAZ;
                    _lOC_ARMAZ = value;
                    FixupLOC_ARMAZ(previousValue);
                    OnNavigationPropertyChanged("LOC_ARMAZ");
                }
            }
        }
        private LOC_ARMAZ _lOC_ARMAZ;
    
        [DataMember]
        public PRODUTO1 PRODUTO1
        {
            get { return _pRODUTO1; }
            set
            {
                if (!ReferenceEquals(_pRODUTO1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProdCodEstr != value.ProdCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pRODUTO1;
                    _pRODUTO1 = value;
                    FixupPRODUTO1(previousValue);
                    OnNavigationPropertyChanged("PRODUTO1");
                }
            }
        }
        private PRODUTO1 _pRODUTO1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            LOC_ARMAZ = null;
            PRODUTO1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupLOC_ARMAZ(LOC_ARMAZ previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ESTQ_LOC_ARMAZ.Contains(this))
            {
                previousValue.ESTQ_LOC_ARMAZ.Remove(this);
            }
    
            if (LOC_ARMAZ != null)
            {
                if (!LOC_ARMAZ.ESTQ_LOC_ARMAZ.Contains(this))
                {
                    LOC_ARMAZ.ESTQ_LOC_ARMAZ.Add(this);
                }
    
                LocArmazCodEstr = LOC_ARMAZ.LocArmazCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LOC_ARMAZ")
                    && (ChangeTracker.OriginalValues["LOC_ARMAZ"] == LOC_ARMAZ))
                {
                    ChangeTracker.OriginalValues.Remove("LOC_ARMAZ");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LOC_ARMAZ", previousValue);
                }
                if (LOC_ARMAZ != null && !LOC_ARMAZ.ChangeTracker.ChangeTrackingEnabled)
                {
                    LOC_ARMAZ.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO1(PRODUTO1 previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ESTQ_LOC_ARMAZ.Contains(this))
            {
                previousValue.ESTQ_LOC_ARMAZ.Remove(this);
            }
    
            if (PRODUTO1 != null)
            {
                if (!PRODUTO1.ESTQ_LOC_ARMAZ.Contains(this))
                {
                    PRODUTO1.ESTQ_LOC_ARMAZ.Add(this);
                }
    
                ProdCodEstr = PRODUTO1.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO1")
                    && (ChangeTracker.OriginalValues["PRODUTO1"] == PRODUTO1))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO1", previousValue);
                }
                if (PRODUTO1 != null && !PRODUTO1.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO1.StartTracking();
                }
            }
        }

        #endregion

    }
}
