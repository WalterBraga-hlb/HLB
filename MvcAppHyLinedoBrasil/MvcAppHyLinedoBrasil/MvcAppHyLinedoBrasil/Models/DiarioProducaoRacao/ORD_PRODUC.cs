//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ITEM_NEC_PLAN_PRODUC))]
    [KnownType(typeof(OPER_ORD_PRODUC))]
    [KnownType(typeof(ORD_PRODUC))]
    [KnownType(typeof(LOC_ARMAZ))]
    [KnownType(typeof(ITEM_REQ_MAT))]
    [KnownType(typeof(PROD_UNID_MED))]
    [KnownType(typeof(PRODUTO))]
    [KnownType(typeof(REQ_MAT))]
    public partial class ORD_PRODUC: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_NEC_PLAN_PRODUC != null && ITEM_NEC_PLAN_PRODUC.EmpCod != value)
                        {
                            var previousValue = _iTEM_NEC_PLAN_PRODUC;
                            _iTEM_NEC_PLAN_PRODUC = null;
                            FixupITEM_NEC_PLAN_PRODUC(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("ITEM_NEC_PLAN_PRODUC");
                        }
                        if (ORD_PRODUC2 != null && ORD_PRODUC2.EmpCod != value)
                        {
                            var previousValue = _oRD_PRODUC2;
                            _oRD_PRODUC2 = null;
                            FixupORD_PRODUC2(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("ORD_PRODUC2");
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string OrdProducNum
        {
            get { return _ordProducNum; }
            set
            {
                if (_ordProducNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrdProducNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _ordProducNum = value;
                    OnPropertyChanged("OrdProducNum");
                }
            }
        }
        private string _ordProducNum;
    
        [DataMember]
        public string PlanProducNum
        {
            get { return _planProducNum; }
            set
            {
                if (_planProducNum != value)
                {
                    ChangeTracker.RecordOriginalValue("PlanProducNum", _planProducNum);
                    if (!IsDeserializing)
                    {
                        if (ITEM_NEC_PLAN_PRODUC != null && ITEM_NEC_PLAN_PRODUC.PlanProducNum != value)
                        {
                            var previousValue = _iTEM_NEC_PLAN_PRODUC;
                            _iTEM_NEC_PLAN_PRODUC = null;
                            FixupITEM_NEC_PLAN_PRODUC(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("ITEM_NEC_PLAN_PRODUC");
                        }
                    }
                    _planProducNum = value;
                    OnPropertyChanged("PlanProducNum");
                }
            }
        }
        private string _planProducNum;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    ChangeTracker.RecordOriginalValue("ProdCodEstr", _prodCodEstr);
                    if (!IsDeserializing)
                    {
                        if (ITEM_NEC_PLAN_PRODUC != null && ITEM_NEC_PLAN_PRODUC.ProdCodEstr != value)
                        {
                            var previousValue = _iTEM_NEC_PLAN_PRODUC;
                            _iTEM_NEC_PLAN_PRODUC = null;
                            FixupITEM_NEC_PLAN_PRODUC(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("ITEM_NEC_PLAN_PRODUC");
                        }
                        if (PROD_UNID_MED != null && PROD_UNID_MED.ProdCodEstr != value)
                        {
                            var previousValue = _pROD_UNID_MED;
                            _pROD_UNID_MED = null;
                            FixupPROD_UNID_MED(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("PROD_UNID_MED");
                        }
                        if (PRODUTO != null && PRODUTO.ProdCodEstr != value)
                        {
                            PRODUTO = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public Nullable<int> ItNecPlanProducSeq
        {
            get { return _itNecPlanProducSeq; }
            set
            {
                if (_itNecPlanProducSeq != value)
                {
                    ChangeTracker.RecordOriginalValue("ItNecPlanProducSeq", _itNecPlanProducSeq);
                    if (!IsDeserializing)
                    {
                        if (ITEM_NEC_PLAN_PRODUC != null && ITEM_NEC_PLAN_PRODUC.ItNecPlanProducSeq != value)
                        {
                            var previousValue = _iTEM_NEC_PLAN_PRODUC;
                            _iTEM_NEC_PLAN_PRODUC = null;
                            FixupITEM_NEC_PLAN_PRODUC(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("ITEM_NEC_PLAN_PRODUC");
                        }
                    }
                    _itNecPlanProducSeq = value;
                    OnPropertyChanged("ItNecPlanProducSeq");
                }
            }
        }
        private Nullable<int> _itNecPlanProducSeq;
    
        [DataMember]
        public string OrdProducSerie
        {
            get { return _ordProducSerie; }
            set
            {
                if (_ordProducSerie != value)
                {
                    _ordProducSerie = value;
                    OnPropertyChanged("OrdProducSerie");
                }
            }
        }
        private string _ordProducSerie;
    
        [DataMember]
        public Nullable<System.DateTime> OrdProducDataEmis
        {
            get { return _ordProducDataEmis; }
            set
            {
                if (_ordProducDataEmis != value)
                {
                    _ordProducDataEmis = value;
                    OnPropertyChanged("OrdProducDataEmis");
                }
            }
        }
        private Nullable<System.DateTime> _ordProducDataEmis;
    
        [DataMember]
        public Nullable<decimal> OrdProducQtdNec
        {
            get { return _ordProducQtdNec; }
            set
            {
                if (_ordProducQtdNec != value)
                {
                    _ordProducQtdNec = value;
                    OnPropertyChanged("OrdProducQtdNec");
                }
            }
        }
        private Nullable<decimal> _ordProducQtdNec;
    
        [DataMember]
        public Nullable<decimal> OrdProducQtdBoa
        {
            get { return _ordProducQtdBoa; }
            set
            {
                if (_ordProducQtdBoa != value)
                {
                    _ordProducQtdBoa = value;
                    OnPropertyChanged("OrdProducQtdBoa");
                }
            }
        }
        private Nullable<decimal> _ordProducQtdBoa;
    
        [DataMember]
        public Nullable<decimal> OrdProducQtdRefug
        {
            get { return _ordProducQtdRefug; }
            set
            {
                if (_ordProducQtdRefug != value)
                {
                    _ordProducQtdRefug = value;
                    OnPropertyChanged("OrdProducQtdRefug");
                }
            }
        }
        private Nullable<decimal> _ordProducQtdRefug;
    
        [DataMember]
        public Nullable<decimal> OrdProducQtdReproc
        {
            get { return _ordProducQtdReproc; }
            set
            {
                if (_ordProducQtdReproc != value)
                {
                    _ordProducQtdReproc = value;
                    OnPropertyChanged("OrdProducQtdReproc");
                }
            }
        }
        private Nullable<decimal> _ordProducQtdReproc;
    
        [DataMember]
        public string OrdProducStat
        {
            get { return _ordProducStat; }
            set
            {
                if (_ordProducStat != value)
                {
                    _ordProducStat = value;
                    OnPropertyChanged("OrdProducStat");
                }
            }
        }
        private string _ordProducStat;
    
        [DataMember]
        public string OrdProducTipo
        {
            get { return _ordProducTipo; }
            set
            {
                if (_ordProducTipo != value)
                {
                    _ordProducTipo = value;
                    OnPropertyChanged("OrdProducTipo");
                }
            }
        }
        private string _ordProducTipo;
    
        [DataMember]
        public string OrdProducNumRef
        {
            get { return _ordProducNumRef; }
            set
            {
                if (_ordProducNumRef != value)
                {
                    ChangeTracker.RecordOriginalValue("OrdProducNumRef", _ordProducNumRef);
                    if (!IsDeserializing)
                    {
                        if (ORD_PRODUC2 != null && ORD_PRODUC2.OrdProducNum != value)
                        {
                            var previousValue = _oRD_PRODUC2;
                            _oRD_PRODUC2 = null;
                            FixupORD_PRODUC2(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("ORD_PRODUC2");
                        }
                    }
                    _ordProducNumRef = value;
                    OnPropertyChanged("OrdProducNumRef");
                }
            }
        }
        private string _ordProducNumRef;
    
        [DataMember]
        public string OrdProducReqMat
        {
            get { return _ordProducReqMat; }
            set
            {
                if (_ordProducReqMat != value)
                {
                    _ordProducReqMat = value;
                    OnPropertyChanged("OrdProducReqMat");
                }
            }
        }
        private string _ordProducReqMat;
    
        [DataMember]
        public string OrdProducReqComp
        {
            get { return _ordProducReqComp; }
            set
            {
                if (_ordProducReqComp != value)
                {
                    _ordProducReqComp = value;
                    OnPropertyChanged("OrdProducReqComp");
                }
            }
        }
        private string _ordProducReqComp;
    
        [DataMember]
        public string ProdGradeCorCod
        {
            get { return _prodGradeCorCod; }
            set
            {
                if (_prodGradeCorCod != value)
                {
                    _prodGradeCorCod = value;
                    OnPropertyChanged("ProdGradeCorCod");
                }
            }
        }
        private string _prodGradeCorCod;
    
        [DataMember]
        public string EquipCodEstr
        {
            get { return _equipCodEstr; }
            set
            {
                if (_equipCodEstr != value)
                {
                    _equipCodEstr = value;
                    OnPropertyChanged("EquipCodEstr");
                }
            }
        }
        private string _equipCodEstr;
    
        [DataMember]
        public Nullable<decimal> OrdProducQtdNecPc
        {
            get { return _ordProducQtdNecPc; }
            set
            {
                if (_ordProducQtdNecPc != value)
                {
                    _ordProducQtdNecPc = value;
                    OnPropertyChanged("OrdProducQtdNecPc");
                }
            }
        }
        private Nullable<decimal> _ordProducQtdNecPc;
    
        [DataMember]
        public string OrdProducNumPrimEtiq
        {
            get { return _ordProducNumPrimEtiq; }
            set
            {
                if (_ordProducNumPrimEtiq != value)
                {
                    _ordProducNumPrimEtiq = value;
                    OnPropertyChanged("OrdProducNumPrimEtiq");
                }
            }
        }
        private string _ordProducNumPrimEtiq;
    
        [DataMember]
        public string OrdProducNumUltEtiq
        {
            get { return _ordProducNumUltEtiq; }
            set
            {
                if (_ordProducNumUltEtiq != value)
                {
                    _ordProducNumUltEtiq = value;
                    OnPropertyChanged("OrdProducNumUltEtiq");
                }
            }
        }
        private string _ordProducNumUltEtiq;
    
        [DataMember]
        public Nullable<decimal> OrdProducQtdNecDesm
        {
            get { return _ordProducQtdNecDesm; }
            set
            {
                if (_ordProducQtdNecDesm != value)
                {
                    _ordProducQtdNecDesm = value;
                    OnPropertyChanged("OrdProducQtdNecDesm");
                }
            }
        }
        private Nullable<decimal> _ordProducQtdNecDesm;
    
        [DataMember]
        public Nullable<decimal> OrdProducQtdNecPcDesm
        {
            get { return _ordProducQtdNecPcDesm; }
            set
            {
                if (_ordProducQtdNecPcDesm != value)
                {
                    _ordProducQtdNecPcDesm = value;
                    OnPropertyChanged("OrdProducQtdNecPcDesm");
                }
            }
        }
        private Nullable<decimal> _ordProducQtdNecPcDesm;
    
        [DataMember]
        public Nullable<decimal> OrdProducPesoPadrao
        {
            get { return _ordProducPesoPadrao; }
            set
            {
                if (_ordProducPesoPadrao != value)
                {
                    _ordProducPesoPadrao = value;
                    OnPropertyChanged("OrdProducPesoPadrao");
                }
            }
        }
        private Nullable<decimal> _ordProducPesoPadrao;
    
        [DataMember]
        public string OrdProducEtiqEmit
        {
            get { return _ordProducEtiqEmit; }
            set
            {
                if (_ordProducEtiqEmit != value)
                {
                    _ordProducEtiqEmit = value;
                    OnPropertyChanged("OrdProducEtiqEmit");
                }
            }
        }
        private string _ordProducEtiqEmit;
    
        [DataMember]
        public string LocArmazCodEstr
        {
            get { return _locArmazCodEstr; }
            set
            {
                if (_locArmazCodEstr != value)
                {
                    ChangeTracker.RecordOriginalValue("LocArmazCodEstr", _locArmazCodEstr);
                    if (!IsDeserializing)
                    {
                        if (LOC_ARMAZ != null && LOC_ARMAZ.LocArmazCodEstr != value)
                        {
                            LOC_ARMAZ = null;
                        }
                    }
                    _locArmazCodEstr = value;
                    OnPropertyChanged("LocArmazCodEstr");
                }
            }
        }
        private string _locArmazCodEstr;
    
        [DataMember]
        public string OrdProducProdDesativado
        {
            get { return _ordProducProdDesativado; }
            set
            {
                if (_ordProducProdDesativado != value)
                {
                    _ordProducProdDesativado = value;
                    OnPropertyChanged("OrdProducProdDesativado");
                }
            }
        }
        private string _ordProducProdDesativado;
    
        [DataMember]
        public string OrdProducTempo
        {
            get { return _ordProducTempo; }
            set
            {
                if (_ordProducTempo != value)
                {
                    _ordProducTempo = value;
                    OnPropertyChanged("OrdProducTempo");
                }
            }
        }
        private string _ordProducTempo;
    
        [DataMember]
        public Nullable<decimal> OrdProducTempoCent
        {
            get { return _ordProducTempoCent; }
            set
            {
                if (_ordProducTempoCent != value)
                {
                    _ordProducTempoCent = value;
                    OnPropertyChanged("OrdProducTempoCent");
                }
            }
        }
        private Nullable<decimal> _ordProducTempoCent;
    
        [DataMember]
        public Nullable<System.DateTime> OrdProducDataPrevEntrega
        {
            get { return _ordProducDataPrevEntrega; }
            set
            {
                if (_ordProducDataPrevEntrega != value)
                {
                    _ordProducDataPrevEntrega = value;
                    OnPropertyChanged("OrdProducDataPrevEntrega");
                }
            }
        }
        private Nullable<System.DateTime> _ordProducDataPrevEntrega;
    
        [DataMember]
        public Nullable<decimal> OrdProducComp
        {
            get { return _ordProducComp; }
            set
            {
                if (_ordProducComp != value)
                {
                    _ordProducComp = value;
                    OnPropertyChanged("OrdProducComp");
                }
            }
        }
        private Nullable<decimal> _ordProducComp;
    
        [DataMember]
        public Nullable<decimal> OrdProducAlt
        {
            get { return _ordProducAlt; }
            set
            {
                if (_ordProducAlt != value)
                {
                    _ordProducAlt = value;
                    OnPropertyChanged("OrdProducAlt");
                }
            }
        }
        private Nullable<decimal> _ordProducAlt;
    
        [DataMember]
        public Nullable<decimal> OrdProducLarg
        {
            get { return _ordProducLarg; }
            set
            {
                if (_ordProducLarg != value)
                {
                    _ordProducLarg = value;
                    OnPropertyChanged("OrdProducLarg");
                }
            }
        }
        private Nullable<decimal> _ordProducLarg;
    
        [DataMember]
        public Nullable<decimal> OrdProducEspaco
        {
            get { return _ordProducEspaco; }
            set
            {
                if (_ordProducEspaco != value)
                {
                    _ordProducEspaco = value;
                    OnPropertyChanged("OrdProducEspaco");
                }
            }
        }
        private Nullable<decimal> _ordProducEspaco;
    
        [DataMember]
        public string ProdUnidMedCod
        {
            get { return _prodUnidMedCod; }
            set
            {
                if (_prodUnidMedCod != value)
                {
                    ChangeTracker.RecordOriginalValue("ProdUnidMedCod", _prodUnidMedCod);
                    if (!IsDeserializing)
                    {
                        if (PROD_UNID_MED != null && PROD_UNID_MED.ProdUnidMedCod != value)
                        {
                            var previousValue = _pROD_UNID_MED;
                            _pROD_UNID_MED = null;
                            FixupPROD_UNID_MED(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("PROD_UNID_MED");
                        }
                    }
                    _prodUnidMedCod = value;
                    OnPropertyChanged("ProdUnidMedCod");
                }
            }
        }
        private string _prodUnidMedCod;
    
        [DataMember]
        public Nullable<short> ProdUnidMedPos
        {
            get { return _prodUnidMedPos; }
            set
            {
                if (_prodUnidMedPos != value)
                {
                    ChangeTracker.RecordOriginalValue("ProdUnidMedPos", _prodUnidMedPos);
                    if (!IsDeserializing)
                    {
                        if (PROD_UNID_MED != null && PROD_UNID_MED.ProdUnidMedPos != value)
                        {
                            var previousValue = _pROD_UNID_MED;
                            _pROD_UNID_MED = null;
                            FixupPROD_UNID_MED(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("PROD_UNID_MED");
                        }
                    }
                    _prodUnidMedPos = value;
                    OnPropertyChanged("ProdUnidMedPos");
                }
            }
        }
        private Nullable<short> _prodUnidMedPos;
    
        [DataMember]
        public string OrdProducTipoOrd
        {
            get { return _ordProducTipoOrd; }
            set
            {
                if (_ordProducTipoOrd != value)
                {
                    _ordProducTipoOrd = value;
                    OnPropertyChanged("OrdProducTipoOrd");
                }
            }
        }
        private string _ordProducTipoOrd;
    
        [DataMember]
        public string GranjaCod
        {
            get { return _granjaCod; }
            set
            {
                if (_granjaCod != value)
                {
                    _granjaCod = value;
                    OnPropertyChanged("GranjaCod");
                }
            }
        }
        private string _granjaCod;
    
        [DataMember]
        public string PedVendaNum
        {
            get { return _pedVendaNum; }
            set
            {
                if (_pedVendaNum != value)
                {
                    _pedVendaNum = value;
                    OnPropertyChanged("PedVendaNum");
                }
            }
        }
        private string _pedVendaNum;
    
        [DataMember]
        public Nullable<System.DateTime> OrdProducDataPrevProd
        {
            get { return _ordProducDataPrevProd; }
            set
            {
                if (_ordProducDataPrevProd != value)
                {
                    _ordProducDataPrevProd = value;
                    OnPropertyChanged("OrdProducDataPrevProd");
                }
            }
        }
        private Nullable<System.DateTime> _ordProducDataPrevProd;
    
        [DataMember]
        public Nullable<System.DateTime> OrdProducDataLiberacao
        {
            get { return _ordProducDataLiberacao; }
            set
            {
                if (_ordProducDataLiberacao != value)
                {
                    _ordProducDataLiberacao = value;
                    OnPropertyChanged("OrdProducDataLiberacao");
                }
            }
        }
        private Nullable<System.DateTime> _ordProducDataLiberacao;
    
        [DataMember]
        public string LoteCriaCod
        {
            get { return _loteCriaCod; }
            set
            {
                if (_loteCriaCod != value)
                {
                    _loteCriaCod = value;
                    OnPropertyChanged("LoteCriaCod");
                }
            }
        }
        private string _loteCriaCod;
    
        [DataMember]
        public string FormProdCod
        {
            get { return _formProdCod; }
            set
            {
                if (_formProdCod != value)
                {
                    _formProdCod = value;
                    OnPropertyChanged("FormProdCod");
                }
            }
        }
        private string _formProdCod;
    
        [DataMember]
        public string CCtrlCodEstr
        {
            get { return _cCtrlCodEstr; }
            set
            {
                if (_cCtrlCodEstr != value)
                {
                    _cCtrlCodEstr = value;
                    OnPropertyChanged("CCtrlCodEstr");
                }
            }
        }
        private string _cCtrlCodEstr;
    
        [DataMember]
        public string OrdProducPedVendaNumOrig
        {
            get { return _ordProducPedVendaNumOrig; }
            set
            {
                if (_ordProducPedVendaNumOrig != value)
                {
                    _ordProducPedVendaNumOrig = value;
                    OnPropertyChanged("OrdProducPedVendaNumOrig");
                }
            }
        }
        private string _ordProducPedVendaNumOrig;
    
        [DataMember]
        public string CtrlLoteNum
        {
            get { return _ctrlLoteNum; }
            set
            {
                if (_ctrlLoteNum != value)
                {
                    _ctrlLoteNum = value;
                    OnPropertyChanged("CtrlLoteNum");
                }
            }
        }
        private string _ctrlLoteNum;
    
        [DataMember]
        public Nullable<System.DateTime> CtrlLoteDataValid
        {
            get { return _ctrlLoteDataValid; }
            set
            {
                if (_ctrlLoteDataValid != value)
                {
                    _ctrlLoteDataValid = value;
                    OnPropertyChanged("CtrlLoteDataValid");
                }
            }
        }
        private Nullable<System.DateTime> _ctrlLoteDataValid;
    
        [DataMember]
        public string OrdProducFinalidade
        {
            get { return _ordProducFinalidade; }
            set
            {
                if (_ordProducFinalidade != value)
                {
                    _ordProducFinalidade = value;
                    OnPropertyChanged("OrdProducFinalidade");
                }
            }
        }
        private string _ordProducFinalidade;
    
        [DataMember]
        public Nullable<decimal> OrdProducQtdEmp
        {
            get { return _ordProducQtdEmp; }
            set
            {
                if (_ordProducQtdEmp != value)
                {
                    _ordProducQtdEmp = value;
                    OnPropertyChanged("OrdProducQtdEmp");
                }
            }
        }
        private Nullable<decimal> _ordProducQtdEmp;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string OrdProducObs
        {
            get { return _ordProducObs; }
            set
            {
                if (_ordProducObs != value)
                {
                    _ordProducObs = value;
                    OnPropertyChanged("OrdProducObs");
                }
            }
        }
        private string _ordProducObs;
    
        [DataMember]
        public string GeraNumLoteCod
        {
            get { return _geraNumLoteCod; }
            set
            {
                if (_geraNumLoteCod != value)
                {
                    _geraNumLoteCod = value;
                    OnPropertyChanged("GeraNumLoteCod");
                }
            }
        }
        private string _geraNumLoteCod;
    
        [DataMember]
        public Nullable<System.DateTime> OrdProducDtEntrgDesSetProj
        {
            get { return _ordProducDtEntrgDesSetProj; }
            set
            {
                if (_ordProducDtEntrgDesSetProj != value)
                {
                    _ordProducDtEntrgDesSetProj = value;
                    OnPropertyChanged("OrdProducDtEntrgDesSetProj");
                }
            }
        }
        private Nullable<System.DateTime> _ordProducDtEntrgDesSetProj;
    
        [DataMember]
        public Nullable<System.DateTime> OrdProducDtRecebSetProj
        {
            get { return _ordProducDtRecebSetProj; }
            set
            {
                if (_ordProducDtRecebSetProj != value)
                {
                    _ordProducDtRecebSetProj = value;
                    OnPropertyChanged("OrdProducDtRecebSetProj");
                }
            }
        }
        private Nullable<System.DateTime> _ordProducDtRecebSetProj;
    
        [DataMember]
        public Nullable<int> OrdProducNumRevisao
        {
            get { return _ordProducNumRevisao; }
            set
            {
                if (_ordProducNumRevisao != value)
                {
                    _ordProducNumRevisao = value;
                    OnPropertyChanged("OrdProducNumRevisao");
                }
            }
        }
        private Nullable<int> _ordProducNumRevisao;
    
        [DataMember]
        public string OrdProducOrigem
        {
            get { return _ordProducOrigem; }
            set
            {
                if (_ordProducOrigem != value)
                {
                    _ordProducOrigem = value;
                    OnPropertyChanged("OrdProducOrigem");
                }
            }
        }
        private string _ordProducOrigem;
    
        [DataMember]
        public string OrdProducEmpCodPedVendaOrig
        {
            get { return _ordProducEmpCodPedVendaOrig; }
            set
            {
                if (_ordProducEmpCodPedVendaOrig != value)
                {
                    _ordProducEmpCodPedVendaOrig = value;
                    OnPropertyChanged("OrdProducEmpCodPedVendaOrig");
                }
            }
        }
        private string _ordProducEmpCodPedVendaOrig;
    
        [DataMember]
        public Nullable<System.DateTime> ORDPRODUCDTFIN
        {
            get { return _oRDPRODUCDTFIN; }
            set
            {
                if (_oRDPRODUCDTFIN != value)
                {
                    _oRDPRODUCDTFIN = value;
                    OnPropertyChanged("ORDPRODUCDTFIN");
                }
            }
        }
        private Nullable<System.DateTime> _oRDPRODUCDTFIN;
    
        [DataMember]
        public Nullable<int> IDGeraNumSer
        {
            get { return _iDGeraNumSer; }
            set
            {
                if (_iDGeraNumSer != value)
                {
                    _iDGeraNumSer = value;
                    OnPropertyChanged("IDGeraNumSer");
                }
            }
        }
        private Nullable<int> _iDGeraNumSer;
    
        [DataMember]
        public Nullable<System.DateTime> OrdProducDtEncer
        {
            get { return _ordProducDtEncer; }
            set
            {
                if (_ordProducDtEncer != value)
                {
                    _ordProducDtEncer = value;
                    OnPropertyChanged("OrdProducDtEncer");
                }
            }
        }
        private Nullable<System.DateTime> _ordProducDtEncer;
    
        [DataMember]
        public string OrdProducOrigMod
        {
            get { return _ordProducOrigMod; }
            set
            {
                if (_ordProducOrigMod != value)
                {
                    _ordProducOrigMod = value;
                    OnPropertyChanged("OrdProducOrigMod");
                }
            }
        }
        private string _ordProducOrigMod;
    
        [DataMember]
        public Nullable<int> IdProdId
        {
            get { return _idProdId; }
            set
            {
                if (_idProdId != value)
                {
                    _idProdId = value;
                    OnPropertyChanged("IdProdId");
                }
            }
        }
        private Nullable<int> _idProdId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ITEM_NEC_PLAN_PRODUC ITEM_NEC_PLAN_PRODUC
        {
            get { return _iTEM_NEC_PLAN_PRODUC; }
            set
            {
                if (!ReferenceEquals(_iTEM_NEC_PLAN_PRODUC, value))
                {
                    var previousValue = _iTEM_NEC_PLAN_PRODUC;
                    _iTEM_NEC_PLAN_PRODUC = value;
                    FixupITEM_NEC_PLAN_PRODUC(previousValue);
                    OnNavigationPropertyChanged("ITEM_NEC_PLAN_PRODUC");
                }
            }
        }
        private ITEM_NEC_PLAN_PRODUC _iTEM_NEC_PLAN_PRODUC;
    
        [DataMember]
        public TrackableCollection<OPER_ORD_PRODUC> OPER_ORD_PRODUC
        {
            get
            {
                if (_oPER_ORD_PRODUC == null)
                {
                    _oPER_ORD_PRODUC = new TrackableCollection<OPER_ORD_PRODUC>();
                    _oPER_ORD_PRODUC.CollectionChanged += FixupOPER_ORD_PRODUC;
                }
                return _oPER_ORD_PRODUC;
            }
            set
            {
                if (!ReferenceEquals(_oPER_ORD_PRODUC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_oPER_ORD_PRODUC != null)
                    {
                        _oPER_ORD_PRODUC.CollectionChanged -= FixupOPER_ORD_PRODUC;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (OPER_ORD_PRODUC item in _oPER_ORD_PRODUC)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _oPER_ORD_PRODUC = value;
                    if (_oPER_ORD_PRODUC != null)
                    {
                        _oPER_ORD_PRODUC.CollectionChanged += FixupOPER_ORD_PRODUC;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (OPER_ORD_PRODUC item in _oPER_ORD_PRODUC)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("OPER_ORD_PRODUC");
                }
            }
        }
        private TrackableCollection<OPER_ORD_PRODUC> _oPER_ORD_PRODUC;
    
        [DataMember]
        public TrackableCollection<ORD_PRODUC> ORD_PRODUC1
        {
            get
            {
                if (_oRD_PRODUC1 == null)
                {
                    _oRD_PRODUC1 = new TrackableCollection<ORD_PRODUC>();
                    _oRD_PRODUC1.CollectionChanged += FixupORD_PRODUC1;
                }
                return _oRD_PRODUC1;
            }
            set
            {
                if (!ReferenceEquals(_oRD_PRODUC1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_oRD_PRODUC1 != null)
                    {
                        _oRD_PRODUC1.CollectionChanged -= FixupORD_PRODUC1;
                    }
                    _oRD_PRODUC1 = value;
                    if (_oRD_PRODUC1 != null)
                    {
                        _oRD_PRODUC1.CollectionChanged += FixupORD_PRODUC1;
                    }
                    OnNavigationPropertyChanged("ORD_PRODUC1");
                }
            }
        }
        private TrackableCollection<ORD_PRODUC> _oRD_PRODUC1;
    
        [DataMember]
        public ORD_PRODUC ORD_PRODUC2
        {
            get { return _oRD_PRODUC2; }
            set
            {
                if (!ReferenceEquals(_oRD_PRODUC2, value))
                {
                    var previousValue = _oRD_PRODUC2;
                    _oRD_PRODUC2 = value;
                    FixupORD_PRODUC2(previousValue);
                    OnNavigationPropertyChanged("ORD_PRODUC2");
                }
            }
        }
        private ORD_PRODUC _oRD_PRODUC2;
    
        [DataMember]
        public LOC_ARMAZ LOC_ARMAZ
        {
            get { return _lOC_ARMAZ; }
            set
            {
                if (!ReferenceEquals(_lOC_ARMAZ, value))
                {
                    var previousValue = _lOC_ARMAZ;
                    _lOC_ARMAZ = value;
                    FixupLOC_ARMAZ(previousValue);
                    OnNavigationPropertyChanged("LOC_ARMAZ");
                }
            }
        }
        private LOC_ARMAZ _lOC_ARMAZ;
    
        [DataMember]
        public TrackableCollection<ITEM_REQ_MAT> ITEM_REQ_MAT
        {
            get
            {
                if (_iTEM_REQ_MAT == null)
                {
                    _iTEM_REQ_MAT = new TrackableCollection<ITEM_REQ_MAT>();
                    _iTEM_REQ_MAT.CollectionChanged += FixupITEM_REQ_MAT;
                }
                return _iTEM_REQ_MAT;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_REQ_MAT, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_REQ_MAT != null)
                    {
                        _iTEM_REQ_MAT.CollectionChanged -= FixupITEM_REQ_MAT;
                    }
                    _iTEM_REQ_MAT = value;
                    if (_iTEM_REQ_MAT != null)
                    {
                        _iTEM_REQ_MAT.CollectionChanged += FixupITEM_REQ_MAT;
                    }
                    OnNavigationPropertyChanged("ITEM_REQ_MAT");
                }
            }
        }
        private TrackableCollection<ITEM_REQ_MAT> _iTEM_REQ_MAT;
    
        [DataMember]
        public PROD_UNID_MED PROD_UNID_MED
        {
            get { return _pROD_UNID_MED; }
            set
            {
                if (!ReferenceEquals(_pROD_UNID_MED, value))
                {
                    var previousValue = _pROD_UNID_MED;
                    _pROD_UNID_MED = value;
                    FixupPROD_UNID_MED(previousValue);
                    OnNavigationPropertyChanged("PROD_UNID_MED");
                }
            }
        }
        private PROD_UNID_MED _pROD_UNID_MED;
    
        [DataMember]
        public PRODUTO PRODUTO
        {
            get { return _pRODUTO; }
            set
            {
                if (!ReferenceEquals(_pRODUTO, value))
                {
                    var previousValue = _pRODUTO;
                    _pRODUTO = value;
                    FixupPRODUTO(previousValue);
                    OnNavigationPropertyChanged("PRODUTO");
                }
            }
        }
        private PRODUTO _pRODUTO;
    
        [DataMember]
        public TrackableCollection<REQ_MAT> REQ_MAT
        {
            get
            {
                if (_rEQ_MAT == null)
                {
                    _rEQ_MAT = new TrackableCollection<REQ_MAT>();
                    _rEQ_MAT.CollectionChanged += FixupREQ_MAT;
                }
                return _rEQ_MAT;
            }
            set
            {
                if (!ReferenceEquals(_rEQ_MAT, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rEQ_MAT != null)
                    {
                        _rEQ_MAT.CollectionChanged -= FixupREQ_MAT;
                    }
                    _rEQ_MAT = value;
                    if (_rEQ_MAT != null)
                    {
                        _rEQ_MAT.CollectionChanged += FixupREQ_MAT;
                    }
                    OnNavigationPropertyChanged("REQ_MAT");
                }
            }
        }
        private TrackableCollection<REQ_MAT> _rEQ_MAT;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ITEM_NEC_PLAN_PRODUC = null;
            OPER_ORD_PRODUC.Clear();
            ORD_PRODUC1.Clear();
            ORD_PRODUC2 = null;
            LOC_ARMAZ = null;
            ITEM_REQ_MAT.Clear();
            PROD_UNID_MED = null;
            PRODUTO = null;
            REQ_MAT.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupITEM_NEC_PLAN_PRODUC(ITEM_NEC_PLAN_PRODUC previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ORD_PRODUC.Contains(this))
            {
                previousValue.ORD_PRODUC.Remove(this);
            }
    
            if (ITEM_NEC_PLAN_PRODUC != null)
            {
                if (!ITEM_NEC_PLAN_PRODUC.ORD_PRODUC.Contains(this))
                {
                    ITEM_NEC_PLAN_PRODUC.ORD_PRODUC.Add(this);
                }
    
                EmpCod = ITEM_NEC_PLAN_PRODUC.EmpCod;
                PlanProducNum = ITEM_NEC_PLAN_PRODUC.PlanProducNum;
                ProdCodEstr = ITEM_NEC_PLAN_PRODUC.ProdCodEstr;
                ItNecPlanProducSeq = ITEM_NEC_PLAN_PRODUC.ItNecPlanProducSeq;
            }
            else if (!skipKeys)
            {
                PlanProducNum = null;
                ItNecPlanProducSeq = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ITEM_NEC_PLAN_PRODUC")
                    && (ChangeTracker.OriginalValues["ITEM_NEC_PLAN_PRODUC"] == ITEM_NEC_PLAN_PRODUC))
                {
                    ChangeTracker.OriginalValues.Remove("ITEM_NEC_PLAN_PRODUC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ITEM_NEC_PLAN_PRODUC", previousValue);
                }
                if (ITEM_NEC_PLAN_PRODUC != null && !ITEM_NEC_PLAN_PRODUC.ChangeTracker.ChangeTrackingEnabled)
                {
                    ITEM_NEC_PLAN_PRODUC.StartTracking();
                }
            }
        }
    
        private void FixupORD_PRODUC2(ORD_PRODUC previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ORD_PRODUC1.Contains(this))
            {
                previousValue.ORD_PRODUC1.Remove(this);
            }
    
            if (ORD_PRODUC2 != null)
            {
                if (!ORD_PRODUC2.ORD_PRODUC1.Contains(this))
                {
                    ORD_PRODUC2.ORD_PRODUC1.Add(this);
                }
    
                EmpCod = ORD_PRODUC2.EmpCod;
                OrdProducNumRef = ORD_PRODUC2.OrdProducNum;
            }
            else if (!skipKeys)
            {
                OrdProducNumRef = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ORD_PRODUC2")
                    && (ChangeTracker.OriginalValues["ORD_PRODUC2"] == ORD_PRODUC2))
                {
                    ChangeTracker.OriginalValues.Remove("ORD_PRODUC2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ORD_PRODUC2", previousValue);
                }
                if (ORD_PRODUC2 != null && !ORD_PRODUC2.ChangeTracker.ChangeTrackingEnabled)
                {
                    ORD_PRODUC2.StartTracking();
                }
            }
        }
    
        private void FixupLOC_ARMAZ(LOC_ARMAZ previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ORD_PRODUC.Contains(this))
            {
                previousValue.ORD_PRODUC.Remove(this);
            }
    
            if (LOC_ARMAZ != null)
            {
                if (!LOC_ARMAZ.ORD_PRODUC.Contains(this))
                {
                    LOC_ARMAZ.ORD_PRODUC.Add(this);
                }
    
                LocArmazCodEstr = LOC_ARMAZ.LocArmazCodEstr;
            }
            else if (!skipKeys)
            {
                LocArmazCodEstr = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LOC_ARMAZ")
                    && (ChangeTracker.OriginalValues["LOC_ARMAZ"] == LOC_ARMAZ))
                {
                    ChangeTracker.OriginalValues.Remove("LOC_ARMAZ");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LOC_ARMAZ", previousValue);
                }
                if (LOC_ARMAZ != null && !LOC_ARMAZ.ChangeTracker.ChangeTrackingEnabled)
                {
                    LOC_ARMAZ.StartTracking();
                }
            }
        }
    
        private void FixupPROD_UNID_MED(PROD_UNID_MED previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ORD_PRODUC.Contains(this))
            {
                previousValue.ORD_PRODUC.Remove(this);
            }
    
            if (PROD_UNID_MED != null)
            {
                if (!PROD_UNID_MED.ORD_PRODUC.Contains(this))
                {
                    PROD_UNID_MED.ORD_PRODUC.Add(this);
                }
    
                ProdCodEstr = PROD_UNID_MED.ProdCodEstr;
                ProdUnidMedCod = PROD_UNID_MED.ProdUnidMedCod;
                ProdUnidMedPos = PROD_UNID_MED.ProdUnidMedPos;
            }
            else if (!skipKeys)
            {
                ProdUnidMedCod = null;
                ProdUnidMedPos = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PROD_UNID_MED")
                    && (ChangeTracker.OriginalValues["PROD_UNID_MED"] == PROD_UNID_MED))
                {
                    ChangeTracker.OriginalValues.Remove("PROD_UNID_MED");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PROD_UNID_MED", previousValue);
                }
                if (PROD_UNID_MED != null && !PROD_UNID_MED.ChangeTracker.ChangeTrackingEnabled)
                {
                    PROD_UNID_MED.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO(PRODUTO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ORD_PRODUC.Contains(this))
            {
                previousValue.ORD_PRODUC.Remove(this);
            }
    
            if (PRODUTO != null)
            {
                if (!PRODUTO.ORD_PRODUC.Contains(this))
                {
                    PRODUTO.ORD_PRODUC.Add(this);
                }
    
                ProdCodEstr = PRODUTO.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO")
                    && (ChangeTracker.OriginalValues["PRODUTO"] == PRODUTO))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO", previousValue);
                }
                if (PRODUTO != null && !PRODUTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO.StartTracking();
                }
            }
        }
    
        private void FixupOPER_ORD_PRODUC(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OPER_ORD_PRODUC item in e.NewItems)
                {
                    item.ORD_PRODUC = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OPER_ORD_PRODUC", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OPER_ORD_PRODUC item in e.OldItems)
                {
                    if (ReferenceEquals(item.ORD_PRODUC, this))
                    {
                        item.ORD_PRODUC = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OPER_ORD_PRODUC", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupORD_PRODUC1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ORD_PRODUC item in e.NewItems)
                {
                    item.ORD_PRODUC2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ORD_PRODUC1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ORD_PRODUC item in e.OldItems)
                {
                    if (ReferenceEquals(item.ORD_PRODUC2, this))
                    {
                        item.ORD_PRODUC2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ORD_PRODUC1", item);
                    }
                }
            }
        }
    
        private void FixupITEM_REQ_MAT(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_REQ_MAT item in e.NewItems)
                {
                    item.ORD_PRODUC = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_REQ_MAT", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_REQ_MAT item in e.OldItems)
                {
                    if (ReferenceEquals(item.ORD_PRODUC, this))
                    {
                        item.ORD_PRODUC = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_REQ_MAT", item);
                    }
                }
            }
        }
    
        private void FixupREQ_MAT(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (REQ_MAT item in e.NewItems)
                {
                    item.ORD_PRODUC = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("REQ_MAT", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REQ_MAT item in e.OldItems)
                {
                    if (ReferenceEquals(item.ORD_PRODUC, this))
                    {
                        item.ORD_PRODUC = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("REQ_MAT", item);
                    }
                }
            }
        }

        #endregion

    }
}
