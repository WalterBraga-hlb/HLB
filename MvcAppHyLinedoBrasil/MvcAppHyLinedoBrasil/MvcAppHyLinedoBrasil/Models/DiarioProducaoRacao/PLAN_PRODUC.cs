//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ITEM_PLAN_PRODUC))]
    [KnownType(typeof(NEC_PLAN_PRODUC))]
    public partial class PLAN_PRODUC: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string PlanProducNum
        {
            get { return _planProducNum; }
            set
            {
                if (_planProducNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PlanProducNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _planProducNum = value;
                    OnPropertyChanged("PlanProducNum");
                }
            }
        }
        private string _planProducNum;
    
        [DataMember]
        public string PlanProducNome
        {
            get { return _planProducNome; }
            set
            {
                if (_planProducNome != value)
                {
                    _planProducNome = value;
                    OnPropertyChanged("PlanProducNome");
                }
            }
        }
        private string _planProducNome;
    
        [DataMember]
        public Nullable<System.DateTime> PlanProducData
        {
            get { return _planProducData; }
            set
            {
                if (_planProducData != value)
                {
                    _planProducData = value;
                    OnPropertyChanged("PlanProducData");
                }
            }
        }
        private Nullable<System.DateTime> _planProducData;
    
        [DataMember]
        public Nullable<System.DateTime> PlanProducDataInic
        {
            get { return _planProducDataInic; }
            set
            {
                if (_planProducDataInic != value)
                {
                    _planProducDataInic = value;
                    OnPropertyChanged("PlanProducDataInic");
                }
            }
        }
        private Nullable<System.DateTime> _planProducDataInic;
    
        [DataMember]
        public Nullable<System.DateTime> PlanProducDataFim
        {
            get { return _planProducDataFim; }
            set
            {
                if (_planProducDataFim != value)
                {
                    _planProducDataFim = value;
                    OnPropertyChanged("PlanProducDataFim");
                }
            }
        }
        private Nullable<System.DateTime> _planProducDataFim;
    
        [DataMember]
        public string PlanProducCompEstq
        {
            get { return _planProducCompEstq; }
            set
            {
                if (_planProducCompEstq != value)
                {
                    _planProducCompEstq = value;
                    OnPropertyChanged("PlanProducCompEstq");
                }
            }
        }
        private string _planProducCompEstq;
    
        [DataMember]
        public string PlanProducConsidLoteEcon
        {
            get { return _planProducConsidLoteEcon; }
            set
            {
                if (_planProducConsidLoteEcon != value)
                {
                    _planProducConsidLoteEcon = value;
                    OnPropertyChanged("PlanProducConsidLoteEcon");
                }
            }
        }
        private string _planProducConsidLoteEcon;
    
        [DataMember]
        public string PlanProducConsidEstq
        {
            get { return _planProducConsidEstq; }
            set
            {
                if (_planProducConsidEstq != value)
                {
                    _planProducConsidEstq = value;
                    OnPropertyChanged("PlanProducConsidEstq");
                }
            }
        }
        private string _planProducConsidEstq;
    
        [DataMember]
        public string PlanProducDesativado
        {
            get { return _planProducDesativado; }
            set
            {
                if (_planProducDesativado != value)
                {
                    _planProducDesativado = value;
                    OnPropertyChanged("PlanProducDesativado");
                }
            }
        }
        private string _planProducDesativado;
    
        [DataMember]
        public string LoteCriaCod
        {
            get { return _loteCriaCod; }
            set
            {
                if (_loteCriaCod != value)
                {
                    _loteCriaCod = value;
                    OnPropertyChanged("LoteCriaCod");
                }
            }
        }
        private string _loteCriaCod;
    
        [DataMember]
        public string CCtrlCodEstr
        {
            get { return _cCtrlCodEstr; }
            set
            {
                if (_cCtrlCodEstr != value)
                {
                    _cCtrlCodEstr = value;
                    OnPropertyChanged("CCtrlCodEstr");
                }
            }
        }
        private string _cCtrlCodEstr;
    
        [DataMember]
        public string GranjaCod
        {
            get { return _granjaCod; }
            set
            {
                if (_granjaCod != value)
                {
                    _granjaCod = value;
                    OnPropertyChanged("GranjaCod");
                }
            }
        }
        private string _granjaCod;
    
        [DataMember]
        public string PlanProducSimul
        {
            get { return _planProducSimul; }
            set
            {
                if (_planProducSimul != value)
                {
                    _planProducSimul = value;
                    OnPropertyChanged("PlanProducSimul");
                }
            }
        }
        private string _planProducSimul;
    
        [DataMember]
        public Nullable<System.DateTime> PlanProducDtHoraNec
        {
            get { return _planProducDtHoraNec; }
            set
            {
                if (_planProducDtHoraNec != value)
                {
                    _planProducDtHoraNec = value;
                    OnPropertyChanged("PlanProducDtHoraNec");
                }
            }
        }
        private Nullable<System.DateTime> _planProducDtHoraNec;
    
        [DataMember]
        public string OrcNum
        {
            get { return _orcNum; }
            set
            {
                if (_orcNum != value)
                {
                    _orcNum = value;
                    OnPropertyChanged("OrcNum");
                }
            }
        }
        private string _orcNum;
    
        [DataMember]
        public string PlanProducStat
        {
            get { return _planProducStat; }
            set
            {
                if (_planProducStat != value)
                {
                    _planProducStat = value;
                    OnPropertyChanged("PlanProducStat");
                }
            }
        }
        private string _planProducStat;
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ITEM_PLAN_PRODUC> ITEM_PLAN_PRODUC
        {
            get
            {
                if (_iTEM_PLAN_PRODUC == null)
                {
                    _iTEM_PLAN_PRODUC = new TrackableCollection<ITEM_PLAN_PRODUC>();
                    _iTEM_PLAN_PRODUC.CollectionChanged += FixupITEM_PLAN_PRODUC;
                }
                return _iTEM_PLAN_PRODUC;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_PLAN_PRODUC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_PLAN_PRODUC != null)
                    {
                        _iTEM_PLAN_PRODUC.CollectionChanged -= FixupITEM_PLAN_PRODUC;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ITEM_PLAN_PRODUC item in _iTEM_PLAN_PRODUC)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _iTEM_PLAN_PRODUC = value;
                    if (_iTEM_PLAN_PRODUC != null)
                    {
                        _iTEM_PLAN_PRODUC.CollectionChanged += FixupITEM_PLAN_PRODUC;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ITEM_PLAN_PRODUC item in _iTEM_PLAN_PRODUC)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ITEM_PLAN_PRODUC");
                }
            }
        }
        private TrackableCollection<ITEM_PLAN_PRODUC> _iTEM_PLAN_PRODUC;
    
        [DataMember]
        public NEC_PLAN_PRODUC NEC_PLAN_PRODUC
        {
            get { return _nEC_PLAN_PRODUC; }
            set
            {
                if (!ReferenceEquals(_nEC_PLAN_PRODUC, value))
                {
                    var previousValue = _nEC_PLAN_PRODUC;
                    _nEC_PLAN_PRODUC = value;
                    FixupNEC_PLAN_PRODUC(previousValue);
                    OnNavigationPropertyChanged("NEC_PLAN_PRODUC");
                }
            }
        }
        private NEC_PLAN_PRODUC _nEC_PLAN_PRODUC;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ITEM_PLAN_PRODUC.Clear();
            NEC_PLAN_PRODUC = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupNEC_PLAN_PRODUC(NEC_PLAN_PRODUC previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (NEC_PLAN_PRODUC != null)
            {
                ChangeTracker.ObjectStateChanging += NEC_PLAN_PRODUC.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.PLAN_PRODUC, this))
            {
                previousValue.PLAN_PRODUC = null;
            }
    
            if (NEC_PLAN_PRODUC != null)
            {
                NEC_PLAN_PRODUC.PLAN_PRODUC = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NEC_PLAN_PRODUC")
                    && (ChangeTracker.OriginalValues["NEC_PLAN_PRODUC"] == NEC_PLAN_PRODUC))
                {
                    ChangeTracker.OriginalValues.Remove("NEC_PLAN_PRODUC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NEC_PLAN_PRODUC", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (NEC_PLAN_PRODUC != null && !NEC_PLAN_PRODUC.ChangeTracker.ChangeTrackingEnabled)
                {
                    NEC_PLAN_PRODUC.StartTracking();
                }
            }
        }
    
        private void FixupITEM_PLAN_PRODUC(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_PLAN_PRODUC item in e.NewItems)
                {
                    item.PLAN_PRODUC = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_PLAN_PRODUC", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_PLAN_PRODUC item in e.OldItems)
                {
                    if (ReferenceEquals(item.PLAN_PRODUC, this))
                    {
                        item.PLAN_PRODUC = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_PLAN_PRODUC", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
