//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models.DiarioProducaoRacao
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ORD_PRODUC))]
    [KnownType(typeof(OPER_ORD_PRODUC_FUNC))]
    [KnownType(typeof(LOC_ARMAZ))]
    [KnownType(typeof(PROD_UNID_MED))]
    public partial class OPER_ORD_PRODUC: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ORD_PRODUC != null && ORD_PRODUC.EmpCod != value)
                        {
                            ORD_PRODUC = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string OrdProducNum
        {
            get { return _ordProducNum; }
            set
            {
                if (_ordProducNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrdProducNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ORD_PRODUC != null && ORD_PRODUC.OrdProducNum != value)
                        {
                            ORD_PRODUC = null;
                        }
                    }
                    _ordProducNum = value;
                    OnPropertyChanged("OrdProducNum");
                }
            }
        }
        private string _ordProducNum;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PROD_UNID_MED != null && PROD_UNID_MED.ProdCodEstr != value)
                        {
                            var previousValue = _pROD_UNID_MED;
                            _pROD_UNID_MED = null;
                            FixupPROD_UNID_MED(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("PROD_UNID_MED");
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public short ProdOperSeq
        {
            get { return _prodOperSeq; }
            set
            {
                if (_prodOperSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdOperSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _prodOperSeq = value;
                    OnPropertyChanged("ProdOperSeq");
                }
            }
        }
        private short _prodOperSeq;
    
        [DataMember]
        public int OperOrdProducSeq
        {
            get { return _operOrdProducSeq; }
            set
            {
                if (_operOrdProducSeq != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OperOrdProducSeq' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _operOrdProducSeq = value;
                    OnPropertyChanged("OperOrdProducSeq");
                }
            }
        }
        private int _operOrdProducSeq;
    
        [DataMember]
        public string CCtrlCodEstr
        {
            get { return _cCtrlCodEstr; }
            set
            {
                if (_cCtrlCodEstr != value)
                {
                    _cCtrlCodEstr = value;
                    OnPropertyChanged("CCtrlCodEstr");
                }
            }
        }
        private string _cCtrlCodEstr;
    
        [DataMember]
        public string OperOrdProducStat
        {
            get { return _operOrdProducStat; }
            set
            {
                if (_operOrdProducStat != value)
                {
                    _operOrdProducStat = value;
                    OnPropertyChanged("OperOrdProducStat");
                }
            }
        }
        private string _operOrdProducStat;
    
        [DataMember]
        public Nullable<System.DateTime> OperOrdProducDataHoraInic
        {
            get { return _operOrdProducDataHoraInic; }
            set
            {
                if (_operOrdProducDataHoraInic != value)
                {
                    _operOrdProducDataHoraInic = value;
                    OnPropertyChanged("OperOrdProducDataHoraInic");
                }
            }
        }
        private Nullable<System.DateTime> _operOrdProducDataHoraInic;
    
        [DataMember]
        public Nullable<System.DateTime> OperOrdProducDataHoraFim
        {
            get { return _operOrdProducDataHoraFim; }
            set
            {
                if (_operOrdProducDataHoraFim != value)
                {
                    _operOrdProducDataHoraFim = value;
                    OnPropertyChanged("OperOrdProducDataHoraFim");
                }
            }
        }
        private Nullable<System.DateTime> _operOrdProducDataHoraFim;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducQtdBoa
        {
            get { return _operOrdProducQtdBoa; }
            set
            {
                if (_operOrdProducQtdBoa != value)
                {
                    _operOrdProducQtdBoa = value;
                    OnPropertyChanged("OperOrdProducQtdBoa");
                }
            }
        }
        private Nullable<decimal> _operOrdProducQtdBoa;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducQtdRefug
        {
            get { return _operOrdProducQtdRefug; }
            set
            {
                if (_operOrdProducQtdRefug != value)
                {
                    _operOrdProducQtdRefug = value;
                    OnPropertyChanged("OperOrdProducQtdRefug");
                }
            }
        }
        private Nullable<decimal> _operOrdProducQtdRefug;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducQtdReproc
        {
            get { return _operOrdProducQtdReproc; }
            set
            {
                if (_operOrdProducQtdReproc != value)
                {
                    _operOrdProducQtdReproc = value;
                    OnPropertyChanged("OperOrdProducQtdReproc");
                }
            }
        }
        private Nullable<decimal> _operOrdProducQtdReproc;
    
        [DataMember]
        public string EquipCodEstr
        {
            get { return _equipCodEstr; }
            set
            {
                if (_equipCodEstr != value)
                {
                    _equipCodEstr = value;
                    OnPropertyChanged("EquipCodEstr");
                }
            }
        }
        private string _equipCodEstr;
    
        [DataMember]
        public string OperCod
        {
            get { return _operCod; }
            set
            {
                if (_operCod != value)
                {
                    _operCod = value;
                    OnPropertyChanged("OperCod");
                }
            }
        }
        private string _operCod;
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;
    
        [DataMember]
        public string ProdGradeCorCod
        {
            get { return _prodGradeCorCod; }
            set
            {
                if (_prodGradeCorCod != value)
                {
                    _prodGradeCorCod = value;
                    OnPropertyChanged("ProdGradeCorCod");
                }
            }
        }
        private string _prodGradeCorCod;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducTempoCent
        {
            get { return _operOrdProducTempoCent; }
            set
            {
                if (_operOrdProducTempoCent != value)
                {
                    _operOrdProducTempoCent = value;
                    OnPropertyChanged("OperOrdProducTempoCent");
                }
            }
        }
        private Nullable<decimal> _operOrdProducTempoCent;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string OperOrdProducDocEspec
        {
            get { return _operOrdProducDocEspec; }
            set
            {
                if (_operOrdProducDocEspec != value)
                {
                    _operOrdProducDocEspec = value;
                    OnPropertyChanged("OperOrdProducDocEspec");
                }
            }
        }
        private string _operOrdProducDocEspec;
    
        [DataMember]
        public string OperOrdProducDocSerie
        {
            get { return _operOrdProducDocSerie; }
            set
            {
                if (_operOrdProducDocSerie != value)
                {
                    _operOrdProducDocSerie = value;
                    OnPropertyChanged("OperOrdProducDocSerie");
                }
            }
        }
        private string _operOrdProducDocSerie;
    
        [DataMember]
        public string OperOrdProducDocNum
        {
            get { return _operOrdProducDocNum; }
            set
            {
                if (_operOrdProducDocNum != value)
                {
                    _operOrdProducDocNum = value;
                    OnPropertyChanged("OperOrdProducDocNum");
                }
            }
        }
        private string _operOrdProducDocNum;
    
        [DataMember]
        public string OperOrdProducApont
        {
            get { return _operOrdProducApont; }
            set
            {
                if (_operOrdProducApont != value)
                {
                    _operOrdProducApont = value;
                    OnPropertyChanged("OperOrdProducApont");
                }
            }
        }
        private string _operOrdProducApont;
    
        [DataMember]
        public string OperOrdProducGerReqMat
        {
            get { return _operOrdProducGerReqMat; }
            set
            {
                if (_operOrdProducGerReqMat != value)
                {
                    _operOrdProducGerReqMat = value;
                    OnPropertyChanged("OperOrdProducGerReqMat");
                }
            }
        }
        private string _operOrdProducGerReqMat;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducPesoUnitProd
        {
            get { return _operOrdProducPesoUnitProd; }
            set
            {
                if (_operOrdProducPesoUnitProd != value)
                {
                    _operOrdProducPesoUnitProd = value;
                    OnPropertyChanged("OperOrdProducPesoUnitProd");
                }
            }
        }
        private Nullable<decimal> _operOrdProducPesoUnitProd;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducQtdRetalho
        {
            get { return _operOrdProducQtdRetalho; }
            set
            {
                if (_operOrdProducQtdRetalho != value)
                {
                    _operOrdProducQtdRetalho = value;
                    OnPropertyChanged("OperOrdProducQtdRetalho");
                }
            }
        }
        private Nullable<decimal> _operOrdProducQtdRetalho;
    
        [DataMember]
        public string AtivGrpCodEstr
        {
            get { return _ativGrpCodEstr; }
            set
            {
                if (_ativGrpCodEstr != value)
                {
                    _ativGrpCodEstr = value;
                    OnPropertyChanged("AtivGrpCodEstr");
                }
            }
        }
        private string _ativGrpCodEstr;
    
        [DataMember]
        public string OperOrdProducGeraLoteAutom
        {
            get { return _operOrdProducGeraLoteAutom; }
            set
            {
                if (_operOrdProducGeraLoteAutom != value)
                {
                    _operOrdProducGeraLoteAutom = value;
                    OnPropertyChanged("OperOrdProducGeraLoteAutom");
                }
            }
        }
        private string _operOrdProducGeraLoteAutom;
    
        [DataMember]
        public string ProdUnidMedCod
        {
            get { return _prodUnidMedCod; }
            set
            {
                if (_prodUnidMedCod != value)
                {
                    ChangeTracker.RecordOriginalValue("ProdUnidMedCod", _prodUnidMedCod);
                    if (!IsDeserializing)
                    {
                        if (PROD_UNID_MED != null && PROD_UNID_MED.ProdUnidMedCod != value)
                        {
                            var previousValue = _pROD_UNID_MED;
                            _pROD_UNID_MED = null;
                            FixupPROD_UNID_MED(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("PROD_UNID_MED");
                        }
                    }
                    _prodUnidMedCod = value;
                    OnPropertyChanged("ProdUnidMedCod");
                }
            }
        }
        private string _prodUnidMedCod;
    
        [DataMember]
        public Nullable<short> ProdUnidMedPos
        {
            get { return _prodUnidMedPos; }
            set
            {
                if (_prodUnidMedPos != value)
                {
                    ChangeTracker.RecordOriginalValue("ProdUnidMedPos", _prodUnidMedPos);
                    if (!IsDeserializing)
                    {
                        if (PROD_UNID_MED != null && PROD_UNID_MED.ProdUnidMedPos != value)
                        {
                            var previousValue = _pROD_UNID_MED;
                            _pROD_UNID_MED = null;
                            FixupPROD_UNID_MED(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("PROD_UNID_MED");
                        }
                    }
                    _prodUnidMedPos = value;
                    OnPropertyChanged("ProdUnidMedPos");
                }
            }
        }
        private Nullable<short> _prodUnidMedPos;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducCompBruto
        {
            get { return _operOrdProducCompBruto; }
            set
            {
                if (_operOrdProducCompBruto != value)
                {
                    _operOrdProducCompBruto = value;
                    OnPropertyChanged("OperOrdProducCompBruto");
                }
            }
        }
        private Nullable<decimal> _operOrdProducCompBruto;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducCompLiq
        {
            get { return _operOrdProducCompLiq; }
            set
            {
                if (_operOrdProducCompLiq != value)
                {
                    _operOrdProducCompLiq = value;
                    OnPropertyChanged("OperOrdProducCompLiq");
                }
            }
        }
        private Nullable<decimal> _operOrdProducCompLiq;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducAltBruta
        {
            get { return _operOrdProducAltBruta; }
            set
            {
                if (_operOrdProducAltBruta != value)
                {
                    _operOrdProducAltBruta = value;
                    OnPropertyChanged("OperOrdProducAltBruta");
                }
            }
        }
        private Nullable<decimal> _operOrdProducAltBruta;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducAltLiq
        {
            get { return _operOrdProducAltLiq; }
            set
            {
                if (_operOrdProducAltLiq != value)
                {
                    _operOrdProducAltLiq = value;
                    OnPropertyChanged("OperOrdProducAltLiq");
                }
            }
        }
        private Nullable<decimal> _operOrdProducAltLiq;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducLargBruta
        {
            get { return _operOrdProducLargBruta; }
            set
            {
                if (_operOrdProducLargBruta != value)
                {
                    _operOrdProducLargBruta = value;
                    OnPropertyChanged("OperOrdProducLargBruta");
                }
            }
        }
        private Nullable<decimal> _operOrdProducLargBruta;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducLargLiq
        {
            get { return _operOrdProducLargLiq; }
            set
            {
                if (_operOrdProducLargLiq != value)
                {
                    _operOrdProducLargLiq = value;
                    OnPropertyChanged("OperOrdProducLargLiq");
                }
            }
        }
        private Nullable<decimal> _operOrdProducLargLiq;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducEspacoBruto
        {
            get { return _operOrdProducEspacoBruto; }
            set
            {
                if (_operOrdProducEspacoBruto != value)
                {
                    _operOrdProducEspacoBruto = value;
                    OnPropertyChanged("OperOrdProducEspacoBruto");
                }
            }
        }
        private Nullable<decimal> _operOrdProducEspacoBruto;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducEspacoLiq
        {
            get { return _operOrdProducEspacoLiq; }
            set
            {
                if (_operOrdProducEspacoLiq != value)
                {
                    _operOrdProducEspacoLiq = value;
                    OnPropertyChanged("OperOrdProducEspacoLiq");
                }
            }
        }
        private Nullable<decimal> _operOrdProducEspacoLiq;
    
        [DataMember]
        public Nullable<System.DateTime> OperOrdProducDataHoraApont
        {
            get { return _operOrdProducDataHoraApont; }
            set
            {
                if (_operOrdProducDataHoraApont != value)
                {
                    _operOrdProducDataHoraApont = value;
                    OnPropertyChanged("OperOrdProducDataHoraApont");
                }
            }
        }
        private Nullable<System.DateTime> _operOrdProducDataHoraApont;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducTara
        {
            get { return _operOrdProducTara; }
            set
            {
                if (_operOrdProducTara != value)
                {
                    _operOrdProducTara = value;
                    OnPropertyChanged("OperOrdProducTara");
                }
            }
        }
        private Nullable<decimal> _operOrdProducTara;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducPesoBruto
        {
            get { return _operOrdProducPesoBruto; }
            set
            {
                if (_operOrdProducPesoBruto != value)
                {
                    _operOrdProducPesoBruto = value;
                    OnPropertyChanged("OperOrdProducPesoBruto");
                }
            }
        }
        private Nullable<decimal> _operOrdProducPesoBruto;
    
        [DataMember]
        public string OperOrdProducTipo
        {
            get { return _operOrdProducTipo; }
            set
            {
                if (_operOrdProducTipo != value)
                {
                    _operOrdProducTipo = value;
                    OnPropertyChanged("OperOrdProducTipo");
                }
            }
        }
        private string _operOrdProducTipo;
    
        [DataMember]
        public string LocArmazCodEstr
        {
            get { return _locArmazCodEstr; }
            set
            {
                if (_locArmazCodEstr != value)
                {
                    ChangeTracker.RecordOriginalValue("LocArmazCodEstr", _locArmazCodEstr);
                    if (!IsDeserializing)
                    {
                        if (LOC_ARMAZ != null && LOC_ARMAZ.LocArmazCodEstr != value)
                        {
                            LOC_ARMAZ = null;
                        }
                    }
                    _locArmazCodEstr = value;
                    OnPropertyChanged("LocArmazCodEstr");
                }
            }
        }
        private string _locArmazCodEstr;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducQtdReal
        {
            get { return _operOrdProducQtdReal; }
            set
            {
                if (_operOrdProducQtdReal != value)
                {
                    _operOrdProducQtdReal = value;
                    OnPropertyChanged("OperOrdProducQtdReal");
                }
            }
        }
        private Nullable<decimal> _operOrdProducQtdReal;
    
        [DataMember]
        public string CtrlLoteNum
        {
            get { return _ctrlLoteNum; }
            set
            {
                if (_ctrlLoteNum != value)
                {
                    _ctrlLoteNum = value;
                    OnPropertyChanged("CtrlLoteNum");
                }
            }
        }
        private string _ctrlLoteNum;
    
        [DataMember]
        public Nullable<System.DateTime> CtrlLoteDataValid
        {
            get { return _ctrlLoteDataValid; }
            set
            {
                if (_ctrlLoteDataValid != value)
                {
                    _ctrlLoteDataValid = value;
                    OnPropertyChanged("CtrlLoteDataValid");
                }
            }
        }
        private Nullable<System.DateTime> _ctrlLoteDataValid;
    
        [DataMember]
        public string TipoLancCod
        {
            get { return _tipoLancCod; }
            set
            {
                if (_tipoLancCod != value)
                {
                    _tipoLancCod = value;
                    OnPropertyChanged("TipoLancCod");
                }
            }
        }
        private string _tipoLancCod;
    
        [DataMember]
        public string OperOrdProducIntegraEstq
        {
            get { return _operOrdProducIntegraEstq; }
            set
            {
                if (_operOrdProducIntegraEstq != value)
                {
                    _operOrdProducIntegraEstq = value;
                    OnPropertyChanged("OperOrdProducIntegraEstq");
                }
            }
        }
        private string _operOrdProducIntegraEstq;
    
        [DataMember]
        public string OperOrdProducIntegradoEstq
        {
            get { return _operOrdProducIntegradoEstq; }
            set
            {
                if (_operOrdProducIntegradoEstq != value)
                {
                    _operOrdProducIntegradoEstq = value;
                    OnPropertyChanged("OperOrdProducIntegradoEstq");
                }
            }
        }
        private string _operOrdProducIntegradoEstq;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducUnidMedPeso
        {
            get { return _operOrdProducUnidMedPeso; }
            set
            {
                if (_operOrdProducUnidMedPeso != value)
                {
                    _operOrdProducUnidMedPeso = value;
                    OnPropertyChanged("OperOrdProducUnidMedPeso");
                }
            }
        }
        private Nullable<decimal> _operOrdProducUnidMedPeso;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducQtdCalc
        {
            get { return _operOrdProducQtdCalc; }
            set
            {
                if (_operOrdProducQtdCalc != value)
                {
                    _operOrdProducQtdCalc = value;
                    OnPropertyChanged("OperOrdProducQtdCalc");
                }
            }
        }
        private Nullable<decimal> _operOrdProducQtdCalc;
    
        [DataMember]
        public string OperOrdProducNumSerie
        {
            get { return _operOrdProducNumSerie; }
            set
            {
                if (_operOrdProducNumSerie != value)
                {
                    _operOrdProducNumSerie = value;
                    OnPropertyChanged("OperOrdProducNumSerie");
                }
            }
        }
        private string _operOrdProducNumSerie;
    
        [DataMember]
        public string PedVendaNum
        {
            get { return _pedVendaNum; }
            set
            {
                if (_pedVendaNum != value)
                {
                    _pedVendaNum = value;
                    OnPropertyChanged("PedVendaNum");
                }
            }
        }
        private string _pedVendaNum;
    
        [DataMember]
        public string TipoApontCod
        {
            get { return _tipoApontCod; }
            set
            {
                if (_tipoApontCod != value)
                {
                    _tipoApontCod = value;
                    OnPropertyChanged("TipoApontCod");
                }
            }
        }
        private string _tipoApontCod;
    
        [DataMember]
        public string OperOrdProducTipoCalcCusto
        {
            get { return _operOrdProducTipoCalcCusto; }
            set
            {
                if (_operOrdProducTipoCalcCusto != value)
                {
                    _operOrdProducTipoCalcCusto = value;
                    OnPropertyChanged("OperOrdProducTipoCalcCusto");
                }
            }
        }
        private string _operOrdProducTipoCalcCusto;
    
        [DataMember]
        public string OperOrdProducPrefixoLoteMask
        {
            get { return _operOrdProducPrefixoLoteMask; }
            set
            {
                if (_operOrdProducPrefixoLoteMask != value)
                {
                    _operOrdProducPrefixoLoteMask = value;
                    OnPropertyChanged("OperOrdProducPrefixoLoteMask");
                }
            }
        }
        private string _operOrdProducPrefixoLoteMask;
    
        [DataMember]
        public Nullable<System.DateTime> OperOrdProducDataValidLote
        {
            get { return _operOrdProducDataValidLote; }
            set
            {
                if (_operOrdProducDataValidLote != value)
                {
                    _operOrdProducDataValidLote = value;
                    OnPropertyChanged("OperOrdProducDataValidLote");
                }
            }
        }
        private Nullable<System.DateTime> _operOrdProducDataValidLote;
    
        [DataMember]
        public string OperOrdProducUsuCodDtHrInic
        {
            get { return _operOrdProducUsuCodDtHrInic; }
            set
            {
                if (_operOrdProducUsuCodDtHrInic != value)
                {
                    _operOrdProducUsuCodDtHrInic = value;
                    OnPropertyChanged("OperOrdProducUsuCodDtHrInic");
                }
            }
        }
        private string _operOrdProducUsuCodDtHrInic;
    
        [DataMember]
        public string OperOrdProducCodSscc
        {
            get { return _operOrdProducCodSscc; }
            set
            {
                if (_operOrdProducCodSscc != value)
                {
                    _operOrdProducCodSscc = value;
                    OnPropertyChanged("OperOrdProducCodSscc");
                }
            }
        }
        private string _operOrdProducCodSscc;
    
        [DataMember]
        public Nullable<int> OperOrdProducQtdRef
        {
            get { return _operOrdProducQtdRef; }
            set
            {
                if (_operOrdProducQtdRef != value)
                {
                    _operOrdProducQtdRef = value;
                    OnPropertyChanged("OperOrdProducQtdRef");
                }
            }
        }
        private Nullable<int> _operOrdProducQtdRef;
    
        [DataMember]
        public Nullable<int> OperOrdProducSeqRef
        {
            get { return _operOrdProducSeqRef; }
            set
            {
                if (_operOrdProducSeqRef != value)
                {
                    _operOrdProducSeqRef = value;
                    OnPropertyChanged("OperOrdProducSeqRef");
                }
            }
        }
        private Nullable<int> _operOrdProducSeqRef;
    
        [DataMember]
        public string OperOrdProducUsuCodRef
        {
            get { return _operOrdProducUsuCodRef; }
            set
            {
                if (_operOrdProducUsuCodRef != value)
                {
                    _operOrdProducUsuCodRef = value;
                    OnPropertyChanged("OperOrdProducUsuCodRef");
                }
            }
        }
        private string _operOrdProducUsuCodRef;
    
        [DataMember]
        public Nullable<System.DateTime> OperOrdProducDtHrRef
        {
            get { return _operOrdProducDtHrRef; }
            set
            {
                if (_operOrdProducDtHrRef != value)
                {
                    _operOrdProducDtHrRef = value;
                    OnPropertyChanged("OperOrdProducDtHrRef");
                }
            }
        }
        private Nullable<System.DateTime> _operOrdProducDtHrRef;
    
        [DataMember]
        public Nullable<int> IdProdId
        {
            get { return _idProdId; }
            set
            {
                if (_idProdId != value)
                {
                    _idProdId = value;
                    OnPropertyChanged("IdProdId");
                }
            }
        }
        private Nullable<int> _idProdId;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducTempoCentVariac
        {
            get { return _operOrdProducTempoCentVariac; }
            set
            {
                if (_operOrdProducTempoCentVariac != value)
                {
                    _operOrdProducTempoCentVariac = value;
                    OnPropertyChanged("OperOrdProducTempoCentVariac");
                }
            }
        }
        private Nullable<decimal> _operOrdProducTempoCentVariac;
    
        [DataMember]
        public Nullable<decimal> OperOrdProducTempoCentLiq
        {
            get { return _operOrdProducTempoCentLiq; }
            set
            {
                if (_operOrdProducTempoCentLiq != value)
                {
                    _operOrdProducTempoCentLiq = value;
                    OnPropertyChanged("OperOrdProducTempoCentLiq");
                }
            }
        }
        private Nullable<decimal> _operOrdProducTempoCentLiq;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ORD_PRODUC ORD_PRODUC
        {
            get { return _oRD_PRODUC; }
            set
            {
                if (!ReferenceEquals(_oRD_PRODUC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || OrdProducNum != value.OrdProducNum)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _oRD_PRODUC;
                    _oRD_PRODUC = value;
                    FixupORD_PRODUC(previousValue);
                    OnNavigationPropertyChanged("ORD_PRODUC");
                }
            }
        }
        private ORD_PRODUC _oRD_PRODUC;
    
        [DataMember]
        public TrackableCollection<OPER_ORD_PRODUC_FUNC> OPER_ORD_PRODUC_FUNC
        {
            get
            {
                if (_oPER_ORD_PRODUC_FUNC == null)
                {
                    _oPER_ORD_PRODUC_FUNC = new TrackableCollection<OPER_ORD_PRODUC_FUNC>();
                    _oPER_ORD_PRODUC_FUNC.CollectionChanged += FixupOPER_ORD_PRODUC_FUNC;
                }
                return _oPER_ORD_PRODUC_FUNC;
            }
            set
            {
                if (!ReferenceEquals(_oPER_ORD_PRODUC_FUNC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_oPER_ORD_PRODUC_FUNC != null)
                    {
                        _oPER_ORD_PRODUC_FUNC.CollectionChanged -= FixupOPER_ORD_PRODUC_FUNC;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (OPER_ORD_PRODUC_FUNC item in _oPER_ORD_PRODUC_FUNC)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _oPER_ORD_PRODUC_FUNC = value;
                    if (_oPER_ORD_PRODUC_FUNC != null)
                    {
                        _oPER_ORD_PRODUC_FUNC.CollectionChanged += FixupOPER_ORD_PRODUC_FUNC;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (OPER_ORD_PRODUC_FUNC item in _oPER_ORD_PRODUC_FUNC)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("OPER_ORD_PRODUC_FUNC");
                }
            }
        }
        private TrackableCollection<OPER_ORD_PRODUC_FUNC> _oPER_ORD_PRODUC_FUNC;
    
        [DataMember]
        public LOC_ARMAZ LOC_ARMAZ
        {
            get { return _lOC_ARMAZ; }
            set
            {
                if (!ReferenceEquals(_lOC_ARMAZ, value))
                {
                    var previousValue = _lOC_ARMAZ;
                    _lOC_ARMAZ = value;
                    FixupLOC_ARMAZ(previousValue);
                    OnNavigationPropertyChanged("LOC_ARMAZ");
                }
            }
        }
        private LOC_ARMAZ _lOC_ARMAZ;
    
        [DataMember]
        public PROD_UNID_MED PROD_UNID_MED
        {
            get { return _pROD_UNID_MED; }
            set
            {
                if (!ReferenceEquals(_pROD_UNID_MED, value))
                {
                    var previousValue = _pROD_UNID_MED;
                    _pROD_UNID_MED = value;
                    FixupPROD_UNID_MED(previousValue);
                    OnNavigationPropertyChanged("PROD_UNID_MED");
                }
            }
        }
        private PROD_UNID_MED _pROD_UNID_MED;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ORD_PRODUC = null;
            OPER_ORD_PRODUC_FUNC.Clear();
            LOC_ARMAZ = null;
            PROD_UNID_MED = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupORD_PRODUC(ORD_PRODUC previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OPER_ORD_PRODUC.Contains(this))
            {
                previousValue.OPER_ORD_PRODUC.Remove(this);
            }
    
            if (ORD_PRODUC != null)
            {
                if (!ORD_PRODUC.OPER_ORD_PRODUC.Contains(this))
                {
                    ORD_PRODUC.OPER_ORD_PRODUC.Add(this);
                }
    
                EmpCod = ORD_PRODUC.EmpCod;
                OrdProducNum = ORD_PRODUC.OrdProducNum;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ORD_PRODUC")
                    && (ChangeTracker.OriginalValues["ORD_PRODUC"] == ORD_PRODUC))
                {
                    ChangeTracker.OriginalValues.Remove("ORD_PRODUC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ORD_PRODUC", previousValue);
                }
                if (ORD_PRODUC != null && !ORD_PRODUC.ChangeTracker.ChangeTrackingEnabled)
                {
                    ORD_PRODUC.StartTracking();
                }
            }
        }
    
        private void FixupLOC_ARMAZ(LOC_ARMAZ previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OPER_ORD_PRODUC.Contains(this))
            {
                previousValue.OPER_ORD_PRODUC.Remove(this);
            }
    
            if (LOC_ARMAZ != null)
            {
                if (!LOC_ARMAZ.OPER_ORD_PRODUC.Contains(this))
                {
                    LOC_ARMAZ.OPER_ORD_PRODUC.Add(this);
                }
    
                LocArmazCodEstr = LOC_ARMAZ.LocArmazCodEstr;
            }
            else if (!skipKeys)
            {
                LocArmazCodEstr = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LOC_ARMAZ")
                    && (ChangeTracker.OriginalValues["LOC_ARMAZ"] == LOC_ARMAZ))
                {
                    ChangeTracker.OriginalValues.Remove("LOC_ARMAZ");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LOC_ARMAZ", previousValue);
                }
                if (LOC_ARMAZ != null && !LOC_ARMAZ.ChangeTracker.ChangeTrackingEnabled)
                {
                    LOC_ARMAZ.StartTracking();
                }
            }
        }
    
        private void FixupPROD_UNID_MED(PROD_UNID_MED previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OPER_ORD_PRODUC.Contains(this))
            {
                previousValue.OPER_ORD_PRODUC.Remove(this);
            }
    
            if (PROD_UNID_MED != null)
            {
                if (!PROD_UNID_MED.OPER_ORD_PRODUC.Contains(this))
                {
                    PROD_UNID_MED.OPER_ORD_PRODUC.Add(this);
                }
    
                ProdCodEstr = PROD_UNID_MED.ProdCodEstr;
                ProdUnidMedCod = PROD_UNID_MED.ProdUnidMedCod;
                ProdUnidMedPos = PROD_UNID_MED.ProdUnidMedPos;
            }
            else if (!skipKeys)
            {
                ProdUnidMedCod = null;
                ProdUnidMedPos = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PROD_UNID_MED")
                    && (ChangeTracker.OriginalValues["PROD_UNID_MED"] == PROD_UNID_MED))
                {
                    ChangeTracker.OriginalValues.Remove("PROD_UNID_MED");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PROD_UNID_MED", previousValue);
                }
                if (PROD_UNID_MED != null && !PROD_UNID_MED.ChangeTracker.ChangeTrackingEnabled)
                {
                    PROD_UNID_MED.StartTracking();
                }
            }
        }
    
        private void FixupOPER_ORD_PRODUC_FUNC(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OPER_ORD_PRODUC_FUNC item in e.NewItems)
                {
                    item.OPER_ORD_PRODUC = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OPER_ORD_PRODUC_FUNC", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OPER_ORD_PRODUC_FUNC item in e.OldItems)
                {
                    if (ReferenceEquals(item.OPER_ORD_PRODUC, this))
                    {
                        item.OPER_ORD_PRODUC = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OPER_ORD_PRODUC_FUNC", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
