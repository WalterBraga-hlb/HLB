//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHyLinedoBrasil.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EMPRESA_FILIAL))]
    [KnownType(typeof(MOV_ESTQ))]
    public partial class MOV_ESTQ_CCTRL: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL2 != null && EMPRESA_FILIAL2.EmpCod != value)
                        {
                            EMPRESA_FILIAL2 = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string CCtrlCodEstr
        {
            get { return _cCtrlCodEstr; }
            set
            {
                if (_cCtrlCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CCtrlCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cCtrlCodEstr = value;
                    OnPropertyChanged("CCtrlCodEstr");
                }
            }
        }
        private string _cCtrlCodEstr;
    
        [DataMember]
        public int MovEstqCCtrlChv
        {
            get { return _movEstqCCtrlChv; }
            set
            {
                if (_movEstqCCtrlChv != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MovEstqCCtrlChv' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _movEstqCCtrlChv = value;
                    OnPropertyChanged("MovEstqCCtrlChv");
                }
            }
        }
        private int _movEstqCCtrlChv;
    
        [DataMember]
        public string TipoLancCod
        {
            get { return _tipoLancCod; }
            set
            {
                if (_tipoLancCod != value)
                {
                    _tipoLancCod = value;
                    OnPropertyChanged("TipoLancCod");
                }
            }
        }
        private string _tipoLancCod;
    
        [DataMember]
        public Nullable<int> MovEstqCCtrlChvContrap
        {
            get { return _movEstqCCtrlChvContrap; }
            set
            {
                if (_movEstqCCtrlChvContrap != value)
                {
                    _movEstqCCtrlChvContrap = value;
                    OnPropertyChanged("MovEstqCCtrlChvContrap");
                }
            }
        }
        private Nullable<int> _movEstqCCtrlChvContrap;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqCCtrlDataMovimento
        {
            get { return _movEstqCCtrlDataMovimento; }
            set
            {
                if (_movEstqCCtrlDataMovimento != value)
                {
                    _movEstqCCtrlDataMovimento = value;
                    OnPropertyChanged("MovEstqCCtrlDataMovimento");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqCCtrlDataMovimento;
    
        [DataMember]
        public string MovEstqEmpCod
        {
            get { return _movEstqEmpCod; }
            set
            {
                if (_movEstqEmpCod != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqEmpCod", _movEstqEmpCod);
                    if (!IsDeserializing)
                    {
                        if (MOV_ESTQ != null && MOV_ESTQ.EmpCod != value)
                        {
                            var previousValue = _mOV_ESTQ;
                            _mOV_ESTQ = null;
                            FixupMOV_ESTQ(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("MOV_ESTQ");
                        }
                    }
                    _movEstqEmpCod = value;
                    OnPropertyChanged("MovEstqEmpCod");
                }
            }
        }
        private string _movEstqEmpCod;
    
        [DataMember]
        public Nullable<int> MovEstqChv
        {
            get { return _movEstqChv; }
            set
            {
                if (_movEstqChv != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqChv", _movEstqChv);
                    if (!IsDeserializing)
                    {
                        if (MOV_ESTQ != null && MOV_ESTQ.MovEstqChv != value)
                        {
                            var previousValue = _mOV_ESTQ;
                            _mOV_ESTQ = null;
                            FixupMOV_ESTQ(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("MOV_ESTQ");
                        }
                    }
                    _movEstqChv = value;
                    OnPropertyChanged("MovEstqChv");
                }
            }
        }
        private Nullable<int> _movEstqChv;
    
        [DataMember]
        public string MovEstqCCtrlEmpOrig
        {
            get { return _movEstqCCtrlEmpOrig; }
            set
            {
                if (_movEstqCCtrlEmpOrig != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqCCtrlEmpOrig", _movEstqCCtrlEmpOrig);
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL1 != null && EMPRESA_FILIAL1.EmpCod != value)
                        {
                            EMPRESA_FILIAL1 = null;
                        }
                    }
                    _movEstqCCtrlEmpOrig = value;
                    OnPropertyChanged("MovEstqCCtrlEmpOrig");
                }
            }
        }
        private string _movEstqCCtrlEmpOrig;
    
        [DataMember]
        public string MovEstqCCtrlEmpDest
        {
            get { return _movEstqCCtrlEmpDest; }
            set
            {
                if (_movEstqCCtrlEmpDest != value)
                {
                    ChangeTracker.RecordOriginalValue("MovEstqCCtrlEmpDest", _movEstqCCtrlEmpDest);
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL != null && EMPRESA_FILIAL.EmpCod != value)
                        {
                            EMPRESA_FILIAL = null;
                        }
                    }
                    _movEstqCCtrlEmpDest = value;
                    OnPropertyChanged("MovEstqCCtrlEmpDest");
                }
            }
        }
        private string _movEstqCCtrlEmpDest;
    
        [DataMember]
        public string MovEstqCCtrlOrig
        {
            get { return _movEstqCCtrlOrig; }
            set
            {
                if (_movEstqCCtrlOrig != value)
                {
                    _movEstqCCtrlOrig = value;
                    OnPropertyChanged("MovEstqCCtrlOrig");
                }
            }
        }
        private string _movEstqCCtrlOrig;
    
        [DataMember]
        public string MovEstqCCtrlDest
        {
            get { return _movEstqCCtrlDest; }
            set
            {
                if (_movEstqCCtrlDest != value)
                {
                    _movEstqCCtrlDest = value;
                    OnPropertyChanged("MovEstqCCtrlDest");
                }
            }
        }
        private string _movEstqCCtrlDest;
    
        [DataMember]
        public string MovEstqCCtrlDocEspec
        {
            get { return _movEstqCCtrlDocEspec; }
            set
            {
                if (_movEstqCCtrlDocEspec != value)
                {
                    _movEstqCCtrlDocEspec = value;
                    OnPropertyChanged("MovEstqCCtrlDocEspec");
                }
            }
        }
        private string _movEstqCCtrlDocEspec;
    
        [DataMember]
        public string MovEstqCCtrlDocSerie
        {
            get { return _movEstqCCtrlDocSerie; }
            set
            {
                if (_movEstqCCtrlDocSerie != value)
                {
                    _movEstqCCtrlDocSerie = value;
                    OnPropertyChanged("MovEstqCCtrlDocSerie");
                }
            }
        }
        private string _movEstqCCtrlDocSerie;
    
        [DataMember]
        public string MovEstqCCtrlDocNum
        {
            get { return _movEstqCCtrlDocNum; }
            set
            {
                if (_movEstqCCtrlDocNum != value)
                {
                    _movEstqCCtrlDocNum = value;
                    OnPropertyChanged("MovEstqCCtrlDocNum");
                }
            }
        }
        private string _movEstqCCtrlDocNum;
    
        [DataMember]
        public Nullable<int> MovEstqCCtrlDocSeq
        {
            get { return _movEstqCCtrlDocSeq; }
            set
            {
                if (_movEstqCCtrlDocSeq != value)
                {
                    _movEstqCCtrlDocSeq = value;
                    OnPropertyChanged("MovEstqCCtrlDocSeq");
                }
            }
        }
        private Nullable<int> _movEstqCCtrlDocSeq;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqCCtrlDataEmissao
        {
            get { return _movEstqCCtrlDataEmissao; }
            set
            {
                if (_movEstqCCtrlDataEmissao != value)
                {
                    _movEstqCCtrlDataEmissao = value;
                    OnPropertyChanged("MovEstqCCtrlDataEmissao");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqCCtrlDataEmissao;
    
        [DataMember]
        public string MovEstqCCtrlObs
        {
            get { return _movEstqCCtrlObs; }
            set
            {
                if (_movEstqCCtrlObs != value)
                {
                    _movEstqCCtrlObs = value;
                    OnPropertyChanged("MovEstqCCtrlObs");
                }
            }
        }
        private string _movEstqCCtrlObs;
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;
    
        [DataMember]
        public Nullable<System.DateTime> MovEstqCCtrlDataHora
        {
            get { return _movEstqCCtrlDataHora; }
            set
            {
                if (_movEstqCCtrlDataHora != value)
                {
                    _movEstqCCtrlDataHora = value;
                    OnPropertyChanged("MovEstqCCtrlDataHora");
                }
            }
        }
        private Nullable<System.DateTime> _movEstqCCtrlDataHora;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL
        {
            get { return _eMPRESA_FILIAL; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL, value))
                {
                    var previousValue = _eMPRESA_FILIAL;
                    _eMPRESA_FILIAL = value;
                    FixupEMPRESA_FILIAL(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL1
        {
            get { return _eMPRESA_FILIAL1; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL1, value))
                {
                    var previousValue = _eMPRESA_FILIAL1;
                    _eMPRESA_FILIAL1 = value;
                    FixupEMPRESA_FILIAL1(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL1");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL1;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL2
        {
            get { return _eMPRESA_FILIAL2; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eMPRESA_FILIAL2;
                    _eMPRESA_FILIAL2 = value;
                    FixupEMPRESA_FILIAL2(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL2");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL2;
    
        [DataMember]
        public MOV_ESTQ MOV_ESTQ
        {
            get { return _mOV_ESTQ; }
            set
            {
                if (!ReferenceEquals(_mOV_ESTQ, value))
                {
                    var previousValue = _mOV_ESTQ;
                    _mOV_ESTQ = value;
                    FixupMOV_ESTQ(previousValue);
                    OnNavigationPropertyChanged("MOV_ESTQ");
                }
            }
        }
        private MOV_ESTQ _mOV_ESTQ;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            EMPRESA_FILIAL = null;
            EMPRESA_FILIAL1 = null;
            EMPRESA_FILIAL2 = null;
            MOV_ESTQ = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupEMPRESA_FILIAL(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ_CCTRL.Contains(this))
            {
                previousValue.MOV_ESTQ_CCTRL.Remove(this);
            }
    
            if (EMPRESA_FILIAL != null)
            {
                if (!EMPRESA_FILIAL.MOV_ESTQ_CCTRL.Contains(this))
                {
                    EMPRESA_FILIAL.MOV_ESTQ_CCTRL.Add(this);
                }
    
                MovEstqCCtrlEmpDest = EMPRESA_FILIAL.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL"] == EMPRESA_FILIAL))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL", previousValue);
                }
                if (EMPRESA_FILIAL != null && !EMPRESA_FILIAL.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL.StartTracking();
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL1(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ_CCTRL1.Contains(this))
            {
                previousValue.MOV_ESTQ_CCTRL1.Remove(this);
            }
    
            if (EMPRESA_FILIAL1 != null)
            {
                if (!EMPRESA_FILIAL1.MOV_ESTQ_CCTRL1.Contains(this))
                {
                    EMPRESA_FILIAL1.MOV_ESTQ_CCTRL1.Add(this);
                }
    
                MovEstqCCtrlEmpOrig = EMPRESA_FILIAL1.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL1")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL1"] == EMPRESA_FILIAL1))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL1", previousValue);
                }
                if (EMPRESA_FILIAL1 != null && !EMPRESA_FILIAL1.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL1.StartTracking();
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL2(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ_CCTRL2.Contains(this))
            {
                previousValue.MOV_ESTQ_CCTRL2.Remove(this);
            }
    
            if (EMPRESA_FILIAL2 != null)
            {
                if (!EMPRESA_FILIAL2.MOV_ESTQ_CCTRL2.Contains(this))
                {
                    EMPRESA_FILIAL2.MOV_ESTQ_CCTRL2.Add(this);
                }
    
                EmpCod = EMPRESA_FILIAL2.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL2")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL2"] == EMPRESA_FILIAL2))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL2", previousValue);
                }
                if (EMPRESA_FILIAL2 != null && !EMPRESA_FILIAL2.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL2.StartTracking();
                }
            }
        }
    
        private void FixupMOV_ESTQ(MOV_ESTQ previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MOV_ESTQ_CCTRL.Contains(this))
            {
                previousValue.MOV_ESTQ_CCTRL.Remove(this);
            }
    
            if (MOV_ESTQ != null)
            {
                if (!MOV_ESTQ.MOV_ESTQ_CCTRL.Contains(this))
                {
                    MOV_ESTQ.MOV_ESTQ_CCTRL.Add(this);
                }
    
                MovEstqEmpCod = MOV_ESTQ.EmpCod;
                MovEstqChv = MOV_ESTQ.MovEstqChv;
            }
            else if (!skipKeys)
            {
                MovEstqEmpCod = null;
                MovEstqChv = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MOV_ESTQ")
                    && (ChangeTracker.OriginalValues["MOV_ESTQ"] == MOV_ESTQ))
                {
                    ChangeTracker.OriginalValues.Remove("MOV_ESTQ");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MOV_ESTQ", previousValue);
                }
                if (MOV_ESTQ != null && !MOV_ESTQ.ChangeTracker.ChangeTrackingEnabled)
                {
                    MOV_ESTQ.StartTracking();
                }
            }
        }

        #endregion

    }
}
