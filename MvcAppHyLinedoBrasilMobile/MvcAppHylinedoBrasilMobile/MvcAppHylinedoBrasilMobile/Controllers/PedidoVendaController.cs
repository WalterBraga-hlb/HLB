using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using MvcAppHylinedoBrasilMobile.Models;
using MvcAppHylinedoBrasilMobile.Models.bdApolo;
using MvcAppHylinedoBrasilMobile.Models.bdApolo2;
using MvcAppHylinedoBrasilMobile.Models.CHICMobileDataSetTableAdapters;
using MvcAppHylinedoBrasilMobile.Models.Fluig;
using System.Data.Objects;
using System.IO;
using System.Web.UI;
using MvcAppHyLinedoBrasil.Data.FLIPDataSetTableAdapters;
using System.Data.Entity.Core;
using System.Threading;
using System.Data.Entity.SqlServer;
using System.Text.RegularExpressions;
using MvcAppHylinedoBrasilMobile.br.com.hyline.fluig;
using MvcAppHylinedoBrasilMobile.br.com.hyline.fluigteste1;
using System.Threading.Tasks;
using am = MvcAppHylinedoBrasilMobile.Controllers.AccountMobileController;

namespace MvcAppHylinedoBrasilMobile.Controllers
{
    public class PedidoVendaController : Controller
    {
        #region DataBase Entities

        //public static HLBAPPEntities hlbappStatic = new HLBAPPEntities();
        public static bdApoloEntities apoloStatic = new bdApoloEntities();
        //public static Apolo10Entities apolo2Static = new Apolo10Entities();

        #endregion

        #region List Methods

        public List<Pedido_Venda> ListaPV(string customer, DateTime dataInicial,
            DateTime dataFinal, string status, string empresa, string vendedor, string codCHIC,
            string idPedido, List<String> listStatus, List<String> listLinhas, string projecao)
        {
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            List<Pedido_Venda> listaPV = new List<Pedido_Venda>();

            int idInt = 0;
            if (idPedido != "")
                idInt = Convert.ToInt32(idPedido);

            //idInt = 64278;

            bool dirDocExp = (MvcAppHylinedoBrasilMobile.Controllers.AccountMobileController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"]));

            bool viewAll = (MvcAppHylinedoBrasilMobile.Controllers.AccountMobileController
                .GetGroup("HLBAPPM-PedidoVendaVisualizarTodosPedidos",
                (System.Collections.ArrayList)Session["Direitos"]));

            string usuario = "";
            if (!MvcAppHylinedoBrasilMobile.Controllers.AccountMobileController
                .GetGroup("HLBAPPM-VisualizaTodosPedidosVenda",
                (System.Collections.ArrayList)Session["Direitos"]))
                usuario = Session["usuario"].ToString();

            string empresaSession = Session["empresa"].ToString();
            string empresaApoloSession = Session["empresaApolo"].ToString();

            string login = "";
            if (Session["login"].ToString().Contains("@"))
                login = Session["login"].ToString();

            ImportaCHICService.Data.ApoloServiceEntities apoloService =
                new ImportaCHICService.Data.ApoloServiceEntities();

            var listaEntidade = apoloService.ENTIDADE
                .Where(w => apoloService.VEND_ENT.Any(a => a.EntCod == w.EntCod
                    && apoloService.VENDEDOR.Any(n => n.VendCod == a.VendCod
                        && (n.USERLoginSite == login || login == "")
                        && (empresaApoloSession.Contains(n.USEREmpresa) || empresaApoloSession.Equals("TODAS"))))
                    && w.EntNome.Contains(customer)
                    //&& w.StatEntCod != "05"
                    )
                .Join(
                    apoloService.ENT_CATEG.Where(c => c.CategCodEstr == "01" || c.CategCodEstr == "01.01"),
                    e => e.EntCod,
                    c => c.EntCod,
                    (e, c) => new { ENTIDADE = e, ENT_CATEG = c })
                .OrderBy(o => o.ENTIDADE.EntNome)
                .ToList();

            List<String> listaClientesOriginal = (List<String>)Session["listaClientesOriginalApolo"];

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];

            HLBAPPEntities hlbapp = new HLBAPPEntities();
            hlbapp.CommandTimeout = 1000;

            string vendCodCHIC = vendedor;
            if (vendedor.Length == 7) vendCodCHIC = vendedor.Substring(1, 6);

            var lista = hlbapp.Pedido_Venda
                .Where(w => hlbapp.Item_Pedido_Venda
                        .Any(i => i.IDPedidoVenda == w.ID
                            && i.DataEntregaInicial >= dataInicial
                            && i.DataEntregaFinal <= dataFinal
                            && ((i.OrderNoCHIC == codCHIC || codCHIC == "")
                             || (i.OrderNoCHICReposicao == codCHIC || codCHIC == ""))
                            //&& ((dirDocExp && w.Status.Equals("Documentação de Exportação"))
                            //    || (!dirDocExp && !i.ProdCodEstr.Contains("003."))
                            //    || viewAll)
                            && (listLinhas.Any(l => l == i.ProdCodEstr) || listLinhas.Count == 0))
                        && (w.Status == status || status == "(Todos os Status)")
                        //&& (w.Usuario == usuario || usuario == "")
                        && (w.Empresa == empresa || empresa == "(Todas)")
                        && (empresaSession.Contains(w.Empresa))
                        && (w.Vendedor == vendedor || w.Vendedor == vendCodCHIC || vendedor == "(Todos)")
                        && (w.ID == idInt || idInt == 0)
                        //&& listaClientesOriginal.Any(a => a == w.CodigoCliente)
                        && (w.NomeCliente.Contains(customer))
                        && (listStatus.Any(s => s == w.Status) || listStatus.Count == 0)
                        && (w.Projecao == projecao || projecao == ""))
                .ToList();

            //List<Pedido_Venda> listaFiltro = new List<Pedido_Venda>();

            //foreach (var item in lista)
            //{
            //    if (listaClientesOriginal.Where(w => w == item.CodigoCliente).Count() > 0)
            //        //&& empresaSession.Contains(item.Empresa))
            //        listaFiltro.Add(item);
            //}

            #region Filtro Empresa

            List<Pedido_Venda> listaPVEmpresa = new List<Pedido_Venda>();

            if ((Session["empresa"].ToString().Length > 2) &&
                (Session["empresa"].ToString().Length < 6) && empresa.Equals("(Todas)"))
            {
                foreach (var item in lista)
                {
                    for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
                    {
                        if (Session["empresa"].ToString().Substring(i, 2) == item.Empresa)
                            listaPVEmpresa.Add(item);
                    }
                }
            }
            else
            {
                listaPVEmpresa = lista;
            }

            #endregion

            //if (customer != "")
            //{

            #region Filtro Vendedor

            string vendUser = "";
            if (login != "")
            {
                List<VENDEDOR> listVendedor = apoloStatic.VENDEDOR
                        .Where(w => w.USERLoginSite == login)
                        .ToList();

                foreach (var vendedorItem in listVendedor)
                {
                    vendUser = vendedorItem.VendCod.Substring(1, 6);

                    foreach (var item in listaPVEmpresa
                        .Where(w => w.Vendedor == vendUser || w.Vendedor == vendedorItem.VendCod).ToList())
                    {
                        foreach (var entidade in listaEntidade)
                        {
                            if (item.CodigoCliente == entidade.ENTIDADE.EntCod)
                            {
                                item.NomeCliente = entidade.ENTIDADE.EntNome;
                                listaPV.Add(item);
                            }
                        }
                    }
                }
            }
            else
            {
                foreach (var item in listaPVEmpresa
                    .Where(w => w.Vendedor == vendUser || vendUser == "").ToList())
                {
                    foreach (var entidade in listaEntidade)
                    {
                        if (item.CodigoCliente == entidade.ENTIDADE.EntCod)
                        {
                            string teste = "";
                            if (item.CodigoCliente == "0003995")
                                teste = item.CodigoCliente;

                            //if (dirDocExp && !viewAll)
                            //{
                            //    CIDADE cidade = apoloStatic.CIDADE.Where(w => w.CidCod == entidade.CidCod)
                            //        .FirstOrDefault();
                            //    if (!cidade.PaisSigla.Equals("BRA"))
                            //    {
                            //        item.NomeCliente = entidade.EntNome;
                            //        listaPV.Add(item);
                            //    }
                            //}
                            //else
                            //{
                            item.NomeCliente = entidade.ENTIDADE.EntNome;
                            listaPV.Add(item);
                            //}
                        }
                    }
                }
            }

            #endregion

            #region Filtro Status

            //List<Pedido_Venda> listaPVStatus = new List<Pedido_Venda>();

            //if ((listStatus.Count > 0) && (listStatus.Where(w => w == "(Todos os Status)").Count() == 0))
            //{
            //    foreach (var item in listaPV)
            //    {
            //        foreach (var statusItem in listStatus)
            //        {
            //            if (item.Status == statusItem)
            //                listaPVStatus.Add(item);
            //        }
            //    }
            //}
            //else
            //{
            //    listaPVStatus = listaPV;
            //}

            #endregion

            //var listaOrderBy = listaFiltro.OrderByDescending(o => hlbapp.Item_Pedido_Venda
            //        .Where(a => o.ID == a.IDPedidoVenda).FirstOrDefault().DataEntregaInicial)
            //        .ThenBy(t => t.NomeCliente).ToList();

            var listaOrderBy = listaPV.OrderByDescending(o => hlbapp.Item_Pedido_Venda
                    .Where(a => o.ID == a.IDPedidoVenda).FirstOrDefault().DataEntregaInicial)
                    .ThenBy(t => t.NomeCliente).ToList();

            //Session["hlbappSession"] = hlbapp;

            return listaOrderBy;
        }

        public List<Pedido_Venda> FilterListaPV()
        {
            LimpaVariaveisSessao();

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            DateTime dataInicial = Convert.ToDateTime(Session["dataInicial"].ToString());
            DateTime dataFinalS = Convert.ToDateTime(Session["dataFinal"].ToString());
            string customer = Session["customerNameSearchPedVenda"].ToString();
            string status = Session["statusSearch"].ToString();
            string empresaS = Session["empresaSelecionadaPV"].ToString();
            string vendedor = Session["vendedorSelecionadoPV"].ToString();
            string codCHIC = Session["codigoCHICSearchPedVenda"].ToString();
            string idPedido = Session["idPedidoSearchPedVenda"].ToString();

            #region Filtro Status

            List<String> listStatus = new List<string>();
            String[] fileCountries = null;
            int[] selectedIndices = null;
            if (Session["statusSelectedList"] != null)
            {
                fileCountries = (String[])Session["statusSelectedList"];
                selectedIndices = (int[])Session["indexStatusSelectedList"];

                List<String> listStatusUpdSession = new List<string>();
                foreach (var index in selectedIndices)
                {
                    listStatusUpdSession.Add(fileCountries[index]);
                }

                UpdateStatusListSelected(listStatusUpdSession);

                if (listStatusUpdSession.Where(w => w == "(Todos os Status)").Count() == 0)
                {
                    foreach (var index in selectedIndices)
                    {
                        listStatus.Add(fileCountries[index]);
                    }
                }
            }
            else
            {
                string login = Session["login"].ToString();
                List<Params_Usuario_Pedido_Venda> listStatusLogin = hlbappSession.Params_Usuario_Pedido_Venda
                        .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                            && w.Parametro == "Status").ToList();

                foreach (var statusLogin in listStatusLogin)
                {
                    listStatus.Add(statusLogin.Valor);
                }
            }

            #endregion

            #region Filtro Linhas

            List<String> listLinhas = new List<string>();
            String[] fileLinhas = null;
            int[] selectedLinhas = null;
            if (Session["linhaSelectedList"] != null)
            {
                fileLinhas = (String[])Session["linhaSelectedList"];
                selectedLinhas = (int[])Session["indexLinhaSelectedList"];

                List<String> listLinhaUpdSession = new List<string>();
                foreach (var index in selectedLinhas)
                {
                    listLinhaUpdSession.Add(fileLinhas[index]);
                }

                UpdateLinhasListSelected(listLinhaUpdSession);

                if (listLinhaUpdSession.Where(w => w == "(Todas as Linhas)").Count() == 0)
                {
                    foreach (var index in selectedLinhas)
                    {
                        listLinhas.Add(fileLinhas[index]);
                    }
                }
            }

            #endregion

            List<Pedido_Venda> listaPV = ListaPV(customer, dataInicial, dataFinalS, status,
                empresaS, vendedor, codCHIC, idPedido, listStatus, listLinhas, "");

            return listaPV;
        }

        #endregion

        #region CRUD Methods

        #region Index

        public ActionResult Index()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            try
            {
                //ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();
                //var orderNO = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();

                //SaldoUtilizadoPinto("", "Lohmann Brown Lite", 2019, 11);

                HLBAPPEntities hlbappSession = new HLBAPPEntities();

                string login = Session["login"].ToString();
                string email = Session["email"].ToString();

                Pedido_Venda pv = hlbappSession.Pedido_Venda.Where(w => w.ID == 26370).FirstOrDefault();
                List<Item_Pedido_Venda> listaIpv = hlbappSession.Item_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == 26370).ToList();
                List<Vacinas_Secundaria_Pedido_Venda> listaVS = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                    .Where(w => hlbappSession.Vacinas_Primaria_Pedido_Venda
                        .Any(a => a.ID == w.IDVacPrimPedVenda && a.IDPedidoVenda == 26370)).ToList();

                //string excecao = "Pedido para cliente 'Em Débito' necessita aprovação da gerência!";
                //string tipoExcecao = "Cliente 'Em Débito'";
                //GeraAprovacaoExcecaoPedidoVendaWebFluig(pv.Empresa, email, tipoExcecao, excecao, pv, listaIpv, 
                //    listaVS, 0);

                Session["ListaSimNao"] = CarregaListaSimNao();
                Session["ListaSimNaoSearch"] = CarregaListaSimNao();

                //TesteSelect();

                //if (Session["hlbappSession"] == null) Session["hlbappSession"] = new HLBAPPEntities();

                Session["paginaAnterior"] = "Index";

                DateTime dataInicial = new DateTime();
                DateTime dataFinal = new DateTime();

                if (Session["DocExportationPath"] == null)
                    Session["DocExportationPath"] = "";

                #region Envio de E-mail - Teste Relatório

                //MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                //    new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                //ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                //MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                //    new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                //apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                //email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                //email.WorkFlowEmailStat = "Enviar";
                //email.WorkFlowEmailData = DateTime.Now;
                //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                //email.WorkFlowEmailParaNome = "Teste";
                //email.WorkFlowEmailDeNome = "Sistema WEB HyLine";
                //email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                //email.WorkFlowEmailFormato = "Texto";

                //email.WorkFlowEmailAssunto = "**** PEDIDO ID " + "22" + " RELATÓRIO ****";
                //email.WorkFlowEmailCorpo = "Teste relatório Anexo";

                //string caminho = GeraSolicitacaoVendaPDF(22);
                //email.WorkFlowEmailArquivosAnexos = caminho;

                //apolo.WORKFLOW_EMAIL.AddObject(email);

                //apolo.SaveChanges();

                #endregion

                #region Carrega Campos

                if (Session["dataInicial"] == null)
                {
                    Params_Usuario_Pedido_Venda paramDataInicial = hlbappSession.Params_Usuario_Pedido_Venda
                        .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                            && w.Parametro == "DataInicial").FirstOrDefault();

                    if (paramDataInicial == null)
                    {
                        dataInicial = DateTime.Today;
                        Session["dataInicial"] = dataInicial.ToShortDateString();

                        paramDataInicial = new Params_Usuario_Pedido_Venda();
                        paramDataInicial.Login = login;
                        paramDataInicial.Parametro = "DataInicial";
                        paramDataInicial.Modulo = "PedidoVenda";
                        paramDataInicial.Valor = dataInicial.ToString();

                        hlbappSession.Params_Usuario_Pedido_Venda.AddObject(paramDataInicial);
                    }
                    else
                    {
                        dataInicial = Convert.ToDateTime(paramDataInicial.Valor);
                        Session["dataInicial"] = dataInicial.ToShortDateString();
                    }

                    Params_Usuario_Pedido_Venda paramDataFinal = hlbappSession.Params_Usuario_Pedido_Venda
                        .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                            && w.Parametro == "DataFinal").FirstOrDefault();

                    if (paramDataFinal == null)
                    {
                        Session["dataFinal"] = DateTime.Today.AddDays(7).ToShortDateString();
                        dataFinal = Convert.ToDateTime(DateTime.Today.AddDays(7).ToShortDateString());

                        paramDataFinal = new Params_Usuario_Pedido_Venda();
                        paramDataFinal.Login = login;
                        paramDataFinal.Parametro = "DataFinal";
                        paramDataFinal.Modulo = "PedidoVenda";
                        paramDataFinal.Valor = dataFinal.ToString();

                        hlbappSession.Params_Usuario_Pedido_Venda.AddObject(paramDataFinal);
                    }
                    else
                    {
                        dataFinal = Convert.ToDateTime(paramDataFinal.Valor);
                        Session["dataFinal"] = dataFinal.ToShortDateString();
                    }
                }
                else
                {
                    dataInicial = Convert.ToDateTime(Session["dataInicial"].ToString());
                    dataFinal = Convert.ToDateTime(Session["dataFinal"].ToString());
                }

                int existeConfigAprovGerencia = 0;
                for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
                {
                    string empStr = Session["empresa"].ToString().Substring(i, 2);

                    Empresas emp = hlbappSession.Empresas
                        .Where(w => w.CodigoCHIC == empStr)
                        .FirstOrDefault();

                    if (emp.AprovacaoGerencia.Equals("Sim"))
                        existeConfigAprovGerencia = existeConfigAprovGerencia + 1;
                }

                Session["existeConfigAprovGerenciaPV"] = existeConfigAprovGerencia;

                CarregaListaStatus();

                if (Session["customerNameSearchPedVenda"] == null)
                    Session["customerNameSearchPedVenda"] = "";

                if (Session["statusSearch"] == null)
                    Session["statusSearch"] = "";
                //else
                //    AtualizaDDL(Session["statusSearch"].ToString(),
                //        (List<SelectListItem>)Session["ListaStatus"]);

                if (Session["codigoCHICSearchPedVenda"] == null)
                    Session["codigoCHICSearchPedVenda"] = "";
                if (Session["idPedidoSearchPedVenda"] == null)
                    Session["idPedidoSearchPedVenda"] = "";
                if (Session["ListaEmpresasPV"] == null)
                    Session["ListaEmpresasPV"] = CarregaEmpresas(true);
                if (Session["empresaSelecionadaPV"] == null)
                {
                    if (Session["empresa"].ToString().Length == 2)
                        Session["empresaSelecionadaPV"] = Session["empresa"].ToString();
                    else
                        Session["empresaSelecionadaPV"] = "(Todas)";
                }
                if (Session["ListaVendedoresPV"] == null)
                    Session["ListaVendedoresPV"] = CarregaVendedores(Session["empresaSelecionadaPV"].ToString(),
                        true);
                if (Session["vendedorSelecionadoPV"] == null)
                    Session["vendedorSelecionadoPV"] = "(Todos)";
                if (Session["projecaoSearch"] == null)
                    Session["projecaoSearch"] = "";

                #endregion

                LimpaVariaveisSessao();

                //Session["ListaCondicaoPagamento"] = CarregaListaCondPag();

                if (Session["ListaClientesPV"] == null) Session["ListaClientesPV"] = CarregaClientes();

                string id = "";
                var listaClientes = (List<SelectListItem>)Session["ListaClientesPV"];
                if (listaClientes.Count > 0)
                    id = listaClientes.FirstOrDefault().Value;

                List<SelectListItem> items = CarregaEnderecoEntregaList(id, -1);

                Session["ListaEnderecoEntrega"] = items;
                Session["ListaClientesPVOriginal"] = Session["ListaClientesPV"];

                Session["ListaLinhagensFiltro"] = CarregaLinhagens(DateTime.Today, "", false);

                //hlbappSession.SaveChanges();

                //string msg = "";
                //if (ex.InnerException != null)
                //    msg = ex.Message + " / " + ex.InnerException.Message;
                //else
                //    msg = ex.Message;

                //ViewBag.Erro = "Erro ao carregar a página: " + msg;

                string customer = Session["customerNameSearchPedVenda"].ToString();
                string status = "(Todos os Status)";
                Session["statusSearch"] = status;
                string empresa = Session["empresaSelecionadaPV"].ToString();
                AtualizaDDL(empresa, (List<SelectListItem>)Session["ListaEmpresasPV"]);
                string vendedor = Session["vendedorSelecionadoPV"].ToString();
                string codCHIC = Session["codigoCHICSearchPedVenda"].ToString();
                string idPedido = Session["idPedidoSearchPedVenda"].ToString();
                string projecao = Session["projecaoSearch"].ToString();

                #region Filtro Status

                List<String> listStatus = new List<string>();
                String[] fileCountries = null;
                int[] selectedIndices = null;
                if (Session["statusSelectedList"] != null)
                {
                    fileCountries = (String[])Session["statusSelectedList"];
                    selectedIndices = (int[])Session["indexStatusSelectedList"];

                    List<String> listStatusUpdSession = new List<string>();
                    foreach (var index in selectedIndices)
                    {
                        listStatusUpdSession.Add(fileCountries[index]);
                    }

                    UpdateStatusListSelected(listStatusUpdSession);

                    if (listStatusUpdSession.Where(w => w == "(Todos os Status)").Count() == 0)
                    {
                        foreach (var index in selectedIndices)
                        {
                            listStatus.Add(fileCountries[index]);
                        }
                    }
                }
                else
                {
                    List<Params_Usuario_Pedido_Venda> listStatusLogin = hlbappSession.Params_Usuario_Pedido_Venda
                            .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                                && w.Parametro == "Status").ToList();

                    foreach (var statusLogin in listStatusLogin)
                    {
                        listStatus.Add(statusLogin.Valor);
                    }

                    Session["statusSelectedList"] = listStatus.ToArray();

                    List<int> listSelectedIndicesFiltro = new List<int>();
                    int[] selectedIndicesFiltro = null;
                    foreach (var item in listStatus.ToArray())
                    {
                        listSelectedIndicesFiltro.Add(listStatus.IndexOf(item));
                    }
                    selectedIndicesFiltro = listSelectedIndicesFiltro.ToArray();

                    Session["indexStatusSelectedList"] = selectedIndicesFiltro;
                }

                #endregion

                #region Filtro Linhas

                List<String> listLinhas = new List<string>();
                String[] fileLinhas = null;
                int[] selectedLinhas = null;
                if (Session["linhaSelectedList"] != null)
                {
                    fileLinhas = (String[])Session["linhaSelectedList"];
                    selectedLinhas = (int[])Session["indexLinhaSelectedList"];

                    List<String> listLinhaUpdSession = new List<string>();
                    foreach (var index in selectedLinhas)
                    {
                        listLinhaUpdSession.Add(fileLinhas[index]);
                    }

                    UpdateLinhasListSelected(listLinhaUpdSession);

                    if (listLinhaUpdSession.Where(w => w == "(Todas as Linhas)").Count() == 0)
                    {
                        foreach (var index in selectedLinhas)
                        {
                            listLinhas.Add(fileLinhas[index]);
                        }
                    }
                }

                #endregion

                hlbappSession.SaveChanges();

                if (Session["listaIndexPV"] == null)
                {
                    List<Pedido_Venda> listaPV = ListaPV(customer, dataInicial, dataFinal, status,
                        empresa, vendedor, codCHIC, idPedido, listStatus, listLinhas, projecao);

                    Session["listaIndexPV"] = listaPV;
                }

                return View((List<Pedido_Venda>)Session["listaIndexPV"]);
            }
            catch (Exception ex)
            {
                int linenum = Convert.ToInt32(ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' ')));

                if (ex.InnerException == null)
                    ViewBag.Erro = "Erro ao carregar página:" + ex.Message;
                else
                    ViewBag.Erro = "Erro ao carregar página:" + ex.Message
                        + " /  Linha do Erro: " + linenum.ToString()
                        + " / Erro Interno: " + ex.InnerException.Message;

                //return RedirectToAction("Index", "HomeMobile");
                var listaErro = new List<Pedido_Venda>();
                Session["listaIndexPV"] = listaErro;
                return View(listaErro);
            }
        }

        public ActionResult SearchListPedVenda()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            return View();
        }

        public ActionResult CarregarListaPVFiltroView(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            #region Carrega Campos

            bool salvarParametros = false;
            if (model["salvarParametros"] != null)
                salvarParametros = Convert.ToBoolean(model["salvarParametros"].Replace("false,true", "true"));

            string Text = "";
            string empresaAnterior = Session["empresaSelecionadaPV"].ToString();
            if (model["Text"] != null)
            {
                Text = model["Text"];
                Session["statusSearch"] = Text;
                AtualizaDDL(Text, (List<SelectListItem>)Session["ListaStatus"]);
            }
            else
                Text = Session["statusSearch"].ToString();
            string customerName = "";
            if (model["customerName"] != null)
            {
                customerName = model["customerName"];
                Session["customerNameSearchPedVenda"] = customerName;
            }
            else
                customerName = Session["customerNameSearchPedVenda"].ToString();
            DateTime dataInicial = new DateTime();
            if (model["dataInicial"] != null)
            {
                dataInicial = Convert.ToDateTime(model["dataInicial"]);
                Session["dataInicial"] = dataInicial.ToShortDateString();
            }
            else
                dataInicial = Convert.ToDateTime(Session["dataInicial"].ToString());
            DateTime dataFinal = new DateTime();
            if (model["dataFinal"] != null)
            {
                dataFinal = Convert.ToDateTime(model["dataFinal"]);
                Session["dataFinal"] = dataFinal.ToShortDateString();
            }
            else
                dataFinal = Convert.ToDateTime(Session["dataFinal"].ToString());
            string empresa = "";
            if (model["empresa"] != null)
            {
                empresa = model["empresa"];
                Session["empresaSelecionadaPV"] = empresa;
                AtualizaDDL(empresa, (List<SelectListItem>)Session["ListaEmpresasPV"]);
            }
            else
                empresa = Session["empresaSelecionadaPV"].ToString();
            string vendedor = "";
            if (model["vendedor"] != null)
            {
                vendedor = model["vendedor"];
                Session["vendedorSelecionadoPV"] = vendedor;
            }
            else
                vendedor = Session["vendedorSelecionadoPV"].ToString();
            Session["ListaVendedoresPV"] = CarregaVendedores(empresa, true);
            AtualizaDDL(vendedor, (List<SelectListItem>)Session["ListaVendedoresPV"]);

            if (model["empresa"] != null)
            {
                if (model["empresa"] != empresaAnterior)
                {
                    return View("SearchListPedVenda");
                }
            }

            string codigoCHIC = "";
            if (model["codigoCHIC"] != null)
            {
                codigoCHIC = model["codigoCHIC"];
                Session["codigoCHICSearchPedVenda"] = codigoCHIC;
            }
            else
                codigoCHIC = Session["codigoCHICSearchPedVenda"].ToString();
            string idPedido = "";
            if (model["idPedido"] != null)
            {
                idPedido = model["idPedido"];
                Session["idPedidoSearchPedVenda"] = idPedido;
            }
            else
                idPedido = Session["idPedidoSearchPedVenda"].ToString();

            #endregion

            #region Comentado

            //Session["customerNameSearchPedVenda"] = customerName;
            //Session["statusSearch"] = Text;
            //Session["dataInicial"] = dataInicial.ToShortDateString();
            //Session["dataFinal"] = dataFinal.ToShortDateString();
            //if (empresa != null)
            //    Session["empresaSelecionadaPV"] = empresa;
            //else
            //    empresa = Session["empresaSelecionadaPV"].ToString();
            //if (vendedor != null)
            //    Session["vendedorSelecionadoPV"] = vendedor;
            //else
            //    vendedor = Session["vendedorSelecionadoPV"].ToString();
            //AtualizaDDL(vendedor, (List<SelectListItem>)Session["ListaVendedoresPV"]);
            //AtualizaDDL(Text, (List<SelectListItem>)Session["ListaStatus"]);
            //Session["ListaVendedoresPV"] = CarregaVendedores(empresa);
            //Session["codigoCHICSearchPedVenda"] = codigoCHIC;
            //Session["idPedidoSearchPedVenda"] = idPedido;

            #endregion

            #region Filtro Status

            String[] fileCountries = null;
            int[] selectedIndices = null;
            if ((model.Count > 0) && (model["name"] != null))
            {
                fileCountries = ("," + model["name"]).Split(',');
                selectedIndices = model["statusSelect"].Replace("true,false", "true")
                                    .Split(',')
                                    .Select((item, index) => new { item = item, index = index })
                                    .Where(row => row.item == "true")
                                    .Select(row => row.index).ToArray();
                Session["statusSelectedList"] = fileCountries;
                Session["indexStatusSelectedList"] = selectedIndices;
            }
            else
            {
                fileCountries = (String[])Session["statusSelectedList"];
                selectedIndices = (int[])Session["indexStatusSelectedList"];
            }

            List<String> listStatus = new List<string>();

            List<String> listStatusUpdSession = new List<string>();
            foreach (var index in selectedIndices)
            {
                listStatusUpdSession.Add(fileCountries[index]);
            }

            UpdateStatusListSelected(listStatusUpdSession);

            if (listStatusUpdSession.Where(w => w == "(Todos os Status)").Count() == 0)
            {
                foreach (var index in selectedIndices)
                {
                    listStatus.Add(fileCountries[index]);
                }
            }

            #endregion

            #region Salvar Parâmetros

            if (salvarParametros)
            {
                string login = Session["login"].ToString();

                #region Datas

                Params_Usuario_Pedido_Venda paramDataInicial = hlbappSession.Params_Usuario_Pedido_Venda
                    .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                        && w.Parametro == "DataInicial").FirstOrDefault();

                Params_Usuario_Pedido_Venda paramDataFinal = hlbappSession.Params_Usuario_Pedido_Venda
                    .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                        && w.Parametro == "DataFinal").FirstOrDefault();

                if (paramDataInicial == null)
                {
                    paramDataInicial = new Params_Usuario_Pedido_Venda();
                    paramDataInicial.Login = login;
                    paramDataInicial.Parametro = "DataInicial";
                    paramDataInicial.Modulo = "PedidoVenda";
                }

                if (paramDataFinal == null)
                {
                    paramDataFinal = new Params_Usuario_Pedido_Venda();
                    paramDataFinal.Login = login;
                    paramDataFinal.Parametro = "DataFinal";
                    paramDataFinal.Modulo = "PedidoVenda";
                }

                paramDataInicial.Valor = dataInicial.ToShortDateString();
                paramDataFinal.Valor = dataFinal.ToShortDateString();

                #endregion

                #region Status

                List<Params_Usuario_Pedido_Venda> listStatusLogin = hlbappSession.Params_Usuario_Pedido_Venda
                        .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                            && w.Parametro == "Status").ToList();

                if (listStatusLogin.Count > 0)
                {
                    //listStatusLogin.RemoveAll(r => r.Login == login);
                    foreach (var item in listStatusLogin)
                    {
                        hlbappSession.Params_Usuario_Pedido_Venda.DeleteObject(item);
                    }
                    hlbappSession.SaveChanges();
                }

                foreach (var item in listStatus)
                {
                    Params_Usuario_Pedido_Venda statusLogin = hlbappSession.Params_Usuario_Pedido_Venda
                        .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                            && w.Parametro == "Status" && w.Valor == item).FirstOrDefault();

                    if (statusLogin == null)
                    {
                        statusLogin = new Params_Usuario_Pedido_Venda();
                        statusLogin.Login = login;
                        statusLogin.Parametro = "Status";
                        statusLogin.Modulo = "PedidoVenda";
                        statusLogin.Valor = item;
                        hlbappSession.Params_Usuario_Pedido_Venda.AddObject(statusLogin);
                    }
                    else
                    {
                        statusLogin.Valor = item;
                    }
                }

                hlbappSession.SaveChanges();

                #endregion
            }

            #endregion

            #region Filtro Linhas

            String[] fileLinhas = null;
            int[] selectedLinhas = null;
            if ((model.Count > 0) && (model["linha"] != null))
            {
                fileLinhas = ("," + model["linha"]).Split(',');
                selectedLinhas = model["linhaSelect"].Replace("true,false", "true")
                                    .Split(',')
                                    .Select((item, index) => new { item = item, index = index })
                                    .Where(row => row.item == "true")
                                    .Select(row => row.index).ToArray();
                Session["linhaSelectedList"] = fileLinhas;
                Session["indexLinhaSelectedList"] = selectedLinhas;
            }
            else
            {
                fileLinhas = (String[])Session["linhaSelectedList"];
                selectedLinhas = (int[])Session["indexLinhaSelectedList"];
            }

            List<String> listLinhasStr = new List<string>();

            List<String> listLinhaUpdSession = new List<string>();
            foreach (var index in selectedLinhas)
            {
                listLinhaUpdSession.Add(fileLinhas[index]);
            }

            UpdateLinhasListSelected(listLinhaUpdSession);

            if (listLinhaUpdSession.Where(w => w == "(Todas as Linhas)").Count() == 0)
            {
                foreach (var index in selectedLinhas)
                {
                    listLinhasStr.Add(fileLinhas[index]);
                }
            }

            #endregion

            string projecao = Session["projecaoSearch"].ToString();

            List<Pedido_Venda> listaPV = ListaPV(customerName, dataInicial, dataFinal, Text,
                empresa, vendedor, codigoCHIC, idPedido, listStatus, listLinhasStr, projecao);

            Session["listaIndexPV"] = listaPV;

            return View("Index", listaPV);
        }

        public ActionResult SearchListPedVendaByStatus(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            #region Carrega Campos

            bool salvarParametros = false;
            if (model["salvarParametros"] != null)
                salvarParametros = Convert.ToBoolean(model["salvarParametros"].Replace("false,true", "true"));

            string projecao = "";
            if (model["Projecao"] != null)
            {
                projecao = model["Projecao"].ToString();
                Session["projecaoSearch"] = projecao;
                AtualizaDDL(projecao, (List<SelectListItem>)Session["ListaSimNaoSearch"]);
            }

            #region Filtro Status

            String[] fileCountries = null;
            int[] selectedIndices = null;
            if (model.Count > 0)
            {
                fileCountries = ("," + model["name"]).Split(',');
                selectedIndices = model["statusSelect"].Replace("true,false", "true")
                                    .Split(',')
                                    .Select((item, index) => new { item = item, index = index })
                                    .Where(row => row.item == "true")
                                    .Select(row => row.index).ToArray();
                Session["statusSelectedList"] = fileCountries;
                Session["indexStatusSelectedList"] = selectedIndices;
            }
            else
            {
                fileCountries = (String[])Session["statusSelectedList"];
                selectedIndices = (int[])Session["indexStatusSelectedList"];
            }

            List<String> listStatus = new List<string>();

            List<String> listStatusUpdSession = new List<string>();
            foreach (var index in selectedIndices)
            {
                listStatusUpdSession.Add(fileCountries[index]);
            }

            UpdateStatusListSelected(listStatusUpdSession);

            if (listStatusUpdSession.Where(w => w == "(Todos os Status)").Count() == 0)
            {
                foreach (var index in selectedIndices)
                {
                    listStatus.Add(fileCountries[index]);
                }
            }

            #endregion

            #region Salvar Parâmetros

            if (salvarParametros)
            {
                string login = Session["login"].ToString();

                #region Status

                List<Params_Usuario_Pedido_Venda> listStatusLogin = hlbappSession.Params_Usuario_Pedido_Venda
                        .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                            && w.Parametro == "Status").ToList();

                if (listStatusLogin.Count > 0)
                {
                    //listStatusLogin.RemoveAll(r => r.Login == login);
                    foreach (var item in listStatusLogin)
                    {
                        hlbappSession.Params_Usuario_Pedido_Venda.DeleteObject(item);
                    }
                    hlbappSession.SaveChanges();
                }

                foreach (var item in listStatus)
                {
                    Params_Usuario_Pedido_Venda statusLogin = hlbappSession.Params_Usuario_Pedido_Venda
                        .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                            && w.Parametro == "Status" && w.Valor == item).FirstOrDefault();

                    if (statusLogin == null)
                    {
                        statusLogin = new Params_Usuario_Pedido_Venda();
                        statusLogin.Login = login;
                        statusLogin.Parametro = "Status";
                        statusLogin.Modulo = "PedidoVenda";
                        statusLogin.Valor = item;
                        hlbappSession.Params_Usuario_Pedido_Venda.AddObject(statusLogin);
                    }
                    else
                    {
                        statusLogin.Valor = item;
                    }
                }

                hlbappSession.SaveChanges();

                #endregion
            }

            #endregion

            DateTime dataInicial = Convert.ToDateTime(Session["dataInicial"].ToString());
            DateTime dataFinal = Convert.ToDateTime(Session["dataFinal"].ToString());
            string customer = Session["customerNameSearchPedVenda"].ToString();
            string status = Session["statusSearch"].ToString();
            string empresa = Session["empresaSelecionadaPV"].ToString();
            string vendedor = Session["vendedorSelecionadoPV"].ToString();
            string codCHIC = Session["codigoCHICSearchPedVenda"].ToString();
            string idPedido = Session["idPedidoSearchPedVenda"].ToString();

            #endregion

            #region Filtro Linhas

            List<String> listLinhas = new List<string>();
            String[] fileLinhas = null;
            int[] selectedLinhas = null;
            if (Session["linhaSelectedList"] != null)
            {
                fileLinhas = (String[])Session["linhaSelectedList"];
                selectedLinhas = (int[])Session["indexLinhaSelectedList"];

                List<String> listLinhaUpdSession = new List<string>();
                foreach (var index in selectedLinhas)
                {
                    listLinhaUpdSession.Add(fileLinhas[index]);
                }

                UpdateLinhasListSelected(listLinhaUpdSession);

                if (listLinhaUpdSession.Where(w => w == "(Todas as Linhas)").Count() == 0)
                {
                    foreach (var index in selectedLinhas)
                    {
                        listLinhas.Add(fileLinhas[index]);
                    }
                }
            }

            #endregion

            List<Pedido_Venda> listaPV = ListaPV(customer, dataInicial, dataFinal, status,
                empresa, vendedor, codCHIC, idPedido, listStatus, listLinhas, projecao);

            Session["listaIndexPV"] = listaPV;

            return View("Index", listaPV);
        }

        public ActionResult FiltraStatusPV(string status)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            List<Pedido_Venda> listaPV = FilterListaPV();
            List<Pedido_Venda> listaPVFilterStatus = new List<Pedido_Venda>();

            foreach (var item in listaPV)
	        {
                if (item.Status == status)
                    listaPVFilterStatus.Add(item);
	        }

            return View("Index", listaPVFilterStatus);
        }

        #endregion

        public ActionResult CreatePV()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            LimpaVariaveisSessao();

            Session["origemPV"] = "Inclusão";
            Session["status"] = "Inclusão Pendente";

            return View("AddClientePV");
        }

        public void CarregaPV(int id)
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            #region Carrega Pedido de Venda

            Pedido_Venda pedVenda = hlbappSession.Pedido_Venda
                .Where(w => w.ID == id).FirstOrDefault();

            Session["selectedCustomer"] = pedVenda.CodigoCliente;
            VerificaCadastroEntidade(pedVenda.CodigoCliente);
            if (pedVenda.EnderEntSeq == 0)
                Session["selectedTypeAddress"] = "Faturamento";
            else
                Session["selectedTypeAddress"] = "Outro";
            
            Session["selectedShipAddress"] = pedVenda.EnderEntSeq;

            if (pedVenda.OvosBrasil == 1)
                Session["ovosBrasilPV"] = true;
            else
                Session["ovosBrasilPV"] = false;
            Session["condicaoPagamentoPV"] = pedVenda.CondicaoPagamento;
            if (pedVenda.Observacoes != null)
                Session["observacaoPV"] = pedVenda.Observacoes;
            else
                Session["observacaoPV"] = "";
            Session["vendedorPV"] = pedVenda.Vendedor;
            Session["status"] = pedVenda.Status;
            if (pedVenda.DataEnvio != null)
            {
                Session["dataEnvio"] = pedVenda.DataEnvio;
                Session["horaEnvioPV"] = Convert.ToDateTime(pedVenda.DataEnvio).ToString("HH:mm");
            }
            else
            {
                Session["dataEnvio"] = DateTime.Today;
                Session["horaEnvioPV"] = "";
            }

            if (pedVenda.DataSaidaIncubatorio != null)
            {
                Session["dataSaidaIncubatorio"] = pedVenda.DataSaidaIncubatorio;
                Session["horaSaidaIncubatorioPV"] = Convert.ToDateTime(pedVenda.DataSaidaIncubatorio).ToString("HH:mm");
            }
            else
            {
                Session["dataSaidaIncubatorio"] = DateTime.Today;
                Session["horaSaidaIncubatorioPV"] = "";
            }

            if (pedVenda.EnviadoVia != null)
            {
                Session["viaDeEnvioSelecionada"] = pedVenda.EnviadoVia;
                AtualizaDDL(Session["viaDeEnvioSelecionada"].ToString(),
                        (List<SelectListItem>)Session["ListViaDeEnvio"]);
            }
            else
                Session["viaDeEnvioSelecionada"] = "";

            if (pedVenda.TipoPedido != null)
            {
                Session["tipoVendaSelecionado"] = pedVenda.TipoPedido;
                AtualizaDDL(Session["tipoVendaSelecionado"].ToString(),
                        (List<SelectListItem>)Session["ListaTipoVenda"]);
            }
            else
                Session["tipoVendaSelecionado"] = "";

            if (pedVenda.AeroportoOrigem != null)
            {
                Session["aeroportoOrigemSelecionado"] = pedVenda.AeroportoOrigem;
                AtualizaDDL(Session["aeroportoOrigemSelecionado"].ToString(),
                        (List<SelectListItem>)Session["ListAeroportoOrigem"]);
            }
            else
                Session["aeroportoOrigemSelecionado"] = "";

            if (pedVenda.AeroportoDestino != null)
            {
                Session["aeroportoDestinoSelecionado"] = pedVenda.AeroportoDestino;
                AtualizaDDL(Session["aeroportoDestinoSelecionado"].ToString(),
                        (List<SelectListItem>)Session["ListAeroportoDestino"]);
            }
            else
                Session["aeroportoDestinoSelecionado"] = "";

            if (pedVenda.NumeroVoo != null)
                Session["numeroVooPV"] = pedVenda.NumeroVoo;
            else
                Session["numeroVooPV"] = "";

            if (pedVenda.CiaAerea != null)
                Session["ciaAereaPV"] = pedVenda.CiaAerea;
            else
                Session["ciaAereaPV"] = "";

            if (pedVenda.AWB != null)
                Session["awbPV"] = pedVenda.AWB;
            else
                Session["awbPV"] = "";

            if (pedVenda.NCM != null)
                Session["ncmPV"] = pedVenda.NCM;
            else
                Session["ncmPV"] = "";

            if (pedVenda.CondicaoPagamento != null)
                Session["condPagPV"] = pedVenda.CondicaoPagamento;
            else
                Session["condPagPV"] = "";

            if (pedVenda.ValorDocumentacao != null)
                Session["valorDocumentacaoDE"] = pedVenda.ValorDocumentacao;
            else
                Session["valorDocumentacaoDE"] = 0;

            if (pedVenda.ValorFrete != null)
                Session["valorFreteDE"] = pedVenda.ValorFrete;
            else
                Session["valorFreteDE"] = 0;

            if (pedVenda.NumCaixas != null)
                Session["numCaixasDE"] = pedVenda.NumCaixas;
            else
                Session["numCaixasDE"] = 0;

            if (pedVenda.NumPaletes != null)
                Session["numPaletesDE"] = pedVenda.NumPaletes;
            else
                Session["numPaletesDE"] = 0;

            if (pedVenda.NumFatura != null)
                Session["numFaturaDE"] = pedVenda.NumFatura;
            else
                Session["numFaturaDE"] = "";

            if (pedVenda.DataColetaNascimento != null)
            {
                Session["dataColetaNascimento"] = pedVenda.DataColetaNascimento;
            }
            else
            {
                Session["dataColetaNascimento"] = DateTime.Today;
            }
            
            if (pedVenda.Placa != null)
                Session["placaPV"] = pedVenda.Placa;
            else
                Session["placaPV"] = "";

            if (pedVenda.Lacre != null)
                Session["lacrePV"] = pedVenda.Lacre;
            else
                Session["lacrePV"] = "";

            if (pedVenda.Motorista != null)
                Session["motoristaPV"] = pedVenda.Motorista;
            else
                Session["motoristaPV"] = "";

            if (pedVenda.RGMotorista != null)
                Session["rgMotoristaPV"] = pedVenda.RGMotorista;
            else
                Session["rgMotoristaPV"] = "";

            if (pedVenda.Veterinario != null)
            {
                Session["veterinarioSelecionado"] = pedVenda.Veterinario;
                AtualizaDDL(Session["veterinarioSelecionado"].ToString(),
                        (List<SelectListItem>)Session["ListVeterinarioResponsavel"]);
            }
            else
                Session["veterinarioSelecionado"] = "";

            List<LOG_Pedido_Venda> listlogPV = hlbappSession.LOG_Pedido_Venda
                .Where(w => w.IDPedidoVenda == id
                    && w.Motivo != null && w.Motivo != "")
                .OrderBy(o => o.DataHora)
                .ToList();

            Session["motivoAlteracaoPV"] = "";
            string logMotivo = "";

            foreach (var item in listlogPV)
            {
                logMotivo = logMotivo +
                    item.DataHora.ToShortDateString() + " " + item.DataHora.ToShortTimeString() +
                    " - " + item.Usuario + " - " + item.Motivo + (char)13 + (char)10 + (char)13 + (char)10;
            }

            Session["motivoAlteracaoPV"] = logMotivo;

            if (pedVenda.Projecao != null)
                Session["projecaoSelecionada"] = pedVenda.Projecao;
            else
                Session["projecaoSelecionada"] = "Não";

            AtualizaDDL(Session["projecaoSelecionada"].ToString(),
                        (List<SelectListItem>)Session["ListaSimNao"]);

            #endregion

            #region Carrega Itens do Pedido de Venda

            List<Item_Pedido_Venda> listaItens = hlbappSession.Item_Pedido_Venda
                .Where(w => w.IDPedidoVenda == pedVenda.ID).ToList();
            
            Session["dataEntregaInicial"] = listaItens.FirstOrDefault().DataEntregaInicial.ToString("dd/MM/yy HH:mm");
            Session["dataEntregaInicial"] = listaItens.FirstOrDefault().DataEntregaFinal.ToString("dd/MM/yy HH:mm");
            Session["horaEntregaPV"] = listaItens.FirstOrDefault().DataEntregaInicial.ToString("HH:mm");

            List<Item_Pedido_Venda> listaCarregaItens = new List<Item_Pedido_Venda>();

            decimal valorTotalPintinhoCalculado = 0;

            foreach (var item in listaItens)
            {
                Item_Pedido_Venda itemCarrega = new Item_Pedido_Venda();
                itemCarrega.ID = item.ID;
                itemCarrega.IDPedidoVenda = item.IDPedidoVenda;
                itemCarrega.ProdCodEstr = item.ProdCodEstr;
                itemCarrega.DataEntregaInicial = item.DataEntregaInicial;
                itemCarrega.DataEntregaFinal = item.DataEntregaFinal;
                itemCarrega.QtdeLiquida = item.QtdeLiquida;
                itemCarrega.PercBonificacao = item.PercBonificacao;
                itemCarrega.QtdeBonificada = item.QtdeBonificada;
                itemCarrega.QtdeReposicao = item.QtdeReposicao;
                itemCarrega.PrecoUnitario = item.PrecoUnitario;
                itemCarrega.Sequencia = item.Sequencia;
                itemCarrega.OrderNoCHIC = item.OrderNoCHIC;
                itemCarrega.Alterado = item.Alterado;
                itemCarrega.Importar = item.Importar;
                itemCarrega.OrderNoCHICReposicao = item.OrderNoCHICReposicao;
                itemCarrega.Vacina = item.Vacina;
                itemCarrega.ValorTotal = item.ValorTotal;
                itemCarrega.PrecoPinto = item.PrecoPinto;
                itemCarrega.TipoReposicao = item.TipoReposicao;
                itemCarrega.Sobra = item.Sobra;

                listaCarregaItens.Add(itemCarrega);

                #region Carrega Valor da Linhagem de acordo com a tabela

                if (item.OrderNoCHIC != "Cancelado")
                {
                    decimal precoPinto = 0;
                    if (item.PrecoPinto == null)
                        precoPinto = CalculaValorLinhagemTabelaPreco(item.IDPedidoVenda, item.ProdCodEstr);
                    else
                        precoPinto = Convert.ToDecimal(item.PrecoPinto);

                    valorTotalPintinhoCalculado = valorTotalPintinhoCalculado +
                        (precoPinto * item.QtdeLiquida);
                }

                #endregion
            }

            Session["ItensPVList"] = listaCarregaItens;

            List<Lote_Item_Pedido_Venda> listaLotesPV = hlbappSession.Lote_Item_Pedido_Venda
                .Where(w => hlbappSession.Item_Pedido_Venda.Any(a => a.ID == w.IDItemPedidoVenda
                    && a.IDPedidoVenda == pedVenda.ID)).ToList();

            List<Lote_Item_Pedido_Venda> listaCarregaLotesPV = new List<Lote_Item_Pedido_Venda>();

            foreach (var item in listaLotesPV)
            {
                Lote_Item_Pedido_Venda itemCarrega = new Lote_Item_Pedido_Venda();
                itemCarrega.ID = item.ID;
                itemCarrega.IDItemPedidoVenda = item.IDItemPedidoVenda;
                itemCarrega.Nucleo = item.Nucleo;
                itemCarrega.Lote = item.Lote;
                itemCarrega.Galpao = item.Galpao;
                itemCarrega.Qtde = item.Qtde;
                itemCarrega.Sequencia = item.Sequencia;
                itemCarrega.DataProducao = item.DataProducao;
                itemCarrega.IdadeLote = item.IdadeLote;
                itemCarrega.SeqItemPV = item.SeqItemPV;
                itemCarrega.PesoOvo = item.PesoOvo;

                listaCarregaLotesPV.Add(itemCarrega);
            }

            Session["ListaLotesItemPV"] = listaCarregaLotesPV;

            #endregion

            #region Carrega Vacina Primária

            Vacinas_Primaria_Pedido_Venda vacPrim = hlbappSession.Vacinas_Primaria_Pedido_Venda
                .Where(w => w.IDPedidoVenda == pedVenda.ID && w.SeqItemPedVenda == 0).FirstOrDefault();

            if (vacPrim != null)
            {
                if (vacPrim.ProdCodEstr != "")
                {
                    Session["vacinaPrimariaPV"] = vacPrim.ProdCodEstr;
                    if (vacPrim.Bonificada == 1)
                        Session["bonificaVacPrimPV"] = true;
                    else
                        Session["bonificaVacPrimPV"] = false;

                    if (vacPrim.Bonificada == 2)
                        Session["clienteVacPrimPV"] = true;
                    else
                        Session["clienteVacPrimPV"] = false;
                }
                else
                {
                    Session["vacinaPrimariaPV"] = "(Sem Vacinação)";
                    Session["bonificaVacPrimPV"] = false;
                    Session["clienteVacPrimPV"] = false;
                }
            }
            else
            {
                Session["vacinaPrimariaPV"] = "(Sem Vacinação)";
                Session["bonificaVacPrimPV"] = false;
                Session["clienteVacPrimPV"] = false;
            }

            List<Vacinas_Primaria_Pedido_Venda> listVacPrim = hlbappSession.Vacinas_Primaria_Pedido_Venda
                .Where(w => w.IDPedidoVenda == pedVenda.ID && w.SeqItemPedVenda != 0).ToList();

            List<Vacinas_Primaria_Pedido_Venda> listaCarregaVacPrim = new List<Vacinas_Primaria_Pedido_Venda>();

            foreach (var item in listVacPrim)
            {
                Vacinas_Primaria_Pedido_Venda itemCarrega = new Vacinas_Primaria_Pedido_Venda();
                itemCarrega.ID = item.ID;
                itemCarrega.IDPedidoVenda = item.IDPedidoVenda;
                itemCarrega.ProdCodEstr = item.ProdCodEstr;
                itemCarrega.SeqItemPedVenda = item.SeqItemPedVenda;
                itemCarrega.PrecoUnitario = item.PrecoUnitario;
                itemCarrega.Bonificada = item.Bonificada;

                listaCarregaVacPrim.Add(itemCarrega);
            }

            Session["VacinasPrimariaItemPVList"] = listaCarregaVacPrim;

            #endregion

            #region Carrega Vacinas Secundárias

            if (vacPrim != null)
            {
                List<Vacinas_Secundaria_Pedido_Venda> listaVacSec = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                    .Where(w => w.IDVacPrimPedVenda == vacPrim.ID).ToList();

                List<Vacinas_Secundaria_Pedido_Venda> listaCarregaVacSec = 
                    new List<Vacinas_Secundaria_Pedido_Venda>();

                foreach (var item in listaVacSec)
                {
                    Vacinas_Secundaria_Pedido_Venda itemCarrega = new Vacinas_Secundaria_Pedido_Venda();
                    itemCarrega.ID = item.ID;
                    itemCarrega.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                    itemCarrega.ProdCodEstr = item.ProdCodEstr;
                    itemCarrega.Sequencia = item.Sequencia;
                    itemCarrega.SeqItemPedVenda = item.SeqItemPedVenda;
                    itemCarrega.Bonificada = item.Bonificada;
                    itemCarrega.PrecoUnitario = item.PrecoUnitario;

                    listaCarregaVacSec.Add(itemCarrega);
                }

                Session["VacinasSecundariaPVList"] = listaCarregaVacSec;
            }
            else
                Session["VacinasSecundariaPVList"] = new List<Vacinas_Secundaria_Pedido_Venda>();

            List<Vacinas_Secundaria_Pedido_Venda> listaVacSecItemPV = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                .Where(w => hlbappSession.Vacinas_Primaria_Pedido_Venda.Any(a => a.ID == w.IDVacPrimPedVenda
                    && a.IDPedidoVenda == pedVenda.ID && a.SeqItemPedVenda != 0)).ToList();

            List<Vacinas_Secundaria_Pedido_Venda> listaCarregaVacSecItemPV =
                    new List<Vacinas_Secundaria_Pedido_Venda>();

            foreach (var item in listaVacSecItemPV)
            {
                Vacinas_Secundaria_Pedido_Venda itemCarrega = new Vacinas_Secundaria_Pedido_Venda();
                itemCarrega.ID = item.ID;
                itemCarrega.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                itemCarrega.ProdCodEstr = item.ProdCodEstr;
                itemCarrega.Sequencia = item.Sequencia;
                itemCarrega.SeqItemPedVenda = item.SeqItemPedVenda;

                listaCarregaVacSecItemPV.Add(itemCarrega);
            }

            Session["VacinasSecundariaItemPVList"] = listaCarregaVacSecItemPV;

            #endregion

            #region Carrega Serviço

            Servicos_Pedido_Venda serv = hlbappSession.Servicos_Pedido_Venda
                .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

            Session["mascaraTIDiferenteProtocolo"] = false;
            Session["mascaraTI"] = "";

            if (serv != null)
            {
                Session["tratamentoInfravermelhoPV"] = true;
                Session["qtdTratamentoInfravermelhoPV"] = serv.PercAplicacaoServico;

                if (serv.Bonificada == 1)
                    Session["bonificaServicoPV"] = true;
                else
                    Session["bonificaServicoPV"] = false;

                #region Carrega dados da Mascara

                Session["ListaMascaraTI"] = CarregaListaMascaraTI();
                
                if (serv.MascaraTI != "Protocolo" && serv.MascaraTI != null)
                {
                    Session["mascaraTIDiferenteProtocolo"] = true;
                    if (serv.MascaraTI != null) Session["mascaraTI"] = serv.MascaraTI;
                    AtualizaDDL(Session["mascaraTI"].ToString(), (List<SelectListItem>)Session["ListaMascaraTI"]);
                }

                #endregion
            }

            #endregion

            #region Carrega Valor do Pintinho

            if (pedVenda.ValorTotalPintinho != null)
                Session["valorTotalPintinho"] = pedVenda.ValorTotalPintinho;
            else
            {
                Session["valorTotalPintinho"] = Decimal.Round(valorTotalPintinhoCalculado,2);
            }

            #endregion
        }

        public ActionResult EditPV(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            LimpaVariaveisSessao();

            Session["origemPV"] = "Alteração";
            Session["idSelecionado"] = id;

            CarregaPV(id);

            string codigoCliente = Session["selectedCustomer"].ToString();

            string login = "";

            if (Session["login"].ToString().Contains("@"))
            {
                login = Session["login"].ToString();
            }

            Session["CustomerList"] = apoloStatic.ENTIDADE
                .Where(w => apoloStatic.VEND_ENT.Any(a => a.EntCod == w.EntCod
                    && apoloStatic.VENDEDOR.Any(n => n.VendCod == a.VendCod
                        && (n.USERLoginSite == login || login == "")))
                    && w.EntCod == codigoCliente
                    && (w.StatEntCod == "01" || w.StatEntCod == "02" || w.StatEntCod == "03"))
                .OrderBy(o => o.EntNome)
                .ToList();

            //return View("AddClientePV");

            CarregaTipoAlteracao();

            return View("FinalizaPV");
        }

        public ActionResult EditFormPV(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            LimpaVariaveisSessao();

            bool todasVacinas = (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaVisualizaTodasVacinas",
                (System.Collections.ArrayList)Session["Direitos"]));

            if (Session["idSelecionado"].ToString() == "0")
            {
                Session["viewEdit"] = "";

                Session["buttonFinaliza"] = "Finalizar Pedido";

                #region Carrega Cliente e Endereço de Entrega

                Session["origemPV"] = "Alteração";
                Session["origemPVForm"] = "Form";
                Session["idSelecionado"] = id;

                Pedido_Venda pedVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();
                Item_Pedido_Venda primeiroItem = hlbappSession.Item_Pedido_Venda.Where(w => w.IDPedidoVenda == id)
                    .FirstOrDefault();

                int existeItemImportado = hlbappSession.Item_Pedido_Venda.Where(w => w.IDPedidoVenda == id
                        && ((w.OrderNoCHIC != "" && w.OrderNoCHIC != null)
                        ||
                            (w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != null)))
                    .Count();

                CarregaPV(id);
                CalculaValoresVacinasServicosPV();

                //if (primeiroItem.DataEntregaInicial < DateTime.Today && existeItemImportado > 0
                //    && pedVenda.Status.Equals("Importado Total"))
                //{
                //    Session["origemPV"] = "";
                //    ViewBag.Erro = "Pedido Já Faturado! Não pode ser mais alterado!";
                //    return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
                //}

                AtualizaDDL(pedVenda.CodigoCliente, (List<SelectListItem>)Session["ListaClientesPV"]);

                string codigoCliente = Session["selectedCustomer"].ToString();
                int seq = Convert.ToInt32(Session["selectedShipAddress"].ToString());
                VerificaCadastroEntidade(codigoCliente);

                Session["ListaEnderecoEntrega"] = CarregaEnderecoEntregaList(codigoCliente, seq);

                CarregaTipoAlteracao();

                #region Verifica Se o Cliente está no Bolsão de LTI

                string participaBolsao = "Não";
                string enderecoEntrega = Session["selectedShipAddress"].ToString();
                string tipoEnderecoEntrega = Session["selectedTypeAddress"].ToString();

                ENTIDADE cliente = apoloStatic.ENTIDADE.Where(w => w.EntCod == codigoCliente).FirstOrDefault();

                if (cliente != null)
                {
                    if (tipoEnderecoEntrega.Equals("Faturamento"))
                    {
                        MvcAppHylinedoBrasilMobile.Models.bdApolo2.CIDADE cidade =
                            apolo2Static.CIDADE.Where(w => w.CidCod == cliente.CidCod).FirstOrDefault();

                        if (cidade != null)
                        {
                            if (cidade.USERBolsaoLT != null && cidade.USERBolsaoLT != "(Nenhum)")
                                participaBolsao = "Sim";
                        }
                    }
                }

                Session["clienteParticipaBolsao"] = participaBolsao;

                #endregion

                #endregion

                if (pedVenda.Status.Equals("Documentação de Exportação"))
                {
                    #region Carrega Lista de Clientes

                    string login = "";

                    if (Session["login"].ToString().Contains("@"))
                    {
                        login = Session["login"].ToString();
                    }

                    Session["CustomerList"] = apoloStatic.ENTIDADE
                        .Where(w => apoloStatic.VEND_ENT.Any(a => a.EntCod == w.EntCod
                            && apoloStatic.VENDEDOR.Any(n => n.VendCod == a.VendCod
                                && (n.USERLoginSite == login || login == "")))
                            && w.EntCod == codigoCliente
                            && (w.StatEntCod == "01" || w.StatEntCod == "02" || w.StatEntCod == "03"))
                        .OrderBy(o => o.EntNome)
                        .ToList();

                    Session["viewEdit"] = "FinalizaPV";

                    Session["origemPVForm"] = "Exportação";

                    return View("FinalizaPV");

                    #endregion
                }
                else
                {
                    #region Carrega Vacina Primária

                    List<SelectListItem> ddlVacinas = CarregaVacinasPrimarias();

                    ddlVacinas.Add(new SelectListItem
                    {
                        Text = "(Sem Vacinação)",
                        Value = "(Sem Vacinação)",
                        Selected = false
                    });

                    Session["ListaVacinasPrimarias"] = ddlVacinas.OrderBy(o => o.Text).ToList();

                    Vacinas_Primaria_Pedido_Venda vacPrim = hlbappSession.Vacinas_Primaria_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                    if (vacPrim != null)
                        AtualizaDDL(vacPrim.ProdCodEstr, (List<SelectListItem>)Session["ListaVacinasPrimarias"]);

                    #endregion

                    #region Carrega Vacinas Secundárias Já selecionadas

                    var itensVacinaList = (List<MvcAppHylinedoBrasilMobile.Models.Vacinas_Secundaria_Pedido_Venda>)
                        Session["VacinasSecundariaPVList"];

                    Session["boubaAviariaPV"] = false;
                    Session["boubaZoetisPV"] = false;
                    Session["coccidiosePV"] = false;
                    Session["gumboroPV"] = false;
                    Session["laringoClientePV"] = false;
                    Session["laringoIncubatorioPV"] = false;
                    Session["newcastlePV"] = false;
                    Session["salmonellaPV"] = false;
                    Session["vectormuneFPMGPV"] = false;
                    Session["magniplex"] = false;
                    Session["livacoxQ"] = false;
                    Session["vectormuneFPLT"] = false;
                    Session["innovaxNDIBD"] = false;

                    Session["bonificaCoccidiosePV"] = false;
                    Session["bonificaLaringoIncubatorioPV"] = false;
                    Session["bonificaNewcastlePV"] = false;
                    Session["bonificaVectormuneFPMGPV"] = false;
                    Session["bonificaMagniplex"] = false;
                    Session["bonificaVectormuneFPLT"] = false;
                    Session["bonificaInnovaxNDIBD"] = false;

                    Session["clienteCoccidiosePV"] = false;
                    Session["clienteLaringoIncubatorioPV"] = false;
                    Session["clienteNewcastlePV"] = false;
                    Session["clienteVectormuneFPMGPV"] = false;
                    Session["clienteMagniplex"] = false;
                    Session["clienteVectormuneFPLT"] = false;
                    Session["clienteInnovaxNDIBD"] = false;
                    
                    foreach (var item in itensVacinaList)
                    {
                        AtualizaSessionCheckedVacinasSecundarias(item.ProdCodEstr, true);
                        if (item.Bonificada == 1)
                            AtualizaSessionCheckedBonificaVacinasSecundarias(item.ProdCodEstr, true);
                        else if (item.Bonificada == 2)
                            AtualizaSessionCheckedClienteVacinasSecundarias(item.ProdCodEstr, true);
                    }

                    #endregion

                    #region Verifica Vacinas Secundárias Disponíveis

                    Session["disabledBoubaAviariaPV"] = true;
                    Session["disabledBoubaZoetisPV"] = true;
                    Session["disabledCoccidiosePV"] = true;
                    Session["disabledGumboroPV"] = true;
                    Session["disabledLaringoClientePV"] = true;
                    Session["disabledLaringoIncubatorioPV"] = true;
                    Session["disabledNewcastlePV"] = true;
                    Session["disabledSalmonellaPV"] = true;
                    Session["disabledVectormuneFPMG"] = true;
                    Session["disabledMagniplex"] = true;
                    Session["disabledLivacoxQ"] = true;
                    Session["disabledVectormuneFPLT"] = true;
                    Session["disabledInnovaxNDIBD"] = true;

                    string empresas = Session["empresa"].ToString();

                    if (vacPrim != null)
                    {
                        string vacinaPrimaria = vacPrim.ProdCodEstr;

                        List<SelectListItem> ddlVacSec = new List<SelectListItem>();

                        for (int i = 0; i < empresas.Length; i = i + 2)
                        {
                            string empStr = empresas.Substring(i, 2);

                            var listaSecundaria = apoloStatic.PRODUTO
                                .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                                    && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                                        && n.GrpProdCod == "041" && n.SubGrpProdCod == "042")
                                    && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(g => g.ProdCodEstr == w.ProdCodEstr
                                        && g.GrpProdCod == "042" && (g.SubGrpProdCod == empStr || todasVacinas))
                                        && a.ProdCodEstr == vacinaPrimaria))
                                .ToList();

                            foreach (var item in listaSecundaria)
                            {
                                //if (itensVacinaList.Where(w => w.ProdCodEstr == item.ProdCodEstr).Count() == 0)
                                //{
                                var listaFilhosVacSec = apoloStatic.PRODUTO
                                    .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                                        && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                                            && n.GrpProdCod == "041" && n.SubGrpProdCod == "043")
                                            && a.ProdCodEstr == item.ProdCodEstr))
                                    .ToList();

                                var listaPaiVacSec = apoloStatic.PRODUTO
                                    .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.ProdCodEstr == w.ProdCodEstr
                                        && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                                            && n.GrpProdCod == "041" && n.SubGrpProdCod == "043")
                                            && a.FicTecProdCodEstr == item.ProdCodEstr))
                                    .ToList();

                                int naoPode = 0;

                                if (listaFilhosVacSec.Count > 0)
                                {
                                    foreach (var itemFilho in listaFilhosVacSec)
                                    {
                                        if (itensVacinaList.Where(w => w.ProdCodEstr == itemFilho.ProdCodEstr).Count() > 0)
                                        {
                                            naoPode = 1;
                                        }
                                    }
                                }

                                if (listaPaiVacSec.Count > 0)
                                {
                                    foreach (var itemPai in listaPaiVacSec)
                                    {
                                        if (itensVacinaList.Where(w => w.ProdCodEstr == itemPai.ProdCodEstr).Count() > 0)
                                        {
                                            naoPode = 1;
                                        }
                                    }
                                }

                                if (naoPode == 0)
                                {
                                    AtualizaSessionDisabledVacinasSecundarias(item.ProdCodEstr, false);
                                }
                                //}
                            }
                        }
                    }

                    #endregion

                    #region Carrega Condição de Pagamento

                    if (Session["condicaoPagamentoPV"] != null)
                        AtualizaCondPagSelecionado(Session["condicaoPagamentoPV"].ToString());

                    #endregion

                    #region Carrega Lista Vendedores

                    //CHICMobileDataSet.salesmanDataTable salesmanDT = new CHICMobileDataSet.salesmanDataTable();
                    //salesmanTableAdapter salesmanTA = new salesmanTableAdapter();

                    string login = "";
                    if (Session["login"].ToString().Contains("@"))
                        login = Session["login"].ToString();

                    if (login != "")
                    {
                        string empresa = Session["empresa"].ToString();

                        bdApoloEntities apoloSession = new bdApoloEntities();
                        var listaVendedores = apoloSession.VU_Vendedores.Where(w => w.Login == login).ToList();

                        //salesmanTA.FillByEmailAndEmpresa(salesmanDT, login, login, "", "");

                        List<SelectListItem> ddlSalesman = new List<SelectListItem>();

                        //foreach (var item in salesmanDT.ToList())
                        foreach (var item in listaVendedores)
                        {
                            // if (salesmanDT.ToList().IndexOf(item) == 0)
                            if (listaVendedores.ToList().IndexOf(item) == 0)
                                if ((Session["vendedorPV"] == null) || (Session["vendedorPV"].ToString() == ""))
                                    Session["vendedorPV"] = item.VendCod;

                            ddlSalesman.Add(new SelectListItem
                            {
                                //Text = item.sl_code.Trim() + " - " + item.salesman.Trim(),
                                //Value = item.sl_code.Trim(),
                                Text = item.VendCod + " - " + item.VendNome,
                                Value = item.VendCod,
                                Selected = false
                            });
                        }

                        Session["ListaVendedores"] = ddlSalesman;
                    }
                    else
                    {
                        List<SelectListItem> listaVend = new List<SelectListItem>();

                        for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
                        {
                            string empStr = Session["empresa"].ToString().Substring(i, 2);
                            List<SelectListItem> retorno = CarregaVendedores(empStr, false);
                            foreach (var item in retorno)
                            {
                                listaVend.Add(item);
                            }
                        }

                        Session["ListaVendedores"] = listaVend;
                    }

                    if (Session["vendedorPV"] != null)
                        AtualizaVendedorSelecionado(Session["vendedorPV"].ToString());

                    #endregion

                    #region Verifica Vacinas

                    string retornoVerificaVacinas = VerificaVacinas(pedVenda.Empresa, Session["vacinaPrimariaPV"].ToString(),
                        itensVacinaList, true);

                    if (retornoVerificaVacinas != "")
                    {
                        ViewBag.Erro = retornoVerificaVacinas + (char)13 + (char)10
                            + (char)13 + (char)10 + " A(s) mesma(s) já foi(ram) excluída(s)! Para salvar o ajuste, clique em 'Finaliza Pedido'!";
                    }

                    #endregion

                    Session["viewEdit"] = "AlterPV";

                    return View("AlterPV");
                }
            }

            return View(Session["viewEdit"].ToString());
        }

        public ActionResult CreateFormPV(bool variosPedidos)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            LimpaVariaveisSessao();

            Session["viewEdit"] = "";

            Session["VariosPedidos"] = variosPedidos;

            if (variosPedidos)
                Session["buttonFinaliza"] = "Gerar Pedidos";
            else
                Session["buttonFinaliza"] = "Finalizar Pedido";

            if (Session["condicaoPagamentoPV"].ToString() == "")
                Session["condicaoPagamentoPV"] = ((List<SelectListItem>)Session["ListaCondicaoPagamento"])
                    .FirstOrDefault().Value;

            #region Carrega Cliente e Endereço de Entrega

            Session["origemPV"] = "Inclusão";
            Session["origemPVForm"] = "";

            Session["status"] = "Inclusão Pendente";

            string id = "";
            var listaClientes = (List<SelectListItem>)Session["ListaClientesPV"];
            if (listaClientes.Count > 0)
            {
                id = listaClientes.FirstOrDefault().Value;
                Session["selectedCustomer"] = id;
                VerificaCadastroEntidade(id);
                AtualizaDDL(id, (List<SelectListItem>)Session["ListaClientesPV"]);
            }

            string enderecoEntrega = "";
            var listaEnderecoEntrega = (List<SelectListItem>)Session["ListaEnderecoEntrega"];
            if (listaEnderecoEntrega.Count > 0)
            {
                enderecoEntrega = listaEnderecoEntrega.FirstOrDefault().Value;
                Session["selectedShipAddress"] = enderecoEntrega;

                if (enderecoEntrega == "0")
                    Session["selectedTypeAddress"] = "Faturamento";
                else
                    Session["selectedTypeAddress"] = "Outro";
            }

            //Session["ListaEnderecoEntrega"] = new List<SelectListItem>();

            CarregaTipoAlteracao();

            #endregion

            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"]))
            {
                #region Carrega Lista de Clientes

                Session["viewEdit"] = "FinalizaPV";

                Session["origemPV"] = "Inclusão";
                Session["status"] = "Inclusão Pendente";

                return View("AddClientePV");

                #endregion
            }
            else
            {
                Session["origemPVForm"] = "Form";

                #region Carrega Vacina Primária

                List<SelectListItem> ddlVacinas = CarregaVacinasPrimarias();

                ddlVacinas.Add(new SelectListItem
                {
                    Text = "(Sem Vacinação)",
                    Value = "(Sem Vacinação)",
                    Selected = false
                });

                Session["ListaVacinasPrimarias"] = ddlVacinas.OrderBy(o => o.Text).ToList();

                #endregion

                #region Carrega Vacinas Secundárias Já selecionadas

                var itensVacinaList = (List<MvcAppHylinedoBrasilMobile.Models.Vacinas_Secundaria_Pedido_Venda>)
                    Session["VacinasSecundariaPVList"];

                Session["boubaAviariaPV"] = false;
                Session["boubaZoetisPV"] = false;
                Session["coccidiosePV"] = false;
                Session["gumboroPV"] = false;
                Session["laringoClientePV"] = false;
                Session["laringoIncubatorioPV"] = false;
                Session["newcastlePV"] = false;
                Session["salmonellaPV"] = false;
                Session["vectormuneFPMGPV"] = false;
                Session["magniplex"] = false;
                Session["livacoxQ"] = false;
                Session["vectormuneFPLT"] = false;
                Session["innovaxNDIBD"] = false;

                Session["bonificaCoccidiosePV"] = false;
                Session["bonificaLaringoIncubatorioPV"] = false;
                Session["bonificaNewcastlePV"] = false;
                Session["bonificaVectormuneFPMGPV"] = false;
                Session["bonificaMagniplex"] = false;
                Session["bonificaVectormuneFPLT"] = false;
                Session["bonificaInnovaxNDIBD"] = false;

                Session["clienteCoccidiosePV"] = false;
                Session["clienteLaringoIncubatorioPV"] = false;
                Session["clienteNewcastlePV"] = false;
                Session["clienteVectormuneFPMGPV"] = false;
                Session["clienteMagniplex"] = false;
                Session["clienteVectormuneFPLT"] = false;
                Session["clienteInnovaxNDIBD"] = false;

                #endregion

                #region Verifica Vacinas Secundárias Disponíveis

                Session["disabledBoubaAviariaPV"] = true;
                Session["disabledBoubaZoetisPV"] = true;
                Session["disabledCoccidiosePV"] = true;
                Session["disabledGumboroPV"] = true;
                Session["disabledLaringoClientePV"] = true;
                Session["disabledLaringoIncubatorioPV"] = true;
                Session["disabledNewcastlePV"] = true;
                Session["disabledSalmonellaPV"] = true;
                Session["disabledVectormuneFPMG"] = true;
                Session["disabledMagniplex"] = true;
                Session["disabledLivacoxQ"] = true;
                Session["disabledVectormuneFPLT"] = true;
                Session["disabledInnovaxNDIBD"] = true;

                #endregion

                #region Carrega Lista Vendedores

                //CHICMobileDataSet.salesmanDataTable salesmanDT = new CHICMobileDataSet.salesmanDataTable();
                //salesmanTableAdapter salesmanTA = new salesmanTableAdapter();

                string login = "";
                if (Session["login"].ToString().Contains("@"))
                    login = Session["login"].ToString();

                if (login != "")
                {
                    string empresa = Session["empresa"].ToString();

                    bdApoloEntities apoloSession = new bdApoloEntities();
                    var listaVendedores = apoloSession.VU_Vendedores.Where(w => w.Login == login).ToList();

                    //salesmanTA.FillByEmailAndEmpresa(salesmanDT, login, login, "", "");

                    List<SelectListItem> ddlSalesman = new List<SelectListItem>();

                    //foreach (var item in salesmanDT.ToList())
                    foreach (var item in listaVendedores)
                    {
                        // if (salesmanDT.ToList().IndexOf(item) == 0)
                        if (listaVendedores.ToList().IndexOf(item) == 0)
                            if ((Session["vendedorPV"] == null) || (Session["vendedorPV"].ToString() == ""))
                                Session["vendedorPV"] = item.VendCod;

                        ddlSalesman.Add(new SelectListItem
                        {
                            //Text = item.sl_code.Trim() + " - " + item.salesman.Trim(),
                            //Value = item.sl_code.Trim(),
                            Text = item.VendCod + " - " + item.VendNome,
                            Value = item.VendCod,
                            Selected = false
                        });
                    }

                    Session["ListaVendedores"] = ddlSalesman;
                }
                else
                {
                    List<SelectListItem> listaVend = new List<SelectListItem>();

                    for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
                    {
                        string empStr = Session["empresa"].ToString().Substring(i, 2);
                        List<SelectListItem> retorno = CarregaVendedores(empStr, false);
                        foreach (var item in retorno)
                        {
                            if ((Session["vendedorPV"] == null) || (Session["vendedorPV"].ToString() == ""))
                                Session["vendedorPV"] = item.Value;

                            listaVend.Add(item);
                        }
                    }

                    Session["ListaVendedores"] = listaVend;
                }

                #endregion

                Session["viewEdit"] = "AlterPV";

                return View("AlterPV");
            }
        }

        public ActionResult AlterPVReturn()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //Session["visualizaPV"] = true;
            //int id = Convert.ToInt32(Session["idSelecionado"].ToString());

            //CarregaPV(id);

            return View("AlterPV");
        }

        public ActionResult DeletePV(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["deletaPV"] = true;
            Session["idSelecionado"] = id;

            CarregaPV(id);

            return View("FinalizaPV");
        }

        public ActionResult ConfirmaDeletePV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            if (Session["idSelecionado"] != null)
            {
                string motivo = model["motivo"];

                int id = Convert.ToInt32(Session["idSelecionado"]);

                Pedido_Venda pedido = hlbappSession.Pedido_Venda
                    .Where(w => w.ID == id).FirstOrDefault();

                #region Insere LOG - Pedido_Venda

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                logPV.DataPedido = pedido.DataPedido;
                logPV.Usuario = Session["usuario"].ToString();
                logPV.DataHora = DateTime.Now;
                logPV.CodigoCliente = pedido.CodigoCliente;
                logPV.OvosBrasil = pedido.OvosBrasil;
                logPV.CondicaoPagamento = pedido.CondicaoPagamento;
                logPV.Observacoes = pedido.Observacoes;
                logPV.Vendedor = pedido.Vendedor;
                logPV.Status = pedido.Status;
                logPV.Operacao = "Exclusão";
                logPV.IDPedidoVenda = pedido.ID;
                logPV.Projecao = pedido.Projecao;
                logPV.Motivo = motivo;
                logPV.Projecao = pedido.Projecao;

                hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                hlbppLOG.SaveChanges();

                #endregion

                Servicos_Pedido_Venda serv = hlbappSession.Servicos_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == id).FirstOrDefault();
                if (serv != null)
                    hlbappSession.Servicos_Pedido_Venda.DeleteObject(serv);

                #region Insere LOG - Servico_Pedido_Venda

                if (serv != null)
                {
                    LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    logServ.IDPedidoVenda = serv.IDPedidoVenda;
                    logServ.ProdCodEstr = serv.ProdCodEstr;
                    logServ.PercAplicacaoServico = serv.PercAplicacaoServico;
                    logServ.DataHora = DateTime.Now;
                    logServ.Operacao = "Exclusão";
                    logServ.IDServPedVenda = serv.ID;
                    logServ.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);
                }

                #endregion

                Vacinas_Primaria_Pedido_Venda vacPrim = hlbappSession.Vacinas_Primaria_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == id).FirstOrDefault();

                var listaVacSec = new List<Vacinas_Secundaria_Pedido_Venda>();

                if (vacPrim != null)
                    listaVacSec = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                    .Where(w => w.IDVacPrimPedVenda == vacPrim.ID).ToList();

                #region Insere LOG - Vacina Primária

                LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                if (vacPrim != null)
                {
                    logVacPrim.IDPedidoVenda = vacPrim.IDPedidoVenda;
                    logVacPrim.ProdCodEstr = vacPrim.ProdCodEstr;
                    logVacPrim.DataHora = DateTime.Now;
                    logVacPrim.Operacao = "Exclusão";
                    logVacPrim.IDVacPrimPedVenda = vacPrim.ID;
                    logVacPrim.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                    hlbppLOG.SaveChanges();
                }

                #endregion

                foreach (var item in listaVacSec)
                {
                    hlbappSession.Vacinas_Secundaria_Pedido_Venda.DeleteObject(item);

                    #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                    LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                    logVacSec.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                    logVacSec.Sequencia = item.Sequencia;
                    logVacSec.ProdCodEstr = item.ProdCodEstr;
                    logVacSec.DataHora = DateTime.Now;
                    logVacSec.Operacao = "Exclusão";
                    logVacSec.IDVacSecPedVenda = item.ID;
                    logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                    hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                    #endregion
                }

                if (vacPrim != null)
                    hlbappSession.Vacinas_Primaria_Pedido_Venda.DeleteObject(vacPrim);

                var listaItens = hlbappSession.Item_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == id).ToList();

                foreach (var item in listaItens)
                {
                    hlbappSession.Item_Pedido_Venda.DeleteObject(item);

                    #region Insere LOG - Item_Ped_Venda

                    LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                    logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                    logItemPV.Sequencia = item.Sequencia;
                    logItemPV.ProdCodEstr = item.ProdCodEstr;
                    logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                    logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                    logItemPV.QtdeLiquida = item.QtdeLiquida;
                    logItemPV.PercBonificacao = item.PercBonificacao;
                    logItemPV.QtdeBonificada = item.QtdeBonificada;
                    logItemPV.QtdeReposicao = item.QtdeReposicao;
                    logItemPV.PrecoUnitario = item.PrecoUnitario;
                    logItemPV.DataHora = DateTime.Now;
                    logItemPV.Operacao = "Exclusão";
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.IDItPedVenda = item.ID;
                    logItemPV.IDLogPedidoVenda = logPV.ID;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                    hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                    #endregion
                }

                hlbappSession.Pedido_Venda.DeleteObject(pedido);

                hlbappSession.SaveChanges();
                hlbppLOG.SaveChanges();
            }

            Session["listaIndexPV"] = FilterListaPV();

            ViewBag.Mensagem = "Pedido excluído com sucesso!";

            Session["idSelecionado"] = null;

            Session["deletaPV"] = false;

            return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
        }

        public ActionResult SaveFinalizaPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            try
            {
                #region Carrega Dados

                //salesmanTableAdapter sl = new salesmanTableAdapter();
                //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                //sl.FillByCode(slDT, Session["vendedorPV"].ToString());

                var codigoVendedorApolo = "0" + Session["vendedorPV"].ToString();
                if (Session["vendedorPV"].ToString().Length == 7) codigoVendedorApolo = Session["vendedorPV"].ToString();
                var vendedor = apoloStatic.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();

                var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                #endregion

                #region Validação Motivo

                //bool erroMotivo = false;
                //if (Session["origemPV"].ToString().Equals("Alteração"))
                //{
                //    if (model["TipoAlteracao"] != null)
                //    {
                //        Session["tipoAlteracaoPV"] = model["TipoAlteracao"];
                //        AtualizaDDL(Session["tipoAlteracaoPV"].ToString(),
                //            (List<SelectListItem>)Session["ListaTipoAlteracaoPV"]);
                //    }

                //    if (model["motivoAlteraPrecoBonificacao"] != null)
                //    {
                //        Session["motivoAlteracaoPV"] = model["motivoAlteraPrecoBonificacao"];
                //    }
                //}

                if ((Convert.ToBoolean(Session["alteracaoPrecoBonificacaoPV"]))
                    || (Convert.ToBoolean(Session["alteracaoVacinasItemPV"])))
                {
                    if (model["motivoAlteraPrecoBonificacao"] != null)
                    {
                        Session["origemPV"] = "Alteração";
                        if (model["motivoAlteraPrecoBonificacao"] == "")
                        {
                            Session["origemPV"] = "";
                            ViewBag.Erro = "Houve Alteração de Preço e/ou % Bonificação e/ou Vacinas nos Itens! É necessário informar o motivo!";
                            return View("FinalizaPV");
                        }
                    }
                    else
                    {
                        Session["origemPV"] = "";
                        ViewBag.Erro = "Houve Alteração de Preço e/ou % Bonificação e/ou Vacinas nos Itens! É necessário informar o motivo!";
                        return View("FinalizaPV");
                    }
                }

                string projecao = "Não";
                if (model["Projecao"] != null)
                {
                    projecao = model["Projecao"];
                }

                #endregion

                #region Valida Cadastro Entidade

                string retornoVerificaCadastroEntidade = 
                    VerificaCadastroEntidade(Session["selectedCustomer"].ToString());

                if (retornoVerificaCadastroEntidade != "")
                {
                    ViewBag.Erro = retornoVerificaCadastroEntidade;
                    return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
                }

                #endregion

                int idPedidoNovo = 0;

                if (Session["origemPV"].ToString() != "")
                {
                    bool viewAll = (MvcAppHyLinedoBrasil.Controllers.AccountController
                        .GetGroup("HLBAPPM-PedidoVendaVisualizarTodosPedidos",
                        (System.Collections.ArrayList)Session["Direitos"]));

                    if ((!MvcAppHyLinedoBrasil.Controllers.AccountController
                        .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                        (System.Collections.ArrayList)Session["Direitos"])
                        || viewAll) && Session["viewEdit"].ToString().Equals("AlterPV"))
                    {
                        //CalculaValoresPV();
                        CalculaValoresVacinasServicosPV();
                        AtualizaValorTotalItens();
                    }

                    string textoEmail = "";
                    string stringChar = "" + (char)13 + (char)10;

                    //if (Convert.ToBoolean(Session["VariosPedidos"]))
                    //{
                    List<Item_Pedido_Venda> listItensPVTotal = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                    var listItensPVTotalTratado = listItensPVTotal
                        .GroupBy(g => new { g.DataEntregaInicial, g.DataEntregaFinal })
                        .Select(s => new { s.Key.DataEntregaInicial, s.Key.DataEntregaFinal })
                        .OrderBy(o => o.DataEntregaInicial)
                        .ToList();

                    foreach (var pv in listItensPVTotalTratado)
                    {
                        #region Alimenta Dados do Cabeçalho - Pedido_Venda

                        Pedido_Venda pedidoVenda = null;

                        int origem = 0;

                        if (Session["origemPV"].ToString() == "Inclusão")
                        {
                            origem = 1;
                            pedidoVenda = new Pedido_Venda();
                            pedidoVenda.DataPedido = DateTime.Today;
                            pedidoVenda.Usuario = Session["usuario"].ToString().Trim();
                            pedidoVenda.DataHora = DateTime.Now;
                        }
                        else
                        {
                            int id = Convert.ToInt32(Session["idSelecionado"].ToString());
                            pedidoVenda = hlbappSession.Pedido_Venda
                                .Where(w => w.ID == id).FirstOrDefault();
                        }

                        pedidoVenda.CodigoCliente = Session["selectedCustomer"].ToString();
                        pedidoVenda.EnderEntSeq = Convert.ToInt32(Session["selectedShipAddress"].ToString());

                        ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == pedidoVenda.CodigoCliente)
                            .FirstOrDefault();
                        MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = 
                            apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();
                        UNID_FEDERACAO uf = apoloStatic.UNID_FEDERACAO
                            .Where(w => w.UfSigla == cidade.UfSigla
                                && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();

                        if (Convert.ToBoolean(Session["ovosBrasilPV"]))
                            pedidoVenda.OvosBrasil = 1;
                        else
                            pedidoVenda.OvosBrasil = 0;
                        if (Session["condicaoPagamentoPV"] != null)
                            pedidoVenda.CondicaoPagamento = Session["condicaoPagamentoPV"].ToString();
                        pedidoVenda.Observacoes = Session["observacaoPV"].ToString();
                        pedidoVenda.Vendedor = Session["vendedorPV"].ToString();
                        pedidoVenda.NomeCliente = entidade.EntNome;

                        //salesmanTableAdapter sl = new salesmanTableAdapter();
                        //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                        //sl.FillByCode(slDT, pedidoVenda.Vendedor);

                        //pedidoVenda.Empresa = slDT[0].inv_comp.Trim();
                        pedidoVenda.Empresa = vendedor.CodigoCHIC;

                        Empresas configEmpresa = hlbappSession.Empresas
                            .Where(w => w.CodigoCHIC == pedidoVenda.Empresa).FirstOrDefault();

                        List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                        int existe = listItensPVSession
                            .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado").Count();

                        if (MvcAppHyLinedoBrasil.Controllers.AccountController
                            .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                            (System.Collections.ArrayList)Session["Direitos"])
                            && !cidade.PaisSigla.Equals("BRA"))
                        {
                            if (Session["condicaoPagamentoPV"] == null)
                                pedidoVenda.CondicaoPagamento = Session["condPagPV"].ToString();

                            pedidoVenda.DataPedido = Convert.ToDateTime(Session["dataPedidoVenda"]);
                            pedidoVenda.DataEnvio = Convert.ToDateTime(Session["dataEnvio"]);
                            pedidoVenda.DataSaidaIncubatorio = Convert.ToDateTime(Session["dataSaidaIncubatorio"]);
                            pedidoVenda.EnviadoVia = Session["viaDeEnvioSelecionada"].ToString();
                            pedidoVenda.AeroportoOrigem = Session["aeroportoOrigemSelecionado"].ToString();
                            pedidoVenda.AeroportoDestino = Session["aeroportoDestinoSelecionado"].ToString();
                            pedidoVenda.ValorDocumentacao = Convert.ToDecimal(Session["valorDocumentacaoDE"]);
                            pedidoVenda.ValorFrete = Convert.ToDecimal(Session["valorFreteDE"]);
                            pedidoVenda.NumCaixas = Convert.ToInt32(Session["numCaixasDE"]);
                            pedidoVenda.TipoPedido = Session["tipoVendaSelecionado"].ToString();
                            pedidoVenda.NumPaletes = Convert.ToInt32(Session["numPaletesDE"]);
                            pedidoVenda.NumeroVoo = Session["numeroVooPV"].ToString();
                            pedidoVenda.CiaAerea = Session["ciaAereaPV"].ToString();
                            pedidoVenda.AWB = Session["awbPV"].ToString();
                            pedidoVenda.NCM = Session["ncmPV"].ToString();
                            pedidoVenda.NumFatura = Session["numFaturaDE"].ToString();
                            pedidoVenda.DataColetaNascimento = Convert.ToDateTime(Session["dataColetaNascimento"]);
                            pedidoVenda.Status = "Documentação de Exportação";
                            pedidoVenda.Placa = Session["placaPV"].ToString();
                            pedidoVenda.Lacre = Session["lacrePV"].ToString();
                            pedidoVenda.Motorista = Session["motoristaPV"].ToString();
                            pedidoVenda.RGMotorista = Session["rgMotoristaPV"].ToString();
                            pedidoVenda.Veterinario = Session["veterinarioSelecionado"].ToString();
                        }
                        else
                        {
                            string completaStatus = "";
                            if (configEmpresa.AprovacaoGerencia.Equals("Sim")
                                || Session["statusClienteSelecionado"].ToString() == "03")
                                completaStatus = " Aguardando Análise Gerência";
                            else
                                completaStatus = " Pendente";

                            if (existe == 0)
                                pedidoVenda.Status = "Inclusão" + completaStatus;
                            else
                                pedidoVenda.Status = "Alteração" + completaStatus;
                        }

                        if (Session["selectedTypeAddress"].ToString().Equals("Outro"))
                            pedidoVenda.EnderEntSeq = Convert.ToInt32(Session["selectedShipAddress"].ToString());
                        else
                            pedidoVenda.EnderEntSeq = 0;

                        pedidoVenda.Projecao = projecao;

                        if (origem == 1) hlbappSession.Pedido_Venda.AddObject(pedidoVenda);

                        hlbappSession.SaveChanges();

                        idPedidoNovo = pedidoVenda.ID;

                        #region Insere LOG - Pedido_Venda

                        HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                        LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                        logPV.DataPedido = pedidoVenda.DataPedido;
                        logPV.Usuario = Session["usuario"].ToString();
                        logPV.DataHora = DateTime.Now;
                        logPV.CodigoCliente = pedidoVenda.CodigoCliente;
                        logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                        logPV.CondicaoPagamento = pedidoVenda.CondicaoPagamento;
                        logPV.Observacoes = pedidoVenda.Observacoes;
                        logPV.Vendedor = pedidoVenda.Vendedor;
                        logPV.Status = pedidoVenda.Status;
                        logPV.Operacao = Session["origemPV"].ToString();
                        logPV.IDPedidoVenda = pedidoVenda.ID;
                        logPV.Motivo = Session["motivoAlteracaoPV"].ToString();
                        logPV.DataEnvio = pedidoVenda.DataEnvio;
                        logPV.DataSaidaIncubatorio = pedidoVenda.DataSaidaIncubatorio;
                        logPV.EnviadoVia = pedidoVenda.EnviadoVia;
                        logPV.AeroportoOrigem = pedidoVenda.AeroportoOrigem;
                        logPV.AeroportoDestino = pedidoVenda.AeroportoDestino;
                        logPV.ValorDocumentacao = pedidoVenda.ValorDocumentacao;
                        logPV.ValorFrete = pedidoVenda.ValorFrete;
                        logPV.NumCaixas = pedidoVenda.NumCaixas;
                        logPV.TipoPedido = pedidoVenda.TipoPedido;
                        logPV.NumPaletes = pedidoVenda.NumPaletes;
                        logPV.NumeroVoo = pedidoVenda.NumeroVoo;
                        logPV.CiaAerea = pedidoVenda.CiaAerea;
                        logPV.AWB = pedidoVenda.AWB;
                        logPV.NCM = pedidoVenda.NCM;
                        logPV.NumFatura = pedidoVenda.NumFatura;
                        logPV.Projecao = pedidoVenda.Projecao;

                        string motivoAlteraPrecoBonificacao = "";
                        if (model["motivoAlteraPrecoBonificacao"] != null)
                            motivoAlteraPrecoBonificacao = model["motivoAlteraPrecoBonificacao"];

                        if ((Convert.ToBoolean(Session["alteracaoPrecoBonificacaoPV"]))
                            || (Convert.ToBoolean(Session["alteracaoVacinasItemPV"])))
                        {
                            if (logPV.Motivo != "")
                            {
                                if (Convert.ToBoolean(Session["alteracaoPrecoBonificacaoPV"]))
                                {
                                    logPV.Motivo = logPV.Motivo + stringChar + stringChar
                                        + "Foi realizada Alteração de Preço / % de Bonificação pelo seguinte motivo: "
                                        + stringChar + motivoAlteraPrecoBonificacao;
                                }
                                else if (Convert.ToBoolean(Session["alteracaoVacinasItemPV"]))
                                {
                                    logPV.Motivo = logPV.Motivo + stringChar + stringChar
                                        + "Foi realizada Alteração nas Vacinas do(s) Item(ns) pelo seguinte motivo: "
                                        + stringChar + motivoAlteraPrecoBonificacao;
                                }
                            }
                            else
                            {
                                if (Convert.ToBoolean(Session["alteracaoPrecoBonificacaoPV"]))
                                {
                                    logPV.Motivo = "Foi realizada Alteração de Preço / % de Bonificação pelo seguinte motivo: "
                                        + stringChar + motivoAlteraPrecoBonificacao;
                                }
                                else if (Convert.ToBoolean(Session["alteracaoVacinasItemPV"]))
                                {
                                    logPV.Motivo = "Foi realizada Alteração nas Vacinas do(s) Item(ns) pelo seguinte motivo: "
                                        + stringChar + motivoAlteraPrecoBonificacao;
                                }
                            }
                        }
                        else
                        {
                            logPV.Motivo = motivoAlteraPrecoBonificacao;
                        }

                        hlbappSession.LOG_Pedido_Venda.AddObject(logPV);

                        #endregion

                        hlbappSession.SaveChanges();

                        #endregion

                        #region Alimenta os Itens - Item_Pedido_Venda

                        if (Session["ItensPVListDelete"] != null)
                        {
                            var listaIPVDelete =
                                ((List<Item_Pedido_Venda>)Session["ItensPVListDelete"]);
                                    //.Where(w => w.DataEntregaInicial == pv.DataEntregaInicial
                                    //    && w.DataEntregaFinal == pv.DataEntregaFinal).ToList();

                            foreach (var item in listaIPVDelete)
                            {
                                Item_Pedido_Venda itemPedVenda = hlbappSession.Item_Pedido_Venda
                                    .Where(w => w.IDPedidoVenda == pedidoVenda.ID
                                        && w.Sequencia == item.Sequencia)
                                    .FirstOrDefault();

                                if (itemPedVenda != null)
                                    hlbappSession.Item_Pedido_Venda.DeleteObject(itemPedVenda);
                            }
                        }

                        List<Item_Pedido_Venda> listItensPV = 
                            ((List<Item_Pedido_Venda>)Session["ItensPVList"])
                            .Where(w => w.DataEntregaInicial == pv.DataEntregaInicial
                                && w.DataEntregaFinal == pv.DataEntregaFinal).ToList();

                        List<Lote_Item_Pedido_Venda> listItensLotePV = 
                            (List<Lote_Item_Pedido_Venda>)Session["ListaLotesItemPV"];

                        List<Lote_Item_Pedido_Venda> listaDeleteItensLotePV = 
                            new List<Lote_Item_Pedido_Venda>();
                        if (Session["ItensLoteListDelete"] != null)
                            listaDeleteItensLotePV = 
                                (List<Lote_Item_Pedido_Venda>)Session["ItensLoteListDelete"];

                        var listItensPVAlterado = 
                            listItensPV.Where(w => w.Alterado == 1 || w.Alterado == 2).ToList();

                        foreach (var item in listItensPVAlterado)
                        {
                            Item_Pedido_Venda itemPedVenda = hlbappSession.Item_Pedido_Venda
                                .Where(w => w.IDPedidoVenda == pedidoVenda.ID
                                    && w.Sequencia == item.Sequencia)
                                .FirstOrDefault();

                            origem = 0;
                            if (itemPedVenda == null)
                            {
                                origem = 1;
                                itemPedVenda = new Item_Pedido_Venda();
                                itemPedVenda.IDPedidoVenda = pedidoVenda.ID;
                                itemPedVenda.Sequencia = item.Sequencia;
                            }

                            itemPedVenda.ProdCodEstr = item.ProdCodEstr;
                            itemPedVenda.DataEntregaInicial = item.DataEntregaInicial;
                            itemPedVenda.DataEntregaFinal = item.DataEntregaFinal;
                            itemPedVenda.QtdeLiquida = item.QtdeLiquida;
                            itemPedVenda.PercBonificacao = item.PercBonificacao;
                            itemPedVenda.QtdeBonificada = item.QtdeBonificada;
                            itemPedVenda.QtdeReposicao = item.QtdeReposicao;
                            itemPedVenda.PrecoUnitario = item.PrecoUnitario;
                            itemPedVenda.ValorTotal = item.ValorTotal;
                            itemPedVenda.PrecoPinto = item.PrecoPinto;
                            itemPedVenda.TipoReposicao = item.TipoReposicao;
                            itemPedVenda.Sobra = item.Sobra;
                            itemPedVenda.DataNascimento = CalculaDataNascimento(pedidoVenda.CodigoCliente, itemPedVenda.DataEntregaInicial, item.ProdCodEstr);

                            if (origem == 1) hlbappSession.Item_Pedido_Venda.AddObject(itemPedVenda);

                            hlbappSession.SaveChanges();

                            #region Insere LOG - Item_Ped_Venda

                            LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                            logItemPV.IDPedidoVenda = itemPedVenda.IDPedidoVenda;
                            logItemPV.Sequencia = itemPedVenda.Sequencia;
                            logItemPV.ProdCodEstr = itemPedVenda.ProdCodEstr;
                            logItemPV.DataEntregaInicial = itemPedVenda.DataEntregaInicial;
                            logItemPV.DataEntregaFinal = itemPedVenda.DataEntregaFinal;
                            logItemPV.QtdeLiquida = itemPedVenda.QtdeLiquida;
                            logItemPV.PercBonificacao = itemPedVenda.PercBonificacao;
                            logItemPV.QtdeBonificada = itemPedVenda.QtdeBonificada;
                            logItemPV.QtdeReposicao = itemPedVenda.QtdeReposicao;
                            logItemPV.PrecoUnitario = itemPedVenda.PrecoUnitario;
                            logItemPV.DataHora = DateTime.Now;
                            logItemPV.Operacao = Session["origemPV"].ToString() + " Pendente";
                            logItemPV.OrderNoCHIC = itemPedVenda.OrderNoCHIC;
                            logItemPV.IDItPedVenda = itemPedVenda.ID;
                            logItemPV.IDLogPedidoVenda = logPV.ID;
                            logItemPV.OrderNoCHIC = itemPedVenda.OrderNoCHIC;
                            logItemPV.OrderNoCHICReposicao = itemPedVenda.OrderNoCHICReposicao;
                            logItemPV.TipoAlteracao = Session["tipoAlteracaoPV"].ToString();
                            logItemPV.PrecoPinto = itemPedVenda.PrecoPinto;
                            logItemPV.TipoReposicao = itemPedVenda.TipoReposicao;
                            logItemPV.ValorTotal = itemPedVenda.ValorTotal;
                            logItemPV.Sobra = itemPedVenda.Sobra;

                            if (itemPedVenda.Alterado.Equals(2))
                                if (logItemPV.TipoAlteracao != "")
                                    logItemPV.TipoAlteracao = logItemPV.TipoAlteracao
                                        + " - Contém Alteração de Preço / % Bonificação";
                                else
                                    logItemPV.TipoAlteracao = "Contém Alteração de Preço / % Bonificação";

                            hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                            hlbppLOG.SaveChanges();

                            #endregion

                            itemPedVenda.Alterado = 0;
                            itemPedVenda.Importar = 1;

                            #region Alimenta os Lotes dos Itens - Lote_Item_Pedido_Venda

                            var listaLoteDeleteItemPv = listaDeleteItensLotePV
                                .Where(w => w.SeqItemPV == itemPedVenda.Sequencia).ToList();

                            foreach (var loteDelete in listaLoteDeleteItemPv)
                            {
                                HLBAPPEntities hlbappDelete = new HLBAPPEntities();
                                Lote_Item_Pedido_Venda loteDeleteBD = hlbappDelete.Lote_Item_Pedido_Venda
                                    .Where(w => w.ID == loteDelete.ID).FirstOrDefault();
                                if (loteDeleteBD !=  null) 
                                    hlbappDelete.Lote_Item_Pedido_Venda.DeleteObject(loteDeleteBD);
                                hlbappDelete.SaveChanges();
                            }

                            var listaLoteItemPv = listItensLotePV.Where(w => w.SeqItemPV == itemPedVenda.Sequencia).ToList();

                            foreach (var lote in listaLoteItemPv)
                            {
                                Lote_Item_Pedido_Venda newLote = hlbappSession.Lote_Item_Pedido_Venda
                                    .Where(w => w.IDItemPedidoVenda == lote.IDItemPedidoVenda
                                        && w.Sequencia == lote.Sequencia).FirstOrDefault();

                                origem = 0;
                                if (newLote == null)
                                {
                                    origem = 1;
                                    newLote = new Lote_Item_Pedido_Venda();
                                    newLote.IDItemPedidoVenda = itemPedVenda.ID;
                                    newLote.SeqItemPV = itemPedVenda.Sequencia;
                                }

                                newLote.Nucleo = lote.Nucleo;
                                newLote.Lote = lote.Lote;
                                newLote.Galpao = lote.Galpao;
                                newLote.DataProducao = lote.DataProducao;
                                newLote.Qtde = lote.Qtde;
                                newLote.Sequencia = lote.Sequencia;
                                newLote.IdadeLote = lote.IdadeLote;
                                newLote.PesoOvo = lote.PesoOvo;

                                if (origem == 1) hlbappSession.Lote_Item_Pedido_Venda.AddObject(newLote);

                                hlbappSession.SaveChanges();
                            }

                            #endregion
                        }

                        #endregion

                        #region Alimenta a Vacina Primária do Pedido - Vacinas_Primaria_Pedido_Venda

                        Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == pedidoVenda.ID && w.SeqItemPedVenda == 0).FirstOrDefault();

                        origem = 0;
                        if (vacinaPrimaria == null)
                        {
                            origem = 1;
                            vacinaPrimaria = new Vacinas_Primaria_Pedido_Venda();
                            vacinaPrimaria.IDPedidoVenda = pedidoVenda.ID;
                        }

                        //if (Session["vacinaPrimariaPV"] == null) Session["vacinaPrimariaPV"] = "(Sem Vacinação)";

                        vacinaPrimaria.ProdCodEstr = Session["vacinaPrimariaPV"].ToString();
                        vacinaPrimaria.SeqItemPedVenda = 0;
                        if (Convert.ToBoolean(Session["bonificaVacPrimPV"]))
                        {
                            vacinaPrimaria.Bonificada = 1;
                            vacinaPrimaria.PrecoUnitario = 0;
                        }
                        else if (Convert.ToBoolean(Session["clienteVacPrimPV"]))
                        {
                            vacinaPrimaria.Bonificada = 2;
                            vacinaPrimaria.PrecoUnitario = 0;
                        }
                        else
                        {
                            vacinaPrimaria.Bonificada = 0;
                            vacinaPrimaria.PrecoUnitario = 
                                Convert.ToDecimal(Session["precoVacinaPrimaria"].ToString());
                        }

                        if (!vacinaPrimaria.ProdCodEstr.Equals("(Sem Vacinação)"))
                        {
                            if (origem == 1) hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacinaPrimaria);
                            hlbappSession.SaveChanges();
                        }
                        else
                        {
                            if (origem == 0)
                            {
                                hlbappSession.Vacinas_Primaria_Pedido_Venda.DeleteObject(vacinaPrimaria);

                                var listaVacSecDeleteAntigas = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                                    .Where(w => w.IDVacPrimPedVenda == vacinaPrimaria.ID).ToList();

                                foreach (var item in listaVacSecDeleteAntigas)
                                {
                                    hlbappSession.Vacinas_Secundaria_Pedido_Venda.DeleteObject(item);
                                }

                                hlbappSession.SaveChanges();
                            }
                        }

                        #region Insere LOG - Vacina Primária

                        LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();
                        logVacPrim.IDPedidoVenda = vacinaPrimaria.IDPedidoVenda;
                        logVacPrim.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                        logVacPrim.DataHora = DateTime.Now;
                        logVacPrim.Operacao = Session["origemPV"].ToString() + " Pendente";
                        logVacPrim.IDVacPrimPedVenda = vacinaPrimaria.ID;
                        logVacPrim.IDLogPedidoVenda = logPV.ID;
                        logVacPrim.SeqItemPedVenda = 0;
                        logVacPrim.PrecoUnitario = vacinaPrimaria.PrecoUnitario;
                        logVacPrim.Bonificada = vacinaPrimaria.Bonificada;

                        hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);

                        #endregion

                        hlbppLOG.SaveChanges();

                        #endregion

                        #region Alimenta as Vacinas Primárias dos Itens - Vacinas_Primaria_Pedido_Venda

                        var listaVacPrim = (List<Vacinas_Primaria_Pedido_Venda>)Session["VacinasPrimariaItemPVList"];
                        var listVacSecItemPV = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVList"];

                        foreach (var item in listaVacPrim)
                        {
                            Vacinas_Primaria_Pedido_Venda vacinaPrimariaItem = hlbappSession.Vacinas_Primaria_Pedido_Venda
                                .Where(w => w.IDPedidoVenda == pedidoVenda.ID
                                    && w.SeqItemPedVenda == item.SeqItemPedVenda).FirstOrDefault();

                            origem = 0;
                            if (vacinaPrimariaItem == null)
                            {
                                origem = 1;
                                vacinaPrimariaItem = new Vacinas_Primaria_Pedido_Venda();
                                vacinaPrimariaItem.IDPedidoVenda = pedidoVenda.ID;
                                vacinaPrimariaItem.SeqItemPedVenda = item.SeqItemPedVenda;
                            }

                            vacinaPrimariaItem.ProdCodEstr = item.ProdCodEstr;

                            if (origem == 1) hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacinaPrimariaItem);

                            hlbappSession.SaveChanges();

                            #region Insere LOG - Vacina Primária

                            LOG_Vacinas_Primaria_Pedido_Venda logVacPrimItem = new LOG_Vacinas_Primaria_Pedido_Venda();
                            logVacPrimItem.IDPedidoVenda = vacinaPrimariaItem.IDPedidoVenda;
                            logVacPrimItem.ProdCodEstr = vacinaPrimariaItem.ProdCodEstr;
                            logVacPrimItem.DataHora = DateTime.Now;
                            logVacPrimItem.Operacao = Session["origemPV"].ToString() + " Pendente";
                            logVacPrimItem.IDVacPrimPedVenda = vacinaPrimariaItem.ID;
                            logVacPrimItem.IDLogPedidoVenda = logPV.ID;
                            logVacPrimItem.SeqItemPedVenda = vacinaPrimariaItem.SeqItemPedVenda;

                            hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrimItem);

                            hlbppLOG.SaveChanges();

                            #endregion

                            #region Alimenta as Vacinas Secundárias dos Itens - Vacinas_Secundaria_Pedido_Venda

                            var listVacSecItemPVVacPrim = listVacSecItemPV
                                .Where(w => w.SeqItemPedVenda == vacinaPrimariaItem.SeqItemPedVenda).ToList();

                            foreach (var itemVacSec in listVacSecItemPVVacPrim)
                            {
                                Vacinas_Secundaria_Pedido_Venda vacSec = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                                    .Where(w => w.IDVacPrimPedVenda == vacinaPrimariaItem.ID
                                        && w.Sequencia == itemVacSec.Sequencia).FirstOrDefault();

                                origem = 0;
                                if (vacSec == null)
                                {
                                    origem = 1;
                                    vacSec = new Vacinas_Secundaria_Pedido_Venda();
                                    vacSec.IDVacPrimPedVenda = vacinaPrimariaItem.ID;
                                    vacSec.Sequencia = itemVacSec.Sequencia;
                                    vacSec.SeqItemPedVenda = itemVacSec.SeqItemPedVenda;
                                }

                                vacSec.ProdCodEstr = itemVacSec.ProdCodEstr;

                                if (origem == 1) hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);

                                try
                                {
                                    hlbappSession.SaveChanges();
                                }
                                catch (OptimisticConcurrencyException)
                                {
                                    //Atualiza a entidade contato,usando ClientWins;
                                    hlbappSession.Refresh(RefreshMode.ClientWins, vacSec);
                                    //chama SaveChanges novamente
                                    hlbappSession.SaveChanges();
                                }

                                #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                                logVacSec.Sequencia = vacSec.Sequencia;
                                logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                                logVacSec.DataHora = DateTime.Now;
                                logVacSec.Operacao = Session["origemPV"].ToString() + " Pendente";
                                logVacSec.IDVacSecPedVenda = vacSec.ID;
                                logVacSec.IDVacPrimLogPedidoVenda = logVacPrimItem.ID;
                                logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                                hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                #endregion

                                try
                                {
                                    hlbappSession.SaveChanges();
                                }
                                catch (OptimisticConcurrencyException)
                                {
                                    //Atualiza a entidade contato,usando ClientWins;
                                    hlbappSession.Refresh(RefreshMode.ClientWins, logVacSec);
                                    //chama SaveChanges novamente
                                    hlbappSession.SaveChanges();
                                }
                            }

                            #endregion
                        }

                        #endregion

                        #region Alimenta as Vacinas Secundárias - Vacinas_Secundaria_Pedido_Venda

                        if (Session["ItensSecVacListDelete"] != null)
                        {
                            var listaDelete = (List<Vacinas_Secundaria_Pedido_Venda>)Session["ItensSecVacListDelete"];

                            foreach (var item in listaDelete.Where(w => w.ID != 0).ToList())
                            {
                                hlbappSession.Vacinas_Secundaria_Pedido_Venda.DeleteObject(item);

                                hlbappSession.SaveChanges();
                            }
                        }

                        //foreach (var item in listaVacSec)
                        //{
                        //    if (item.ID != 0)
                        //        hlbappSession.AttachTo("Vacinas_Secundaria_Pedido_Venda", item);
                        //}

                        #region Deleta Vacinas Antigas

                        var listaVacSecDelete = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                            .Where(w => w.IDVacPrimPedVenda == vacinaPrimaria.ID).ToList();

                        foreach (var item in listaVacSecDelete)
                        {
                            hlbappSession.Vacinas_Secundaria_Pedido_Venda.DeleteObject(item);
                        }

                        hlbappSession.SaveChanges();

                        #endregion

                        if (!vacinaPrimaria.ProdCodEstr.Equals("(Sem Vacinação)"))
                        {
                            foreach (var item in listaVacSec)
                            {
                                Vacinas_Secundaria_Pedido_Venda vacSec = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                                    .Where(w => w.IDVacPrimPedVenda == vacinaPrimaria.ID
                                        && w.Sequencia == item.Sequencia).FirstOrDefault();

                                origem = 0;
                                if (vacSec == null)
                                {
                                    origem = 1;
                                    vacSec = new Vacinas_Secundaria_Pedido_Venda();
                                    vacSec.IDVacPrimPedVenda = vacinaPrimaria.ID;
                                    vacSec.Sequencia = item.Sequencia;
                                }

                                vacSec.ProdCodEstr = item.ProdCodEstr;
                                vacSec.SeqItemPedVenda = 0;
                                vacSec.Bonificada = item.Bonificada;
                                vacSec.PrecoUnitario = item.PrecoUnitario;

                                if (origem == 1) hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);

                                hlbappSession.SaveChanges();

                                #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                                logVacSec.Sequencia = vacSec.Sequencia;
                                logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                                logVacSec.DataHora = DateTime.Now;
                                logVacSec.Operacao = Session["origemPV"].ToString() + " Pendente";
                                logVacSec.IDVacSecPedVenda = vacSec.ID;
                                logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                logVacSec.PrecoUnitario = vacSec.PrecoUnitario;
                                logVacSec.Bonificada = vacSec.Bonificada;

                                hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                #endregion

                                hlbppLOG.SaveChanges();
                            }
                        }

                        #endregion

                        #region Alimenta o Serviço - Servicos_Pedido_Venda

                        bool servicoMarcado = Convert.ToBoolean(Session["tratamentoInfravermelhoPV"]);

                        Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                        if (servicoMarcado)
                        {
                            origem = 0;
                            if (servico == null)
                            {
                                origem = 1;
                                servico = new Servicos_Pedido_Venda();
                                servico.IDPedidoVenda = pedidoVenda.ID;
                            }

                            servico.ProdCodEstr = "998.026.197";
                            servico.PercAplicacaoServico =
                                Convert.ToDecimal(Session["qtdTratamentoInfravermelhoPV"].ToString());

                            if (Convert.ToBoolean(Session["bonificaServicoPV"]))
                            {
                                servico.Bonificada = 1;
                                servico.PrecoUnitario = 0;
                            }
                            else
                            {
                                servico.Bonificada = 0;
                                servico.PrecoUnitario =
                                    Convert.ToDecimal(Session["valorServicoPV"].ToString());
                            }

                            if (origem == 1) hlbappSession.Servicos_Pedido_Venda.AddObject(servico);

                            hlbappSession.SaveChanges();

                            #region Insere LOG - Servico_Pedido_Venda

                            LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                            logServ.IDPedidoVenda = servico.IDPedidoVenda;
                            logServ.ProdCodEstr = servico.ProdCodEstr;
                            logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                            logServ.DataHora = DateTime.Now;
                            logServ.Operacao = Session["origemPV"].ToString() + " Pendente";
                            logServ.IDServPedVenda = servico.ID;
                            logServ.IDLogPedidoVenda = logPV.ID;
                            logServ.PrecoUnitario = servico.PrecoUnitario;
                            logServ.Bonificada = servico.Bonificada;

                            hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                            hlbppLOG.SaveChanges();

                            #endregion
                        }
                        else
                        {
                            if (servico != null)
                            {
                                hlbappSession.Servicos_Pedido_Venda.DeleteObject(servico);
                                hlbappSession.SaveChanges();

                                #region Insere LOG - Servico_Pedido_Venda

                                LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                                logServ.IDPedidoVenda = servico.IDPedidoVenda;
                                logServ.ProdCodEstr = servico.ProdCodEstr;
                                logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                                logServ.DataHora = DateTime.Now;
                                logServ.Operacao = "Exclusão";
                                logServ.IDServPedVenda = servico.ID;
                                logServ.IDLogPedidoVenda = logPV.ID;
                                logServ.PrecoUnitario = servico.PrecoUnitario;
                                logServ.Bonificada = servico.Bonificada;

                                hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                                hlbppLOG.SaveChanges();

                                #endregion
                            }
                        }

                        //hlbappSession.SaveChanges();

                        #endregion

                        #region Verifica se o Status do Cliente é "Em Débito" para gerar solicitação de aprovação no FLUIG

                        if (Session["statusClienteSelecionado"] != null)
                        {
                            if (Session["statusClienteSelecionado"].ToString() == "03")
                            {
                                string excecao = "Pedido para cliente 'Em Débito' necessita aprovação da gerência!";
                                string tipoExcecao = "Cliente 'Em Débito'";
                                GeraAprovacaoExcecaoPedidoVendaWebFluig(pedidoVenda.Empresa,
                                    Session["login"].ToString(), tipoExcecao, excecao, pedidoVenda,
                                    listItensPV, listaVacSec, logPV.ID);
                            }
                        }

                        #endregion

                        #region Envio de E-mail

                        int existeItemDocExport = listItensPV.Where(w => w.ProdCodEstr.Contains(".")).Count();
                        if (existeItemDocExport == 0)
                        {
                            if (Session["condicaoPagamentoPV"] == null)
                                Session["condicaoPagamentoPV"] = Session["condPagPV"].ToString();

                            MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                                new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                            //slDT = new CHICMobileDataSet.salesmanDataTable();
                            //sl.FillByCode(slDT, pedidoVenda.Vendedor);

                            string corpoEmail = "";
                            string corpoOperacao = "";

                            ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                            MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                                new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                            apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                            string empresa = "";
                            string copiaPara = "";
                            string empresaApolo = "";
                            if (vendedor.CodigoCHIC.Equals("BR"))
                            {
                                empresa = "[HLB]";
                                //copiaPara = "confirmacoes@hyline.com.br";
                                copiaPara = "";
                                empresaApolo = "5";
                            }
                            else if (vendedor.CodigoCHIC.Equals("LB"))
                            {
                                empresa = "[LTZ]";
                                copiaPara = "confirmacoes@ltz.com.br";
                                empresaApolo = "7";
                            }
                            else if (vendedor.CodigoCHIC.Equals("HN"))
                            {
                                empresa = "[H&N]";
                                copiaPara = "confirmacoes@hnavicultura.com.br";
                                empresaApolo = "14";
                            }
                            else if (vendedor.CodigoCHIC.Equals("PL"))
                            {
                                empresa = "[PLP]";
                                copiaPara = "programacao@planaltopostura.com.br";
                                empresaApolo = "20";
                            }

                            email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                            email.WorkFlowEmailStat = "Enviar";
                            email.WorkFlowEmailData = DateTime.Now;
                            //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                            //email.WorkFlowEmailParaNome = "Teste";
                            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                                (System.Collections.ArrayList)Session["Direitos"])
                                && !cidade.PaisSigla.Equals("BRA"))
                            {
                                email.WorkFlowEmailParaNome = "Depto. Exportação";
                                email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                                email.WorkFlowEmailCopiaPara = null;
                            }
                            else
                            {
                                email.WorkFlowEmailParaNome = vendedor.VendNome;
                                email.WorkFlowEmailParaEmail = vendedor.Login;
                                if (configEmpresa.AprovacaoGerencia.Equals("Sim"))
                                    email.WorkFlowEmailCopiaPara = copiaPara;
                                else
                                    //email.WorkFlowEmailCopiaPara = copiaPara + ";programacao@hyline.com.br";
                                    email.WorkFlowEmailCopiaPara = copiaPara;
                            }

                            #region Envio de E-mails p/ Técnicos por Estado

                            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE verificaCidade = apoloStatic.CIDADE
                                .Where(w => apoloStatic.ENTIDADE.Any(e => e.EntCod == pedidoVenda.CodigoCliente
                                    && e.CidCod == w.CidCod))
                                .FirstOrDefault();

                            if (verificaCidade != null)
                            {
                                var listaTecnicos = apolo2Static.USUARIO
                                    .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                            && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == verificaCidade.UfSigla)
                                            && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                                && e.USERCodigoCHIC == pedidoVenda.Empresa)))
                                    .ToList();

                                foreach (var item in listaTecnicos)
                                {
                                    if (copiaPara == "")
                                        copiaPara = item.UsuEmail;
                                    else
                                        copiaPara = copiaPara + ";" + item.UsuEmail;
                                }
                            }

                            #endregion

                            #region Verifica Se existe Supervisores para gerar a copia

                            //string codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                            var listaSupVend = apolo.SUP_VENDEDOR
                                .Where(w => w.VendCod == codigoVendedorApolo
                                    && w.FxaCod.Equals("0000003"))
                                .ToList();

                            foreach (var sup in listaSupVend)
                            {
                                MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                                    .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                                if (supervisor != null)
                                {
                                    copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                                }
                            }

                            #endregion

                            email.WorkFlowEmailDeNome = "Sistema WEB";
                            email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                            email.WorkFlowEmailFormato = "Texto";
                            email.WorkFlowEmailDocEmpCod = empresaApolo;

                            #region Texto Detalhado

                            #region Cabeçalho

                            string empresaL = Session["empresa"].ToString();

                            textoEmail = "CLIENTE: " + entidade.EntNome + stringChar
                                + "DATA DO PEDIDO: " + pedidoVenda.DataPedido.ToShortDateString() + stringChar + stringChar
                                + "**** ITENS ****: " + stringChar + stringChar;

                            #endregion

                            #region Itens

                            foreach (var item in listItensPV)
                            {
                                #region Preço Unit. s/ Vac.

                                string condPag = "";
                                if (Session["condicaoPagamentoPV"].ToString().Equals("PAGTO ANTECIPADO"))
                                {
                                    condPag = Session["condicaoPagamentoPV"].ToString();
                                }
                                else
                                {
                                    condPag = "Faturamento";
                                }

                                Tabela_Precos precoLinhagem = hlbappSession
                                    .Tabela_Precos.Where(w => w.Tipo == condPag && w.Produto == item.ProdCodEstr
                                    && w.Regiao == uf.UfRegGeog && w.Empresa == empresaL
                                    && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                                .FirstOrDefault();

                                decimal? precoLin = 0;
                                if (precoLinhagem != null)
                                {
                                    if (item.QtdeLiquida < 5000)
                                    {
                                        precoLin = precoLinhagem.ValorMenor5000Aves;
                                    }
                                    else
                                    {
                                        precoLin = precoLinhagem.ValorNormal;
                                    }
                                }

                                #endregion

                                #region Qtde. Tratamento Infra.

                                decimal? qtTV = 0;
                                if (servico != null)
                                {
                                    decimal qtdTratVerm = 1;
                                    qtdTratVerm = Convert.ToDecimal(servico.PercAplicacaoServico);
                                    qtTV = ((item.QtdeLiquida + item.QtdeBonificada) * (qtdTratVerm / 100));
                                }

                                #endregion

                                textoEmail = textoEmail
                                    + "Data Inicial de Entrega: " + item.DataEntregaInicial.ToShortDateString() + stringChar
                                    + "Data Final de Entrega: " + item.DataEntregaFinal.ToShortDateString() + stringChar
                                    + "Linhagem: " + item.ProdCodEstr + stringChar
                                    + "Qtde. Líquida: " + item.QtdeLiquida.ToString() + stringChar
                                    + "% Bonificação: " + item.PercBonificacao.ToString() + "%" + stringChar
                                    + "Qtde. Bonificada: " + item.QtdeBonificada.ToString() + stringChar
                                    + "Qtde. Reposição: " + item.QtdeReposicao.ToString() + stringChar
                                    + "Qtde. Total: " + (item.QtdeLiquida + item.QtdeBonificada).ToString() + stringChar;
                                //+ "Preço Unit. s/ Vac.: R$ " + String.Format("{0:N4}", precoLin) + stringChar

                                #region Carrega Valor do Pinto e Total

                                string precoPintoStr = "";
                                if (item.PrecoPinto != null && item.PrecoPinto > 0)
                                    precoPintoStr = "Preço do Pinto: R$ " + String.Format("{0:N2}", item.PrecoPinto) + stringChar;
                                else
                                    precoPintoStr = "Preço do Pinto: R$ " + String.Format("{0:N2}", precoLin) + stringChar;

                                string valorTotalStr = "";
                                if (item.ValorTotal == 0 || item.ValorTotal == null)
                                    valorTotalStr = "Valor Total: R$ " + String.Format("{0:N2}", (item.PrecoUnitario * item.QtdeLiquida)
                                        + (Convert.ToDecimal(Session["valorServicoPV"]) * qtTV)) + stringChar;
                                else
                                    valorTotalStr = "Valor Total: R$ " + String.Format("{0:N2}", item.ValorTotal) + stringChar;

                                #endregion

                                textoEmail = textoEmail + precoPintoStr
                                    + "Preço Unitário Total: R$ " + String.Format("{0:N4}", item.PrecoUnitario) + stringChar
                                    + valorTotalStr
                                    + "Cód. CHIC: " + item.OrderNoCHIC + stringChar
                                    + "Cód. CHIC Reposição: " + item.OrderNoCHICReposicao + stringChar + stringChar;
                            }

                            #endregion

                            #region Vacina Primária

                            PRODUTO vacinaApolo = apoloStatic.PRODUTO
                                .Where(w => w.ProdCodEstr == vacinaPrimaria.ProdCodEstr).FirstOrDefault();

                            #region Preço Vacina Primária

                            decimal? precoVacina = 0;
                            DateTime menorDataInicial = listItensPV.Min(m => m.DataEntregaInicial);
                            DateTime maiorDataFinal = listItensPV.Max(m => m.DataEntregaFinal);

                            if (vacinaApolo != null)
                            {
                                Tabela_Precos precoVacinaPrimaria = hlbappSession.Tabela_Precos
                                    .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaApolo.ProdNomeAlt2
                                        && w.Regiao == "Todas" && w.Empresa == empresaL
                                        && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                                    .FirstOrDefault();

                                if (precoVacinaPrimaria != null)
                                    precoVacina = precoVacinaPrimaria.ValorNormal;
                            }

                            #endregion

                            if (vacinaApolo != null)
                            {
                                string vacinaPrimariaStr = "";
                                if (vacinaPrimaria.PrecoUnitario != null && vacinaPrimaria.PrecoUnitario > 0)
                                    vacinaPrimariaStr = " - R$ " + String.Format("{0:N2}", vacinaPrimaria.PrecoUnitario);
                                else
                                    vacinaPrimariaStr = " - R$ " + String.Format("{0:N2}", precoVacina);

                                if (vacinaPrimaria.Bonificada == 1)
                                {
                                    vacinaPrimariaStr = vacinaPrimariaStr + " - VACINA PRIMÁRIA BONIFICADA ";
                                }

                                textoEmail = textoEmail
                                    + "VACINA PRIMÁRIA: " + vacinaApolo.ProdNomeAlt1
                                    + vacinaPrimariaStr
                                    + stringChar + stringChar;
                            }

                            textoEmail = textoEmail
                                    + "**** VACINAS SECUNDÁRIAS ****" + stringChar + stringChar;

                            #endregion

                            #region Vacinas Secundárias

                            foreach (var item in listaVacSec)
                            {
                                #region Valor Vacina

                                PRODUTO vacinaSecObject = apoloStatic.PRODUTO
                                    .Where(w => w.ProdCodEstr == item.ProdCodEstr)
                                    .FirstOrDefault();

                                Tabela_Precos precoVacinaSec = hlbappSession.Tabela_Precos
                                    .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaSecObject.ProdNomeAlt2
                                        && w.Regiao == "Todas" && w.Empresa == empresaL
                                        && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                                    .FirstOrDefault();

                                decimal? valorvacina = 0;
                                if (precoVacinaSec != null)
                                {
                                    valorvacina = precoVacinaSec.ValorNormal;
                                }

                                #endregion

                                string vacinaSecundariaStr = "";
                                if (item.PrecoUnitario != null && item.PrecoUnitario > 0)
                                    vacinaSecundariaStr = " - R$ " + String.Format("{0:N2}", item.PrecoUnitario);
                                else
                                    vacinaSecundariaStr = " - R$ " + String.Format("{0:N2}", valorvacina);

                                if (item.Bonificada == 1)
                                    vacinaSecundariaStr = vacinaSecundariaStr + " - VACINA BONIFICADA ";

                                textoEmail = textoEmail
                                    + vacinaSecObject.ProdNomeAlt1
                                    + vacinaSecundariaStr
                                    + stringChar;
                            }

                            #endregion

                            #region Serviços

                            if (servico != null)
                            {
                                #region Preço Serviço

                                decimal precoServico = 0;

                                Tabela_Precos precoServicoObj = hlbappSession.Tabela_Precos
                                    .Where(w => w.Tipo == "Serviço" && w.Produto == "Tratamento Infravermelho"
                                        && w.Regiao == "Todas" && w.Empresa == empresaL
                                        && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                                    .FirstOrDefault();

                                if (precoServicoObj != null)
                                    precoServico = Convert.ToDecimal(precoServicoObj.ValorNormal);

                                #endregion

                                string servicoStr = "";
                                if (servico.PrecoUnitario != null && servico.PrecoUnitario > 0)
                                    servicoStr = " - R$ " + String.Format("{0:N2}", servico.PrecoUnitario);
                                else
                                    servicoStr = " - R$ " + String.Format("{0:N2}", precoServico);

                                if (servico.Bonificada == 1)
                                    servicoStr = servicoStr + " - SERVIÇO BONIFICADO";

                                textoEmail = textoEmail + stringChar
                                    + "TRATAMENTO INFRAVERMELHO: Sim - "
                                    + String.Format("{0:N2}", servico.PercAplicacaoServico) + "%"
                                    + servicoStr
                                    + stringChar + stringChar;
                            }
                            else
                            {
                                textoEmail = textoEmail + stringChar
                                    + "TRATAMENTO INFRAVERMELHO: Não"
                                    + stringChar + stringChar;
                            }

                            #endregion

                            #region Outras Informações

                            if (pedidoVenda.OvosBrasil.Equals(1))
                            {
                                textoEmail = textoEmail
                                    + "OVOS BRASIL: Sim"
                                    + stringChar;
                            }
                            else
                            {
                                textoEmail = textoEmail
                                    + "OVOS BRASIL: Não"
                                    + stringChar;
                            }

                            textoEmail = textoEmail
                                + "CONDIÇÃO DE PAGAMENTO: " + pedidoVenda.CondicaoPagamento + stringChar
                                + "OBSERVAÇÕES: " + pedidoVenda.Observacoes + stringChar;

                            if (Session["origemPV"].ToString().Equals("Alteração"))
                            {
                                textoEmail = textoEmail
                                    + "MOTIVO DA ALTERAÇÃO: " + logPV.Motivo + stringChar;
                            }

                            #endregion

                            #endregion

                            string textCodigoCHIC = "";
                            if (Session["origemPV"].ToString().Equals("Alteração"))
                                if ((listItensPV.Max(m => m.OrderNoCHIC) != "")
                                    && (listItensPV.Max(m => m.OrderNoCHIC) != null))
                                    textCodigoCHIC = " Nº CHIC " + listItensPV.Max(m => m.OrderNoCHIC);
                                else
                                    textCodigoCHIC = " ID " + pedidoVenda.ID.ToString();
                            else
                                textCodigoCHIC = " ID " + pedidoVenda.ID.ToString();

                            email.WorkFlowEmailAssunto = empresa + " - " + Session["origemPV"].ToString().ToUpper()
                                + " DO PEDIDO" + textCodigoCHIC;
                            corpoOperacao = "Foi realizada a " + Session["origemPV"].ToString() + " do pedido "
                                + textCodigoCHIC +
                                " no Sistema com sucesso! " + stringChar +
                                "Seguem Dados que foram realizada a " + Session["origemPV"].ToString()
                                + ":" + stringChar + stringChar +
                                textoEmail + stringChar + stringChar +
                                "Para verificá-lo, acesse o site e verifique na Lista de Pedidos! ";

                            corpoEmail = "Prezado " + vendedor.VendNome + "," + (char)13 + (char)10 + (char)13 + (char)10
                                + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                                + "SISTEMA WEB";

                            email.WorkFlowEmailCorpo = corpoEmail;

                            #region Gerar Solicitação de Venda PDF

                            string caminho = GeraSolicitacaoVendaPDF(pedidoVenda.ID);

                            email.WorkFlowEmailArquivosAnexos = caminho;

                            #endregion

                            apolo.WORKFLOW_EMAIL.AddObject(email);

                            apolo.SaveChanges();
                        }

                        #endregion
                    }

                    #region Verifica Vacinas

                    string retornoVerificaVacinas = VerificaVacinas(vendedor.CodigoCHIC, Session["vacinaPrimariaPV"].ToString(),
                        listaVacSec, false);

                    if (retornoVerificaVacinas != "")
                    {
                        ViewBag.Erro =
                            "O pedido " + idPedidoNovo.ToString() + " foi gerado, porém existem "
                            + "as seguintes divergências: " + (char)13 + (char)10 + (char)13 + (char)10
                            + retornoVerificaVacinas + (char)13 + (char)10
                            + (char)13 + (char)10 + " Por favor, realizar correções!";
                        //return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
                    }
                    else
                    {
                        ViewBag.Mensagem = "Pedidos gerados com sucesso! Agora pode conferi-los na lista abaixo!";
                    }

                    #endregion

                    #region Inserção de Pedido Individual - **** DESATIVADO PARA USAR A MESMA ROTINA DE VÁRIOS ****

                    //}
                    //else
                    //{
                    //    #region Alimenta Dados do Cabeçalho - Pedido_Venda

                        

                    //    Pedido_Venda pedidoVenda = null;

                    //    int origem = 0;

                    //    if (Session["origemPV"].ToString() == "Inclusão")
                    //    {
                    //        origem = 1;
                    //        pedidoVenda = new Pedido_Venda();
                    //        pedidoVenda.DataPedido = DateTime.Today;
                    //        pedidoVenda.Usuario = Session["usuario"].ToString().Trim();
                    //        pedidoVenda.DataHora = DateTime.Now;
                    //    }
                    //    else
                    //    {
                    //        int id = Convert.ToInt32(Session["idSelecionado"].ToString());
                    //        pedidoVenda = hlbappSession.Pedido_Venda
                    //            .Where(w => w.ID == id).FirstOrDefault();
                    //    }

                    //    pedidoVenda.CodigoCliente = Session["selectedCustomer"].ToString();
                    //    pedidoVenda.EnderEntSeq = Convert.ToInt32(Session["selectedShipAddress"].ToString());

                    //    ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == pedidoVenda.CodigoCliente)
                    //        .FirstOrDefault();
                    //    CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();
                    //    UNID_FEDERACAO uf = PedidoVendaController.apoloStatic.UNID_FEDERACAO
                    //        .Where(w => w.UfSigla == cidade.UfSigla).FirstOrDefault();

                    //    if (Convert.ToBoolean(Session["ovosBrasilPV"]))
                    //        pedidoVenda.OvosBrasil = 1;
                    //    else
                    //        pedidoVenda.OvosBrasil = 0;
                    //    if (Session["condicaoPagamentoPV"] != null)
                    //        pedidoVenda.CondicaoPagamento = Session["condicaoPagamentoPV"].ToString();
                    //    pedidoVenda.Observacoes = Session["observacaoPV"].ToString();
                    //    pedidoVenda.Vendedor = Session["vendedorPV"].ToString();
                    //    pedidoVenda.NomeCliente = entidade.EntNome;

                    //    salesmanTableAdapter sl = new salesmanTableAdapter();
                    //    CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                    //    sl.FillByCode(slDT, pedidoVenda.Vendedor);

                    //    pedidoVenda.Empresa = slDT[0].inv_comp.Trim();

                    //    Empresas configEmpresa = hlbappSession.Empresas
                    //        .Where(w => w.CodigoCHIC == pedidoVenda.Empresa).FirstOrDefault();

                    //    List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                    //    int existe = listItensPVSession
                    //        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado").Count();

                    //    if (MvcAppHyLinedoBrasil.Controllers.AccountController
                    //        .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                    //        (System.Collections.ArrayList)Session["Direitos"])
                    //        && !cidade.PaisSigla.Equals("BRA"))
                    //    {
                    //        if (Session["condicaoPagamentoPV"] == null)
                    //            pedidoVenda.CondicaoPagamento = Session["condPagPV"].ToString();

                    //        pedidoVenda.DataPedido = Convert.ToDateTime(Session["dataPedidoVenda"]);
                    //        pedidoVenda.DataEnvio = Convert.ToDateTime(Session["dataEnvio"]);
                    //        pedidoVenda.DataSaidaIncubatorio = Convert.ToDateTime(Session["dataSaidaIncubatorio"]);
                    //        pedidoVenda.EnviadoVia = Session["viaDeEnvioSelecionada"].ToString();
                    //        pedidoVenda.AeroportoOrigem = Session["aeroportoOrigemSelecionado"].ToString();
                    //        pedidoVenda.AeroportoDestino = Session["aeroportoDestinoSelecionado"].ToString();
                    //        pedidoVenda.ValorDocumentacao = Convert.ToDecimal(Session["valorDocumentacaoDE"]);
                    //        pedidoVenda.ValorFrete = Convert.ToDecimal(Session["valorFreteDE"]);
                    //        pedidoVenda.NumCaixas = Convert.ToInt32(Session["numCaixasDE"]);
                    //        pedidoVenda.TipoPedido = Session["tipoVendaSelecionado"].ToString();
                    //        pedidoVenda.NumPaletes = Convert.ToInt32(Session["numPaletesDE"]);
                    //        pedidoVenda.NumeroVoo = Session["numeroVooPV"].ToString();
                    //        pedidoVenda.CiaAerea = Session["ciaAereaPV"].ToString();
                    //        pedidoVenda.AWB = Session["awbPV"].ToString();
                    //        pedidoVenda.NCM = Session["ncmPV"].ToString();
                    //        pedidoVenda.NumFatura = Session["numFaturaDE"].ToString();
                    //        pedidoVenda.DataColetaNascimento = Convert.ToDateTime(Session["dataColetaNascimento"]);
                    //        pedidoVenda.Status = "Documentação de Exportação";
                    //        pedidoVenda.Placa = Session["placaPV"].ToString();
                    //        pedidoVenda.Lacre = Session["lacrePV"].ToString();
                    //        pedidoVenda.Motorista = Session["motoristaPV"].ToString();
                    //        pedidoVenda.RGMotorista = Session["rgMotoristaPV"].ToString();
                    //        pedidoVenda.Veterinario = Session["veterinarioSelecionado"].ToString();
                    //    }
                    //    else
                    //    {
                    //        string completaStatus = "";
                    //        if (configEmpresa.AprovacaoGerencia.Equals("Sim"))
                    //            completaStatus = " Aguardando Análise Gerência";
                    //        else
                    //            completaStatus = " Pendente";

                    //        if (existe == 0)
                    //            pedidoVenda.Status = "Inclusão" + completaStatus;
                    //        else
                    //            pedidoVenda.Status = "Alteração" + completaStatus;
                    //    }

                    //    if (Session["selectedTypeAddress"].ToString().Equals("Outro"))
                    //        pedidoVenda.EnderEntSeq = Convert.ToInt32(Session["selectedShipAddress"].ToString());
                    //    else
                    //        pedidoVenda.EnderEntSeq = 0;

                    //    if (origem == 1) hlbappSession.Pedido_Venda.AddObject(pedidoVenda);

                    //    hlbappSession.SaveChanges();

                    //    idPedidoNovo = pedidoVenda.ID;

                    //    #region Insere LOG - Pedido_Venda

                    //    HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                    //    LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                    //    logPV.DataPedido = pedidoVenda.DataPedido;
                    //    logPV.Usuario = Session["usuario"].ToString();
                    //    logPV.DataHora = DateTime.Now;
                    //    logPV.CodigoCliente = pedidoVenda.CodigoCliente;
                    //    logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                    //    logPV.CondicaoPagamento = pedidoVenda.CondicaoPagamento;
                    //    logPV.Observacoes = pedidoVenda.Observacoes;
                    //    logPV.Vendedor = pedidoVenda.Vendedor;
                    //    logPV.Status = pedidoVenda.Status;
                    //    logPV.Operacao = Session["origemPV"].ToString();
                    //    logPV.IDPedidoVenda = pedidoVenda.ID;
                    //    logPV.Motivo = Session["motivoAlteracaoPV"].ToString();
                    //    logPV.DataEnvio = pedidoVenda.DataEnvio;
                    //    logPV.DataSaidaIncubatorio = pedidoVenda.DataSaidaIncubatorio;
                    //    logPV.EnviadoVia = pedidoVenda.EnviadoVia;
                    //    logPV.AeroportoOrigem = pedidoVenda.AeroportoOrigem;
                    //    logPV.AeroportoDestino = pedidoVenda.AeroportoDestino;
                    //    logPV.ValorDocumentacao = pedidoVenda.ValorDocumentacao;
                    //    logPV.ValorFrete = pedidoVenda.ValorFrete;
                    //    logPV.NumCaixas = pedidoVenda.NumCaixas;
                    //    logPV.TipoPedido = pedidoVenda.TipoPedido;
                    //    logPV.NumPaletes = pedidoVenda.NumPaletes;
                    //    logPV.NumeroVoo = pedidoVenda.NumeroVoo;
                    //    logPV.CiaAerea = pedidoVenda.CiaAerea;
                    //    logPV.AWB = pedidoVenda.AWB;
                    //    logPV.NCM = pedidoVenda.NCM;
                    //    logPV.NumFatura = pedidoVenda.NumFatura;

                    //    string motivoAlteraPrecoBonificacao = "";
                    //    if (model["motivoAlteraPrecoBonificacao"] != null)
                    //        motivoAlteraPrecoBonificacao = model["motivoAlteraPrecoBonificacao"];

                    //    if ((Convert.ToBoolean(Session["alteracaoPrecoBonificacaoPV"]))
                    //        || (Convert.ToBoolean(Session["alteracaoVacinasItemPV"])))
                    //    {
                    //        if (logPV.Motivo != "")
                    //        {
                    //            if (Convert.ToBoolean(Session["alteracaoPrecoBonificacaoPV"]))
                    //            {
                    //                logPV.Motivo = logPV.Motivo + stringChar + stringChar
                    //                    + "Foi realizada Alteração de Preço / % de Bonificação pelo seguinte motivo: "
                    //                    + stringChar + motivoAlteraPrecoBonificacao;
                    //            }
                    //            else if (Convert.ToBoolean(Session["alteracaoVacinasItemPV"]))
                    //            {
                    //                logPV.Motivo = logPV.Motivo + stringChar + stringChar
                    //                    + "Foi realizada Alteração nas Vacinas do(s) Item(ns) pelo seguinte motivo: "
                    //                    + stringChar + motivoAlteraPrecoBonificacao;
                    //            }
                    //        }
                    //        else
                    //        {
                    //            if (Convert.ToBoolean(Session["alteracaoPrecoBonificacaoPV"]))
                    //            {
                    //                logPV.Motivo = "Foi realizada Alteração de Preço / % de Bonificação pelo seguinte motivo: "
                    //                    + stringChar + motivoAlteraPrecoBonificacao;
                    //            }
                    //            else if (Convert.ToBoolean(Session["alteracaoVacinasItemPV"]))
                    //            {
                    //                logPV.Motivo = "Foi realizada Alteração nas Vacinas do(s) Item(ns) pelo seguinte motivo: "
                    //                    + stringChar + motivoAlteraPrecoBonificacao;
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        logPV.Motivo = motivoAlteraPrecoBonificacao;
                    //    }

                    //    hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);

                    //    #endregion

                    //    hlbppLOG.SaveChanges();

                    //    #endregion

                    //    #region Alimenta os Itens - Item_Pedido_Venda

                    //    if (Session["ItensPVListDelete"] != null)
                    //    {
                    //        var listaIPVDelete = (List<Item_Pedido_Venda>)Session["ItensPVListDelete"];

                    //        foreach (var item in listaIPVDelete)
                    //        {
                    //            hlbappSession.Item_Pedido_Venda.DeleteObject(item);
                    //        }
                    //    }

                    //    List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                    //    //foreach (var item in listItensPV)
                    //    //{
                    //    //    if (item.ID != 0)
                    //    //        hlbappSession.AttachTo("Item_Pedido_Venda", item);
                    //    //}

                    //    List<Lote_Item_Pedido_Venda> listItensLotePV = (List<Lote_Item_Pedido_Venda>)Session["ListaLotesItemPV"];

                    //    //foreach (var item in listItensLotePV)
                    //    //{
                    //    //    if (item.ID != 0)
                    //    //        hlbappSession.AttachTo("Lote_Item_Pedido_Venda", item);
                    //    //}

                    //    List<Lote_Item_Pedido_Venda> listaDeleteItensLotePV = new List<Lote_Item_Pedido_Venda>();
                    //    if (Session["ItensLoteListDelete"] != null)
                    //        listaDeleteItensLotePV = (List<Lote_Item_Pedido_Venda>)Session["ItensLoteListDelete"];

                    //    var listItensPVAlterado = listItensPV.Where(w => w.Alterado == 1 || w.Alterado == 2).ToList();

                    //    foreach (var item in listItensPVAlterado)
                    //    {
                    //        Item_Pedido_Venda itemPedVenda = hlbappSession.Item_Pedido_Venda
                    //            .Where(w => w.IDPedidoVenda == pedidoVenda.ID
                    //                && w.Sequencia == item.Sequencia)
                    //            .FirstOrDefault();

                    //        origem = 0;
                    //        if (itemPedVenda == null)
                    //        {
                    //            origem = 1;
                    //            itemPedVenda = new Item_Pedido_Venda();
                    //            itemPedVenda.IDPedidoVenda = pedidoVenda.ID;
                    //            itemPedVenda.Sequencia = item.Sequencia;
                    //        }

                    //        itemPedVenda.ProdCodEstr = item.ProdCodEstr;
                    //        itemPedVenda.DataEntregaInicial = item.DataEntregaInicial;
                    //        itemPedVenda.DataEntregaFinal = item.DataEntregaFinal;
                    //        itemPedVenda.QtdeLiquida = item.QtdeLiquida;
                    //        itemPedVenda.PercBonificacao = item.PercBonificacao;
                    //        itemPedVenda.QtdeBonificada = item.QtdeBonificada;
                    //        itemPedVenda.QtdeReposicao = item.QtdeReposicao;
                    //        itemPedVenda.PrecoUnitario = item.PrecoUnitario;
                    //        itemPedVenda.ValorTotal = item.ValorTotal;

                    //        if (origem == 1) hlbappSession.Item_Pedido_Venda.AddObject(itemPedVenda);

                    //        hlbappSession.SaveChanges();

                    //        #region Insere LOG - Item_Ped_Venda

                    //        LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                    //        logItemPV.IDPedidoVenda = itemPedVenda.IDPedidoVenda;
                    //        logItemPV.Sequencia = itemPedVenda.Sequencia;
                    //        logItemPV.ProdCodEstr = itemPedVenda.ProdCodEstr;
                    //        logItemPV.DataEntregaInicial = itemPedVenda.DataEntregaInicial;
                    //        logItemPV.DataEntregaFinal = itemPedVenda.DataEntregaFinal;
                    //        logItemPV.QtdeLiquida = itemPedVenda.QtdeLiquida;
                    //        logItemPV.PercBonificacao = itemPedVenda.PercBonificacao;
                    //        logItemPV.QtdeBonificada = itemPedVenda.QtdeBonificada;
                    //        logItemPV.QtdeReposicao = itemPedVenda.QtdeReposicao;
                    //        logItemPV.PrecoUnitario = itemPedVenda.PrecoUnitario;
                    //        logItemPV.DataHora = DateTime.Now;
                    //        logItemPV.Operacao = Session["origemPV"].ToString() + " Pendente";
                    //        logItemPV.OrderNoCHIC = itemPedVenda.OrderNoCHIC;
                    //        logItemPV.IDItPedVenda = itemPedVenda.ID;
                    //        logItemPV.IDLogPedidoVenda = logPV.ID;
                    //        logItemPV.OrderNoCHIC = itemPedVenda.OrderNoCHIC;
                    //        logItemPV.OrderNoCHICReposicao = itemPedVenda.OrderNoCHICReposicao;
                    //        logItemPV.TipoAlteracao = Session["tipoAlteracaoPV"].ToString();

                    //        if (itemPedVenda.Alterado.Equals(2))
                    //            if (logItemPV.TipoAlteracao != "")
                    //                logItemPV.TipoAlteracao = logItemPV.TipoAlteracao
                    //                    + " - Contém Alteração de Preço / % Bonificação";
                    //            else
                    //                logItemPV.TipoAlteracao = "Contém Alteração de Preço / % Bonificação";

                    //        hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                    //        hlbppLOG.SaveChanges();

                    //        #endregion

                    //        itemPedVenda.Alterado = 0;
                    //        itemPedVenda.Importar = 1;

                    //        #region Alimenta os Lotes dos Itens - Lote_Item_Pedido_Venda

                    //        var listaLoteDeleteItemPv = listaDeleteItensLotePV
                    //            .Where(w => w.SeqItemPV == itemPedVenda.Sequencia).ToList();

                    //        foreach (var loteDelete in listaLoteDeleteItemPv)
                    //        {
                    //            hlbappSession.Lote_Item_Pedido_Venda.DeleteObject(loteDelete);
                    //        }

                    //        var listaLoteItemPv = listItensLotePV.Where(w => w.SeqItemPV == itemPedVenda.Sequencia).ToList();

                    //        foreach (var lote in listaLoteItemPv)
                    //        {
                    //            Lote_Item_Pedido_Venda newLote = hlbappSession.Lote_Item_Pedido_Venda
                    //                .Where(w => w.IDItemPedidoVenda == lote.IDItemPedidoVenda
                    //                    && w.Sequencia == lote.Sequencia).FirstOrDefault();

                    //            origem = 0;
                    //            if (newLote == null)
                    //            {
                    //                origem = 1;
                    //                newLote = new Lote_Item_Pedido_Venda();
                    //                newLote.IDItemPedidoVenda = itemPedVenda.ID;
                    //                newLote.SeqItemPV = itemPedVenda.Sequencia;
                    //            }

                    //            newLote.Nucleo = lote.Nucleo;
                    //            newLote.Lote = lote.Lote;
                    //            newLote.Galpao = lote.Galpao;
                    //            newLote.DataProducao = lote.DataProducao;
                    //            newLote.Qtde = lote.Qtde;
                    //            newLote.Sequencia = lote.Sequencia;
                    //            newLote.IdadeLote = lote.IdadeLote;
                    //            newLote.PesoOvo = lote.PesoOvo;

                    //            if (origem == 1) hlbappSession.Lote_Item_Pedido_Venda.AddObject(newLote);

                    //            hlbappSession.SaveChanges();
                    //        }

                    //        #endregion
                    //    }

                    //    #endregion

                    //    #region Alimenta a Vacina Primária do Pedido - Vacinas_Primaria_Pedido_Venda

                    //    Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                    //        .Where(w => w.IDPedidoVenda == pedidoVenda.ID && w.SeqItemPedVenda == 0).FirstOrDefault();

                    //    origem = 0;
                    //    if (vacinaPrimaria == null)
                    //    {
                    //        origem = 1;
                    //        vacinaPrimaria = new Vacinas_Primaria_Pedido_Venda();
                    //        vacinaPrimaria.IDPedidoVenda = pedidoVenda.ID;
                    //    }

                    //    vacinaPrimaria.ProdCodEstr = Session["vacinaPrimariaPV"].ToString();
                    //    vacinaPrimaria.SeqItemPedVenda = 0;

                    //    if (!vacinaPrimaria.ProdCodEstr.Equals("(Sem Vacinação)"))
                    //    {
                    //        if (origem == 1) hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacinaPrimaria);
                    //        hlbappSession.SaveChanges();
                    //    }
                    //    else
                    //    {
                    //        if (origem == 0) hlbappSession.Vacinas_Primaria_Pedido_Venda.DeleteObject(vacinaPrimaria);
                    //        hlbappSession.SaveChanges();
                    //    }

                    //    #region Insere LOG - Vacina Primária

                    //    LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();
                    //    logVacPrim.IDPedidoVenda = vacinaPrimaria.IDPedidoVenda;
                    //    logVacPrim.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                    //    logVacPrim.DataHora = DateTime.Now;
                    //    logVacPrim.Operacao = Session["origemPV"].ToString() + " Pendente";
                    //    logVacPrim.IDVacPrimPedVenda = vacinaPrimaria.ID;
                    //    logVacPrim.IDLogPedidoVenda = logPV.ID;
                    //    logVacPrim.SeqItemPedVenda = 0;

                    //    hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);

                    //    #endregion

                    //    hlbppLOG.SaveChanges();

                    //    #endregion

                    //    #region Alimenta as Vacinas Primárias dos Itens - Vacinas_Primaria_Pedido_Venda

                    //    var listaVacPrim = (List<Vacinas_Primaria_Pedido_Venda>)Session["VacinasPrimariaItemPVList"];
                    //    var listVacSecItemPV = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVList"];

                    //    foreach (var item in listaVacPrim)
                    //    {
                    //        Vacinas_Primaria_Pedido_Venda vacinaPrimariaItem = hlbappSession.Vacinas_Primaria_Pedido_Venda
                    //            .Where(w => w.IDPedidoVenda == pedidoVenda.ID
                    //                && w.SeqItemPedVenda == item.SeqItemPedVenda).FirstOrDefault();

                    //        origem = 0;
                    //        if (vacinaPrimariaItem == null)
                    //        {
                    //            origem = 1;
                    //            vacinaPrimariaItem = new Vacinas_Primaria_Pedido_Venda();
                    //            vacinaPrimariaItem.IDPedidoVenda = pedidoVenda.ID;
                    //            vacinaPrimariaItem.SeqItemPedVenda = item.SeqItemPedVenda;
                    //        }

                    //        vacinaPrimariaItem.ProdCodEstr = item.ProdCodEstr;

                    //        if (origem == 1) hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacinaPrimariaItem);

                    //        hlbappSession.SaveChanges();

                    //        #region Insere LOG - Vacina Primária

                    //        LOG_Vacinas_Primaria_Pedido_Venda logVacPrimItem = new LOG_Vacinas_Primaria_Pedido_Venda();
                    //        logVacPrimItem.IDPedidoVenda = vacinaPrimariaItem.IDPedidoVenda;
                    //        logVacPrimItem.ProdCodEstr = vacinaPrimariaItem.ProdCodEstr;
                    //        logVacPrimItem.DataHora = DateTime.Now;
                    //        logVacPrimItem.Operacao = Session["origemPV"].ToString() + " Pendente";
                    //        logVacPrimItem.IDVacPrimPedVenda = vacinaPrimariaItem.ID;
                    //        logVacPrimItem.IDLogPedidoVenda = logPV.ID;
                    //        logVacPrimItem.SeqItemPedVenda = vacinaPrimariaItem.SeqItemPedVenda;

                    //        hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrimItem);

                    //        hlbppLOG.SaveChanges();

                    //        #endregion

                    //        #region Alimenta as Vacinas Secundárias dos Itens - Vacinas_Secundaria_Pedido_Venda

                    //        var listVacSecItemPVVacPrim = listVacSecItemPV
                    //            .Where(w => w.SeqItemPedVenda == vacinaPrimariaItem.SeqItemPedVenda).ToList();

                    //        foreach (var itemVacSec in listVacSecItemPVVacPrim)
                    //        {
                    //            Vacinas_Secundaria_Pedido_Venda vacSec = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                    //                .Where(w => w.IDVacPrimPedVenda == vacinaPrimariaItem.ID
                    //                    && w.Sequencia == itemVacSec.Sequencia).FirstOrDefault();

                    //            origem = 0;
                    //            if (vacSec == null)
                    //            {
                    //                origem = 1;
                    //                vacSec = new Vacinas_Secundaria_Pedido_Venda();
                    //                vacSec.IDVacPrimPedVenda = vacinaPrimariaItem.ID;
                    //                vacSec.Sequencia = itemVacSec.Sequencia;
                    //                vacSec.SeqItemPedVenda = itemVacSec.SeqItemPedVenda;
                    //            }

                    //            vacSec.ProdCodEstr = itemVacSec.ProdCodEstr;

                    //            if (origem == 1) hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);

                    //            hlbappSession.SaveChanges();

                    //            #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                    //            LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                    //            logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                    //            logVacSec.Sequencia = vacSec.Sequencia;
                    //            logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                    //            logVacSec.DataHora = DateTime.Now;
                    //            logVacSec.Operacao = Session["origemPV"].ToString() + " Pendente";
                    //            logVacSec.IDVacSecPedVenda = vacSec.ID;
                    //            logVacSec.IDVacPrimLogPedidoVenda = logVacPrimItem.ID;
                    //            logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                    //            hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                    //            #endregion

                    //            hlbppLOG.SaveChanges();
                    //            hlbappSession.SaveChanges();
                    //        }

                    //        #endregion
                    //    }

                    //    #endregion

                    //    #region Alimenta as Vacinas Secundárias - Vacinas_Secundaria_Pedido_Venda

                    //    if (Session["ItensSecVacListDelete"] != null)
                    //    {
                    //        var listaDelete = (List<Vacinas_Secundaria_Pedido_Venda>)Session["ItensSecVacListDelete"];

                    //        foreach (var item in listaDelete.Where(w => w.ID != 0).ToList())
                    //        {
                    //            hlbappSession.Vacinas_Secundaria_Pedido_Venda.DeleteObject(item);

                    //            hlbappSession.SaveChanges();
                    //        }
                    //    }

                    //    var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                    //    //foreach (var item in listaVacSec)
                    //    //{
                    //    //    if (item.ID != 0)
                    //    //        hlbappSession.AttachTo("Vacinas_Secundaria_Pedido_Venda", item);
                    //    //}

                    //    #region Deleta Vacinas Antigas

                    //    var listaVacSecDelete = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                    //        .Where(w => w.IDVacPrimPedVenda == vacinaPrimaria.ID).ToList();

                    //    foreach (var item in listaVacSecDelete)
                    //    {
                    //        hlbappSession.Vacinas_Secundaria_Pedido_Venda.DeleteObject(item);
                    //    }

                    //    hlbappSession.SaveChanges();

                    //    #endregion

                    //    #region Insere Vacinas Novamente

                    //    foreach (var item in listaVacSec)
                    //    {
                    //        Vacinas_Secundaria_Pedido_Venda vacSec = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                    //            .Where(w => w.IDVacPrimPedVenda == vacinaPrimaria.ID
                    //                && w.Sequencia == item.Sequencia).FirstOrDefault();

                    //        origem = 0;
                    //        if (vacSec == null)
                    //        {
                    //            origem = 1;
                    //            vacSec = new Vacinas_Secundaria_Pedido_Venda();
                    //            vacSec.IDVacPrimPedVenda = vacinaPrimaria.ID;
                    //            vacSec.Sequencia = item.Sequencia;
                    //        }

                    //        vacSec.ProdCodEstr = item.ProdCodEstr;
                    //        vacSec.SeqItemPedVenda = 0;

                    //        if (origem == 1) hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);

                    //        hlbappSession.SaveChanges();

                    //        #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                    //        LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                    //        logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                    //        logVacSec.Sequencia = vacSec.Sequencia;
                    //        logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                    //        logVacSec.DataHora = DateTime.Now;
                    //        logVacSec.Operacao = Session["origemPV"].ToString() + " Pendente";
                    //        logVacSec.IDVacSecPedVenda = vacSec.ID;
                    //        logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                    //        hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                    //        #endregion

                    //        hlbppLOG.SaveChanges();
                    //    }

                    //    #endregion

                    //    #endregion

                    //    #region Alimenta o Serviço - Servicos_Pedido_Venda

                    //    bool servicoMarcado = Convert.ToBoolean(Session["tratamentoInfravermelhoPV"]);

                    //    Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                    //        .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                    //    if (servicoMarcado)
                    //    {
                    //        origem = 0;
                    //        if (servico == null)
                    //        {
                    //            origem = 1;
                    //            servico = new Servicos_Pedido_Venda();
                    //            servico.IDPedidoVenda = pedidoVenda.ID;
                    //        }

                    //        servico.ProdCodEstr = "998.026.197";
                    //        servico.PercAplicacaoServico =
                    //            Convert.ToDecimal(Session["qtdTratamentoInfravermelhoPV"].ToString());

                    //        if (origem == 1) hlbappSession.Servicos_Pedido_Venda.AddObject(servico);

                    //        hlbappSession.SaveChanges();

                    //        #region Insere LOG - Servico_Pedido_Venda

                    //        LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    //        logServ.IDPedidoVenda = servico.IDPedidoVenda;
                    //        logServ.ProdCodEstr = servico.ProdCodEstr;
                    //        logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                    //        logServ.DataHora = DateTime.Now;
                    //        logServ.Operacao = Session["origemPV"].ToString() + " Pendente";
                    //        logServ.IDServPedVenda = servico.ID;
                    //        logServ.IDLogPedidoVenda = logPV.ID;

                    //        hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                    //        hlbppLOG.SaveChanges();

                    //        #endregion
                    //    }
                    //    else
                    //    {
                    //        if (servico != null)
                    //        {
                    //            hlbappSession.Servicos_Pedido_Venda.DeleteObject(servico);
                    //            hlbappSession.SaveChanges();

                    //            #region Insere LOG - Servico_Pedido_Venda

                    //            LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    //            logServ.IDPedidoVenda = servico.IDPedidoVenda;
                    //            logServ.ProdCodEstr = servico.ProdCodEstr;
                    //            logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                    //            logServ.DataHora = DateTime.Now;
                    //            logServ.Operacao = "Exclusão";
                    //            logServ.IDServPedVenda = servico.ID;
                    //            logServ.IDLogPedidoVenda = logPV.ID;

                    //            hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                    //            hlbppLOG.SaveChanges();

                    //            #endregion
                    //        }
                    //    }

                    //    //hlbappSession.SaveChanges();

                    //    #endregion

                    //    #region Envio de E-mail

                    //    int existeItemDocExport = listItensPV.Where(w => w.ProdCodEstr.Contains(".")).Count();
                    //    if (existeItemDocExport == 0)
                    //    {
                    //        if (Session["condicaoPagamentoPV"] == null)
                    //            Session["condicaoPagamentoPV"] = Session["condPagPV"].ToString();

                    //        MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                    //            new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                    //        slDT = new CHICMobileDataSet.salesmanDataTable();
                    //        sl.FillByCode(slDT, pedidoVenda.Vendedor);

                    //        string corpoEmail = "";
                    //        string corpoOperacao = "";

                    //        ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                    //        MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                    //            new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                    //        apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                    //        string empresa = "";
                    //        string copiaPara = "";
                    //        if (slDT[0].inv_comp.Trim().Equals("BR"))
                    //        {
                    //            empresa = "[HLB]";
                    //            //copiaPara = "confirmacoes@hyline.com.br";
                    //            copiaPara = "";
                    //        }
                    //        else if (slDT[0].inv_comp.Trim().Equals("LB"))
                    //        {
                    //            empresa = "[LTZ]";
                    //            copiaPara = "confirmacoes@ltz.com.br";
                    //        }
                    //        else if (slDT[0].inv_comp.Trim().Equals("HN"))
                    //        {
                    //            empresa = "[H&N]";
                    //            copiaPara = "confirmacoes@hnavicultura.com.br";
                    //        }

                    //        email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                    //        email.WorkFlowEmailStat = "Enviar";
                    //        email.WorkFlowEmailData = DateTime.Now;
                    //        //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                    //        //email.WorkFlowEmailParaNome = "Teste";
                    //        if (MvcAppHyLinedoBrasil.Controllers.AccountController
                    //            .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                    //            (System.Collections.ArrayList)Session["Direitos"])
                    //            && !cidade.PaisSigla.Equals("BRA"))
                    //        {
                    //            email.WorkFlowEmailParaNome = "Depto. Exportação";
                    //            email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                    //            email.WorkFlowEmailCopiaPara = null;
                    //        }
                    //        else
                    //        {
                    //            email.WorkFlowEmailParaNome = slDT[0].salesman.Trim();
                    //            email.WorkFlowEmailParaEmail = slDT[0].email.Trim();
                    //            if (configEmpresa.AprovacaoGerencia.Equals("Sim"))
                    //                email.WorkFlowEmailCopiaPara = copiaPara;
                    //            else
                    //                //email.WorkFlowEmailCopiaPara = copiaPara + ";programacao@hyline.com.br";
                    //                email.WorkFlowEmailCopiaPara = copiaPara;
                    //        }
                    //        email.WorkFlowEmailDeNome = "Sistema WEB";
                    //        email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                    //        email.WorkFlowEmailFormato = "Texto";

                    //        #region Texto Detalhado

                    //        #region Cabeçalho

                    //        string empresaL = Session["empresa"].ToString();

                    //        textoEmail = "CLIENTE: " + entidade.EntNome + stringChar
                    //            + "DATA DO PEDIDO: " + pedidoVenda.DataPedido.ToShortDateString() + stringChar + stringChar
                    //            + "**** ITENS ****: " + stringChar + stringChar;

                    //        #endregion

                    //        #region Itens

                    //        foreach (var item in listItensPV)
                    //        {
                    //            #region Preço Unit. s/ Vac.

                    //            string condPag = "";
                    //            if (Session["condicaoPagamentoPV"].ToString().Equals("PAGTO ANTECIPADO"))
                    //            {
                    //                condPag = Session["condicaoPagamentoPV"].ToString();
                    //            }
                    //            else
                    //            {
                    //                condPag = "Faturamento";
                    //            }

                    //            Tabela_Precos precoLinhagem = hlbappSession
                    //                .Tabela_Precos.Where(w => w.Tipo == condPag && w.Produto == item.ProdCodEstr
                    //                && w.Regiao == uf.UfRegGeog && w.Empresa == empresaL
                    //                && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                    //            .FirstOrDefault();

                    //            decimal? precoLin = 0;
                    //            if (precoLinhagem != null)
                    //            {
                    //                if (item.QtdeLiquida < 5000)
                    //                {
                    //                    precoLin = precoLinhagem.ValorMenor5000Aves;
                    //                }
                    //                else
                    //                {
                    //                    precoLin = precoLinhagem.ValorNormal;
                    //                }
                    //            }

                    //            #endregion

                    //            #region Qtde. Tratamento Infra.

                    //            decimal? qtTV = 0;
                    //            if (servico != null)
                    //            {
                    //                decimal qtdTratVerm = 1;
                    //                qtdTratVerm = Convert.ToDecimal(servico.PercAplicacaoServico);
                    //                qtTV = ((item.QtdeLiquida + item.QtdeBonificada) * (qtdTratVerm / 100));
                    //            }

                    //            #endregion

                    //            textoEmail = textoEmail
                    //                + "Data Inicial de Entrega: " + item.DataEntregaInicial.ToShortDateString() + stringChar
                    //                + "Data Final de Entrega: " + item.DataEntregaFinal.ToShortDateString() + stringChar
                    //                + "Linhagem: " + item.ProdCodEstr + stringChar
                    //                + "Qtde. Líquida: " + item.QtdeLiquida.ToString() + stringChar
                    //                + "% Bonificação: " + item.PercBonificacao.ToString() + "%" + stringChar
                    //                + "Qtde. Bonificada: " + item.QtdeBonificada.ToString() + stringChar
                    //                + "Qtde. Reposição: " + item.QtdeReposicao.ToString() + stringChar
                    //                + "Qtde. Total: " + (item.QtdeLiquida + item.QtdeBonificada).ToString() + stringChar
                    //                + "Preço Unit. s/ Vac.: R$ " + String.Format("{0:N4}", precoLin) + stringChar
                    //                + "Preço Unit. c/ Vac.: R$ " + String.Format("{0:N4}", item.PrecoUnitario) + stringChar
                    //                + "Valor Total: R$ " + String.Format("{0:N2}", (item.PrecoUnitario * item.QtdeLiquida)
                    //                    + (Convert.ToDecimal(Session["valorServicoPV"]) * qtTV)) + stringChar
                    //                + "Cód. CHIC: " + item.OrderNoCHIC + stringChar
                    //                + "Cód. CHIC Reposição: " + item.OrderNoCHICReposicao + stringChar + stringChar;
                    //        }

                    //        #endregion

                    //        #region Vacina Primária

                    //        PRODUTO vacinaApolo = apoloStatic.PRODUTO
                    //            .Where(w => w.ProdCodEstr == vacinaPrimaria.ProdCodEstr).FirstOrDefault();

                    //        #region Preço Vacina Primária

                    //        decimal? precoVacina = 0;
                    //        DateTime menorDataInicial = listItensPV.Min(m => m.DataEntregaInicial);
                    //        DateTime maiorDataFinal = listItensPV.Max(m => m.DataEntregaFinal);

                    //        if (vacinaApolo != null)
                    //        {
                    //            Tabela_Precos precoVacinaPrimaria = hlbappSession.Tabela_Precos
                    //                .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaApolo.ProdNomeAlt2
                    //                    && w.Regiao == "Todas" && w.Empresa == empresaL
                    //                    && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                    //                .FirstOrDefault();

                    //            if (precoVacinaPrimaria != null)
                    //                precoVacina = precoVacinaPrimaria.ValorNormal;
                    //        }

                    //        #endregion

                    //        if (vacinaApolo != null)
                    //        {
                    //            textoEmail = textoEmail
                    //                + "VACINA PRIMÁRIA: " + vacinaApolo.ProdNomeAlt1
                    //                + " - R$ " + String.Format("{0:N4}", precoVacina)
                    //                + stringChar + stringChar;
                    //        }

                    //        textoEmail = textoEmail
                    //                + "**** VACINAS SECUNDÁRIAS ****" + stringChar + stringChar;

                    //        #endregion

                    //        #region Vacinas Secundárias

                    //        foreach (var item in listaVacSec)
                    //        {
                    //            #region Valor Vacina

                    //            PRODUTO vacinaSecObject = apoloStatic.PRODUTO
                    //                .Where(w => w.ProdCodEstr == item.ProdCodEstr)
                    //                .FirstOrDefault();

                    //            Tabela_Precos precoVacinaSec = hlbappSession.Tabela_Precos
                    //                .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaSecObject.ProdNomeAlt2
                    //                    && w.Regiao == "Todas" && w.Empresa == empresaL
                    //                    && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                    //                .FirstOrDefault();

                    //            decimal? valorvacina = 0;
                    //            if (precoVacinaSec != null)
                    //            {
                    //                valorvacina = precoVacinaSec.ValorNormal;
                    //            }

                    //            #endregion

                    //            textoEmail = textoEmail
                    //                + vacinaSecObject.ProdNomeAlt1 + " - R$ " + String.Format("{0:N4}", valorvacina)
                    //                + stringChar;
                    //        }

                    //        #endregion

                    //        #region Serviços

                    //        if (servico != null)
                    //        {
                    //            textoEmail = textoEmail + stringChar
                    //                + "TRATAMENTO INFRAVERMELHO: Sim - "
                    //                + String.Format("{0:N2}", servico.PercAplicacaoServico) + "%"
                    //                + stringChar + stringChar;
                    //        }
                    //        else
                    //        {
                    //            textoEmail = textoEmail + stringChar
                    //                + "TRATAMENTO INFRAVERMELHO: Não"
                    //                + stringChar + stringChar;
                    //        }

                    //        #endregion

                    //        #region Outras Informações

                    //        if (pedidoVenda.OvosBrasil.Equals(1))
                    //        {
                    //            textoEmail = textoEmail
                    //                + "OVOS BRASIL: Sim"
                    //                + stringChar;
                    //        }
                    //        else
                    //        {
                    //            textoEmail = textoEmail
                    //                + "OVOS BRASIL: Não"
                    //                + stringChar;
                    //        }

                    //        textoEmail = textoEmail
                    //            + "CONDIÇÃO DE PAGAMENTO: " + pedidoVenda.CondicaoPagamento + stringChar
                    //            + "OBSERVAÇÕES: " + pedidoVenda.Observacoes + stringChar;

                    //        #endregion

                    //        #endregion

                    //        string textCodigoCHIC = "";
                    //        if (Session["origemPV"].ToString().Equals("Alteração"))
                    //            if ((listItensPV.Max(m => m.OrderNoCHIC) != "")
                    //                && (listItensPV.Max(m => m.OrderNoCHIC) != null))
                    //                textCodigoCHIC = " Nº CHIC " + listItensPV.Max(m => m.OrderNoCHIC);
                    //            else
                    //                textCodigoCHIC = " ID " + pedidoVenda.ID.ToString();
                    //        else
                    //            textCodigoCHIC = " ID " + pedidoVenda.ID.ToString();

                    //        email.WorkFlowEmailAssunto = empresa + " - " + Session["origemPV"].ToString().ToUpper()
                    //            + " DO PEDIDO" + textCodigoCHIC;
                    //        corpoOperacao = "Foi realizada a " + Session["origemPV"].ToString() + " do pedido "
                    //            + textCodigoCHIC +
                    //            " no Sistema com sucesso! " + stringChar +
                    //            "Seguem Dados que foram realizada a " + Session["origemPV"].ToString()
                    //            + ":" + stringChar + stringChar +
                    //            textoEmail + stringChar + stringChar +
                    //            "Para verificá-lo, acesse o site e verifique na Lista de Pedidos! ";

                    //        corpoEmail = "Prezado " + slDT[0].salesman.Trim() + "," + (char)13 + (char)10 + (char)13 + (char)10
                    //            + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                    //            + "SISTEMA WEB";

                    //        email.WorkFlowEmailCorpo = corpoEmail;

                    //        #region Gerar Solicitação de Venda PDF

                    //        string caminho = GeraSolicitacaoVendaPDF(pedidoVenda.ID);

                    //        email.WorkFlowEmailArquivosAnexos = caminho;

                    //        #endregion

                    //        apolo.WORKFLOW_EMAIL.AddObject(email);

                    //        apolo.SaveChanges();
                    //    }

                    //    #endregion

                    //    ViewBag.Mensagem = "Pedido finalizado com sucesso! Agora pode conferi-lo na lista abaixo!";
                    //}

                    #endregion

                    Session["alteracaoPrecoBonificacaoPV"] = false;
                    Session["alteracaoVacinasItemPV"] = false;
                }

                LimpaVariaveisSessao();

                DateTime dataInicial = Convert.ToDateTime(Session["dataInicial"].ToString());
                DateTime dataFinal = Convert.ToDateTime(Session["dataFinal"].ToString());
                string customer = Session["customerNameSearchPedVenda"].ToString();
                string status = Session["statusSearch"].ToString();
                string empresaS = Session["empresaSelecionadaPV"].ToString();
                string vendedorParam = Session["vendedorSelecionadoPV"].ToString();
                string codCHIC = Session["codigoCHICSearchPedVenda"].ToString();
                string idPedido = "";
                Pedido_Venda pedidoVendaV = hlbappSession.Pedido_Venda.Where(w => w.ID == idPedidoNovo).FirstOrDefault();
                //if (!pedidoVendaV.Empresa.Equals("LB"))
                //{
                    if (idPedidoNovo != 0)
                        idPedido = idPedidoNovo.ToString();
                    else
                        idPedido = Session["idPedidoSearchPedVenda"].ToString();
                //}

                #region Filtro Status

                List<String> listStatus = new List<string>();
                String[] fileCountries = null;
                int[] selectedIndices = null;
                if (Session["statusSelectedList"] != null)
                {
                    fileCountries = (String[])Session["statusSelectedList"];
                    selectedIndices = (int[])Session["indexStatusSelectedList"];

                    List<String> listStatusUpdSession = new List<string>();
                    foreach (var index in selectedIndices)
                    {
                        listStatusUpdSession.Add(fileCountries[index]);
                    }

                    UpdateStatusListSelected(listStatusUpdSession);

                    if (listStatusUpdSession.Where(w => w == "(Todos os Status)").Count() == 0)
                    {
                        foreach (var index in selectedIndices)
                        {
                            listStatus.Add(fileCountries[index]);
                        }
                    }
                }

                #endregion

                #region Filtro Linhas

                List<String> listLinhas = new List<string>();
                String[] fileLinhas = null;
                int[] selectedLinhas = null;
                if (Session["linhaSelectedList"] != null)
                {
                    fileLinhas = (String[])Session["linhaSelectedList"];
                    selectedLinhas = (int[])Session["indexLinhaSelectedList"];

                    List<String> listLinhaUpdSession = new List<string>();
                    foreach (var index in selectedLinhas)
                    {
                        listLinhaUpdSession.Add(fileLinhas[index]);
                    }

                    UpdateLinhasListSelected(listLinhaUpdSession);

                    if (listLinhaUpdSession.Where(w => w == "(Todas as Linhas)").Count() == 0)
                    {
                        foreach (var index in selectedLinhas)
                        {
                            listLinhas.Add(fileLinhas[index]);
                        }
                    }
                }

                #endregion

                List<Pedido_Venda> listaPV = ListaPV(customer, dataInicial, dataFinal, status,
                    empresaS, vendedorParam, codCHIC, idPedido, listStatus, listLinhas, projecao);

                Session["origemPV"] = "";

                Session["listaIndexPV"] = listaPV;

                return View("Index", listaPV);
            }
            catch (Exception ex)
            {
                int linenum = Convert.ToInt32(ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' ')));

                if (ex.InnerException == null)
                    ViewBag.Erro = "Erro ao Finalizar o Pedido: " + ex.Message
                        + " / Line Number: " + linenum.ToString();
                else
                    ViewBag.Erro = "Erro ao Finalizar o Pedido: " + ex.Message 
                        + " / Erro Interno: " + ex.InnerException.Message
                        + " / Line Number: " + linenum.ToString();

                //if (Session["origemPVForm"].ToString().Equals("Form"))
                //    return View("AlterPV");
                //else
                //    return View("FinalizaPV");

                Session["origemPV"] = "";

                return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
            }
        }

        public ActionResult PrintPV(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["visualizaPV"] = true;
            Session["idSelecionado"] = id;

            CarregaPV(id);

            #region Carrega Dados

            //salesmanTableAdapter sl = new salesmanTableAdapter();
            //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
            //sl.FillByCode(slDT, Session["vendedorPV"].ToString());

            bdApoloEntities apoloSession = new bdApoloEntities();
            var codigoVendedorApolo = "0" + Session["vendedorPV"].ToString();
            if (Session["vendedorPV"].ToString().Length == 7) codigoVendedorApolo = Session["vendedorPV"].ToString();
            var vendedor = apoloSession.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();

            var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

            HLBAPPEntities hlbapp = new HLBAPPEntities();
            string status = hlbapp.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault().Status;

            #endregion

            #region Verifica Vacinas

            if (!status.Contains("Canc"))
            {
                if (vendedor != null)
                {
                    string retornoVerificaVacinas = VerificaVacinas(vendedor.CodigoCHIC, Session["vacinaPrimariaPV"].ToString(),
                        listaVacSec, false);

                    if (retornoVerificaVacinas != "")
                    {
                        ViewBag.Erro = retornoVerificaVacinas + (char)13 + (char)10
                            + (char)13 + (char)10 + " Por favor, realizar correções do pedido ID "
                            + id.ToString()
                            + "!";
                        return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
                    }
                }
            }

            #endregion

            CalculaValoresVacinasServicosPV();

            return View("FinalizaPV");
        }

        public ActionResult PrintPVReturn()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //Session["visualizaPV"] = true;
            int id = Convert.ToInt32(Session["idSelecionado"].ToString());

            CarregaPV(id);

            return View("FinalizaPV");
        }

        #region Alter Bonus / Price

        public ActionResult AlteraPrecoBonificacao(int sequencia)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["idItemSelecionado"] = sequencia;

            var listaItensSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            Item_Pedido_Venda item = listaItensSession.Where(w => w.Sequencia == sequencia).FirstOrDefault();

            Session["dataEntregaInicial"] = item.DataEntregaInicial;
            Session["dataEntregaFinal"] = item.DataEntregaFinal;
            Session["linhagemSelecionada"] = item.ProdCodEstr;
            Session["qtdeLiquida"] = item.QtdeLiquida;
            Session["qtdeReposicao"] = item.QtdeReposicao;
            Session["preco"] = item.PrecoUnitario;
            Session["percBonificacao"] = item.PercBonificacao;
            Session["motivoAlteraPrecoBonificacao"] = "";

            return View("AlteraPrecoBonificacaoItem");
        }

        public ActionResult SaveAlteraPrecoBonificacao(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["alteracaoPrecoBonificacaoPV"] = true;

            decimal preco = 0.0000m;
            decimal percBonificacao = 0.00m;
            //string motivo = "";

            #region Validação dos Campos

            if (model["preco"] != null)
            {
                if (model["preco"] == "")
                {
                    ViewBag.Erro = "Campo PREÇO não pode ser vazio!";
                    return View("AlteraPrecoBonificacaoItem");
                }
                else
                {
                    preco = Convert.ToDecimal(model["preco"]);
                    Session["preco"] = preco;
                }
            }

            if (model["percBonificacao"] != null)
            {
                if (model["percBonificacao"] == "")
                {
                    ViewBag.Erro = "Campo % DE BONIFICAÇÃO não pode ser vazio!";
                    return View("AlteraPrecoBonificacaoItem");
                }
                else
                {
                    percBonificacao = Convert.ToDecimal(model["percBonificacao"]);
                    Session["percBonificacao"] = percBonificacao;
                }
            }

            //if (model["motivoAlteraPrecoBonificacao"] != null)
            //{
            //    if (model["motivoAlteraPrecoBonificacao"] == "")
            //    {
            //        ViewBag.Erro = "Campo MOTIVO não pode ser vazio!";
            //        return View("AlteraPrecoBonificacaoItem");
            //    }
            //    else
            //    {
            //        motivo = model["motivoAlteraPrecoBonificacao"];
            //        Session["motivoAlteraPrecoBonificacao"] = motivo;
            //    }
            //}

            #endregion

            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            int idItemSelecionado = Convert.ToInt32(Session["idItemSelecionado"]);
            Item_Pedido_Venda item = listItensPV
                .Where(w => w.Sequencia == idItemSelecionado)
                .FirstOrDefault();

            item.PrecoUnitario = preco;
            item.PercBonificacao = percBonificacao;
            // 03/12/2021 - Ticket 103054 - Foi alterada a regra para o cálculo da bonificação, onde será calculado somente em cima da quantidade vendida e não da reposição.
            //item.QtdeBonificada = Convert.ToInt32((item.QtdeLiquida + item.QtdeReposicao) * (item.PercBonificacao / 100));
            item.QtdeBonificada = Convert.ToInt32(item.QtdeLiquida * (item.PercBonificacao / 100));
            item.Alterado = 2;
            item.ValorTotal = preco * item.QtdeLiquida;

            Session["ItensPVList"] = listItensPV;

            //CalculaValoresPV();

            return View("FinalizaPV");
        }

        #endregion

        #region Duplicate Methods

        public ActionResult ConfirmaDuplicacao(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["idSelecionado"] = id;

            return View();
        }

        public ActionResult DuplicaPedidoVenda(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            #region Carrega Parâmetros

            int qtdeCopias = 1;
            if (model["qtdeCopias"] != null) qtdeCopias = Convert.ToInt32(model["qtdeCopias"]);

            int intervaloDias = 0;
            if (model["intervaloDias"] != null) intervaloDias = Convert.ToInt32(model["intervaloDias"]);

            int id = Convert.ToInt32(Session["idSelecionado"]);

            #endregion

            CarregaPV(id);
            //CalculaValoresPV();
            CalculaValoresVacinasServicosPV();

            DateTime dataEntrega = hlbappSession.Item_Pedido_Venda
                .Where(w => w.IDPedidoVenda == id)
                .Max(m => m.DataEntregaInicial);

            for (int i = 0; i < qtdeCopias; i++)
            {
                dataEntrega = dataEntrega.AddDays(intervaloDias);

                #region Pedido_Venda

                Pedido_Venda pedVenda = hlbappSession.Pedido_Venda
                    .Where(w => w.ID == id).FirstOrDefault();
                
                #region Verifica Cadastro da Entidade para Duplicar

                string retornoVerificaCadastroEntidade =
                   VerificaCadastroEntidade(Session["selectedCustomer"].ToString());

                if (retornoVerificaCadastroEntidade != "")
                {
                    ViewBag.Erro = retornoVerificaCadastroEntidade;
                    return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
                }

                #endregion

                Pedido_Venda pedVendaDuplicado = new Pedido_Venda();
                pedVendaDuplicado.CodigoCliente = pedVenda.CodigoCliente;
                pedVendaDuplicado.DataPedido = DateTime.Today;
                pedVendaDuplicado.Usuario = Session["usuario"].ToString().Trim();
                pedVendaDuplicado.DataHora = DateTime.Now;
                pedVendaDuplicado.OvosBrasil = pedVenda.OvosBrasil;
                pedVendaDuplicado.CondicaoPagamento = pedVenda.CondicaoPagamento;
                //pedVendaDuplicado.Observacoes = pedVenda.Observacoes;
                pedVendaDuplicado.Observacoes = "";
                pedVendaDuplicado.Vendedor = pedVenda.Vendedor;
                pedVendaDuplicado.EnderEntSeq = pedVenda.EnderEntSeq;

                Empresas configEmpresa = hlbappSession.Empresas
                        .Where(w => w.CodigoCHIC == pedVenda.Empresa).FirstOrDefault();

                if (pedVenda.Status == "Documentação de Exportação")
                    pedVendaDuplicado.Status = pedVenda.Status;
                else if (configEmpresa.AprovacaoGerencia.Equals("Sim") 
                    || Session["statusClienteSelecionado"].ToString() == "03")
                    pedVendaDuplicado.Status = "Inclusão Aguardando Análise Gerência";
                else
                    pedVendaDuplicado.Status = "Inclusão Pendente";

                pedVendaDuplicado.Empresa = pedVenda.Empresa;
                pedVendaDuplicado.NomeCliente = pedVenda.NomeCliente;
                pedVendaDuplicado.Projecao = pedVenda.Projecao;

                #region Dados Exportação

                pedVendaDuplicado.EnviadoVia = pedVenda.EnviadoVia;
                pedVendaDuplicado.AeroportoOrigem = pedVenda.AeroportoOrigem;
                pedVendaDuplicado.AeroportoDestino = pedVenda.AeroportoDestino;
                pedVendaDuplicado.ValorDocumentacao = pedVenda.ValorDocumentacao;
                pedVendaDuplicado.ValorFrete = pedVenda.ValorFrete;
                pedVendaDuplicado.NumCaixas = pedVenda.NumCaixas;
                pedVendaDuplicado.DataEnvio = pedVenda.DataEnvio;
                pedVendaDuplicado.DataSaidaIncubatorio = pedVenda.DataSaidaIncubatorio;
                pedVendaDuplicado.TipoPedido = pedVenda.TipoPedido;
                pedVendaDuplicado.NumPaletes = pedVenda.NumPaletes;
                pedVendaDuplicado.NumFatura = pedVenda.NumFatura;
                pedVendaDuplicado.NumeroVoo = pedVenda.NumeroVoo;
                pedVendaDuplicado.CiaAerea = pedVenda.CiaAerea;
                pedVendaDuplicado.NCM = pedVenda.NCM;
                pedVendaDuplicado.AWB = pedVenda.AWB;
                pedVendaDuplicado.DataColetaNascimento = pedVenda.DataColetaNascimento;
                pedVendaDuplicado.Placa = pedVenda.Placa;
                pedVendaDuplicado.Lacre = pedVenda.Lacre;
                pedVendaDuplicado.Motorista = pedVenda.Motorista;
                pedVendaDuplicado.RGMotorista = pedVenda.RGMotorista;
                pedVendaDuplicado.Veterinario = pedVenda.Veterinario;

                #endregion

                hlbappSession.Pedido_Venda.AddObject(pedVendaDuplicado);
                hlbappSession.SaveChanges();

                #region Insere LOG - Pedido_Venda

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                logPV.DataPedido = pedVendaDuplicado.DataPedido;
                logPV.Usuario = Session["usuario"].ToString();
                logPV.DataHora = DateTime.Now;
                logPV.CodigoCliente = pedVendaDuplicado.CodigoCliente;
                logPV.OvosBrasil = pedVendaDuplicado.OvosBrasil;
                logPV.CondicaoPagamento = pedVendaDuplicado.CondicaoPagamento;
                logPV.Observacoes = pedVendaDuplicado.Observacoes;
                logPV.Vendedor = pedVendaDuplicado.Vendedor;
                logPV.Status = pedVendaDuplicado.Status;
                logPV.Operacao = "Pedido Duplicado";
                logPV.IDPedidoVenda = pedVendaDuplicado.ID;
                logPV.Motivo = "Pedido Duplicado";
                logPV.Projecao = pedVendaDuplicado.Projecao;

                hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);

                #endregion

                #endregion

                #region Item_Pedido_Venda

                List<Item_Pedido_Venda> listItensPV = hlbappSession.Item_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == pedVenda.ID)
                    .ToList();

                foreach (var item in listItensPV)
                {
                    Item_Pedido_Venda itemPedVenda = new Item_Pedido_Venda();
                    itemPedVenda.IDPedidoVenda = pedVendaDuplicado.ID;
                    itemPedVenda.Sequencia = item.Sequencia;

                    itemPedVenda.ProdCodEstr = item.ProdCodEstr;
                    //itemPedVenda.DataEntregaInicial = item.DataEntregaInicial;
                    //itemPedVenda.DataEntregaFinal = item.DataEntregaFinal;
                    if (dataEntrega < DateTime.Today)
                    {
                        itemPedVenda.DataEntregaInicial = DateTime.Today;
                        itemPedVenda.DataEntregaFinal = DateTime.Today;
                    }
                    else
                    {
                        itemPedVenda.DataEntregaInicial = dataEntrega;
                        itemPedVenda.DataEntregaFinal = dataEntrega;
                    }

                    #region Verifica saldo de pintos na linhagem

                    DateTime dataNascimento = CalculaDataNascimento(pedVenda.CodigoCliente, 
                        item.DataEntregaInicial, item.ProdCodEstr);
                    int anoPedido = dataNascimento.Year;
                    int mesPedido = dataNascimento.Month;

                    bool existeSaldoConfigurado = ExisteConfiguracaoSaldoPinto(item.ProdCodEstr, anoPedido, mesPedido);
                    int saldoUtilizado = SaldoUtilizadoPinto(pedVenda.CodigoCliente, item.ProdCodEstr, anoPedido, mesPedido);
                    int saldoConfigurado = SaldoConfiguradoPinto(item.ProdCodEstr, anoPedido, mesPedido);
                    int qtdeDuplicada = ((item.QtdeLiquida == null ? 0 : item.QtdeLiquida) +
                        Convert.ToInt32(item.QtdeBonificada == null ? 0 : item.QtdeBonificada) +
                        Convert.ToInt32(item.QtdeReposicao == null ? 0 : item.QtdeReposicao));
                    int qtdeTotalSolicitadaPintos = qtdeDuplicada;
                    if (item.ProdCodEstr.Contains(" - Ovos"))
                        qtdeTotalSolicitadaPintos = Convert.ToInt32(qtdeDuplicada * 0.37m);

                    if ((saldoUtilizado + qtdeTotalSolicitadaPintos) > saldoConfigurado && existeSaldoConfigurado)
                    {
                        string msgQtdeOvos = "";
                        if (item.ProdCodEstr.Contains(" - Ovos"))
                            msgQtdeOvos = " - em Ovos: " + String.Format("{0:N0}", qtdeDuplicada);

                        ViewBag.Erro = "Saldo indisponível para a Linhagem " + item.ProdCodEstr
                            + " no período de " + mesPedido.ToString() + "/" + anoPedido.ToString() + "!<br />"
                            + "Qtde. Duplicada: " + String.Format("{0:N0}", qtdeDuplicada) 
                                + msgQtdeOvos + "<br />"
                            + "Qtde. Utilizada: " + String.Format("{0:N0}", saldoUtilizado) + "<br />"
                            + "Qtde. Projetada: " + String.Format("{0:N0}", saldoConfigurado) + "<br />"
                            + "Saldo: " + String.Format("{0:N0}", (saldoConfigurado - saldoUtilizado)) + "<br />"
                            + "Em caso de duvidas, entrar em contato com o Gerente Comercial!";
                        return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
                    }
                    else if (!existeSaldoConfigurado)
                    {
                        #region Verifica bloqueio de linhagem por data cadastrado no Fluig se a quantidade nova for menor que a atual

                        fluigEntities bdFluig = new fluigEntities();

                        bool existeBloqueio = false;
                        DateTime dataPermitida = new DateTime();

                        var listaBloqueios = bdFluig.FF40F29A5F_3F17F927
                            .Where(w => dataEntrega < w.PERMITIR_PEDIDO_DT_1
                                && w.DELETED == false)
                            .ToList();

                        foreach (var bloqueio in listaBloqueios)
                        {
                            var listaColunas = bloqueio.GetType().GetProperties();

                            foreach (var coluna in listaColunas)
                            {
                                if (coluna.Name.Contains("LINHAGENS_BLOQU_CHK_"))
                                {
                                    string value = "";
                                    if (coluna.GetValue(bloqueio, null) != null)
                                        value = coluna.GetValue(bloqueio, null).ToString();
                                    if (value == item.ProdCodEstr)
                                    {
                                        dataPermitida = Convert.ToDateTime(bloqueio.PERMITIR_PEDIDO_DT_1);
                                        existeBloqueio = true;
                                        break;
                                    }
                                }
                            }
                        }


                        if (existeBloqueio)
                        {
                            itemPedVenda.DataEntregaInicial = dataPermitida;
                            itemPedVenda.DataEntregaFinal = dataPermitida;
                        }

                        #endregion
                    }

                    #endregion

                    itemPedVenda.QtdeLiquida = item.QtdeLiquida;
                    itemPedVenda.PercBonificacao = item.PercBonificacao;
                    itemPedVenda.QtdeBonificada = item.QtdeBonificada;
                    itemPedVenda.QtdeReposicao = item.QtdeReposicao;
                    itemPedVenda.PrecoUnitario = item.PrecoUnitario;
                    itemPedVenda.PrecoPinto = item.PrecoPinto;
                    itemPedVenda.TipoReposicao = item.TipoReposicao;
                    itemPedVenda.ValorTotal = item.ValorTotal;
                    itemPedVenda.DataNascimento = CalculaDataNascimento(pedVenda.CodigoCliente,
                        itemPedVenda.DataEntregaInicial, itemPedVenda.ProdCodEstr);

                    hlbappSession.Item_Pedido_Venda.AddObject(itemPedVenda);
                    hlbappSession.SaveChanges();

                    #region Insere LOG - Item_Ped_Venda

                    LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                    logItemPV.IDPedidoVenda = itemPedVenda.IDPedidoVenda;
                    logItemPV.Sequencia = itemPedVenda.Sequencia;
                    logItemPV.ProdCodEstr = itemPedVenda.ProdCodEstr;
                    logItemPV.DataEntregaInicial = itemPedVenda.DataEntregaInicial;
                    logItemPV.DataEntregaFinal = itemPedVenda.DataEntregaFinal;
                    logItemPV.QtdeLiquida = itemPedVenda.QtdeLiquida;
                    logItemPV.PercBonificacao = itemPedVenda.PercBonificacao;
                    logItemPV.QtdeBonificada = itemPedVenda.QtdeBonificada;
                    logItemPV.QtdeReposicao = itemPedVenda.QtdeReposicao;
                    logItemPV.PrecoUnitario = itemPedVenda.PrecoUnitario;
                    logItemPV.PrecoPinto = itemPedVenda.PrecoPinto;
                    logItemPV.TipoReposicao = itemPedVenda.TipoReposicao;
                    logItemPV.ValorTotal = itemPedVenda.ValorTotal;
                    logItemPV.DataHora = DateTime.Now;
                    logItemPV.Operacao = "Inclusão Pendente";
                    logItemPV.OrderNoCHIC = itemPedVenda.OrderNoCHIC;
                    logItemPV.IDItPedVenda = itemPedVenda.ID;
                    logItemPV.IDLogPedidoVenda = logPV.ID;
                    logItemPV.OrderNoCHIC = itemPedVenda.OrderNoCHIC;
                    logItemPV.OrderNoCHICReposicao = itemPedVenda.OrderNoCHICReposicao;
                    logItemPV.TipoAlteracao = "";
                    hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                    #endregion

                    itemPedVenda.Alterado = 0;
                    itemPedVenda.Importar = 1;
                }

                #endregion

                #region Vacinas_Primaria_Pedido_Venda

                Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                List<Vacinas_Secundaria_Pedido_Venda> listaVacSec = new List<Vacinas_Secundaria_Pedido_Venda>();

                if (vacinaPrimaria != null)
                {
                    Vacinas_Primaria_Pedido_Venda vacinaPrimariaDuplicada = new Vacinas_Primaria_Pedido_Venda();
                    vacinaPrimariaDuplicada.IDPedidoVenda = pedVendaDuplicado.ID;
                    vacinaPrimariaDuplicada.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                    vacinaPrimariaDuplicada.Bonificada = vacinaPrimaria.Bonificada;
                    vacinaPrimariaDuplicada.PrecoUnitario = vacinaPrimaria.PrecoUnitario;
                    vacinaPrimariaDuplicada.SeqItemPedVenda = vacinaPrimaria.SeqItemPedVenda;
                    hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacinaPrimariaDuplicada);
                    hlbappSession.SaveChanges();

                    #region Insere LOG - Vacina Primária

                    LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();
                    logVacPrim.IDPedidoVenda = vacinaPrimariaDuplicada.IDPedidoVenda;
                    logVacPrim.ProdCodEstr = vacinaPrimariaDuplicada.ProdCodEstr;
                    logVacPrim.Bonificada = vacinaPrimariaDuplicada.Bonificada;
                    logVacPrim.PrecoUnitario = vacinaPrimariaDuplicada.PrecoUnitario;
                    logVacPrim.DataHora = DateTime.Now;
                    logVacPrim.Operacao = "Inclusão Pendente";
                    logVacPrim.IDVacPrimPedVenda = vacinaPrimariaDuplicada.ID;
                    logVacPrim.IDLogPedidoVenda = logPV.ID;
                    logVacPrim.SeqItemPedVenda = vacinaPrimariaDuplicada.SeqItemPedVenda;

                    hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);

                    #endregion

                    hlbppLOG.SaveChanges();

                    #region Vacinas_Secundarias_Pedido_Venda

                    listaVacSec = hlbappSession.Vacinas_Secundaria_Pedido_Venda
                        .Where(w => w.IDVacPrimPedVenda == vacinaPrimaria.ID).ToList();

                    foreach (var item in listaVacSec)
                    {
                        Vacinas_Secundaria_Pedido_Venda vacSec = new Vacinas_Secundaria_Pedido_Venda();
                        vacSec.IDVacPrimPedVenda = vacinaPrimariaDuplicada.ID;
                        vacSec.Sequencia = item.Sequencia;
                        vacSec.ProdCodEstr = item.ProdCodEstr;
                        vacSec.Bonificada = item.Bonificada;
                        vacSec.PrecoUnitario = item.PrecoUnitario;
                        vacSec.SeqItemPedVenda = item.SeqItemPedVenda;
                        vacSec.Bonificada = item.Bonificada;

                        hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);
                        hlbappSession.SaveChanges();

                        #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                        LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                        logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                        logVacSec.Sequencia = vacSec.Sequencia;
                        logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                        logVacSec.Bonificada = vacSec.Bonificada;
                        logVacSec.PrecoUnitario = vacSec.PrecoUnitario;
                        logVacSec.DataHora = DateTime.Now;
                        logVacSec.Operacao = "Inclusão Pendente";
                        logVacSec.IDVacSecPedVenda = vacSec.ID;
                        logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                        hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                        #endregion

                        hlbppLOG.SaveChanges();
                    }

                    #endregion
                }

                #endregion

                #region Servicos_Pedido_Venda

                Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                if (servico != null)
                {
                    Servicos_Pedido_Venda servicoDuplicado = new Servicos_Pedido_Venda();
                    servicoDuplicado.IDPedidoVenda = pedVendaDuplicado.ID;
                    servicoDuplicado.ProdCodEstr = servico.ProdCodEstr;
                    servicoDuplicado.PercAplicacaoServico = servico.PercAplicacaoServico;
                    servicoDuplicado.Bonificada = servico.Bonificada;
                    servicoDuplicado.PrecoUnitario = servico.PrecoUnitario;
                    hlbappSession.Servicos_Pedido_Venda.AddObject(servicoDuplicado);
                    hlbappSession.SaveChanges();

                    #region Insere LOG - Servico_Pedido_Venda

                    LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    logServ.IDPedidoVenda = servicoDuplicado.IDPedidoVenda;
                    logServ.ProdCodEstr = servicoDuplicado.ProdCodEstr;
                    logServ.PercAplicacaoServico = servicoDuplicado.PercAplicacaoServico;
                    logServ.Bonificada = servicoDuplicado.Bonificada;
                    logServ.PrecoUnitario = servicoDuplicado.PrecoUnitario;
                    logServ.DataHora = DateTime.Now;
                    logServ.Operacao = "Inclusão Pendente";
                    logServ.IDServPedVenda = servicoDuplicado.ID;
                    logServ.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                    #endregion
                }

                hlbppLOG.SaveChanges();
                hlbappSession.SaveChanges();

                #endregion

                #region Verifica se o Status do Cliente é "Em Débito" para gerar solicitação de aprovação no FLUIG

                if (Session["statusClienteSelecionado"] != null)
                {
                    if (Session["statusClienteSelecionado"].ToString() == "03")
                    {
                        string excecao = "Pedido para cliente 'Em Débito' necessita aprovação da gerência!";
                        string tipoExcecao = "Cliente 'Em Débito'";
                        GeraAprovacaoExcecaoPedidoVendaWebFluig(pedVendaDuplicado.Empresa,
                            Session["login"].ToString(), tipoExcecao, excecao, pedVendaDuplicado,
                            listItensPV, listaVacSec, logPV.ID);
                    }
                }

                #endregion

                #region Envio de E-mail - DESATIVADO

                //MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                //    new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                //CHICMobileDataSet.salesmanNavDataTable slDT = new CHICMobileDataSet.salesmanNavDataTable();
                //salesmanNavTableAdapter sl = new salesmanNavTableAdapter();
                //sl.FillByCode(slDT, pedVenda.Vendedor);

                //string corpoEmail = "";
                //string corpoOperacao = "";

                //ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                //MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                //    new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                //apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                //string empresa = "";
                //string copiaPara = "";
                //if (slDT[0].inv_comp.Trim().Equals("BR"))
                //{
                //    empresa = "[HLB]";
                //    copiaPara = "confirmacoes@hyline.com.br";
                //}
                //else if (slDT[0].inv_comp.Trim().Equals("LB"))
                //{
                //    empresa = "[LTZ]";
                //    copiaPara = "confirmacoes@ltz.com.br";
                //}
                //else if (slDT[0].inv_comp.Trim().Equals("HN"))
                //{
                //    empresa = "[H&N]";
                //    copiaPara = "confirmacoes@hnavicultura.com.br";
                //}

                //email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                //email.WorkFlowEmailStat = "Enviar";
                //email.WorkFlowEmailData = DateTime.Now;
                //email.WorkFlowEmailParaNome = slDT[0].salesman.Trim();
                //email.WorkFlowEmailParaEmail = slDT[0].email.Trim();
                ////email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                ////email.WorkFlowEmailParaNome = "Teste";
                //if (configEmpresa.AprovacaoGerencia.Equals("Sim"))
                //    email.WorkFlowEmailCopiaPara = copiaPara;
                //else
                //    email.WorkFlowEmailCopiaPara = copiaPara + ";programacao@hyline.com.br";
                //email.WorkFlowEmailDeNome = "Sistema WEB HyLine";
                //email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                //email.WorkFlowEmailFormato = "Texto";

                //#region Texto Detalhado

                //#region Cabeçalho

                //string textoEmail = "";
                //string stringChar = "" + (char)13 + (char)10;

                //ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == pedVenda.CodigoCliente)
                //    .FirstOrDefault();
                //CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();
                //UNID_FEDERACAO uf = PedidoVendaController.apoloStatic.UNID_FEDERACAO
                //    .Where(w => w.UfSigla == cidade.UfSigla).FirstOrDefault();
                //string empresaL = Session["empresa"].ToString();

                //textoEmail = "CLIENTE: " + entidade.EntNome + stringChar
                //    + "DATA DO PEDIDO: " + pedVenda.DataPedido.ToShortDateString() + stringChar + stringChar
                //    + "**** ITENS ****: " + stringChar + stringChar;

                //#endregion

                //#region Itens

                //foreach (var item in listItensPV)
                //{
                //    #region Preço Unit. s/ Vac.

                //    string condPag = "";
                //    if (pedVenda.CondicaoPagamento.Equals("PAGTO ANTECIPADO"))
                //    {
                //        condPag = pedVenda.CondicaoPagamento.ToString();
                //    }
                //    else
                //    {
                //        condPag = "Faturamento";
                //    }

                //    Tabela_Precos precoLinhagem = PedidoVendaController.hlbappSession
                //        .Tabela_Precos.Where(w => w.Tipo == condPag && w.Produto == item.ProdCodEstr
                //        && w.Regiao == uf.UfRegGeog && w.Empresa == empresaL
                //        && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                //    .FirstOrDefault();

                //    decimal? precoLin = 0;
                //    if (precoLinhagem != null)
                //    {
                //        if (item.QtdeLiquida < 5000)
                //        {
                //            precoLin = precoLinhagem.ValorMenor5000Aves;
                //        }
                //        else
                //        {
                //            precoLin = precoLinhagem.ValorNormal;
                //        }
                //    }

                //    #endregion

                //    #region Qtde. Tratamento Infra.

                //    decimal? qtTV = 0;
                //    if (servico != null)
                //    {
                //        decimal qtdTratVerm = 1;
                //        qtdTratVerm = Convert.ToDecimal(servico.PercAplicacaoServico);
                //        qtTV = ((item.QtdeLiquida + item.QtdeBonificada) * (qtdTratVerm / 100));
                //    }

                //    #endregion

                //    textoEmail = textoEmail
                //        + "Data Inicial de Entrega: " + item.DataEntregaInicial.ToShortDateString() + stringChar
                //        + "Data Final de Entrega: " + item.DataEntregaFinal.ToShortDateString() + stringChar
                //        + "Linhagem: " + item.ProdCodEstr + stringChar
                //        + "Qtde. Líquida: " + item.QtdeLiquida.ToString() + stringChar
                //        + "% Bonificação: " + item.PercBonificacao.ToString() + "%" + stringChar
                //        + "Qtde. Bonificada: " + item.QtdeBonificada.ToString() + stringChar
                //        + "Qtde. Reposição: " + item.QtdeReposicao.ToString() + stringChar
                //        + "Qtde. Total: " + (item.QtdeLiquida + item.QtdeBonificada).ToString() + stringChar
                //        + "Preço Unit. s/ Vac.: R$ " + String.Format("{0:N4}", precoLin) + stringChar
                //        + "Preço Unit. c/ Vac.: R$ " + String.Format("{0:N4}", item.PrecoUnitario) + stringChar
                //        + "Valor Total: R$ " + String.Format("{0:N2}", (item.PrecoUnitario * item.QtdeLiquida)
                //            + (Convert.ToDecimal(Session["valorServicoPV"]) * qtTV)) + stringChar
                //        + "Cód. CHIC: " + item.OrderNoCHIC + stringChar
                //        + "Cód. CHIC Reposição: " + item.OrderNoCHICReposicao + stringChar + stringChar;
                //}

                //#endregion

                //#region Vacina Primária

                //PRODUTO vacinaApolo = apoloStatic.PRODUTO
                //    .Where(w => w.ProdCodEstr == vacinaPrimaria.ProdCodEstr).FirstOrDefault();

                //#region Preço Vacina Primária

                //decimal? precoVacina = 0;
                //DateTime menorDataInicial = listItensPV.Min(m => m.DataEntregaInicial);
                //DateTime maiorDataFinal = listItensPV.Max(m => m.DataEntregaFinal);

                //if (vacinaApolo != null)
                //{
                //    Tabela_Precos precoVacinaPrimaria = hlbappSession.Tabela_Precos
                //        .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaApolo.ProdNomeAlt2
                //            && w.Regiao == "Todas" && w.Empresa == empresaL
                //            && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                //        .FirstOrDefault();

                //    if (precoVacinaPrimaria != null)
                //        precoVacina = precoVacinaPrimaria.ValorNormal;
                //}

                //#endregion

                //if (vacinaApolo != null)
                //{
                //    textoEmail = textoEmail
                //        + "VACINA PRIMÁRIA: " + vacinaApolo.ProdNomeAlt1
                //        + " - R$ " + String.Format("{0:N4}", precoVacina)
                //        + stringChar + stringChar;
                //}

                //textoEmail = textoEmail
                //        + "**** VACINAS SECUNDÁRIAS ****" + stringChar + stringChar;

                //#endregion

                //#region Vacinas Secundárias

                //foreach (var item in listaVacSec)
                //{
                //    #region Valor Vacina

                //    PRODUTO vacinaSecObject = apoloStatic.PRODUTO
                //        .Where(w => w.ProdCodEstr == item.ProdCodEstr)
                //        .FirstOrDefault();

                //    Tabela_Precos precoVacinaSec = hlbappSession.Tabela_Precos
                //        .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaSecObject.ProdNomeAlt2
                //            && w.Regiao == "Todas" && w.Empresa == empresaL
                //            && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                //        .FirstOrDefault();

                //    decimal? valorvacina = 0;
                //    if (precoVacinaSec != null)
                //    {
                //        valorvacina = precoVacinaSec.ValorNormal;
                //    }

                //    #endregion

                //    textoEmail = textoEmail
                //        + vacinaSecObject.ProdNomeAlt1 + " - R$ " + String.Format("{0:N4}", valorvacina)
                //        + stringChar;
                //}

                //#endregion

                //#region Serviços

                //if (servico != null)
                //{
                //    textoEmail = textoEmail + stringChar
                //        + "TRATAMENTO INFRAVERMELHO: Sim - "
                //        + String.Format("{0:N2}", servico.PercAplicacaoServico) + "%"
                //        + stringChar + stringChar;
                //}
                //else
                //{
                //    textoEmail = textoEmail + stringChar
                //        + "TRATAMENTO INFRAVERMELHO: Não"
                //        + stringChar + stringChar;
                //}

                //#endregion

                //#region Outras Informações

                //if (pedVenda.OvosBrasil.Equals(1))
                //{
                //    textoEmail = textoEmail
                //        + "OVOS BRASIL: Sim"
                //        + stringChar;
                //}
                //else
                //{
                //    textoEmail = textoEmail
                //        + "OVOS BRASIL: Não"
                //        + stringChar;
                //}

                //textoEmail = textoEmail
                //    + "CONDIÇÃO DE PAGAMENTO: " + pedVenda.CondicaoPagamento + stringChar
                //    + "OBSERVAÇÕES: " + pedVenda.Observacoes + stringChar;

                //#endregion

                //#endregion

                //email.WorkFlowEmailAssunto = empresa + " - DUPLICAÇÃO"
                //    + " DO PEDIDO ID " + pedVenda.ID.ToString() + "";
                //corpoOperacao = "Foi realizada a duplicação do pedido "
                //    + pedVenda.ID.ToString() + " para o pedido " + pedVendaDuplicado.ID.ToString() +
                //    " no Sistema com sucesso! " + stringChar +
                //    "Seguem Dados que foram realizada a " + "Duplicação"
                //    + ":" + stringChar + stringChar +
                //    textoEmail + stringChar + stringChar +
                //    "Para verificá-lo, acesse o site e verifique na Lista de Pedidos! ";

                //corpoEmail = "Prezado " + slDT[0].salesman.Trim() + "," + (char)13 + (char)10 + (char)13 + (char)10
                //    + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                //    + "SISTEMA WEB";

                //email.WorkFlowEmailCorpo = corpoEmail;

                //#region Gerar Solicitação de Venda PDF

                //string caminho = GeraSolicitacaoVendaPDF(pedVendaDuplicado.ID);

                //email.WorkFlowEmailArquivosAnexos = caminho;

                //#endregion

                //apolo.WORKFLOW_EMAIL.AddObject(email);

                //apolo.SaveChanges();

                #endregion
            }

            DateTime dataInicial = Convert.ToDateTime(Session["dataInicial"].ToString());
            DateTime dataFinal = Convert.ToDateTime(Session["dataFinal"].ToString());
            string customer = Session["customerNameSearchPedVenda"].ToString();
            string status = Session["statusSearch"].ToString();
            string empresaS = Session["empresaSelecionadaPV"].ToString();
            string vendedor = Session["vendedorSelecionadoPV"].ToString();
            string codCHIC = Session["codigoCHICSearchPedVenda"].ToString();
            string idPedido = Session["idPedidoSearchPedVenda"].ToString();
            string projecao = Session["projecaoSearch"].ToString();

            #region Filtro Status

            List<String> listStatus = new List<string>();
            String[] fileCountries = null;
            int[] selectedIndices = null;
            if (Session["statusSelectedList"] != null)
            {
                fileCountries = (String[])Session["statusSelectedList"];
                selectedIndices = (int[])Session["indexStatusSelectedList"];

                List<String> listStatusUpdSession = new List<string>();
                foreach (var index in selectedIndices)
                {
                    listStatusUpdSession.Add(fileCountries[index]);
                }

                UpdateStatusListSelected(listStatusUpdSession);

                if (listStatusUpdSession.Where(w => w == "(Todos os Status)").Count() == 0)
                {
                    foreach (var index in selectedIndices)
                    {
                        listStatus.Add(fileCountries[index]);
                    }
                }
            }
            else
            {
                string login = Session["login"].ToString();
                List<Params_Usuario_Pedido_Venda> listStatusLogin = hlbappSession.Params_Usuario_Pedido_Venda
                        .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                            && w.Parametro == "Status").ToList();

                foreach (var statusLogin in listStatusLogin)
                {
                    listStatus.Add(statusLogin.Valor);
                }
            }

            #endregion

            #region Filtro Linhas

            List<String> listLinhas = new List<string>();
            String[] fileLinhas = null;
            int[] selectedLinhas = null;
            if (Session["linhaSelectedList"] != null)
            {
                fileLinhas = (String[])Session["linhaSelectedList"];
                selectedLinhas = (int[])Session["indexLinhaSelectedList"];

                List<String> listLinhaUpdSession = new List<string>();
                foreach (var index in selectedLinhas)
                {
                    listLinhaUpdSession.Add(fileLinhas[index]);
                }

                UpdateLinhasListSelected(listLinhaUpdSession);

                if (listLinhaUpdSession.Where(w => w == "(Todas as Linhas)").Count() == 0)
                {
                    foreach (var index in selectedLinhas)
                    {
                        listLinhas.Add(fileLinhas[index]);
                    }
                }
            }

            #endregion

            List<Pedido_Venda> listaPV = ListaPV(customer, dataInicial, dataFinal, status,
                empresaS, vendedor, codCHIC, idPedido, listStatus, listLinhas, projecao);

            Session["listaIndexPV"] = listaPV;

            ViewBag.Mensagem = "Pedido " + id + " copiado com sucesso "
                + qtdeCopias.ToString() + " vez(es) com intervalo de " + intervaloDias.ToString()
                + " dias!";

            return View("Index", listaPV);
        }

        #endregion

        #endregion

        #region Steps to PV

        #region Step 01 - Customer

        public ActionResult AddClientePV()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            string login = "";

            if (Session["login"].ToString().Contains("@"))
            {
                login = Session["login"].ToString();
            }

            string codigoCliente = Session["selectedCustomer"].ToString();

            Session["CustomerList"] = apoloStatic.ENTIDADE
                .Where(w => apoloStatic.VEND_ENT.Any(a => a.EntCod == w.EntCod
                    && apoloStatic.VENDEDOR.Any(n => n.VendCod == a.VendCod
                        && (n.USERLoginSite == login || login == "")))
                    && w.EntCod == codigoCliente
                    && (w.StatEntCod == "01" || w.StatEntCod == "02" || w.StatEntCod == "03"))
                .OrderBy(o => o.EntNome)
                .ToList();

            return View();
        }

        public ActionResult SearchCustomersPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            string customerName = "";
            if (model["customerName"] != null)
            {
                customerName = model["customerName"];
                Session["customerNameSearchPedVenda"] = customerName;
            }
            else
                customerName = Session["customerNameSearchPedVenda"].ToString();

            string login = "";

            if (Session["login"].ToString().Contains("@"))
            {
                login = Session["login"].ToString();
            }

            string empresaApolo = Session["empresaApolo"].ToString();

            string filtroEmpresa = "";

            List<string> listEmpresas = new List<string>();
            if (!empresaApolo.Equals("TODAS"))
            {
                if (!empresaApolo.Contains(" / "))
                {
                    filtroEmpresa = empresaApolo;
                }
                else
                {
                    listEmpresas = empresaApolo.Split('/').ToList();
                }
            }

            List<ENTIDADE> listaEntidade = new List<ENTIDADE>();

            if (listEmpresas.Count > 0)
            {
                foreach (var item in listEmpresas)
                {
                    List<ENTIDADE> listaEntidadeFiltro = apoloStatic.ENTIDADE
                        .Where(w => apoloStatic.VEND_ENT.Any(a => a.EntCod == w.EntCod
                            && apoloStatic.VENDEDOR.Any(n => n.VendCod == a.VendCod
                                && (n.USERLoginSite == login || login == "")
                                && n.USEREmpresa == item.Trim()))
                            && w.EntNome.Contains(customerName)
                            && (w.StatEntCod == "01" || w.StatEntCod == "02" || w.StatEntCod == "03"))
                        .OrderBy(o => o.EntNome)
                        .ToList();

                    foreach (var entidade in listaEntidadeFiltro)
                    {
                        listaEntidade.Add(entidade);
                    }
                }
            }
            else
            {
                listaEntidade = apoloStatic.ENTIDADE
                    .Where(w => apoloStatic.VEND_ENT.Any(a => a.EntCod == w.EntCod
                        && apoloStatic.VENDEDOR.Any(n => n.VendCod == a.VendCod
                            && (n.USERLoginSite == login || login == "")
                            && (n.USEREmpresa == filtroEmpresa || filtroEmpresa == "")))
                        && w.EntNome.Contains(customerName)
                        && (w.StatEntCod == "01" || w.StatEntCod == "02" || w.StatEntCod == "03"))
                    .OrderBy(o => o.EntNome)
                    .ToList();
            }

            Session["CustomerList"] = listaEntidade.OrderBy(o => o.EntNome).ToList();

            return View("AddClientePV");
        }

        #endregion

        #region Step 01.01 - Ship Address

        public void CarregaVariaveisDadosExportacao()
        {
            Apolo10Entities apolo2Static = new Apolo10Entities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            string codigoCliente = Session["selectedCustomer"].ToString();

            ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == codigoCliente)
                    .FirstOrDefault();
            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();

            #region Carrega Variáveis Doc. Exportação

            if (Session["dataPedidoVenda"] == null)
                Session["dataPedidoVenda"] = DateTime.Today.ToShortDateString();

            if (Session["dataEnvio"] == null)
                Session["dataEnvio"] = DateTime.Today.ToShortDateString();

            if (Session["dataSaidaIncubatorio"] == null)
                Session["dataSaidaIncubatorio"] = DateTime.Today.ToShortDateString();

            if (Session["dataEntregaInicial"] == null)
                Session["dataEntregaInicial"] = DateTime.Today.ToShortDateString();

            Session["ListViaDeEnvio"] = CarregaListaEnvio();
            if (Session["viaDeEnvioSelecionada"] != null)
                AtualizaDDL(Session["viaDeEnvioSelecionada"].ToString(),
                    (List<SelectListItem>)Session["ListViaDeEnvio"]);

            Session["ListAeroportoOrigem"] = CarregaListaAeroporto(false);
            if (Session["aeroportoOrigemSelecionado"] != null)
                AtualizaDDL(Session["aeroportoOrigemSelecionado"].ToString(),
                    (List<SelectListItem>)Session["ListAeroportoOrigem"]);

            Session["ListAeroportoDestino"] = CarregaListaAeroporto(true);
            if (Session["aeroportoDestinoSelecionado"] != null)
                AtualizaDDL(Session["aeroportoDestinoSelecionado"].ToString(),
                    (List<SelectListItem>)Session["ListAeroportoDestino"]);

            Session["ListaTipoVenda"] = CarregaListaTipoVenda();
            if (Session["tipoVendaSelecionado"] != null)
                AtualizaDDL(Session["tipoVendaSelecionado"].ToString(),
                    (List<SelectListItem>)Session["ListaTipoVenda"]);

            COND_PAG_ENT condPagEnt = apolo2Static.COND_PAG_ENT.Where(w => w.EntCod == entidade.EntCod)
                .FirstOrDefault();

            COND_PAG condPag = new COND_PAG();
            if (condPagEnt != null)
                condPag = apolo2Static.COND_PAG.Where(w => w.CondPagCod == condPagEnt.CondPagCod)
                    .FirstOrDefault();

            if (Session["condPagPV"] == null)
                if (entidade.EntIdioma1.Equals("Espanhol"))
                    Session["condPagPV"] = condPag.USERNomeEspanhol;
                else
                    Session["condPagPV"] = condPag.USERNomeIngles;

            if (Session["valorDocumentacaoDE"] == null)
                Session["valorDocumentacaoDE"] = 0;

            if (Session["valorFreteDE"] == null)
                Session["valorFreteDE"] = 0;

            if (Session["numCaixasDE"] == null)
                Session["numCaixasDE"] = 0;

            if (Session["numPaletesDE"] == null)
                Session["numPaletesDE"] = 0;

            if (Session["numeroVooPV"] == null)
                Session["numeroVooPV"] = "";

            if (Session["ciaAereaPV"] == null)
                Session["ciaAereaPV"] = "";

            if (Session["awbPV"] == null)
                Session["awbPV"] = "";

            if (Session["ncmPV"] == null)
                Session["ncmPV"] = "";

            if (Session["horaEntregaPV"] == null)
                Session["horaEntregaPV"] = "";

            if (Session["horaSaidaIncubatorioPV"] == null)
                Session["horaSaidaIncubatorioPV"] = "";

            if (Session["horaEnvioPV"] == null)
                Session["horaEnvioPV"] = "";

            #region Dados Terrestre

            if (Session["placaPV"] == null)
                Session["placaPV"] = "";

            if (Session["lacrePV"] == null)
                Session["lacrePV"] = "";

            if (Session["motoristaPV"] == null)
                Session["motoristaPV"] = "";

            if (Session["rgMotoristaPV"] == null)
                Session["rgMotoristaPV"] = "";

            #endregion

            #endregion

            CarregaListaVeterinarioResponsavel();
        }

        public ActionResult SelectShipAddress(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Apolo10Entities apolo2Static = new Apolo10Entities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            string codigoCliente = "";
            string enderecoEntrega = "";
            if (model["AddClientePV"] != null)
            {
                if (model["selectedCustomer"] != null)
                {
                    codigoCliente = model["selectedCustomer"];
                }
                else
                {
                    ViewBag.Erro = "Antes de ir para o próximo passo, selecione um Cliente!";
                    return View("AddClientePV");
                }

                if (model["selectedTypeAddress"] != "")
                {
                    enderecoEntrega = model["selectedTypeAddress"];
                }
                else
                {
                    ViewBag.Erro = "Antes de ir para o próximo passo, selecione como Será o Endereço de Entrega!";
                    return View("AddClientePV");
                }
            }

            if (codigoCliente != "")
                Session["selectedCustomer"] = codigoCliente;
            else
                codigoCliente = Session["selectedCustomer"].ToString();

            if (enderecoEntrega != "")
                Session["selectedTypeAddress"] = enderecoEntrega;
            else
                enderecoEntrega = Session["selectedTypeAddress"].ToString();

            if (enderecoEntrega.Equals("Outro"))
            {
                Session["ShipAddressList"] = apolo2Static.ENDER_ENT
                    .Where(w => w.EntCod == codigoCliente && w.EnderEntEntrega.Equals("Sim")).ToList();

                //shippingTableAdapter sTA = new shippingTableAdapter();
                //CHICMobileDataSet.shippingDataTable sDT = new CHICMobileDataSet.shippingDataTable();
                //sTA.FillByOrderNo(sDT, codigoCliente);

                //Session["ShipAddressList"] = sDT.ToList(); 

                if (Session["ShipAddressList"] == null)
                    Session["ShipAddressList"] = new List<CHICMobileDataSet.shippingRow>();

                return View();
            }
            else
            {
                Session["selectedShipAddress"] = 0;

                ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == codigoCliente)
                    .FirstOrDefault();
                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();

                if (MvcAppHyLinedoBrasil.Controllers.AccountController
                    .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                    (System.Collections.ArrayList)Session["Direitos"])
                    && !cidade.PaisSigla.Equals("BRA"))
                {
                    CarregaVariaveisDadosExportacao();

                    return View("DadosExportacao");
                }
                else
                {
                    if (Session["origemPV"].ToString().Equals("Alteração"))
                        return View("FinalizaPV");
                    else
                        return View("ListItensPV");
                }
            }
        }

        public ActionResult SaveSelectShipAddress(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            string enderecoEntregaSelect = "";
            if (model["SelectShipAddressPV"] != null)
            {
                if (model["selectedShipAddress"] != null)
                {
                    enderecoEntregaSelect = model["selectedShipAddress"];
                }
                else
                {
                    ViewBag.Erro = "Antes de ir para o próximo passo, selecione um Endereço de Entrega!";
                    return View("AddClientePV");
                }
            }

            if (enderecoEntregaSelect != "")
                Session["selectedShipAddress"] = enderecoEntregaSelect;
            else
                enderecoEntregaSelect = Session["selectedShipAddress"].ToString();

            string codigoCliente = Session["selectedCustomer"].ToString();

            ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == codigoCliente)
                    .FirstOrDefault();
            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();

            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"])
                && !cidade.PaisSigla.Equals("BRA"))
            {
                if (Session["origemPV"].ToString().Equals("Alteração"))
                    return View("FinalizaPV");
                else
                {
                    CarregaVariaveisDadosExportacao();

                    return View("DadosExportacao");
                }
            }
            else
            {
                if (Session["origemPV"].ToString().Equals("Alteração"))
                    return View("FinalizaPV");
                else
                    return View("ListItensPV");
            }
        }

        #endregion

        #region Step 01.02 - Export Data

        public ActionResult DadosExportacaoReturn()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            return View("DadosExportacao");
        }

        public ActionResult SaveDadosExportacao(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            if (model["DadosExportacaoNext"] != null)
            {
                if (model["dataPedidoVenda"] != null)
                    Session["dataPedidoVenda"] = Convert.ToDateTime(model["dataPedidoVenda"]);
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Data do Pedido!";
                    return View("DadosExportacao");
                }

                if (model["dataEnvio"] != null)
                    Session["dataEnvio"] = Convert.ToDateTime(model["dataEnvio"]);
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Data do Envio!";
                    return View("DadosExportacao");
                }

                if (model["horaEnvioPV"] != null)
                {
                    Session["dataEnvio"] = Convert.ToDateTime(model["dataEnvio"] + " " + model["horaEnvioPV"]);
                    Session["horaEnvioPV"] = model["horaEnvioPV"];
                }
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Hora do Envio!";
                    return View("DadosExportacao");
                }

                if (model["dataSaidaIncubatorio"] != null)
                    Session["dataSaidaIncubatorio"] = Convert.ToDateTime(model["dataSaidaIncubatorio"]);
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Data de Saída do Incubatório!";
                    return View("DadosExportacao");
                }

                if (model["horaSaidaIncubatorioPV"] != null)
                {
                    Session["dataSaidaIncubatorio"] = Convert.ToDateTime(model["dataSaidaIncubatorio"] + " " + model["horaSaidaIncubatorioPV"]);
                    Session["horaSaidaIncubatorioPV"] = model["horaSaidaIncubatorioPV"];
                }
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Hora da Saída do Incubatório!";
                    return View("DadosExportacao");
                }

                if (model["dataEntrega"] != null)
                {
                    Session["dataEntregaInicial"] = Convert.ToDateTime(model["dataEntrega"]);
                    Session["dataEntregaFinal"] = Convert.ToDateTime(model["dataEntrega"]);

                    List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                    foreach (var item in listItensPV)
                    {
                        item.DataEntregaInicial = Convert.ToDateTime(Session["dataEntregaInicial"]);
                        item.DataEntregaFinal = Convert.ToDateTime(Session["dataEntregaInicial"]);
                        item.Alterado = 1;
                    }
                }
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Data de Entrega!";
                    return View("DadosExportacao");
                }

                if (model["horaEntregaPV"] != null)
                {
                    Session["dataEntregaInicial"] = Convert.ToDateTime(model["dataEntrega"] + " " + model["horaEntregaPV"]);
                    Session["dataEntregaFinal"] = Convert.ToDateTime(model["dataEntrega"] + " " + model["horaEntregaPV"]);
                    Session["horaEntregaPV"] = model["horaEntregaPV"];

                    List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                    foreach (var item in listItensPV)
                    {
                        item.DataEntregaInicial = Convert.ToDateTime(Session["dataEntregaInicial"]);
                        item.DataEntregaFinal = Convert.ToDateTime(Session["dataEntregaInicial"]);
                        item.Alterado = 1;
                    }
                }
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Hora da Entrega!";
                    return View("DadosExportacao");
                }

                if (model["TipoVenda"] != null)
                {
                    Session["tipoVendaSelecionado"] = model["TipoVenda"];
                    AtualizaDDL(model["TipoVenda"], (List<SelectListItem>)Session["ListaTipoVenda"]);
                }

                if (model["EnviadoVia"] != null)
                {
                    Session["viaDeEnvioSelecionada"] = model["EnviadoVia"];
                    AtualizaDDL(model["EnviadoVia"], (List<SelectListItem>)Session["ListViaDeEnvio"]);
                }

                if (model["AeroportoOrigem"] != null)
                {
                    Session["aeroportoOrigemSelecionado"] = model["AeroportoOrigem"];
                    AtualizaDDL(model["AeroportoOrigem"], (List<SelectListItem>)Session["ListAeroportoOrigem"]);
                }

                if (model["AeroportoDestino"] != null)
                {
                    Session["aeroportoDestinoSelecionado"] = model["AeroportoDestino"];
                    AtualizaDDL(model["AeroportoDestino"], (List<SelectListItem>)Session["ListAeroportoDestino"]);
                }

                if (model["condPagPV"] != null)
                {
                    if (model["condPagPV"] == "")
                    {
                        ViewBag.Erro = "Obrigatório Inserir Condição de Pagamento!";
                        return View("DadosExportacao");
                    }
                    else
                    {
                        Session["condPagPV"] = model["condPagPV"];
                        //if (Session["condicaoPagamentoPV"] == null)
                        Session["condicaoPagamentoPV"] = Session["condPagPV"].ToString();
                    }
                }

                if (model["valorDocumentacaoDE"] != null)
                {
                    Session["valorDocumentacaoDE"] = Convert.ToDecimal(model["valorDocumentacaoDE"]);
                }

                if (model["valorFreteDE"] != null)
                {
                    Session["valorFreteDE"] = Convert.ToDecimal(model["valorFreteDE"]);
                }

                if (model["numCaixasDE"] != null)
                {
                    Session["numCaixasDE"] = Convert.ToInt32(model["numCaixasDE"]);
                }

                if (model["numPaletesDE"] != null)
                {
                    Session["numPaletesDE"] = Convert.ToInt32(model["numPaletesDE"]);
                }

                if (model["numeroVooPV"] != null)
                {
                    Session["numeroVooPV"] = model["numeroVooPV"];
                }

                if (model["ciaAereaPV"] != null)
                {
                    Session["ciaAereaPV"] = model["ciaAereaPV"];
                }

                if (model["awbPV"] != null)
                {
                    Session["awbPV"] = model["awbPV"];
                }

                if (model["ncmPV"] != null)
                {
                    Session["ncmPV"] = model["ncmPV"];
                }

                if (model["numFaturaDE"] != null)
                {
                    Session["numFaturaDE"] = model["numFaturaDE"];
                }

                if (model["dataColetaNascimento"] != null)
                    Session["dataColetaNascimento"] = Convert.ToDateTime(model["dataColetaNascimento"]);
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Data de Coleta / Nascimento!";
                    return View("DadosExportacao");
                }

                //Session["vendedorPV"] = "000095";

                if (model["observacaoDE"] != null)
                {
                    Session["observacaoPV"] = model["observacaoDE"];
                }

                if (model["placaPV"] != null)
                {
                    Session["placaPV"] = model["placaPV"];
                }

                if (model["lacrePV"] != null)
                {
                    Session["lacrePV"] = model["lacrePV"];
                }

                if (model["motoristaPV"] != null)
                {
                    Session["motoristaPV"] = model["motoristaPV"];
                }

                if (model["rgMotoristaPV"] != null)
                {
                    Session["rgMotoristaPV"] = model["rgMotoristaPV"];
                }

                if (model["Veterinario"] != null)
                {
                    Session["veterinarioSelecionado"] = model["Veterinario"];
                    AtualizaDDL(model["Veterinario"], (List<SelectListItem>)Session["ListVeterinarioResponsavel"]);
                }
            }

            if (Session["origemPV"].ToString().Equals("Alteração"))
                return View("FinalizaPV");
            else
                return View("ListItensPV");
        }

        public ActionResult PrintDocExportation(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            try
            {
                Session["idSelecionado"] = id;

                Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();

                List<ENT_OBJ> listObj = apolo2Static.ENT_OBJ.Where(w => w.EntCod == pedidoVenda.CodigoCliente).ToList();

                List<SelectListItem> listaDocs = new List<SelectListItem>();

                foreach (var item in listObj)
                {
                    OBJETO objeto = apolo2Static.OBJETO.Where(w => w.ObjCodEstr == item.ObjCodEstr).FirstOrDefault();

                    SelectListItem itemList = new SelectListItem();
                    itemList.Text = objeto.ObjNome;
                    itemList.Value = item.ObjCodEstr;
                    itemList.Selected = false;

                    listaDocs.Add(itemList);
                }

                CarregaTipoExportacaoRelatorio();

                Session["ListaDocExp"] = listaDocs;

                //return Redirect("/Reports/CrystalReportViewer.aspx");
                return View("DocumentosExportacao");
            }
            catch (Exception ex)
            {
                string msg = "";
                if (ex.InnerException != null)
                    msg = ex.InnerException.Message;

                ViewBag.Erro = "Erro ao Ir para Geração dos Documentos de Exportação: "
                    + ex.Message + " / Inner Exception: " + msg;

                return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
            }
        }

        public ActionResult PrintDocExportationReturn()
        {
            if (Session["ErroCrystalReportViewer"] != null)
                ViewBag.Erro = Session["ErroCrystalReportViewer"].ToString();

            return View("DocumentosExportacao");
        }

        public ActionResult PrintSelectDocExportation(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            try
            {
                if (model["ButtonGerarDocumentos"] != null)
                {
                    #region Filtro Docs. Export

                    String[] fileCountries = null;
                    int[] selectedIndices = null;
                    if ((model.Count > 0) && (model["name"] != null))
                    {
                        fileCountries = ("," + model["name"]).Split(',');
                        selectedIndices = model["docExpSelect"].Replace("true,false", "true")
                                            .Split(',')
                                            .Select((item, index) => new { item = item, index = index })
                                            .Where(row => row.item == "true")
                                            .Select(row => row.index).ToArray();
                        Session["docExportSelectedList"] = fileCountries;
                        Session["indexDocExportSelectedList"] = selectedIndices;
                    }
                    else
                    {
                        fileCountries = (String[])Session["docExportSelectedList"];
                        selectedIndices = (int[])Session["indexDocExportSelectedList"];
                    }

                    List<String> listStatus = new List<string>();

                    List<String> listStatusUpdSession = new List<string>();
                    foreach (var index in selectedIndices)
                    {
                        listStatusUpdSession.Add(fileCountries[index]);
                    }

                    if (listStatusUpdSession.Where(w => w == "(Todos os Status)").Count() == 0)
                    {
                        foreach (var index in selectedIndices)
                        {
                            listStatus.Add(fileCountries[index]);
                        }
                    }

                    Session["listaDocExportSelectFilter"] = listStatus;

                    #endregion

                    Session["tipoExportacaoRelatorioSelecionado"] = model["TipoExportacaoRelatorio"];

                    if (listStatus.Count > 1 &&
                        !Session["tipoExportacaoRelatorioSelecionado"].ToString().Equals("PDF"))
                    {
                        ViewBag.Erro = "Só é possível selecionar mais de um documento com o tipo PDF!";
                        return View("DocumentosExportacao");
                    }

                    return Redirect("/Reports/CrystalReportViewer.aspx");
                }
                else
                {
                    return View("DocumentosExportacao");
                }
            }
            catch (Exception ex)
            {
                if (ex.InnerException == null)
                    ViewBag.Erro = "Erro ao Gerar Documentação: " + ex.Message;
                else
                    ViewBag.Erro = "Erro ao Gerar Documentação: " + ex.Message + " / " + ex.InnerException.Message;
                return View("DocumentosExportacao");
            }
        }

        public ActionResult FinishPrintDocExportation()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            try
            {

                //DateTime dataInicial = Convert.ToDateTime(Session["dataInicial"].ToString());
                //DateTime dataFinal = Convert.ToDateTime(Session["dataFinal"].ToString());
                //string customer = Session["customerNameSearchPedVenda"].ToString();
                //string status = Session["statusSearch"].ToString();
                //string empresaS = Session["empresaSelecionadaPV"].ToString();
                //string vendedor = Session["vendedorSelecionadoPV"].ToString();
                //string codCHIC = Session["codigoCHICSearchPedVenda"].ToString();
                //string idPedido = Session["idPedidoSearchPedVenda"].ToString();

                //#region Filtro Status

                //List<String> listStatus = new List<string>();
                //String[] fileCountries = null;
                //int[] selectedIndices = null;
                //if (Session["statusSelectedList"] != null)
                //{
                //    fileCountries = (String[])Session["statusSelectedList"];
                //    selectedIndices = (int[])Session["indexStatusSelectedList"];

                //    List<String> listStatusUpdSession = new List<string>();
                //    foreach (var index in selectedIndices)
                //    {
                //        listStatusUpdSession.Add(fileCountries[index]);
                //    }

                //    UpdateStatusListSelected(listStatusUpdSession);

                //    if (listStatusUpdSession.Where(w => w == "(Todos os Status)").Count() == 0)
                //    {
                //        foreach (var index in selectedIndices)
                //        {
                //            listStatus.Add(fileCountries[index]);
                //        }
                //    }
                //}

                //#endregion

                //List<Pedido_Venda> listaPV = ListaPV(customer, dataInicial, dataFinal, status,
                //    empresaS, vendedor, codCHIC, idPedido, listStatus);

                if (Session["ErroCrystalReportViewer"] != null)
                {
                    ViewBag.Erro = Session["ErroCrystalReportViewer"].ToString();
                    return View("DocumentosExportacao");
                }
                else
                {
                    ViewBag.Mensagem = "Documentação Gerada com sucesso! Para baixá-la, "
                        + "clique no botão de download!";
                    return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
                }
            }
            catch (Exception ex)
            {
                if (ex.InnerException == null)
                    ViewBag.Erro = "Erro ao Gerar Documentação: " + ex.Message;
                else
                    ViewBag.Erro = "Erro ao Gerar Documentação: " + ex.Message + " / " + ex.InnerException.Message;
                return View("DocumentosExportacao");
            }
        }

        public ActionResult DownloadDocExportation(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            string caminho = Session["DocExportationPath"].ToString();

            string tipoExportacaoRelatorioSelecionado =
                Session["tipoExportacaoRelatorioSelecionado"].ToString();

            Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();
            string nomeCliente = pedidoVenda.NomeCliente.Replace(" ", "_").Replace(".", "").Replace("/", "");
            string typeStringExtension = "";
            if (tipoExportacaoRelatorioSelecionado.Equals("PDF"))
                typeStringExtension = ".pdf";
            else if (tipoExportacaoRelatorioSelecionado.Equals("Excel"))
                typeStringExtension = ".xls";
            else if (tipoExportacaoRelatorioSelecionado.Equals("Word"))
                typeStringExtension = ".doc";

            string nameFile = "Doc_Export_" + pedidoVenda.ID.ToString() + "_" + nomeCliente + typeStringExtension;

            string typeString = "";
            if (tipoExportacaoRelatorioSelecionado.Equals("PDF"))
                typeString = "application/pdf";
            else if (tipoExportacaoRelatorioSelecionado.Equals("Excel"))
                typeString = "application/vnd.ms-excel";
            else if (tipoExportacaoRelatorioSelecionado.Equals("Word"))
                typeString = "application/msword";

            if (Request.Browser.IsMobileDevice ||
                !tipoExportacaoRelatorioSelecionado.Equals("PDF"))
            {
                Stream stream = new FileStream(caminho,
                                            FileMode.Open,
                                            FileAccess.Read
                                        );
                var cd = new System.Net.Mime.ContentDisposition
                {
                    // for example foo.bak
                    FileName = nameFile,

                    // always prompt the user for downloading, set to true if you want 
                    // the browser to try to show the file inline
                    Inline = false,
                };
                Response.AppendHeader("Content-Disposition", cd.ToString());
                return File(stream, typeString);
            }
            else
            {
                Stream stream = new FileStream(caminho,
                                            FileMode.Open,
                                            FileAccess.Read
                                        );
                var cd = new System.Net.Mime.ContentDisposition
                {
                    // for example foo.bak
                    FileName = nameFile,

                    // always prompt the user for downloading, set to true if you want 
                    // the browser to try to show the file inline
                    Inline = true,
                };
                Response.AppendHeader("Content-Disposition", cd.ToString());
                return File(stream, "application/pdf");
            }
        }

        #endregion

        #region Step 02 - Items

        public ActionResult ListItensPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            string codigoCliente = "";
            if (model["AddClientePV"] != null)
            {
                if (model["selectedCustomer"] != null)
                {
                    codigoCliente = model["selectedCustomer"];
                }
                else
                {
                    ViewBag.Erro = "Antes de ir para o próximo passo, selecione um Cliente!";
                    return View("AddClientePV");
                }
            }

            if (codigoCliente != "")
                Session["selectedCustomer"] = codigoCliente;
            else
                codigoCliente = Session["selectedCustomer"].ToString();

            ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == codigoCliente)
                    .FirstOrDefault();
            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();

            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"])
                && !cidade.PaisSigla.Equals("BRA"))
            {
                #region Carrega Variáveis

                int idSelecionado = Convert.ToInt32(Session["idSelecionado"].ToString());

                Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == idSelecionado).FirstOrDefault();

                if (pedidoVenda != null)
                {
                    Session["dataPedidoVenda"] = pedidoVenda.DataPedido.ToShortDateString();
                }
                else
                {
                    if (Session["dataPedidoVenda"] == null)
                        Session["dataPedidoVenda"] = DateTime.Today.ToShortDateString();
                }

                if (Session["dataEnvio"] == null)
                    Session["dataEnvio"] = DateTime.Today.ToShortDateString();

                if (Session["dataSaidaIncubatorio"] == null)
                    Session["dataSaidaIncubatorio"] = DateTime.Today.ToShortDateString();

                if (Session["dataEntregaInicial"] == null)
                    Session["dataEntregaInicial"] = DateTime.Today.ToShortDateString();

                Session["ListViaDeEnvio"] = CarregaListaEnvio();
                if (Session["viaDeEnvioSelecionada"] != null)
                    AtualizaDDL(Session["viaDeEnvioSelecionada"].ToString(),
                        (List<SelectListItem>)Session["ListViaDeEnvio"]);

                Session["ListAeroportoOrigem"] = CarregaListaAeroporto(false);
                if (Session["aeroportoOrigemSelecionado"] != null)
                    AtualizaDDL(Session["aeroportoOrigemSelecionado"].ToString(),
                        (List<SelectListItem>)Session["ListAeroportoOrigem"]);

                Session["ListAeroportoDestino"] = CarregaListaAeroporto(true);
                if (Session["aeroportoDestinoSelecionado"] != null)
                    AtualizaDDL(Session["aeroportoDestinoSelecionado"].ToString(),
                        (List<SelectListItem>)Session["ListAeroportoDestino"]);

                Session["ListaTipoVenda"] = CarregaListaTipoVenda();
                if (Session["tipoVendaSelecionado"] != null)
                    AtualizaDDL(Session["tipoVendaSelecionado"].ToString(),
                        (List<SelectListItem>)Session["ListaTipoVenda"]);

                COND_PAG_ENT condPagEnt = apolo2Static.COND_PAG_ENT.Where(w => w.EntCod == entidade.EntCod)
                    .FirstOrDefault();

                COND_PAG condPag = new COND_PAG();
                if (condPagEnt != null)
                    condPag = apolo2Static.COND_PAG.Where(w => w.CondPagCod == condPagEnt.CondPagCod)
                        .FirstOrDefault();

                if (Session["condPagPV"] == null)
                    if (entidade.EntIdioma1.Equals("Espanhol"))
                        Session["condPagPV"] = condPag.USERNomeEspanhol;
                    else
                        Session["condPagPV"] = condPag.USERNomeIngles;

                if (Session["valorDocumentacaoDE"] == null)
                    Session["valorDocumentacaoDE"] = 0;

                if (Session["valorFreteDE"] == null)
                    Session["valorFreteDE"] = 0;

                if (Session["numCaixasDE"] == null)
                    Session["numCaixasDE"] = 0;

                if (Session["numPaletesDE"] == null)
                    Session["numPaletesDE"] = 0;

                if (Session["numeroVooPV"] == null)
                    Session["numeroVooPV"] = "";

                if (Session["ciaAereaPV"] == null)
                    Session["ciaAereaPV"] = "";

                if (Session["awbPV"] == null)
                    Session["awbPV"] = "";

                if (Session["ncmPV"] == null)
                    Session["ncmPV"] = "";

                if (Session["horaEntregaPV"] == null)
                    Session["horaEntregaPV"] = "";

                if (Session["horaSaidaIncubatorioPV"] == null)
                    Session["horaSaidaIncubatorioPV"] = "";

                if (Session["horaEnvioPV"] == null)
                    Session["horaEnvioPV"] = "";

                if (Session["numFaturaDE"] == null)
                    Session["numFaturaDE"] = "";

                if (Session["dataColetaNascimento"] == null)
                    Session["dataColetaNascimento"] = DateTime.Today.ToShortDateString();

                #endregion

                return View("DadosExportacao");
            }
            else
            {
                if (Session["origemPV"].ToString().Equals("Alteração"))
                    return View("FinalizaPV");
                else
                    return View("ListItensPV");
            }
        }

        public ActionResult ListItensPVReturn()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            return View("ListItensPV");
        }

        public ActionResult AddItemPV()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            if (Session["selectedCustomer"] == "" || Session["selectedCustomer"] == null)
            {
                ViewBag.Mensagem = "Obrigatório selecionar um cliente antes de inserir um item!";
                return View("ValoresAtualizados");
            }

            #region Verifica se o Período da Disponibilidade de Ovos está fechado para alteração

            List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            if (listItensPVSession.Count > 0)
            {
                var verificaFechamentoInicialDO = hlbappSession.LOG_DATA_FECH_LANC
                    .Where(w => w.Location == "Disponibilidade de Ovos - Inicial")
                    .OrderByDescending(o => o.DataHora)
                    .FirstOrDefault();

                var verificaFechamentoFinalDO = hlbappSession.LOG_DATA_FECH_LANC
                    .Where(w => w.Location == "Disponibilidade de Ovos - Final")
                    .OrderByDescending(o => o.DataHora)
                    .FirstOrDefault();

                var dataNascimento = CalculaDataNascimento(Session["selectedCustomer"].ToString(), listItensPVSession.FirstOrDefault().DataEntregaInicial,
                    listItensPVSession.FirstOrDefault().ProdCodEstr);

                if (verificaFechamentoInicialDO != null && verificaFechamentoFinalDO != null)
                {
                    if (dataNascimento >= verificaFechamentoInicialDO.Data_Fech_Lanc && dataNascimento <= verificaFechamentoFinalDO.Data_Fech_Lanc)
                    {
                        ViewBag.Erro = "Pedido não pode ser alterado para essa data pois o período da disponibilidade de ovos está fechado!" +
                            " Verificar com o departamento de programação!";
                        if (Session["origemPVForm"].ToString().Equals("Form"))
                            return View("AlterPV");
                        else
                            return View("ListItensPV");
                    }
                }
            }

            #endregion

            Session["origemItemPV"] = "Inclusão";
            Session["idItemSelecionado"] = 0;

            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            if (listItensPV.Count == 0)
            {
                Session["dataEntregaInicial"] = DateTime.Today.ToShortDateString();
                Session["dataEntregaFinal"] = DateTime.Today.ToShortDateString();
            }
            else
            {
                Session["dataEntregaInicial"] = listItensPV.Max(m => m.DataEntregaInicial);
                Session["dataEntregaFinal"] = listItensPV.Max(m => m.DataEntregaFinal);
            }

            Session["paginaAnterior"] = "AddItemPV";
            DateTime dataEntregaInicial = Convert.ToDateTime(Session["dataEntregaInicial"]);

            //string empresa = "";
            //if (Session["login"].ToString().Contains("@"))
            //empresa = Session["empresa"].ToString();

            #region Carrega Linhagens

            List<SelectListItem> ddlLinhagens = new List<SelectListItem>();

            bool viewAll = (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaVisualizarTodosPedidos",
                (System.Collections.ArrayList)Session["Direitos"]));

            if (!MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"])
                || viewAll)
            {
                List<string> listaLin = new List<string>();

                for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
                {
                    string empStr = Session["empresa"].ToString().Substring(i, 2);

                    var listaLinhagens = hlbappSession.Tabela_Precos
                        .Where(w => w.Empresa == empStr
                            && w.Tipo == "Faturamento"
                            && dataEntregaInicial >= w.DataInicial && dataEntregaInicial <= w.DataFinal)
                        .GroupBy(g => g.Produto)
                        .OrderBy(o => o.Key)
                        .ToList();

                    foreach (var item in listaLinhagens)
                    {
                        if (item.Key.Contains("Ovos"))
                        {
                            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                                .GetGroup("HLBAPPM-PedidoVendaVisualizaLinhagemOvos",
                                (System.Collections.ArrayList)Session["Direitos"]))
                            {
                                listaLin.Add(item.Key);
                            }
                        }
                        else
                            listaLin.Add(item.Key);
                    }
                }

                foreach (var item in listaLin)
                {
                    ddlLinhagens.Add(new SelectListItem { Text = item, Value = item, Selected = false });
                }
            }

            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"])
                || viewAll)
            {
                List<PRODUTO> listProdutoExport = apoloStatic.PRODUTO
                    .Where(w => (w.FxaProdCod == "7" || w.FxaProdCod == "8")
                        && (w.CategProdCod == "1" || w.CategProdCod == "4" || w.CategProdCod == "2") 
                            && w.ProdStat == "Ativado"
                        && apoloStatic.PRODUTO1
                            .Any(p1 => ((p1.USEREmpresaLinha == "BR" || p1.USEREmpresaLinha == "HN" 
                                || p1.USEREmpresaLinha == "LB") && w.ProdCodEstr == p1.ProdCodEstr)))
                    .OrderByDescending(o => o.FxaProdCod).ThenByDescending(t => t.ProdNomeAlt2)
                    .ToList();

                foreach (var item in listProdutoExport)
                {
                    ddlLinhagens.Add(new SelectListItem { Text = item.ProdNome, Value = item.ProdCodEstr, Selected = false });
                }

                string codigoCliente = Session["selectedCustomer"].ToString();

                ENTIDADE1 entidade1 = apoloStatic.ENTIDADE1.Where(w => w.EntCod == codigoCliente).FirstOrDefault();

                if (entidade1.USERPrecoVenda != null && entidade1.USERPrecoVenda != 0)
                    Session["precoDE"] = entidade1.USERPrecoVenda;
                else
                    Session["precoDE"] = 0;

                Session["percBonificacaoDE"] = 0;
            }

            Session["ListaLinhagens"] = ddlLinhagens.OrderBy(o => o.Text).ToList();

            #endregion

            Session["ListaMotivoReposicao"] = CarregaListaMotivoReposicao();

            Session["qtdeLiquida"] = 0;
            Session["qtdeReposicao"] = 0;
            Session["precoDE"] = 0;
            Session["valorTotalDE"] = 0;
            Session["sobra"] = false;
            Session["verificaFechamentoDO"] = false;
            if (Session["origemPVForm"] == "Form")
                Session["percBonificacao"] = 2;
            else
                Session["percBonificacao"] = 0;

            return View("AddItemPV");
        }

        public ActionResult SaveItemPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            #region Validação dos Campos

            #region Data de Entrega Inicial

            if (model["dataEntregaInicial"] != null)
            {
                if (model["dataEntregaInicial"] != "")
                {
                    if (Convert.ToDateTime(model["dataEntregaInicial"]) >= DateTime.Today)
                        Session["dataEntregaInicial"] = Convert.ToDateTime(model["dataEntregaInicial"]);
                    else
                    {
                        ViewBag.Erro = "Só é possível inserir Data igual ou maior que atual!";
                        //return View("AddItemPV");
                        if (Session["origemPVForm"].ToString().Equals("Form"))
                            return View("AlterPV");
                        else
                            return View("ListItensPV");
                    }
                }
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Data Inicial de Entrega!";
                    //return View("AddItemPV");
                    if (Session["origemPVForm"].ToString().Equals("Form"))
                        return View("AlterPV");
                    else
                        return View("ListItensPV");
                }
            }

            #endregion

            #region Data de Entrega Final

            if (model["dataEntregaFinal"] != null)
            {
                if (model["dataEntregaFinal"] != "")
                {
                    if (Convert.ToDateTime(model["dataEntregaFinal"]) >= DateTime.Today)
                        Session["dataEntregaFinal"] = Convert.ToDateTime(model["dataEntregaFinal"]);
                    else
                    {
                        ViewBag.Erro = "Só é possível inserir Data igual ou maior que atual!";
                        //return View("AddItemPV");
                        if (Session["origemPVForm"].ToString().Equals("Form"))
                            return View("AlterPV");
                        else
                            return View("ListItensPV");
                    }
                }
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Data Final de Entrega!";
                    //return View("AddItemPV");
                    if (Session["origemPVForm"].ToString().Equals("Form"))
                        return View("AlterPV");
                    else
                        return View("ListItensPV");
                }
            }

            #endregion

            #region Qtde Líquida

            if (model["qtdeLiquida"] != null)
            {
                Session["qtdeLiquida"] = Convert.ToInt32(model["qtdeLiquida"]);
            }
            else
            {
                ViewBag.Erro = "Obrigatório Inserir Qtde. Líquida!";
                //return View("AddItemPV");
                if (Session["origemPVForm"].ToString().Equals("Form"))
                    return View("AlterPV");
                else
                    return View("ListItensPV");
            }

            #endregion

            #region Qtde Reposicao

            if (model["qtdeReposicao"] != null)
            {
                if (model["qtdeReposicao"] != "")
                    Session["qtdeReposicao"] = Convert.ToInt32(model["qtdeReposicao"]);
                else
                {
                    ViewBag.Erro = "Obrigatório Inserir Qtde. Reposição!";
                    //return View("AddItemPV");
                    if (Session["origemPVForm"].ToString().Equals("Form"))
                        return View("AlterPV");
                    else
                        return View("ListItensPV");
                }
            }
            else
            {
                Session["qtdeReposicao"] = 0;
            }

            #endregion

            #region Verifica Qtde. Informadas

            if ((Convert.ToInt32(model["qtdeLiquida"]) <= 0)
                && (Convert.ToInt32(model["qtdeReposicao"]) <= 0))
            {
                ViewBag.Erro = "A Qtde. Líquida OU a Qtde. Reposição deve ser maior que zero!";
                //return View("AddItemPV");
                if (Session["origemPVForm"].ToString().Equals("Form"))
                    return View("AlterPV");
                else
                    return View("ListItensPV");
            }

            #endregion

            #region Preço Unitário

            decimal preco = 0;
            if (model["preco"] != null)
            {
                if (model["preco"] == "")
                {
                    ViewBag.Erro = "Campo PREÇO não pode ser vazio!";
                    //return View("AddItemPV");
                    if (Session["origemPVForm"].ToString().Equals("Form"))
                        return View("AlterPV");
                    else
                        return View("ListItensPV");
                }
                else
                {
                    preco = Convert.ToDecimal(model["preco"]);
                    Session["precoDE"] = preco;
                }
            }

            #endregion

            #region Valor Total

            decimal valorTotal = 0;
            if (model["valorTotal"] != null)
            {
                if (model["valorTotal"] == "")
                {
                    ViewBag.Erro = "Campo VALOR TOTAL não pode ser vazio!";
                    //return View("AddItemPV");
                    if (Session["origemPVForm"].ToString().Equals("Form"))
                        return View("AlterPV");
                    else
                        return View("ListItensPV");
                }
                else
                {
                    valorTotal = Convert.ToDecimal(model["valorTotal"]);
                    Session["valorTotalDE"] = valorTotal;
                }
            }

            #endregion

            #region Bonificação

            decimal percBonificacao = 0.00m;
            if (model["percBonificacao"] != null)
            {
                if (model["percBonificacao"] == "")
                {
                    ViewBag.Erro = "Campo % DE BONIFICAÇÃO não pode ser vazio!";
                    //return View("AddItemPV");
                    if (Session["origemPVForm"].ToString().Equals("Form"))
                        return View("AlterPV");
                    else
                        return View("ListItensPV");
                }
                else
                {
                    percBonificacao = Convert.ToDecimal(model["percBonificacao"]);
                    Session["percBonificacao"] = percBonificacao;
                }
            }

            #endregion

            #region Sobra

            int sobra = 0;
            if (model["sobra"] != null)
            {
                if (Convert.ToBoolean(model["sobra"].Replace("true,false", "true").Replace("false,true", "true")) == true) sobra = 1;
                Session["sobra"] = model["sobra"].Replace("true,false", "true").Replace("false,true", "true");
            }

            #endregion

            #endregion

            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
            List<Item_Pedido_Venda> listItensPVMVD = (List<Item_Pedido_Venda>)Session["ItensPVListMVD"];

            DateTime datainicial = Convert.ToDateTime(Session["dataEntregaInicial"]);
            DateTime datafinal = Convert.ToDateTime(Session["dataEntregaFinal"]);
            string codCliente = Session["selectedCustomer"].ToString();
            string produto = model["Text"];
            string motivoReposicao = "";
            if (model["ddlMotivoReposicao"] != null) motivoReposicao = model["ddlMotivoReposicao"];

            #region Verifica se o Período da Disponibilidade de Ovos está fechado para alteração

            var verificaFechamentoInicialDO = hlbappSession.LOG_DATA_FECH_LANC
                .Where(w => w.Location == "Disponibilidade de Ovos - Inicial")
                .OrderByDescending(o => o.DataHora)
                .FirstOrDefault();

            var verificaFechamentoFinalDO = hlbappSession.LOG_DATA_FECH_LANC
                .Where(w => w.Location == "Disponibilidade de Ovos - Final")
                .OrderByDescending(o => o.DataHora)
                .FirstOrDefault();

            var dataNascimento = CalculaDataNascimento(Session["selectedCustomer"].ToString(), datainicial, produto);

            if (verificaFechamentoInicialDO != null && verificaFechamentoFinalDO != null)
            {
                if (dataNascimento >= verificaFechamentoInicialDO.Data_Fech_Lanc && dataNascimento <= verificaFechamentoFinalDO.Data_Fech_Lanc)
                {
                    ViewBag.Erro = "Item não pode ser inserido para essa data pois o período da disponibilidade de ovos está fechado!" +
                        " Verificar com o departamento de programação!";
                    if (Session["origemPVForm"].ToString().Equals("Form"))
                        return View("AlterPV");
                    else
                        return View("ListItensPV");
                }
            }

            #endregion

            Item_Pedido_Venda item = null;

            int existeDataLista = 0;
            //int existeDataBD = 0;
            int idItemSelecionado = Convert.ToInt32(Session["idItemSelecionado"]);

            existeDataLista = listItensPV.Where(w => w.DataEntregaInicial == datainicial
                && w.ProdCodEstr == produto
                && w.Sequencia != idItemSelecionado
                && w.OrderNoCHIC != "Cancelado").Count();
            /*
             * 04/01/2018 - Solicitado por André Pontes
             * 
             * Retirada a verificação de item repetido em outros pedidos por causa
             * da divisão que existe de pedidos.
             */

            //existeDataBD = hlbappSession.Item_Pedido_Venda.Where(w => w.DataEntregaInicial == datainicial
            //    && w.ProdCodEstr == produto
            //    && w.Sequencia != idItemSelecionado
            //    && hlbappSession.Pedido_Venda.Any(p => p.ID == w.IDPedidoVenda
            //        && p.CodigoCliente == codCliente
            //        && p.Status != "Cancelado")
            //    && w.OrderNoCHIC != "Cancelado").Count();

            //if ((existeDataLista + existeDataBD) > 0)
            if ((existeDataLista) > 0)
            {
                ViewBag.Erro = "Já existe a Data de Entrega " + datainicial.ToShortDateString()
                    + " para a Linhagem " + produto + " para esse Cliente! Não é possível inserir repetido!";
                //return View("AddItemPV");
                if (Session["origemPVForm"].ToString().Equals("Form"))
                    return View("AlterPV");
                else
                    return View("ListItensPV");
            }

            if (!Convert.ToBoolean(Session["VariosPedidos"]))
            {
                int existeMesmaLinhagem = 0;
                existeMesmaLinhagem = listItensPV.Where(w => w.ProdCodEstr == produto
                    && w.Sequencia != idItemSelecionado
                    && w.OrderNoCHIC != "Cancelado").Count();
                if (existeMesmaLinhagem > 0)
                {
                    ViewBag.Erro = "Já existe a Linhagem " + produto
                        + " adicionada nesse Pedido! Não é possível inserir repetido! Altere a informação do já existente!";
                    //return View("AddItemPV");
                    if (Session["origemPVForm"].ToString().Equals("Form"))
                        return View("AlterPV");
                    else
                        return View("ListItensPV");
                }
            }

            if (Session["origemItemPV"].ToString().Equals("Inclusão"))
            {
                item = new Item_Pedido_Venda();
                int sequencia = 0;
                if (listItensPV.Count > 0)
                    sequencia = listItensPV.Max(m => m.Sequencia);

                item.Sequencia = sequencia + 1;
                item.Vacina = "Pedido";
            }
            else
            {
                item = listItensPV
                    .Where(w => w.Sequencia == idItemSelecionado)
                    .FirstOrDefault();

                listItensPVMVD.Add(item);
            }
            
            #region Atualiza Data dos outros Itens para o do inserido agora para ficar a mesma

            if (!Convert.ToBoolean(Session["VariosPedidos"]))
            {
                foreach (var itemInserido in listItensPV)
                {
                    itemInserido.DataEntregaInicial = datainicial;
                    itemInserido.DataEntregaFinal = datafinal;
                }
            }

            #endregion

            int qtdeTotalAntiga = 0;
            if (item != null)
                qtdeTotalAntiga = item.QtdeLiquida + Convert.ToInt32(item.QtdeReposicao) +
                 Convert.ToInt32(item.QtdeBonificada);

            item.DataEntregaInicial = datainicial;
            item.DataEntregaFinal = datafinal;
            item.ProdCodEstr = produto;
            item.QtdeLiquida = Convert.ToInt32(Session["qtdeLiquida"]);
            
            item.QtdeReposicao = Convert.ToInt32(Session["qtdeReposicao"]);
            item.TipoReposicao = motivoReposicao;
            item.Alterado = 1;
            item.Sobra = sobra;
            if (item.OrderNoCHIC == null)
                item.OrderNoCHIC = "";
            if (item.OrderNoCHICReposicao == null)
                item.OrderNoCHICReposicao = "";

            if (Session["origemPVForm"] != "Form")
                item.PercBonificacao = 0;
            else
                item.PercBonificacao = percBonificacao;
            
            // 03/12/2021 - Ticket 103054 - Foi alterada a regra para o cálculo da bonificação, onde será calculado somente em cima da quantidade vendida e não da reposição.
            //item.QtdeBonificada = Convert.ToInt32(Math.Round(Convert.ToDouble((item.PercBonificacao / 100.00m) * (item.QtdeLiquida + item.QtdeReposicao)),0));
            item.QtdeBonificada = Convert.ToInt32(Math.Round(Convert.ToDouble((item.PercBonificacao / 100.00m) * item.QtdeLiquida), 0));

            #region Verifica saldo de pintos na linhagem

            //DateTime dataNascimento = CalculaDataNascimento(codCliente, item.DataEntregaInicial, item.ProdCodEstr);
            int anoPedido = dataNascimento.Year;
            int mesPedido = dataNascimento.Month;

            bool existeSaldoConfigurado = ExisteConfiguracaoSaldoPinto(item.ProdCodEstr, anoPedido, mesPedido);
            int saldoUtilizado = SaldoUtilizadoPinto(codCliente, item.ProdCodEstr, anoPedido, mesPedido);
            int saldoConfigurado = SaldoConfiguradoPinto(item.ProdCodEstr, anoPedido, mesPedido);
            int qtdeTotalSolicitada = ((item.QtdeLiquida == null ? 0 : item.QtdeLiquida) +
                Convert.ToInt32(item.QtdeBonificada == null ? 0 : item.QtdeBonificada) +
                Convert.ToInt32(item.QtdeReposicao == null ? 0 : item.QtdeReposicao));
            int qtdeTotalSolicitadaPintos = qtdeTotalSolicitada;
            if (item.ProdCodEstr.Contains(" - Ovos"))
                qtdeTotalSolicitadaPintos = Convert.ToInt32(qtdeTotalSolicitada * 0.37m);

            if ((saldoUtilizado + qtdeTotalSolicitadaPintos) > saldoConfigurado && existeSaldoConfigurado
                && qtdeTotalAntiga < qtdeTotalSolicitada)
            {
                string msgQtdeOvos = "";
                if (item.ProdCodEstr.Contains(" - Ovos"))
                    msgQtdeOvos = " - em Ovos: " + String.Format("{0:N0}", qtdeTotalSolicitada);

                ViewBag.Erro = "Saldo indisponível para a Linhagem " + item.ProdCodEstr
                    + " no período de " + mesPedido.ToString() + "/" + anoPedido.ToString() + "!<br />"
                    + "Qtde. Solicitada: " + String.Format("{0:N0}", qtdeTotalSolicitadaPintos)
                        + msgQtdeOvos + "<br />"
                    + "Qtde. Utilizada: " + String.Format("{0:N0}", saldoUtilizado) + "<br />"
                    + "Qtde. Projetada: " + String.Format("{0:N0}", saldoConfigurado) + "<br />"
                    + "Saldo: " + String.Format("{0:N0}", (saldoConfigurado - saldoUtilizado)) + "<br />"
                    + "Em caso de duvidas, entrar em contato com o Gerente Comercial!";
                if (Session["origemPVForm"].ToString().Equals("Form"))
                    return View("AlterPV");
                else
                    return View("ListItensPV");
            }
            else if (!existeSaldoConfigurado)
            {
                #region Verifica bloqueio de linhagem por data cadastrado no Fluig se a quantidade nova for menor que a atual

                fluigEntities bdFluig = new fluigEntities();

                bool existeBloqueio = false;
                DateTime dataPermitida = new DateTime();

                var listaBloqueios = bdFluig.FF40F29A5F_3F17F927
                    .Where(w => datainicial < w.PERMITIR_PEDIDO_DT_1
                        && w.DELETED == false)
                    .ToList();

                foreach (var bloqueio in listaBloqueios)
                {
                    dataPermitida = Convert.ToDateTime(bloqueio.PERMITIR_PEDIDO_DT_1);

                    var listaColunas = bloqueio.GetType().GetProperties();

                    foreach (var coluna in listaColunas)
                    {
                        if (coluna.Name.Contains("LINHAGENS_BLOQU_CHK_"))
                        {
                            string value = "";
                            if (coluna.GetValue(bloqueio, null) != null)
                                value = coluna.GetValue(bloqueio, null).ToString();
                            if (value == produto)
                            {
                                existeBloqueio = true;
                                break;
                            }
                        }
                    }
                }

                if (existeBloqueio && qtdeTotalAntiga < qtdeTotalSolicitada)
                {
                    ViewBag.Erro = "Previsão de disponibilidade da linhagem "
                        + produto + " a partir de " + dataPermitida.ToShortDateString()
                        + "! Sendo assim, não é possível aumentar para a quantidade solicitada! "
                        + "Em caso de duvidas, entrar em contato com o Gerente Comercial!";
                    if (Session["origemPVForm"].ToString().Equals("Form"))
                        return View("AlterPV");
                    else
                        return View("ListItensPV");
                }

                #endregion
            }

            #endregion

            if (model["preco"] == null && Session["origemItemPV"].ToString().Equals("Inclusão"))
            {
                string cliente = Session["selectedCustomer"].ToString();
                string empresa = "";
                if (Session["login"].ToString().Contains("@"))
                    empresa = Session["empresa"].ToString();

                ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == cliente).FirstOrDefault();
                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(w => w.CidCod == entidade.CidCod).FirstOrDefault();
                UNID_FEDERACAO uf = apoloStatic.UNID_FEDERACAO
                    .Where(w => w.UfSigla == cidade.UfSigla
                        && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();

                Tabela_Precos tabelaPrecos = hlbappSession.Tabela_Precos
                    .Where(w => w.Tipo == "Faturamento" && w.Produto == item.ProdCodEstr
                        && (w.Regiao == uf.UfRegGeog || w.Regiao == "Todas")
                        && (w.Empresa == empresa || empresa == "")
                        && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                    .FirstOrDefault();

                int qtdTotalMesmaData = item.QtdeLiquida;
                if (listItensPV != null)
                    if (listItensPV.Count > 0)
                    {
                        Item_Pedido_Venda itemMesmaData = listItensPV.Where(w => w.DataEntregaInicial == item.DataEntregaInicial)
                            .FirstOrDefault();

                        if (itemMesmaData != null)
                            qtdTotalMesmaData = qtdTotalMesmaData + listItensPV
                                .Where(w => w.DataEntregaInicial == item.DataEntregaInicial)
                                .FirstOrDefault().QtdeLiquida;
                    }

                //decimal? preco = 0;
                if (tabelaPrecos != null)
                    if (qtdTotalMesmaData < 5000)
                        preco = Convert.ToDecimal(tabelaPrecos.ValorMenor5000Aves);
                    else
                        preco = Convert.ToDecimal(tabelaPrecos.ValorNormal);

                item.PrecoUnitario = preco;
                item.ValorTotal = valorTotal;
            }
            else
            {
                CalculaValoresVacinasServicosPV();
                decimal valorVacinas = Convert.ToDecimal(Session["valorVacinaAntigo"].ToString());

                //CalculaValoresVacinasServicosPV()
                if (model["preco"] != null)
                {
                    item.PrecoUnitario = preco;
                    if (Session["origemPVForm"].ToString() == "Form")
                    {
                        item.PrecoPinto = preco;
                        item.PrecoUnitario = preco + valorVacinas;
                    }
                    
                }

                if (model["valorTotal"] != null)
                    item.ValorTotal = valorTotal 
                        + ((item.QtdeLiquida + item.QtdeBonificada + item.QtdeReposicao) * valorVacinas);
            }

            bool viewAll = (MvcAppHyLinedoBrasil.Controllers.AccountController
                        .GetGroup("HLBAPPM-PedidoVendaVisualizarTodosPedidos",
                        (System.Collections.ArrayList)Session["Direitos"]));

            PRODUTO produtoApolo = apoloStatic.PRODUTO.Where(w => w.ProdCodEstr == item.ProdCodEstr).FirstOrDefault();

            if (produtoApolo != null)
            {
                PRODUTO1 produtoApolo1 = apoloStatic.PRODUTO1.Where(w => w.ProdCodEstr == item.ProdCodEstr)
                    .FirstOrDefault();

                if (produtoApolo1.USEREmpresaLinha.Equals("BR"))
                    Session["vendedorPV"] = "000095";
                else if (produtoApolo1.USEREmpresaLinha.Equals("LB"))
                    Session["vendedorPV"] = "000094";
                else if (produtoApolo1.USEREmpresaLinha.Equals("HN"))
                    Session["vendedorPV"] = "000025";
            }

            if (Session["origemItemPV"].ToString().Equals("Inclusão"))
            {
                listItensPV.Add(item);
            }

            Session["ItensPVList"] = listItensPV;
            Session["ItensPVListMVD"] = listItensPVMVD;

            #region Se o item for Ovo, deletar vacinas e tratamento infravermelho se existir

            int existeOvo = listItensPV.Where(w => w.ProdCodEstr.Contains("Ovo")).Count();
            if (existeOvo > 0)
            {
                Session["vacinaPrimariaPV"] = "(Sem Vacinação)";

                var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVListExibe"];
                List<Vacinas_Secundaria_Pedido_Venda> listaDelete = null;
                if (Session["ItensSecVacListDelete"] != null)
                    listaDelete = (List<Vacinas_Secundaria_Pedido_Venda>)Session["ItensSecVacListDelete"];
                else
                    listaDelete = new List<Vacinas_Secundaria_Pedido_Venda>();

                foreach (var vacSec in listaVacSec)
                {
                    listaDelete.Add(vacSec);
                }

                listaVacSec.Clear();

                Session["tratamentoInfravermelhoPV"] = false;
            }

            #endregion

            if (Session["origemPVForm"].ToString().Equals("Form"))
                return View("AlterPV");
            else
                return View("ListItensPV");
        }

        public ActionResult EditItemPV(int sequencia)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            Session["origemItemPV"] = "Alteração";
            Session["idItemSelecionado"] = sequencia;

            var listaItensSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            int idSelecionado = Convert.ToInt32(Session["idSelecionado"].ToString());
            Pedido_Venda pedVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == idSelecionado).FirstOrDefault();
            Item_Pedido_Venda item = listaItensSession.Where(w => w.Sequencia == sequencia).FirstOrDefault();

            #region Carrega Lista Linhagens

            List<SelectListItem> ddlLinhagens = new List<SelectListItem>();

            if (!item.ProdCodEstr.Contains("003."))
            {
                List<string> listaLin = new List<string>();

                for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
                {
                    string empStr = Session["empresa"].ToString().Substring(i, 2);

                    var listaLinhagens = hlbappSession.Tabela_Precos
                        .Where(w => w.Empresa == empStr
                            && w.Tipo == "Faturamento")
                        .GroupBy(g => g.Produto)
                        .OrderBy(o => o.Key)
                        .ToList();

                    foreach (var itemL in listaLinhagens)
                    {
                        if (itemL.Key.Contains("Ovos"))
                        {
                            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                                .GetGroup("HLBAPPM-PedidoVendaVisualizaLinhagemOvos",
                                (System.Collections.ArrayList)Session["Direitos"]))
                            {
                                listaLin.Add(itemL.Key);
                            }
                        }
                        else
                            listaLin.Add(itemL.Key);
                    }
                }

                foreach (var itemL in listaLin)
                {
                    ddlLinhagens.Add(new SelectListItem { Text = itemL, Value = itemL, Selected = false });
                }
            }
            else
            {
                List<PRODUTO> listProdutoExport = apoloStatic.PRODUTO
                    .Where(w => (w.FxaProdCod == "7" || w.FxaProdCod == "8")
                        && (w.CategProdCod == "1" || w.CategProdCod == "4" || w.CategProdCod == "2") && w.ProdStat == "Ativado"
                        && apoloStatic.PRODUTO1.Any(p1 => w.ProdCodEstr == p1.ProdCodEstr
                        && (p1.USEREmpresaLinha == "BR" || p1.USEREmpresaLinha == "HN" || p1.USEREmpresaLinha == "LB")))
                    .OrderByDescending(o => o.FxaProdCod).ThenByDescending(t => t.ProdNomeAlt2)
                    .ToList();

                foreach (var itemL in listProdutoExport)
                {
                    ddlLinhagens.Add(new SelectListItem
                    {
                        Text = itemL.ProdNome,
                        Value = itemL.ProdCodEstr,
                        Selected = false
                    });
                }
            }

            Session["ListaLinhagens"] = ddlLinhagens;

            #endregion

            Session["ListaMotivoReposicao"] = CarregaListaMotivoReposicao();
            Session["ListaMotivoReposicao"] = AtualizaDDL(item.TipoReposicao,
                (List<SelectListItem>)Session["ListaMotivoReposicao"]);
            
            Session["dataEntregaInicial"] = item.DataEntregaInicial;
            Session["dataEntregaFinal"] = item.DataEntregaFinal;
            AtualizaLinhagemSelecionada(item.ProdCodEstr);
            Session["qtdeLiquida"] = item.QtdeLiquida;
            Session["qtdeReposicao"] = item.QtdeReposicao;
            if (item.PrecoPinto == null) item.PrecoPinto = item.PrecoUnitario;
            //if (pedVenda.Status.Equals("Documentação de Exportação"))
            if (Session["origemPVForm"] != "Form")
                Session["precoDE"] = item.PrecoUnitario;
            else
                Session["precoDE"] = Math.Round(Convert.ToDecimal(item.PrecoPinto),2);
            Session["valorTotalDE"] = item.ValorTotal;
            Session["percBonificacao"] = item.PercBonificacao;
            Session["sobra"] = (item.Sobra == 0 ? false : true);

            #region Verifica se o Período da Disponibilidade de Ovos está fechado para alteração

            Session["verificaFechamentoDO"] = false;

            var verificaFechamentoInicialDO = hlbappSession.LOG_DATA_FECH_LANC
                .Where(w => w.Location == "Disponibilidade de Ovos - Inicial")
                .OrderByDescending(o => o.DataHora)
                .FirstOrDefault();

            var verificaFechamentoFinalDO = hlbappSession.LOG_DATA_FECH_LANC
                .Where(w => w.Location == "Disponibilidade de Ovos - Final")
                .OrderByDescending(o => o.DataHora)
                .FirstOrDefault();

            List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
            var dataNascimento = CalculaDataNascimento(Session["selectedCustomer"].ToString(), listItensPVSession.FirstOrDefault().DataEntregaInicial,
                listItensPVSession.FirstOrDefault().ProdCodEstr);

            if (verificaFechamentoInicialDO != null && verificaFechamentoFinalDO != null)
            {
                if (dataNascimento >= verificaFechamentoInicialDO.Data_Fech_Lanc && dataNascimento <= verificaFechamentoFinalDO.Data_Fech_Lanc)
                {
                    Session["verificaFechamentoDO"] = true;
                    ViewBag.Erro = "Quantidades, Linhagem e Data de Entrega não pode ser alterado para essa data pois o período da disponibilidade de ovos está fechado!" +
                        " Verificar com o departamento de programação!";
                }
            }

            #endregion

            return View("AddItemPV");
        }

        public ActionResult DeleteItemPV(int sequencia)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            var listaItensSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            Item_Pedido_Venda ipv = listaItensSession.Where(w => w.Sequencia == sequencia).FirstOrDefault();

            if ((ipv.OrderNoCHIC != null && ipv.OrderNoCHIC != "")
                || (ipv.OrderNoCHICReposicao != null && ipv.OrderNoCHICReposicao != ""))
            {
                ViewBag.Erro = "Não é possível deletar item já importado para o CHIC! Caso não o queira mais, " +
                    "necessário realizar o cancelamento somente deste item!";
                if (Session["origemPVForm"].ToString().Equals("Form"))
                    return View("AlterPV");
                else
                    return View("ListItensPV");
            }

            List<Item_Pedido_Venda> listaIPVDelete = null;
            if (Session["ItensPVListDelete"] != null)
                listaIPVDelete = (List<Item_Pedido_Venda>)Session["ItensPVListDelete"];
            else
                listaIPVDelete = new List<Item_Pedido_Venda>();

            listaIPVDelete.Add(ipv);

            listaItensSession.RemoveAll(w => w.Sequencia == sequencia);

            Session["ItensPVList"] = listaItensSession;
            Session["ItensPVListDelete"] = listaIPVDelete;

            if (Session["origemPVForm"].ToString().Equals("Form"))
                return View("AlterPV");
            else
                return View("ListItensPV");
        }

        public ActionResult CopyItemPV(int sequenciaItemCopia)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
            List<Item_Pedido_Venda> listItensPVMVD = (List<Item_Pedido_Venda>)Session["ItensPVListMVD"];

            Item_Pedido_Venda ipvCopiar = listItensPV.Where(w => w.Sequencia == sequenciaItemCopia).FirstOrDefault();

            Item_Pedido_Venda item = null;

            if (Session["origemItemPV"].ToString().Equals("Inclusão"))
            {
                item = new Item_Pedido_Venda();
                int sequencia = 0;
                if (listItensPV.Count > 0)
                    sequencia = listItensPV.Max(m => m.Sequencia);

                item.Sequencia = sequencia + 1;
                item.Vacina = "Pedido";
            }
            else
            {
                item = ((List<Item_Pedido_Venda>)Session["ItensPVList"])
                    .Where(w => w.Sequencia == sequenciaItemCopia)
                    .FirstOrDefault();

                listItensPVMVD.Add(item);
            }

            item.DataEntregaInicial = ipvCopiar.DataEntregaInicial;
            item.DataEntregaFinal = ipvCopiar.DataEntregaFinal;
            item.ProdCodEstr = ipvCopiar.ProdCodEstr;
            item.QtdeLiquida = ipvCopiar.QtdeLiquida;

            item.QtdeReposicao = ipvCopiar.QtdeReposicao;
            item.Alterado = 1;
            if (item.OrderNoCHIC == null)
                item.OrderNoCHIC = "";
            if (item.OrderNoCHICReposicao == null)
                item.OrderNoCHICReposicao = "";

            item.PrecoUnitario = ipvCopiar.PrecoUnitario;
            item.ValorTotal = ipvCopiar.ValorTotal;

            item.PercBonificacao = ipvCopiar.PercBonificacao;

            bool viewAll = (MvcAppHyLinedoBrasil.Controllers.AccountController
                        .GetGroup("HLBAPPM-PedidoVendaVisualizarTodosPedidos",
                        (System.Collections.ArrayList)Session["Direitos"]));

            if (!MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"])
                || viewAll)
            {
                //CalculaValoresPV();
                CalculaValoresVacinasServicosPV();
            }

            item.QtdeBonificada = Convert.ToInt32((item.PercBonificacao / 100.00m)
                * (item.QtdeLiquida + item.QtdeReposicao));

            if (Session["origemItemPV"].ToString().Equals("Inclusão"))
            {
                listItensPV.Add(item);
            }

            Session["ItensPVList"] = listItensPV;
            Session["ItensPVListMVD"] = listItensPVMVD;

            if (Session["origemPVForm"].ToString().Equals("Form"))
            {
                ViewBag.Mensagem = "Item " + sequenciaItemCopia.ToString() + " duplicado!";

                return View("ValoresAtualizados");
            }
            else
                return View("ListItensPV");
        }

        #region Step 02.01 - Flocks

        public ActionResult ListLotesPV(int sequencia)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");
            Session["idItemSelecionado"] = sequencia;

            var listaLotes = (List<MvcAppHylinedoBrasilMobile.Models.Lote_Item_Pedido_Venda>)Session["ListaLotesItemPV"];
            Session["ListaLotesItemViewPV"] = listaLotes.Where(w => w.SeqItemPV == sequencia).ToList();

            return View();
        }

        public ActionResult ListLotesPVReturn()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            return View("ListLotesPV");
        }

        public ActionResult AddLote()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["dataProducaoPV"] = DateTime.Today.ToShortDateString();
            Session["loteCompletoSelecionado"] = "";
            Session["qtdeLotePV"] = 0;
            Session["idadeLotePV"] = 0;
            Session["pesoOvoLotePV"] = 0;

            CarregaListaNucleos();

            return View();
        }

        public ActionResult SaveLotePV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            if (model["MyId"] != null)
            {
                var listaLotes = (List<MvcAppHylinedoBrasilMobile.Models.Lote_Item_Pedido_Venda>)Session["ListaLotesItemPV"];
                var listaLotesView = (List<MvcAppHylinedoBrasilMobile.Models.Lote_Item_Pedido_Venda>)Session["ListaLotesItemViewPV"];

                Lote_Item_Pedido_Venda lote = new Lote_Item_Pedido_Venda();

                if (model["MyId"] == "")
                {
                    ViewBag.Erro = "Erro ao adicionar lote: É necessário selecionar um Núcleo!";
                    return View("ListLotesPV");
                }
                else
                    lote.Nucleo = model["MyId"];

                if (model["Lote"] == "")
                {
                    ViewBag.Erro = "Erro ao adicionar lote: É necessário selecionar um Lote!";
                    return View("ListLotesPV");
                }
                else
                    lote.Lote = model["Lote"];

                //if (model["Galpao"] == "")
                //{
                //    ViewBag.Erro = "Erro ao adicionar lote: É necessário selecionar um Galpão!";
                //    return View("ListLotesPV");
                //}
                //else
                //    lote.Galpao = model["Galpao"];

                if (model["qtdeLotePV"] == "")
                {
                    ViewBag.Erro = "Erro ao adicionar lote: É necessário inserir uma Quantidade!";
                    return View("ListLotesPV");
                }
                else
                {
                    if (Convert.ToInt32(model["qtdeLotePV"]) == 0)
                    {
                        ViewBag.Erro = "Erro ao adicionar lote: A Quantidade não pode ser zero!";
                        return View("ListLotesPV");
                    }
                    else
                        lote.Qtde = Convert.ToInt32(model["qtdeLotePV"]);
                }

                lote.IdadeLote = Convert.ToInt32(model["idadeLotePV"]);
                lote.PesoOvo = Convert.ToInt32(model["pesoOvoLotePV"]);

                lote.DataProducao = Convert.ToDateTime(model["dataProducaoPV"]);

                int sequencia = 0;
                if (listaLotes.Count > 0)
                    sequencia = Convert.ToInt32(listaLotes.Max(m => m.Sequencia));

                lote.Sequencia = sequencia + 1;
                int sequenciaIPV = Convert.ToInt32(Session["idItemSelecionado"].ToString());
                lote.SeqItemPV = sequenciaIPV;
                lote.Galpao = "";

                int existe = 0;
                existe = listaLotesView.Where(w => w.Nucleo == lote.Nucleo
                    && w.Lote == lote.Lote && w.DataProducao == lote.DataProducao).Count();

                if (existe > 0)
                {
                    ViewBag.Erro = "Erro ao adicionar lote: Já existe o Núcleo " 
                        + lote.Nucleo + " / Lote " + lote.Lote + " / Data de Produção " + lote.DataProducao.ToString()
                        + " nesse item! Não pode repetir!";
                    return View("ListLotesPV");
                }

                var listaItensSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                Item_Pedido_Venda ipv = listaItensSession.Where(w => w.Sequencia == sequenciaIPV).FirstOrDefault();
                ipv.Alterado = 1;

                int qtdTotalAdicionadoLote = Convert.ToInt32(listaLotesView.Sum(s => s.Qtde) + lote.Qtde);
                if (qtdTotalAdicionadoLote > ipv.QtdeLiquida)
                {
                    ViewBag.Erro = "Erro ao adicionar lote: A quantidade do Item foi excedida! (Qtde. Item: "
                        + ipv.QtdeLiquida.ToString() + " / Qtde. Total Lotes: " + qtdTotalAdicionadoLote + ")!";
                    return View("ListLotesPV");
                }

                #region Get Age and Egg Weigth by FLIP

                if (Session["loteCompletoSelecionado"] != null)
                {
                    string loteCompleto = Session["loteCompletoSelecionado"].ToString();
                    DateTime dataProducao = Convert.ToDateTime(lote.DataProducao);

                    MvcAppHylinedoBrasilMobile.Models.FLIPDataSetMobileTableAdapters.FLOCK_DATAMobileTableAdapter fdTA = 
                        new Models.FLIPDataSetMobileTableAdapters.FLOCK_DATAMobileTableAdapter();
                    FLIPDataSetMobile.FLOCK_DATAMobileDataTable fdDT = new FLIPDataSetMobile.FLOCK_DATAMobileDataTable();

                    fdTA.FillByFlockAndDate(fdDT, loteCompleto, dataProducao);

                    if (fdDT.Count > 0)
                    {
                        lote.IdadeLote = Convert.ToInt32(fdDT[0].AGE);

                        FLIPDataSetMobile.FLOCK_DATAMobileDataTable fdDTPeso = new FLIPDataSetMobile.FLOCK_DATAMobileDataTable();
                        fdTA.FillByFlockAndDateWithEggWt(fdDTPeso, loteCompleto, dataProducao);

                        if (fdDTPeso.Count > 0)
                        {
                            lote.PesoOvo = fdDTPeso[0].EGG_WT;
                        }
                    }
                }

                #endregion

                listaLotes.Add(lote);
                listaLotesView.Add(lote);

                Session["ListaLotesItemPV"] = listaLotes;
                Session["ListaLotesItemViewPV"] = listaLotesView;
                Session["ItensPVList"] = listaItensSession;
            }

            return View("ListLotesPV");
        }

        public ActionResult DeleteLotePV(int sequencia)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            var listaLotes = (List<Lote_Item_Pedido_Venda>)Session["ListaLotesItemPV"];
            var listaLotesView = (List<Lote_Item_Pedido_Venda>)Session["ListaLotesItemViewPV"];

            Lote_Item_Pedido_Venda lote = listaLotesView
                .Where(w => w.Sequencia == sequencia).FirstOrDefault();

            List<Lote_Item_Pedido_Venda> listaDelete = null;
            if (Session["ItensLoteListDelete"] != null)
                listaDelete = (List<Lote_Item_Pedido_Venda>)Session["ItensLoteListDelete"];
            else
                listaDelete = new List<Lote_Item_Pedido_Venda>();

            listaDelete.Add(lote);

            int sequenciaIPV = Convert.ToInt32(Session["idItemSelecionado"].ToString());
            var listaItensSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
            Item_Pedido_Venda ipv = listaItensSession.Where(w => w.Sequencia == sequenciaIPV).FirstOrDefault();
            ipv.Alterado = 1;

            Session["ItensPVList"] = listaItensSession;

            Session["ItensLoteListDelete"] = listaDelete;

            listaLotesView.RemoveAll(w => w.Sequencia == sequencia);
            listaLotes.RemoveAll(w => w.Sequencia == sequencia);

            Session["ListaLotesItemPV"] = listaLotes;
            Session["ListaLotesItemViewPV"] = listaLotesView;

            return View("ListLotesPV");
        }

        #endregion

        #endregion

        #region Step 03 - Vaccines

        public ActionResult VerificaVacina()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            return View();
        }

        public ActionResult ListVacinasPV()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            int qtdItens = ((List<Item_Pedido_Venda>)Session["ItensPVList"]).Count;

            if (qtdItens == 0)
            {
                ViewBag.Erro = "É necessário incluir pelo meno uma Linhagem para seguir para o próximo passo!";
                return View("ListItensPV");
            }

            List<SelectListItem> ddlVacinas = CarregaVacinasPrimarias();

            Session["ListaVacinasPrimarias"] = ddlVacinas.OrderBy(o => o.Text).ToList();

            if (Session["vacinaPrimariaPV"] != null)
                AtualizaVacinaSelecionada(Session["vacinaPrimariaPV"].ToString());

            Session["vacinaPrimariaItemPV"] = Session["vacinaPrimariaPV"].ToString();
            Session["VacinasSecundariaItemPVListExibe"] = Session["VacinasSecundariaPVList"];

            return View("ListVacinas");
        }

        public ActionResult ListSecVacinas(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            if (model["Text"] != null)
            {
                if (!Convert.ToBoolean(Session["visualizaPV"]))
                {
                    Session["vacinaPrimariaPV"] = model["Text"];
                    //var listaVacSecSession = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];
                    //Session["VacinasSecundariaItemPVListExibe"] = listaVacSecSession;
                }

                Session["vacinaPrimariaItemPV"] = model["Text"];
                AtualizaVacinaSelecionada(Session["vacinaPrimariaItemPV"].ToString());
            }

            return View();
        }

        public ActionResult ListVacinasPVReturn()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            return View("ListVacinas");
        }

        public ActionResult AddVacinaSecundariaPV()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVListExibe"];

            string vacinaPrimaria = Session["vacinaPrimariaItemPV"].ToString();

            List<SelectListItem> ddlVacSec = new List<SelectListItem>();

            for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
            {
                string empStr = Session["empresa"].ToString().Substring(i, 2);

                var listaSecundaria = apoloStatic.PRODUTO
                    .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                        && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                            && n.GrpProdCod == "041" && n.SubGrpProdCod == "042")
                        && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(g => g.ProdCodEstr == w.ProdCodEstr
                            && g.GrpProdCod == "042" && g.SubGrpProdCod == empStr)
                            && a.ProdCodEstr == vacinaPrimaria))
                    .ToList();

                foreach (var item in listaSecundaria)
                {
                    if (listaVacSec.Where(w => w.ProdCodEstr == item.ProdCodEstr).Count() == 0)
                    {
                        var listaFilhosVacSec = apoloStatic.PRODUTO
                            .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                                && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                                    && n.GrpProdCod == "041" && n.SubGrpProdCod == "043")
                                    && a.ProdCodEstr == item.ProdCodEstr))
                            .ToList();

                        var listaPaiVacSec = apoloStatic.PRODUTO
                            .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.ProdCodEstr == w.ProdCodEstr
                                && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                                    && n.GrpProdCod == "041" && n.SubGrpProdCod == "043")
                                    && a.FicTecProdCodEstr == item.ProdCodEstr))
                            .ToList();

                        int naoPode = 0;

                        if (listaFilhosVacSec.Count > 0)
                        {
                            foreach (var itemFilho in listaFilhosVacSec)
                            {
                                if (listaVacSec.Where(w => w.ProdCodEstr == itemFilho.ProdCodEstr).Count() > 0)
                                {
                                    naoPode = 1;
                                }
                            }
                        }

                        if (listaPaiVacSec.Count > 0)
                        {
                            foreach (var itemPai in listaPaiVacSec)
                            {
                                if (listaVacSec.Where(w => w.ProdCodEstr == itemPai.ProdCodEstr).Count() > 0)
                                {
                                    naoPode = 1;
                                }
                            }
                        }

                        if (naoPode == 0)
                        {
                            if (ddlVacSec.Where(w => w.Value == item.ProdCodEstr).Count() == 0)
                            {
                                ddlVacSec.Add(new SelectListItem
                                {
                                    Text = item.ProdNomeAlt1,
                                    Value = item.ProdCodEstr,
                                    Selected = false
                                });
                            }
                        }
                    }
                }
            }

            Session["ListaVacinasSecundarias"] = ddlVacSec.OrderBy(o => o.Text).ToList();

            return View("AddVacinaSecundariaPV");
            //}
        }

        public ActionResult SaveVacSecPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVListExibe"];

            string prodcodestr = model["Text"];

            if (listaVacSec.Where(w => w.ProdCodEstr == prodcodestr).Count() > 0)
            {
                ViewBag.Erro = "Já existe essa Vacina adicionada!";
                return View("AddVacinaSecundariaPV");
            }

            int sequencia = 0;
            if (listaVacSec.Count > 0)
                sequencia = listaVacSec.Max(m => m.Sequencia);

            Vacinas_Secundaria_Pedido_Venda vacSec = new Vacinas_Secundaria_Pedido_Venda();

            vacSec.Sequencia = sequencia + 1;
            vacSec.ProdCodEstr = prodcodestr;

            if (!Convert.ToBoolean(Session["visualizaPV"]))
            {
                vacSec.SeqItemPedVenda = 0;
            }
            else
            {
                int seqItemPV = Convert.ToInt32(Session["idItemSelecionado"]);
                vacSec.SeqItemPedVenda = seqItemPV;
            }

            listaVacSec.Add(vacSec);

            Session["VacinasSecundariaItemPVListExibe"] = listaVacSec;

            if (!Convert.ToBoolean(Session["visualizaPV"]))
            {
                var listaVacSecSession = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVListExibe"];
                Session["VacinasSecundariaPVList"] = listaVacSecSession;
            }

            return View("ListSecVacinas");
        }

        public ActionResult DeleteVacSecPV(int sequencia)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            var listaVacSec = DeleteVacinasSession(sequencia);

            if (listaVacSec.Count > 0)
                return View("ListSecVacinas");
            else
                return View("ListVacinas");
        }

        public List<Vacinas_Secundaria_Pedido_Venda> DeleteVacinasSession(int sequencia)
        {
            var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVListExibe"];

            List<Vacinas_Secundaria_Pedido_Venda> listaDelete = null;
            if (Session["ItensSecVacListDelete"] != null)
                listaDelete = (List<Vacinas_Secundaria_Pedido_Venda>)Session["ItensSecVacListDelete"];
            else
                listaDelete = new List<Vacinas_Secundaria_Pedido_Venda>();

            Vacinas_Secundaria_Pedido_Venda ipv = listaVacSec
                .Where(w => w.Sequencia == sequencia).FirstOrDefault();
            if ((Convert.ToBoolean(Session["vacinasItens"]) && ipv.SeqItemPedVenda != 0)
                || (!Convert.ToBoolean(Session["vacinasItens"]) && ipv.SeqItemPedVenda == 0))
                listaDelete.Add(ipv);

            listaVacSec.RemoveAll(w => w.Sequencia == sequencia);

            Session["VacinasSecundariaItemPVListExibe"] = listaVacSec;
            Session["ItensSecVacListDelete"] = listaDelete;

            return listaVacSec;
        }

        #endregion

        #region Step 04 - Other Informations

        public ActionResult OtherInformations(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            CarregaTipoAlteracao();

            if (model["Text"] != null)
            {
                Session["vacinaPrimariaPV"] = model["Text"];
                AtualizaVacinaSelecionada(model["Text"]);
            }

            if (model["origem"] != null)
                if (model["origem"].Equals("Não"))
                {
                    Session["vacinaPrimariaPV"] = "(Sem Vacinação)";
                    Session["VacinasSecundariaPVList"] = new List<Vacinas_Secundaria_Pedido_Venda>();
                }

            if (Session["condicaoPagamentoPV"] != null)
                AtualizaCondPagSelecionado(Session["condicaoPagamentoPV"].ToString());

            //CHICMobileDataSet.salesmanDataTable salesmanDT = new CHICMobileDataSet.salesmanDataTable();
            //salesmanTableAdapter salesmanTA = new salesmanTableAdapter();

            string login = "";
            if (Session["login"].ToString().Contains("@"))
                login = Session["login"].ToString();

            if (login != "")
            {
                string empresa = Session["empresa"].ToString();

                bdApoloEntities apoloSession = new bdApoloEntities();
                var listaVendedores = apoloSession.VU_Vendedores.Where(w => w.Login == login).ToList();

                //salesmanTA.FillByEmailAndEmpresa(salesmanDT, login, login, "", "");

                List<SelectListItem> ddlSalesman = new List<SelectListItem>();

                //foreach (var item in salesmanDT.ToList())
                foreach (var item in listaVendedores)
                {
                    // if (salesmanDT.ToList().IndexOf(item) == 0)
                    if (listaVendedores.ToList().IndexOf(item) == 0)
                        if ((Session["vendedorPV"] == null) || (Session["vendedorPV"].ToString() == ""))
                            Session["vendedorPV"] = item.VendCod;

                    ddlSalesman.Add(new SelectListItem
                    {
                        //Text = item.sl_code.Trim() + " - " + item.salesman.Trim(),
                        //Value = item.sl_code.Trim(),
                        Text = item.VendCod + " - " + item.VendNome,
                        Value = item.VendCod,
                        Selected = false
                    });
                }

                Session["ListaVendedores"] = ddlSalesman;
            }
            else
            {
                List<SelectListItem> listaVend = new List<SelectListItem>();

                for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
                {
                    string empStr = Session["empresa"].ToString().Substring(i, 2);
                    List<SelectListItem> retorno = CarregaVendedores(empStr, false);
                    foreach (var item in retorno)
                    {
                        listaVend.Add(item);
                    }
                }

                Session["ListaVendedores"] = listaVend;
            }

            if (Session["vendedorPV"] != null)
                AtualizaVendedorSelecionado(Session["vendedorPV"].ToString());

            return View("OtherInformations");
        }

        public ActionResult OtherInformationsReturn()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            string codigoCliente = Session["selectedCustomer"].ToString();

            ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == codigoCliente)
                    .FirstOrDefault();
            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();

            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"])
                && !cidade.PaisSigla.Equals("BRA"))
            {
                return View("VerificaVacina");
            }
            else
            {
                CarregaTipoAlteracao();

                if (Session["condicaoPagamentoPV"] != null)
                    AtualizaCondPagSelecionado(Session["condicaoPagamentoPV"].ToString());

                //CHICMobileDataSet.salesmanDataTable salesmanDT = new CHICMobileDataSet.salesmanDataTable();
                //salesmanTableAdapter salesmanTA = new salesmanTableAdapter();

                string login = "";
                if (Session["login"].ToString().Contains("@"))
                    login = Session["login"].ToString();

                if (login != "")
                {
                    string empresa = Session["empresa"].ToString();

                    bdApoloEntities apoloSession = new bdApoloEntities();
                    var listaVendedores = apoloSession.VU_Vendedores.Where(w => w.Login == login).ToList();

                    //salesmanTA.FillByEmailAndEmpresa(salesmanDT, login, login, "", "");

                    List<SelectListItem> ddlSalesman = new List<SelectListItem>();

                    //foreach (var item in salesmanDT.ToList())
                    foreach (var item in listaVendedores)
                    {
                        // if (salesmanDT.ToList().IndexOf(item) == 0)
                        if (listaVendedores.ToList().IndexOf(item) == 0)
                            if ((Session["vendedorPV"] == null) || (Session["vendedorPV"].ToString() == ""))
                                Session["vendedorPV"] = item.VendCod;

                        ddlSalesman.Add(new SelectListItem
                        {
                            //Text = item.sl_code.Trim() + " - " + item.salesman.Trim(),
                            //Value = item.sl_code.Trim(),
                            Text = item.VendCod + " - " + item.VendNome,
                            Value = item.VendCod,
                            Selected = false
                        });
                    }

                    Session["ListaVendedores"] = ddlSalesman;
                }
                else
                {
                    List<SelectListItem> listaVend = new List<SelectListItem>();

                    for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
                    {
                        string empStr = Session["empresa"].ToString().Substring(i, 2);
                        List<SelectListItem> retorno = CarregaVendedores(empStr, false);
                        foreach (var item in retorno)
                        {
                            listaVend.Add(item);
                        }
                    }

                    Session["ListaVendedores"] = listaVend;
                }

                if (Session["vendedorPV"] != null)
                    AtualizaVendedorSelecionado(Session["vendedorPV"].ToString());

                return View("OtherInformations");
            }
        }

        #endregion

        #region Step 05 - Final Check PV

        [ValidateInput(false)]
        public ActionResult FinalizaPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["vacinasItens"] = false;

            if (model["OtherInformationsNext"] != null)
            {
                if (model["filtroCondPag"] != null)
                {
                    string filtroCondPag = model["filtroCondPag"];
                    if (Session["filtroCondPagPV"].ToString() != filtroCondPag)
                    {
                        Session["filtroCondPagPV"] = filtroCondPag;

                        return View("OtherInformations");
                    }
                }

                decimal qtdTIV = 0;
                if (model["qtdTratamentoInfravermelho"] != null)
                    if (model["qtdTratamentoInfravermelho"].ToString() != "")
                        qtdTIV = Convert.ToDecimal(model["qtdTratamentoInfravermelho"].ToString());

                bool tratIV = Convert.ToBoolean(model["tratamentoInfravermelho"].ToString().Replace("false,", ""));
                Session["tratamentoInfravermelhoPV"] = tratIV;
                Session["qtdTratamentoInfravermelhoPV"] = qtdTIV;
                if ((tratIV) && (qtdTIV == 0))
                {
                    ViewBag.Erro = "Como a opção 'Tratamento Infravermelho' está marcada, é necessário informar uma Quantidade";
                    return View("OtherInformations");
                }

                if (model["TipoAlteracao"] != null)
                {
                    Session["tipoAlteracaoPV"] = model["TipoAlteracao"];
                    AtualizaDDL(Session["tipoAlteracaoPV"].ToString(),
                        (List<SelectListItem>)Session["ListaTipoAlteracaoPV"]);
                }

                if (model["motivo"] != null)
                {
                    if (Session["origemPV"].ToString().Equals("Alteração")
                        && (model["motivo"].ToString() == ""))
                    {
                        ViewBag.Erro = "Toda alteração exige um motivo! Por favor, insira o mesmo!";
                        return View("OtherInformations");
                    }
                    else
                    {
                        Session["motivoAlteracaoPV"] = model["motivo"];
                    }
                }

                if (model["observacao"] != null)
                    Session["observacaoPV"] = model["observacao"];

                bool ovosBrasil = Convert.ToBoolean(model["ovosBrasil"].ToString().Replace("false,", ""));
                Session["ovosBrasilPV"] = ovosBrasil;

                Session["condicaoPagamentoPV"] = model["CondPag"];
                AtualizaCondPagSelecionado(model["CondPag"]);
                if (model["Vendedor"] != null)
                {
                    Session["vendedorPV"] = model["Vendedor"];
                    AtualizaVendedorSelecionado(model["Vendedor"]);
                }
            }

            if (!MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"]))
            {
                //CalculaValoresPV();
                CalculaValoresVacinasServicosPV();
            }

            if (model["origem"] != null)
                if (model["origem"].Equals("Não"))
                {
                    Session["vacinaPrimariaPV"] = "(Sem Vacinação)";
                    Session["VacinasSecundariaPVList"] = new List<Vacinas_Secundaria_Pedido_Venda>();
                }

            return View("FinalizaPV");
        }

        #endregion

        #endregion

        #region Event Methods

        #region Import CHIC

        public string ImportPVWebToCHIC(HLBAPPEntities hlbappSession, Pedido_Venda pedVenda,
            List<Item_Pedido_Venda> listItensPVSession, bool manterVolDisponivel)
        {
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            string retonro = "";
            try
            {
                #region Pedido Normal

                #region Criação de Variáveis

                string log = "";

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                //var listaData = listItensPVSession.Where(w => w.Importar == 1)
                //    .GroupBy(g => g.DataEntregaInicial).ToList();

                var listaData = listItensPVSession.Where(w => w.OrderNoCHIC != "Cancelado")
                    .GroupBy(g => g.DataEntregaInicial).ToList();

                string empresa = "";
                string copiaPara = "";
                string nomeVendedor = "";
                string emailVendedor = "";
                string corpoEmail = "";
                string corpoOperacao = "";
                string operacao = "";
                DateTime orderDate = pedVenda.DataPedido;
                int id = pedVenda.ID;

                string custoNo = "";
                string salesrep = "";
                string delivery = "";
                int itemCod = 0;
                string orderNO = "";
                int booked_id = 0;
                string item_ord = "";
                string creatdby = Session["login"].ToString();
                DateTime datecrtd = DateTime.Now;
                string infoIncubatorio = "";
                string codEstabelecimento = "";

                bookedMobileTableAdapter bookedM = new bookedMobileTableAdapter();
                custitemTableAdapter custitem = new custitemTableAdapter();
                tablesMobileTableAdapter tables = new tablesMobileTableAdapter();
                CHICMobileDataSet.tablesMobileDataTable tablesDT = new CHICMobileDataSet.tablesMobileDataTable();
                int_commMTableAdapter int_commM = new int_commMTableAdapter();
                CHICMobileDataSet.int_commMDataTable int_commDT = new CHICMobileDataSet.int_commMDataTable();
                itemsMobileTableAdapter items = new itemsMobileTableAdapter();
                CHICMobileDataSet.itemsMobileDataTable itemsDT = new CHICMobileDataSet.itemsMobileDataTable();

                #endregion

                #region Dados do Pedido

                string hatchLoc = "CH";
                string transportadora = "Transema";
                if (pedVenda.Empresa.Equals("PL"))
                {
                    hatchLoc = "NM";
                    //transportadora = "Outras";
                    transportadora = "Planalto";
                }
                else if (pedVenda.Empresa.Equals("HN"))
                {
                    //hatchLoc = "AJ";
                    //transportadora = "Outras";
                    transportadora = "H&N";
                }

                DateTime cal_date = DateTime.Now;

                custoNo = pedVenda.CodigoCliente;
                delivery = pedVenda.CondicaoPagamento;

                int tamanho = pedVenda.Observacoes.Length;

                string com1 = "";
                string com2 = "";
                string com3 = "";
                if (tamanho <= 80)
                {
                    com1 = pedVenda.Observacoes.Substring(0, tamanho);
                }
                if ((tamanho > 80) && (tamanho <= 160))
                {
                    com1 = pedVenda.Observacoes.Substring(0, 80);
                    com2 = pedVenda.Observacoes.Substring(80, tamanho - 80);
                }
                if ((tamanho > 160) && (tamanho <= 240))
                {
                    com1 = pedVenda.Observacoes.Substring(0, 80);
                    com2 = pedVenda.Observacoes.Substring(80, tamanho - 80);
                    com3 = pedVenda.Observacoes.Substring(160, tamanho - 160);
                }

                salesrep = pedVenda.Vendedor;
                if (pedVenda.Vendedor.Length == 7) salesrep = pedVenda.Vendedor.Substring(1, 6);

                string tipoColabOvosBrasil = "";
                ENTIDADE1 entidade1 = apoloStatic.ENTIDADE1
                                    .Where(e1 => e1.EntCod == custoNo)
                                    .First();

                ENTIDADE entidade = apoloStatic.ENTIDADE
                                    .Where(e1 => e1.EntCod == custoNo)
                                    .First();

                if (entidade1.USERCodigoEstabelecimento != null) codEstabelecimento = entidade1.USERCodigoEstabelecimento;

                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(w => w.CidCod == entidade.CidCod).FirstOrDefault();
                UNID_FEDERACAO uf = apoloStatic.UNID_FEDERACAO
                    .Where(w => w.UfSigla == cidade.UfSigla && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();

                #region Comentada a rotina dos Ovos Brasil, pois não utiliza mais

                //if (entidade1.USERTipoColabOvosBRasil != null)
                //{
                //    tipoColabOvosBrasil = entidade1.USERTipoColabOvosBRasil;
                //}

                #endregion

                //itemCod = 0;

                salesmanTableAdapter salesTA = new salesmanTableAdapter();
                CHICMobileDataSet.salesmanDataTable salesDT = new CHICMobileDataSet.salesmanDataTable();
                salesTA.FillByCode(salesDT, salesrep);

                string empresaApolo = "";
                if (salesDT[0].inv_comp.Trim().Equals("BR"))
                {
                    empresa = "[HLB]";
                    copiaPara = "confirmacoes@hyline.com.br";
                    empresaApolo = "5";
                }
                else if (salesDT[0].inv_comp.Trim().Equals("LB"))
                {
                    empresa = "[LTZ]";
                    copiaPara = "confirmacoes@ltz.com.br";
                    empresaApolo = "7";
                }
                else if (salesDT[0].inv_comp.Trim().Equals("HN"))
                {
                    empresa = "[H&N]";
                    copiaPara = "confirmacoes@hnavicultura.com.br";
                    empresaApolo = "14";
                }
                else if (salesDT[0].inv_comp.Trim().Equals("PL"))
                {
                    empresa = "[PL]";
                    copiaPara = "programacao@planaltopostura.com.br";
                    empresaApolo = "20";
                }

                nomeVendedor = salesDT[0].salesman.Trim();
                emailVendedor = salesDT[0].email.Trim().ToString();

                #region Envio de E-mails p/ Técnicos

                if (cidade != null)
                {
                    var listaTecnicos = apolo2Static.USUARIO
                        .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == cidade.UfSigla)
                                && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                    && e.USERCodigoCHIC == pedVenda.Empresa)))
                        .ToList();

                    foreach (var item in listaTecnicos)
                    {
                        if (copiaPara == "")
                            copiaPara = item.UsuEmail;
                        else
                            copiaPara = copiaPara + ";" + item.UsuEmail;
                    }
                }

                #endregion

                #endregion

                #region Dados da Vacina Primária para verificar se é Vaxxitek por causa do Item

                string vacPrim = Session["vacinaPrimariaPV"].ToString();

                Vacinas_Primaria_Pedido_Venda vacinaPrimariaWEB = hlbappSession.Vacinas_Primaria_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                PRODUTO vacPrimaria = apoloStatic.PRODUTO
                    .Where(w => w.ProdCodEstr == vacPrim).FirstOrDefault();

                PRODUTO1 vacPrimaria1 = null;

                DateTime menorDataInicial = listItensPVSession.Min(m => m.DataEntregaInicial);
                DateTime maiorDataFinal = listItensPVSession.Max(m => m.DataEntregaFinal);

                decimal valorVacinaPrimaria = 0;
                if (vacPrimaria != null)
                {
                    valorVacinaPrimaria = CalculaValoresVacinasServicosNovoPV(vacPrimaria.ProdNomeAlt2,
                        menorDataInicial, maiorDataFinal, pedVenda.Empresa, "Vacina", "");
                    vacPrimaria1 = apoloStatic.PRODUTO1
                        .Where(w => w.ProdCodEstr == vacPrimaria.ProdCodEstr).FirstOrDefault();
                }

                decimal valoServico = CalculaValoresVacinasServicosNovoPV("Tratamento Infravermelho",
                    menorDataInicial, maiorDataFinal, pedVenda.Empresa, "Serviço", "");

                bool temVaxxitek = false;
                if (vacPrimaria != null)
                    if (vacPrimaria.ProdNomeAlt1.Contains("VAXXITEK"))
                        temVaxxitek = true;

                #endregion

                #region Insere LOG - Pedido_Venda

                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                logPV.DataPedido = pedVenda.DataPedido;
                logPV.Usuario = Session["usuario"].ToString();
                logPV.DataHora = DateTime.Now;
                logPV.CodigoCliente = pedVenda.CodigoCliente;
                logPV.OvosBrasil = pedVenda.OvosBrasil;
                logPV.CondicaoPagamento = pedVenda.CondicaoPagamento;
                logPV.Observacoes = pedVenda.Observacoes;
                logPV.Vendedor = pedVenda.Vendedor;
                logPV.Status = pedVenda.Status;
                logPV.Operacao = "Importado p/ CHIC";
                logPV.IDPedidoVenda = pedVenda.ID;
                logPV.Projecao = pedVenda.Projecao;

                hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                hlbppLOG.SaveChanges();

                #endregion

                foreach (var data in listaData)
                {
                    #region Criação de Variáveis Itens

                    //var listItensPV = listItensPVSession
                    //    .Where(w => w.DataEntregaInicial == data.Key && w.Importar == 1)
                    //    .ToList();

                    var listItensPV = listItensPVSession
                        .Where(w => w.DataEntregaInicial == data.Key && w.OrderNoCHIC != "Cancelado")
                        .ToList();

                    //var listItensPV2 = listItensPVSession
                    //    .Where(w => w.DataEntregaInicial == data.Key && w.Importar == 0)
                    //    .ToList();

                    string itemno = "";
                    itemsDT = new CHICMobileDataSet.itemsMobileDataTable();
                    int quantity = 0;
                    decimal price = 0.0000m;
                    DateTime dataFinal = DateTime.Now;
                    string intComm = "";

                    int qtdLiquida = listItensPVSession.Sum(s => s.QtdeLiquida);
                    int qtdBonificada = Convert.ToInt32(listItensPVSession.Sum(s => s.QtdeBonificada));
                    int qtdReposicao = Convert.ToInt32(listItensPVSession.Sum(s => s.QtdeReposicao));
                    int qtdReposicaoTipoReposicao = 
                        Convert.ToInt32(listItensPVSession.Where(w => w.TipoReposicao == "Acerto Comercial")
                        .Sum(s => s.QtdeReposicao));

                    bool edicao = false;
                    bool edicaoItem = false;
                    string edicaoText = "";
                    string edicaoItemText = "";

                    CHICMobileDataSet.ordersMobileDataTable ordersDT = new CHICMobileDataSet.ordersMobileDataTable();
                    ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();
                    CHICMobileDataSet.bookedNavDataTable bookedDT = new CHICMobileDataSet.bookedNavDataTable();

                    #endregion

                    if (qtdLiquida > 0)
                    {
                        #region Verifica se Existe Pedido / Item

                        tables.FillByName(tablesDT, "booked");

                        string ordernoCHICExiste = "";
                        //if (item.OrderNoCHIC != null)
                        //ordernoCHICExiste = item.OrderNoCHIC;
                        if (listItensPV.Max(m => m.OrderNoCHIC) != "")
                            ordernoCHICExiste = listItensPV.Max(m => m.OrderNoCHIC);

                        if (ordernoCHICExiste == null)
                            ordernoCHICExiste = "";

                        orderTA.FillByOrderNo(ordersDT, ordernoCHICExiste);

                        bookedNavTableAdapter bookedTA = new bookedNavTableAdapter();

                        if (ordersDT.Count == 0)
                        {
                            orderNO = bookedTA.ReturnOrderNoByCustAndCalDate(cal_date, pedVenda.CodigoCliente,
                                salesDT[0].inv_comp);

                            if ((orderNO == "") || (orderNO == null))
                            {
                                //orderNO = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                edicaoText = "Inclusão";
                            }
                            else
                            {
                                edicao = true;
                                bookedTA.FillByOrderNoAndItem(bookedDT, orderNO, itemno);
                                if (bookedDT.Count > 0)
                                {
                                    //booked_id = Convert.ToInt32(bookedDT[0].book_id);
                                    edicaoItem = true;
                                    edicaoItemText = "Alteração";
                                }
                                else
                                {
                                    //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                    edicaoItemText = "Inclusão";
                                }
                                edicaoText = "Alteração";
                            }
                        }
                        else
                        {
                            edicao = true;
                            edicaoItem = true;
                            orderNO = ordersDT[0].orderno.Trim();
                            bookedTA.FillByOrderNoAndItem(bookedDT, orderNO, itemno);
                            //booked_id = Convert.ToInt32(bookedDT[0].book_id);
                            edicaoText = "Alteração";
                            edicaoItemText = "Alteração";
                            if (uf.UfRegGeog == "Norte" || uf.UfRegGeog == "Nordeste")
                                cal_date = listItensPVSession.Max(s => s.DataEntregaInicial).AddDays(-23);
                            else
                                cal_date = listItensPVSession.Max(s => s.DataEntregaInicial).AddDays(-22);

                            if (pedVenda.Empresa.Equals("LB") && cal_date >= Convert.ToDateTime("05/06/2017")
                                    && cal_date < Convert.ToDateTime("10/04/2019"))
                                hatchLoc = "NM";
                            else if (pedVenda.Empresa.Equals("LB") && cal_date >= Convert.ToDateTime("10/04/2019"))
                                hatchLoc = "CH";
                            else if (pedVenda.Empresa.Equals("HN"))
                                hatchLoc = "AJ";
                        }

                        //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                        #endregion

                        #region Insere / Altera Cabeçalho do Pedido

                        DateTime dataEntregaFinal = listItensPVSession.Max(m => m.DataEntregaFinal);

                        if (edicao)
                        {
                            // Inserir Convert.ToInt32(pedVenda.EnderEntSeq) no update abaixo (Endereço de Entrega)

                            orderTA.UpdateQuery(orderDate, custoNo, data.Key, delivery,
                                String.Empty, String.Empty, String.Empty, salesrep, 
                                Convert.ToDecimal(pedVenda.EnderEntSeq), orderNO);

                            bookedM.UpdateCustomerAndCalDate(custoNo, cal_date, orderNO);
                        }
                        else
                        {
                            Thread.Sleep(5 * 1000);
                            //orderNO = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                            //tables.FillByName(tablesDT, "orders");
                            //orderNO = (Convert.ToInt32(tablesDT[0].lastno) + 1).ToString();
                            //tables.UpdateQuery(Convert.ToDecimal(orderNO), "orders");
                            //orderNO = ProximoOrderNOCHIC();
                            orderNO = NextCodeCHIC("orders");
                            int_commM.DeleteQuery(orderNO);
                            orderTA.Insert(orderNO, 0, Convert.ToDateTime("01/01/1988"), orderDate, custoNo, "Y",
                                pedVenda.ID.ToString(), 0, data.Key, delivery,
                                String.Empty, String.Empty, String.Empty, String.Empty, String.Empty, 
                                Convert.ToInt32(pedVenda.EnderEntSeq), salesrep,
                                String.Empty, String.Empty);
                        }

                        log = "\r\n\r\n" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                            Session["login"].ToString() + "|" +
                            edicaoText + " Cabeçalho|" +
                            orderNO + "|" +
                            orderDate + "|" +
                            custoNo + "|" +
                            data.Key.ToShortDateString() + " " +
                            dataEntregaFinal.ToShortTimeString() + "|" +
                            delivery + "|" +
                            com1 + "|" +
                            com2 + "|" +
                            com3 + "|" +
                            salesrep + "\n\r";

                        #endregion
                    }

                    string orderNoReposicaoDelete = "";

                    if ((qtdReposicao > 0) || (qtdReposicao == 0))
                    {
                        if (listItensPVSession.Max(m => m.OrderNoCHICReposicao) != null)
                        {
                            if (!listItensPVSession.Max(m => m.OrderNoCHICReposicao).Equals(""))
                            {
                                orderNoReposicaoDelete = listItensPVSession.Max(m => m.OrderNoCHICReposicao);

                                #region Deleta os Items para adicioná-los novamente

                                custitem.DeleteByOrderNo(orderNoReposicaoDelete);
                                bookedM.DeleteQuery(orderNoReposicaoDelete);

                                if ((qtdLiquida == 0) || (qtdReposicao == 0))
                                {
                                    int_commM.DeleteQuery(orderNoReposicaoDelete);
                                    orderTA.DeleteQuery(orderNoReposicaoDelete);
                                }

                                #endregion
                            }
                        }

                        #region Deleta Pedidos de Reposição Anteriores

                        if (!manterVolDisponivel)
                        {
                            CHICMobileDataSet.int_commMDataTable intCommReposicaoDT =
                                new CHICMobileDataSet.int_commMDataTable();

                            decimal orderNoPrincipalDelete = 0;
                            if (orderNO != "")
                            {
                                orderNoPrincipalDelete = Convert.ToDecimal(orderNO);

                                int_commM.FillByOrderNoMain(intCommReposicaoDT, orderNoPrincipalDelete);

                                foreach (var itemReposicao in intCommReposicaoDT.ToList())
                                {
                                    int_commM.DeleteQuery(itemReposicao.orderno);
                                    bookedM.DeleteQuery(itemReposicao.orderno);
                                    orderTA.DeleteQuery(itemReposicao.orderno);
                                }
                            }
                        }

                        #endregion

                        #region Zera o codigo no item do pedido para inserir novamente caso exista

                        foreach (var item in listItensPVSession)
                        {
                            item.OrderNoCHICReposicao = "";
                        }

                        #endregion
                    }

                    string orderNoReposicao = "";

                    #region Recupera o código antigo da reposição 

                    if (orderNoReposicaoDelete == null)
                        orderNoReposicaoDelete = "";

                    if (orderNoReposicaoDelete != "")
                        orderNoReposicao = orderNoReposicaoDelete;

                    #endregion

                    #region Deleta Itens deletados no WEB

                    CHICMobileDataSet.bookedMobileDataTable bookedMDTItensOrder =
                        new CHICMobileDataSet.bookedMobileDataTable();
                    bookedM.FillChicksAndEggsByOrderNo(bookedMDTItensOrder, orderNO);

                    foreach (var item in bookedMDTItensOrder.ToList())
                    {
                        CHICMobileDataSet.itemsMobileDataTable iDel =
                            new CHICMobileDataSet.itemsMobileDataTable();

                        items.FillByItemNo(iDel, item.item);

                        if (iDel.Count > 0)
                        {
                            vartablMobileTableAdapter varTA = new vartablMobileTableAdapter();
                            CHICMobileDataSet.vartablMobileDataTable vDT =
                                new CHICMobileDataSet.vartablMobileDataTable();

                            varTA.FillByVariety(vDT, iDel[0].variety);

                            if (vDT.Count > 0)
                            {
                                string varDelItem = vDT[0].desc.Trim();
                                int existeItemWEB = listItensPV
                                    .Where(w => w.ProdCodEstr == varDelItem).Count();
                                if (existeItemWEB == 0)
                                {
                                    custitem.DeleteByBookKey(item.bookkey);
                                    bookedM.DeleteBookID(item.book_id);
                                }
                            }
                        }
                    }

                    #endregion

                    int existeOvos = listItensPV
                        .Where(w => w.ProdCodEstr.Contains(" - Ovos")).Count();

                    foreach (var item in listItensPV)
                    {
                        #region Dados do Item

                        if (item.ProdCodEstr.Contains("Ovos"))
                        {
                            cal_date = item.DataEntregaInicial;
                        }
                        else
                        {
                            if (uf.UfRegGeog == "Norte" || uf.UfRegGeog == "Nordeste")
                                cal_date = item.DataEntregaInicial.AddDays(-23);
                            else
                                cal_date = item.DataEntregaInicial.AddDays(-22);
                        }

                        if (pedVenda.Empresa.Equals("LB") && cal_date >= Convert.ToDateTime("05/06/2017")
                                    && cal_date < Convert.ToDateTime("10/04/2019"))
                            hatchLoc = "NM";
                        else if (pedVenda.Empresa.Equals("LB") && cal_date >= Convert.ToDateTime("10/04/2019"))
                            hatchLoc = "CH";
                        else if (pedVenda.Empresa.Equals("HN"))
                            hatchLoc = "AJ";

                        dataFinal = item.DataEntregaFinal;

                        vartablMobileTableAdapter vartabl = new vartablMobileTableAdapter();
                        CHICMobileDataSet.vartablMobileDataTable vartablDT =
                            new CHICMobileDataSet.vartablMobileDataTable();
                        vartabl.FillByDesc(vartablDT, item.ProdCodEstr.Replace(" - Ovos", "").Replace(" - Machos", ""));
                        string varietyShort = vartablDT[0].variety;

                        string form = item.ProdCodEstr.Contains("Ovos") ? "HN" : item.ProdCodEstr.Contains("Machos") ? "DM" : "DV";

                        items.FillByVarietyAndForm(itemsDT, varietyShort, form);

                        // Localizando o Item
                        string accountno = "";
                        string descricao = "";
                        bool caixaPlastica = false;
                        bool vaxxitek = false;
                        bool temCaixaPlastica = false;
                        bool temVaxxitekFiltro = false;
                        for (int i = 0; i < itemsDT.Count; i++)
                        {
                            caixaPlastica = itemsDT[i].item_desc.Contains("-P") ? true : false;
                            if (caixaPlastica.Equals(false))
                                caixaPlastica = itemsDT[i].item_desc.Contains("- P") ? true : false;
                            vaxxitek = itemsDT[i].item_desc.Contains("VAXX") ? true : false;

                            if ((temCaixaPlastica) &&
                                (temVaxxitekFiltro) &&
                                (caixaPlastica) && (vaxxitek))
                            {
                                itemno = itemsDT[i].item_no;
                                accountno = itemsDT[i].account_no;
                                descricao = itemsDT[i].item_desc;
                            }
                            else if ((!temCaixaPlastica) &&
                                     (temVaxxitekFiltro) &&
                                     (!caixaPlastica) && (vaxxitek))
                            {
                                itemno = itemsDT[i].item_no;
                                accountno = itemsDT[i].account_no;
                                descricao = itemsDT[i].item_desc;
                            }
                            else if ((temCaixaPlastica) &&
                                     (!temVaxxitekFiltro) &&
                                     (caixaPlastica) && (!vaxxitek))
                            {
                                itemno = itemsDT[i].item_no;
                                accountno = itemsDT[i].account_no;
                                descricao = itemsDT[i].item_desc;
                            }
                            else if ((!temCaixaPlastica) &&
                                     (!temVaxxitekFiltro) &&
                                     (!caixaPlastica) && (!vaxxitek))
                            {
                                itemno = itemsDT[i].item_no;
                                accountno = itemsDT[i].account_no;
                                descricao = itemsDT[i].item_desc;
                            }
                        }

                        #endregion

                        if (item.QtdeLiquida > 0)
                        {
                            #region Produto Vendido

                            itemCod = itemCod + 1;
                            item_ord = "0" + itemCod.ToString();

                            //quantity = Convert.ToInt32(item.QtdeLiquida - item.QtdeReposicao);
                            quantity = Convert.ToInt32(item.QtdeLiquida);

                            price = 0.0000m;

                            //if (tipoColabOvosBrasil.Equals("Participa Lista") &&
                            //    !pedVenda.OvosBrasil.Equals(0))
                            //{
                            //    price = Convert.ToDecimal(item.PrecoUnitario + 0.0100m);
                            //}
                            //else
                            //{
                            //    price = Convert.ToDecimal(item.PrecoUnitario);
                            //}

                            if (item.PrecoPinto != null && item.PrecoPinto > 0)
                                price = Convert.ToDecimal(item.PrecoPinto);
                            else
                                price = Convert.ToDecimal(item.PrecoUnitario);

                            if (edicaoItem)
                            {
                                CHICMobileDataSet.bookedMobileDataTable bookedMDT =
                                    new CHICMobileDataSet.bookedMobileDataTable();
                                bookedM.FillChicksAndEggsByOrderNoAndVariety(bookedMDT, orderNO,
                                    varietyShort);

                                CHICMobileDataSet.bookedMobileRow produtoVendido =
                                    bookedMDT.Where(w => w.alt_desc.Trim() == "").FirstOrDefault();

                                if (produtoVendido != null)
                                {
                                    booked_id = Convert.ToInt32(produtoVendido.book_id);

                                    bookedM.UpdateQuery(cal_date, custoNo, quantity, price,
                                        item.DataEntregaInicial, "", booked_id);
                                }
                                else
                                {
                                    //tables.FillByName(tablesDT, "booked");
                                    //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                                    booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                                    bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                                        String.Empty, String.Empty, String.Empty, hatchLoc, accountno, String.Empty, item_ord,
                                        creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0, String.Empty, booked_id);

                                    //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");
                                }
                                //itemsDT = new CHICMobileDataSet.itemsMobileDataTable();
                                //items.FillByVariety(itemsDT, varietyShort);

                                //for (int i = 0; i < itemsDT.Count; i++)
                                //{
                                //    bookedM.DeleteByItemOrderNo(orderNO, itemsDT[i].item_no);
                                //}
                            }
                            else
                            {
                                //tables.FillByName(tablesDT, "booked");
                                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                                booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                                bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                                    String.Empty, String.Empty, String.Empty, hatchLoc, accountno, String.Empty, item_ord,
                                    creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0, String.Empty, booked_id);

                                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");
                            }

                            #region Insere Campos Personalizados do Item

                            string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, 0, "", item.Sobra);

                            #endregion

                            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                    Session["login"].ToString() + "|" +
                                    edicaoItemText + " Produto" + "|" +
                                    booked_id.ToString() + "|" +
                                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                    itemno + "|" +
                                    descricao.Trim() + "|" +
                                    quantity.ToString() + "|" +
                                    price.ToString() + "|" +
                                    accountno + "|" +
                                    itemno + "\r\n";

                            #endregion

                            #region Bonificação

                            if (!item.ProdCodEstr.Contains("Ovos") && !item.ProdCodEstr.Contains("Machos"))
                            {
                                quantity = Convert.ToInt32(item.QtdeBonificada);
                                price = 0;
                                string alt_desc = item.PercBonificacao.ToString() + "% Extra " + varietyShort;
                                itemCod = itemCod + 1;

                                if (edicaoItem)
                                {
                                    CHICMobileDataSet.bookedMobileDataTable bookedMDT =
                                        new CHICMobileDataSet.bookedMobileDataTable();
                                    bookedM.FillChicksAndEggsByOrderNoAndVariety(bookedMDT, orderNO,
                                        varietyShort);

                                    CHICMobileDataSet.bookedMobileRow bonificacao =
                                        bookedMDT.Where(w => w.alt_desc.Trim() != "").FirstOrDefault();

                                    if (bonificacao != null)
                                    {
                                        booked_id = Convert.ToInt32(bonificacao.book_id);

                                        bookedM.UpdateQuery(cal_date, custoNo, quantity, 0,
                                            item.DataEntregaInicial, alt_desc, booked_id);
                                    }
                                    else
                                    {
                                        //tables.FillByName(tablesDT, "booked");
                                        //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                        booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                                        item_ord = "0" + itemCod.ToString();

                                        bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                                            String.Empty, String.Empty, String.Empty, hatchLoc, accountno, alt_desc, item_ord,
                                            creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0, String.Empty, booked_id);

                                        //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");
                                    }
                                }
                                else
                                {

                                    //tables.FillByName(tablesDT, "booked");
                                    //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                                    booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                                    item_ord = "0" + itemCod.ToString();

                                    bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                                        String.Empty, String.Empty, String.Empty, hatchLoc, accountno, alt_desc, item_ord,
                                        creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0, String.Empty, booked_id);

                                    //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");
                                }

                                #region Insere Campos Personalizados do Item

                                tipoCobranca = InsertUpdateCustItemCHIC(booked_id, 0, "", item.Sobra);

                                #endregion

                                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                    Session["login"].ToString() + "|" +
                                    edicaoItemText + " Bonificação" + "|" +
                                    booked_id.ToString() + "|" +
                                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                    itemno + "|" +
                                    alt_desc + "|" +
                                    quantity.ToString() + "|" +
                                    price.ToString() + "|" +
                                    accountno + "|" +
                                    itemno + "\r\n";
                            }

                            #endregion
                        }

                        #region Atualiza Itens como: Tipo de Caixa, Caminhão e pintos por Caixa

                        if (edicao)
                        {
                            CHICMobileDataSet.bookedMobileDataTable bDT =
                                new CHICMobileDataSet.bookedMobileDataTable();

                            bookedM.FillBoxAndTruckByOrderNo(bDT, orderNO);

                            foreach (var otherItem in bDT)
                            {
                                bookedM.UpdateCalDate(cal_date, otherItem.book_id);
                            }
                        }

                        #endregion

                        #region Envio de E-mails - Novo

                        operacao = edicaoText;

                        corpoOperacao = corpoOperacao + "Pedido " + orderNO + " - " + item.ProdCodEstr + (char)13 + (char)10
                            + " - Qtde.Líquida: " + String.Format("{0:N0}", item.QtdeLiquida) + (char)13 + (char)10
                            + " - Qtde.Bonificada: " + String.Format("{0:N0}", item.QtdeBonificada) + (char)13 + (char)10
                            + " - Qtde.Reposição: " + String.Format("{0:N0}", item.QtdeReposicao) + (char)13 + (char)10
                            + " - Valor Unitário: " + String.Format("{0:N4}", price) + (char)13 + (char)10
                            + " - Valor Total: " + String.Format("{0:N2}", item.QtdeLiquida * price) + (char)13 + (char)10
                            + " - Condição de Pagamento: " + delivery + (char)13 + (char)10;

                        if (tipoColabOvosBrasil.Equals("Participa Lista") &&
                                !pedVenda.OvosBrasil.Equals(0))
                        {
                            corpoOperacao = corpoOperacao + "OBS: Adicionado R$ 0,01 a mais no valor porque cliente assinou a lista de Ovos Brasil." + (char)13 + (char)10;
                        }

                        corpoOperacao = corpoOperacao + (char)13 + (char)10
                                + (char)13 + (char)10 + (char)13 + (char)10;

                        #endregion

                        #region Insere LOG - Item_Ped_Venda

                        LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                        logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                        logItemPV.Sequencia = item.Sequencia;
                        logItemPV.ProdCodEstr = item.ProdCodEstr;
                        logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                        logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                        logItemPV.QtdeLiquida = item.QtdeLiquida;
                        logItemPV.PercBonificacao = item.PercBonificacao;
                        logItemPV.QtdeBonificada = item.QtdeBonificada;
                        logItemPV.QtdeReposicao = item.QtdeReposicao;
                        logItemPV.PrecoUnitario = item.PrecoUnitario;
                        logItemPV.DataHora = DateTime.Now;
                        logItemPV.Operacao = "Importado p/ CHIC";
                        logItemPV.IDItPedVenda = item.ID;
                        logItemPV.IDLogPedidoVenda = logPV.ID;
                        logItemPV.OrderNoCHIC = orderNO;
                        logItemPV.OrderNoCHICReposicao = orderNoReposicao;
                        //logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                        //logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                        logItemPV.PrecoPinto = item.PrecoPinto;
                        logItemPV.ValorTotal = item.ValorTotal;
                        logItemPV.TipoReposicao = item.TipoReposicao;

                        hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                        #endregion

                        //item.DataEntregaFinal = item.DataEntregaInicial;
                        item.OrderNoCHIC = orderNO;
                        item.Importar = 0;

                        Item_Pedido_Venda itemPV = hlbappSession.Item_Pedido_Venda
                            .Where(w => w.ID == item.ID).FirstOrDefault();
                        itemPV.OrderNoCHIC = orderNO;
                        itemPV.Importar = 0;
                    }

                    int itemCodRep = 1;
                    decimal orderNoPrincipal = 0;
                    bool existeReposicao = false;

                    if (qtdLiquida > 0) orderNoPrincipal = Convert.ToDecimal(orderNO);

                    foreach (var item in listItensPVSession.Where(w => w.OrderNoCHICReposicao != "Cancelado").ToList())
                    {
                        #region Dados do Item

                        if (item.ProdCodEstr.Contains("Ovos"))
                        {
                            cal_date = item.DataEntregaInicial;
                        }
                        else
                        {
                            if (uf.UfRegGeog == "Norte" || uf.UfRegGeog == "Nordeste")
                                cal_date = item.DataEntregaInicial.AddDays(-23);
                            else
                                cal_date = item.DataEntregaInicial.AddDays(-22);
                        }

                        if (pedVenda.Empresa.Equals("LB") && cal_date >= Convert.ToDateTime("05/06/2017")
                                    && cal_date < Convert.ToDateTime("10/04/2019"))
                            hatchLoc = "NM";
                        else if (pedVenda.Empresa.Equals("LB") && cal_date >= Convert.ToDateTime("10/04/2019"))
                            hatchLoc = "CH";
                        else if (pedVenda.Empresa.Equals("HN"))
                            hatchLoc = "AJ";

                        dataFinal = item.DataEntregaFinal;

                        vartablMobileTableAdapter vartabl = new vartablMobileTableAdapter();
                        CHICMobileDataSet.vartablMobileDataTable vartablDT =
                            new CHICMobileDataSet.vartablMobileDataTable();
                        vartabl.FillByDesc(vartablDT, item.ProdCodEstr.Replace(" - Ovos", "").Replace(" - Machos", ""));
                        string varietyShort = vartablDT[0].variety;

                        string form = item.ProdCodEstr.Contains("Ovos") ? "HN" : item.ProdCodEstr.Contains("Machos") ? "DM" : "DV";

                        items.FillByVarietyAndForm(itemsDT, varietyShort, form);

                        // Localizando o Item
                        string accountno = "";
                        string descricao = "";
                        bool caixaPlastica = false;
                        bool vaxxitek = false;
                        bool temCaixaPlastica = false;
                        bool temVaxxitekFiltro = false;
                        for (int i = 0; i < itemsDT.Count; i++)
                        {
                            caixaPlastica = itemsDT[i].item_desc.Contains("-P") ? true : false;
                            if (caixaPlastica.Equals(false))
                                caixaPlastica = itemsDT[i].item_desc.Contains("- P") ? true : false;
                            vaxxitek = itemsDT[i].item_desc.Contains("VAXX") ? true : false;

                            if ((temCaixaPlastica) &&
                                (temVaxxitekFiltro) &&
                                (caixaPlastica) && (vaxxitek))
                            {
                                itemno = itemsDT[i].item_no;
                                accountno = itemsDT[i].account_no;
                                descricao = itemsDT[i].item_desc;
                            }
                            else if ((!temCaixaPlastica) &&
                                     (temVaxxitekFiltro) &&
                                     (!caixaPlastica) && (vaxxitek))
                            {
                                itemno = itemsDT[i].item_no;
                                accountno = itemsDT[i].account_no;
                                descricao = itemsDT[i].item_desc;
                            }
                            else if ((temCaixaPlastica) &&
                                     (!temVaxxitekFiltro) &&
                                     (caixaPlastica) && (!vaxxitek))
                            {
                                itemno = itemsDT[i].item_no;
                                accountno = itemsDT[i].account_no;
                                descricao = itemsDT[i].item_desc;
                            }
                            else if ((!temCaixaPlastica) &&
                                     (!temVaxxitekFiltro) &&
                                     (!caixaPlastica) && (!vaxxitek))
                            {
                                itemno = itemsDT[i].item_no;
                                accountno = itemsDT[i].account_no;
                                descricao = itemsDT[i].item_desc;
                            }
                        }

                        #endregion

                        existeReposicao = true;

                        #region Reposição

                        if (item.QtdeReposicao > 0)
                        {
                            //if (item.OrderNoCHICReposicao != null)
                            //{
                            //    if (!item.OrderNoCHICReposicao.Equals(""))
                            //    {
                            //        orderNoReposicao = item.OrderNoCHICReposicao;

                            //        #region Deleta os Items para adicioná-los novamente

                            //        bookedM.DeleteQuery(orderNoReposicao);

                            //        #endregion
                            //    }
                            //}

                            #region Deleta Pedidos de Reposição Anteriores

                            //CHICMobileDataSet.int_commMDataTable intCommReposicaoDT =
                            //    new CHICMobileDataSet.int_commMDataTable();

                            //decimal orderNoPrincipal = 0;
                            //if (orderNO != "")
                            //{
                            //    orderNoPrincipal = Convert.ToDecimal(orderNO);

                            //    int_commM.FillByOrderNoMain(intCommReposicaoDT, orderNoPrincipal);

                            //    foreach (var itemReposicao in intCommReposicaoDT.ToList())
                            //    {
                            //        int_commM.DeleteQuery(itemReposicao.orderno);
                            //        bookedM.DeleteQuery(itemReposicao.orderno);
                            //        orderTA.DeleteQuery(itemReposicao.orderno);
                            //    }
                            //}

                            #endregion

                            #region Dados do Pedido (orders)

                            delivery = "DOAÇÃO";
                            string operacaoReposicao = "";

                            string motivoReposicao = "";
                            if (item.TipoReposicao != null)
                                motivoReposicao = "Motivo da Reposição: " 
                                    + item.TipoReposicao;

                            /****
                             * INÍCIO
                             * 
                             * 04/02/2019 - Chamado Fluig 826
                             * 
                             * Alterada a geração do número da reposição, pois todas as vezes que gerava uma alteração,
                             * o número do pedido no CHIC da reposição era alterado.
                             * 
                             * Sendo assim, ele sempre será deletado, porém o número permanecerá o mesmo.
                             ****/

                            CHICMobileDataSet.ordersMobileDataTable oDTVerifica = 
                                new CHICMobileDataSet.ordersMobileDataTable();
                            orderTA.FillByOrderNo(oDTVerifica, orderNoReposicao);

                            if (oDTVerifica.Count == 0)
                            {
                                if (orderNoReposicao.Equals(""))
                                {
                                    operacaoReposicao = "Inclusão";

                                    Thread.Sleep(5 * 1000);
                                    //orderNoReposicao = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                                    //orderNoReposicao = ProximoOrderNOCHIC();
                                    //tables.FillByName(tablesDT, "orders");
                                    //orderNoReposicao = (Convert.ToInt32(tablesDT[0].lastno) + 1).ToString();
                                    orderNoReposicao = NextCodeCHIC("orders");
                                }

                                orderTA.Insert(orderNoReposicao, 0, Convert.ToDateTime("01/01/1988"), orderDate,
                                    custoNo, "Y", "", 0, item.DataEntregaInicial, delivery, motivoReposicao,
                                    String.Empty, String.Empty, String.Empty, String.Empty, 0, salesrep,
                                    String.Empty, String.Empty);

                                //tables.UpdateQuery(Convert.ToDecimal(orderNoReposicao), "orders");
                            }
                            else
                            {
                                operacaoReposicao = "Alteração";

                                orderTA.UpdateQuery(orderDate, custoNo, item.DataEntregaInicial, delivery,
                                    motivoReposicao, String.Empty, String.Empty, salesrep,
                                    Convert.ToDecimal(pedVenda.EnderEntSeq), orderNoReposicao);
                            }

                            //if (orderNoReposicao.Equals(""))
                            //{
                            //    operacaoReposicao = "Inclusão";
                            //    Thread.Sleep(5 * 1000);
                            //    orderNoReposicao = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                            //}
                            //else
                            //{
                            //    operacaoReposicao = "Alteração";
                            //}

                            //orderTA.Insert(orderNoReposicao, 0, Convert.ToDateTime("01/01/1988"), orderDate,
                            //    custoNo, "Y", "", 0, item.DataEntregaInicial, delivery, motivoReposicao,
                            //    String.Empty, String.Empty, String.Empty, String.Empty, 0, salesrep,
                            //    String.Empty, String.Empty);

                            /** FIM ***/

                            log = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                operacaoReposicao + " Cabeçalho|" +
                                orderNoReposicao + "|" +
                                orderDate + "|" +
                                custoNo + "|" +
                                item.DataEntregaInicial.ToShortDateString() + " " +
                                item.DataEntregaFinal.ToShortTimeString() + "|" +
                                delivery + "|" +
                                com1 + "|" +
                                com2 + "|" +
                                com3 + "|" +
                                salesrep + "\n\r";

                            item_ord = "01";

                            #endregion

                            #region Produto Vendido

                            quantity = Convert.ToInt32(item.QtdeReposicao);

                            //price = Convert.ToDecimal(item.PrecoUnitario);
                            if (item.PrecoPinto != null && item.PrecoPinto > 0)
                                price = Convert.ToDecimal(item.PrecoPinto);
                            else
                                price = Convert.ToDecimal(item.PrecoUnitario);

                            item_ord = "0" + itemCodRep.ToString();

                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                            string tipoReposicao = "";
                            if (item.TipoReposicao != null) tipoReposicao = item.TipoReposicao;

                            int sobra = item.Sobra;

                            bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNoReposicao,
                                "O", tipoReposicao, String.Empty, String.Empty, hatchLoc, accountno, String.Empty,
                                item_ord, creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0,
                                String.Empty, booked_id);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                            #region Insere Tipo de Reposição

                            string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, 0, tipoReposicao, sobra);

                            #endregion

                            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                    Session["login"].ToString() + "|" +
                                    operacaoReposicao + " Produto" + "|" +
                                    booked_id.ToString() + "|" +
                                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                    itemno + "|" +
                                    descricao.Trim() + "|" +
                                    quantity.ToString() + "|" +
                                    price.ToString() + "|" +
                                    accountno + "|" +
                                    tipoReposicao + "|" +
                                    itemno + "\r\n";

                            #endregion

                            item.OrderNoCHICReposicao = orderNoReposicao;

                            Item_Pedido_Venda itemPV = hlbappSession.Item_Pedido_Venda
                            .Where(w => w.ID == item.ID).FirstOrDefault();
                            itemPV.OrderNoCHICReposicao = orderNoReposicao;

                            #region Insere LOG - Item_Ped_Venda

                            LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                            logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                            logItemPV.Sequencia = item.Sequencia;
                            logItemPV.ProdCodEstr = item.ProdCodEstr;
                            logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                            logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                            logItemPV.QtdeLiquida = item.QtdeLiquida;
                            logItemPV.PercBonificacao = item.PercBonificacao;
                            logItemPV.QtdeBonificada = item.QtdeBonificada;
                            logItemPV.QtdeReposicao = item.QtdeReposicao;
                            logItemPV.PrecoUnitario = item.PrecoUnitario;
                            logItemPV.DataHora = DateTime.Now;
                            logItemPV.Operacao = "Importado p/ CHIC";
                            logItemPV.IDItPedVenda = item.ID;
                            logItemPV.IDLogPedidoVenda = logPV.ID;
                            logItemPV.OrderNoCHIC = orderNO;
                            logItemPV.OrderNoCHICReposicao = orderNoReposicao;
                            //logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                            //logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                            logItemPV.PrecoPinto = item.PrecoPinto;
                            logItemPV.ValorTotal = item.ValorTotal;
                            logItemPV.TipoReposicao = item.TipoReposicao;

                            hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                            #endregion
                        }

                        #endregion
                    }

                    price = 0;

                    if (qtdReposicao > 0 && existeReposicao)
                    {
                        if (orderNoReposicao != "")
                        {
                            string descricaoServico = "";

                            #region Vacina Primária

                            if (vacinaPrimariaWEB != null)
                            {
                                if (vacinaPrimariaWEB.PrecoUnitario != null)
                                    price = Convert.ToDecimal(vacinaPrimariaWEB.PrecoUnitario);
                                else
                                    price = valorVacinaPrimaria;

                                if (vacinaPrimariaWEB.Bonificada > 0) price = 0;
                            }

                            if (!temVaxxitek)
                            {
                                if (vacPrimaria != null)
                                {
                                    //tables.FillByName(tablesDT, "booked");
                                    //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                    booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                                    itemCodRep = itemCodRep + 1;
                                    item_ord = "0" + itemCodRep.ToString();

                                    itemno = vacPrimaria1.USERCodigoCHIC;

                                    items.FillByItemNo(itemsDT, itemno);

                                    bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                        qtdReposicao, price, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                                        "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                        cal_date, 0, String.Empty, booked_id);

                                    //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                    #region Insere Tipo de Cobrança

                                    string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(vacinaPrimariaWEB.Bonificada), "", 0);

                                    #endregion

                                    if (tipoCobranca != "Normal")
                                        bookedM.UpdateComment1ByBookID("Detalhes da Vacina: "
                                            + tipoCobranca, booked_id);

                                    log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                        Session["login"].ToString() + "|" +
                                        "Vacina" + "|" +
                                        booked_id.ToString() + "|" +
                                        cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                        itemno + "|" +
                                        itemsDT[0].item_desc.Trim() + "|" +
                                        qtdReposicao.ToString() + "|" +
                                        price.ToString() + "|" +
                                        "Tipo Cobrança: " + tipoCobranca + "|" +
                                        "" + "|" +
                                        itemno + "\r\n";

                                    #region Se for Vectormune FP-MG, Insere Rispens e HVT
                                                    
                                    if (vacPrimaria1.USERCodigoCHIC == "188")
                                    {
                                        //quantity = 0;
                                        //price = 0;

                                        //tables.FillByName(tablesDT, "booked");
                                        //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                        booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                                        itemCodRep = itemCodRep + 1;
                                        item_ord = "0" + itemCodRep.ToString();
                                        itemno = "173";

                                        items.FillByItemNo(itemsDT, itemno);

                                        bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                            quantity, 0, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                                            "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                            cal_date, 0, String.Empty, booked_id);

                                        //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                        #region Insere Tipo de Cobrança

                                        tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(vacinaPrimariaWEB.Bonificada), "", 0);

                                        #endregion

                                        if (tipoCobranca != "Normal")
                                            bookedM.UpdateComment1ByBookID("Detalhes da Vacina: "
                                                + tipoCobranca, booked_id);

                                        log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                            Session["login"].ToString() + "|" +
                                            "Vacina" + "|" +
                                            booked_id.ToString() + "|" +
                                            cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                            itemno + "|" +
                                            itemsDT[0].item_desc.Trim() + "|" +
                                            quantity.ToString() + "|" +
                                            "0" + "|" +
                                            "Tipo Cobrança: " + tipoCobranca + "|" +
                                            "" + "|" +
                                            itemno + "\r\n";
                                    }

                                    #endregion
                                }
                            }
                            else
                            {
                                //quantity = 0;

                                //tables.FillByName(tablesDT, "booked");
                                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                                itemCodRep = itemCodRep + 1;
                                item_ord = "0" + itemCodRep.ToString();
                                itemno = "161";

                                items.FillByItemNo(itemsDT, itemno);

                                bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                    quantity, price, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                                    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                    cal_date, 0, String.Empty, booked_id);

                                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                #region Insere Tipo de Cobrança

                                string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(vacinaPrimariaWEB.Bonificada), "", 0);

                                #endregion

                                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                    Session["login"].ToString() + "|" +
                                    "Vacina" + "|" +
                                    booked_id.ToString() + "|" +
                                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                    itemno + "|" +
                                    itemsDT[0].item_desc.Trim() + "|" +
                                    quantity.ToString() + "|" +
                                    price.ToString() + "|" +
                                    "" + "|" +
                                    itemno + "\r\n";

                                // 08/12/2020 - Chamado 60115 - DESATIVADA RISPENSA AUTOMÁTICA PORQUE A VAXXITEK VIROU SECUNDÁRIA
                                //tables.FillByName(tablesDT, "booked");
                                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                //itemCodRep = itemCodRep + 1;
                                //item_ord = "0" + itemCodRep.ToString();
                                ////itemno = "165";
                                //if (hatchLoc == "CH" || hatchLoc == "NM")
                                //    itemno = "901";
                                //else
                                //    itemno = "909";
                                ////price = 0;

                                //items.FillByItemNo(itemsDT, itemno);

                                //bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                //    quantity, 0, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                                //    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                //    cal_date, 0, String.Empty, 0);

                                //tables.UpdateQuery(Convert.ToDecimal(booked_id));

                                //log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                //    Session["login"].ToString() + "|" +
                                //    "Vacina" + "|" +
                                //    booked_id.ToString() + "|" +
                                //    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                //    itemno + "|" +
                                //    itemsDT[0].item_desc.Trim() + "|" +
                                //    quantity.ToString() + "|" +
                                //    "0" + "|" +
                                //    "Tipo Cobrança: " + tipoCobranca + "|" +
                                //    "" + "|" +
                                //    itemno + "\r\n";
                            }

                            #endregion

                            #region Vacinas Secundárias

                            var listaVacSecRep = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                            foreach (var vacSec in listaVacSecRep)
                            {
                                price = 0;
                                if (vacSec.PrecoUnitario != null)
                                    price = Convert.ToDecimal(vacSec.PrecoUnitario);

                                if (vacSec.Bonificada > 0) price = 0;

                                PRODUTO vacSecundaria = apoloStatic.PRODUTO
                                    .Where(w => w.ProdCodEstr == vacSec.ProdCodEstr).FirstOrDefault();

                                PRODUTO1 vacSecundaria1 = apoloStatic.PRODUTO1
                                        .Where(w => w.ProdCodEstr == vacSecundaria.ProdCodEstr).FirstOrDefault();

                                if (vacSecundaria1.USERCodigoCHIC != null 
                                    && vacSecundaria1.USERCodigoCHIC != "")
                                {
                                    //tables.FillByName(tablesDT, "booked");
                                    //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                    booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                                    itemCodRep = itemCodRep + 1;
                                    item_ord = "0" + itemCodRep.ToString();
                                    itemno = vacSecundaria1.USERCodigoCHIC;

                                    items.FillByItemNo(itemsDT, itemno);

                                    bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                        qtdReposicao, price, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                                        "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                        cal_date, 0, String.Empty, booked_id);

                                    //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                    #region Insere Tipo de Cobrança

                                    string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(vacSec.Bonificada), "", 0);

                                    #endregion

                                    if (tipoCobranca != "Normal")
                                        bookedM.UpdateComment1ByBookID("Detalhes da Vacina: "
                                            + tipoCobranca, booked_id);

                                    log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                        Session["login"].ToString() + "|" +
                                        "Vacina" + "|" +
                                        booked_id.ToString() + "|" +
                                        cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                        itemno + "|" +
                                        itemsDT[0].item_desc.Trim() + "|" +
                                        qtdReposicao.ToString() + "|" +
                                        price.ToString() + "|" +
                                        "Tipo Cobrança: " + tipoCobranca + "|" +
                                        "" + "|" +
                                        itemno + "\r\n";
                                }
                            }

                            #endregion

                            #region Serviço

                            Servicos_Pedido_Venda servRep = hlbappSession.Servicos_Pedido_Venda
                                .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                            if (servRep != null)
                            {
                                price = 0;
                                if (servRep.PrecoUnitario != null)
                                    price = Convert.ToDecimal(servRep.PrecoUnitario);
                                else
                                    price = valoServico;

                                if (servRep.Bonificada > 0) price = 0;

                                PRODUTO servico = apoloStatic.PRODUTO
                                    .Where(w => w.ProdCodEstr == servRep.ProdCodEstr).FirstOrDefault();

                                PRODUTO1 servico1 = apoloStatic.PRODUTO1
                                    .Where(w => w.ProdCodEstr == servico.ProdCodEstr).FirstOrDefault();

                                decimal percServ = Convert.ToDecimal(servRep.PercAplicacaoServico);

                                int qtdServ = Convert.ToInt32(qtdReposicao * (percServ / 100.00m));

                                //tables.FillByName(tablesDT, "booked");
                                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                                itemCodRep = itemCodRep + 1;
                                item_ord = "0" + itemCodRep.ToString();
                                itemno = servico1.USERCodigoCHIC;

                                items.FillByItemNo(itemsDT, itemno);

                                string comentServ = "Trat. Infra.: " + percServ.ToString() + "% do lote (Qtde.: "
                                    + String.Format("{0:N0}", qtdServ) + ")";

                                bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                    qtdServ, price, orderNoReposicao, "O", comentServ, String.Empty, String.Empty, hatchLoc,
                                    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                    cal_date, 0, String.Empty, booked_id);

                                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                #region Insere Tipo de Cobrança

                                string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(servRep.Bonificada), "", 0);

                                #endregion

                                string descricaoTipoCobranca = "";
                                if (tipoCobranca != "Normal") descricaoTipoCobranca = " - Detalhes do Serviço: " + tipoCobranca;

                                string mascara = "";
                                if (servRep.MascaraTI != "" && servRep.MascaraTI != null) mascara = " - Máscara selecionada pelo Comercial: " + servRep.MascaraTI;

                                bookedM.UpdateComment1ByBookID(comentServ + descricaoTipoCobranca + mascara, booked_id);

                                //descricaoServico = comentServ + " - Detalhes do Serviço: " + tipoCobranca;

                                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                    Session["login"].ToString() + "|" +
                                    "Serviço" + "|" +
                                    booked_id.ToString() + "|" +
                                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                    itemno + "|" +
                                    itemsDT[0].item_desc.Trim() + "|" +
                                    qtdServ.ToString() + "|" +
                                    price.ToString() + "|" +
                                    "Tipo Cobrança: " + tipoCobranca + "|" +
                                    "" + "|" +
                                    itemno + "\r\n";
                            }

                            #endregion

                            #region Hidratante

                            if ((!cidade.UfSigla.Equals("SP")) &&
                                (!cidade.UfSigla.Equals("RJ")) &&
                                (!cidade.UfSigla.Equals("MG")) &&
                                (!cidade.UfSigla.Equals("ES")) &&
                                (!cidade.UfSigla.Equals("PR")) &&
                                (!cidade.UfSigla.Equals("GO")) &&
                                existeOvos == 0)
                            {
                                //tables.FillByName(tablesDT, "booked");
                                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                tables.FillByName(tablesDT, "booked");
                                booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                itemCodRep = itemCodRep + 1;
                                item_ord = "0" + itemCodRep.ToString();

                                quantity = 0;
                                price = 0;

                                itemno = "172";
                                items.FillByItemNo(itemsDT, itemno);

                                bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price,
                                    orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc, "",
                                    String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd, cal_date, 0,
                                    String.Empty, 0);

                                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                    Session["login"].ToString() + "|" +
                                    "Hidratante" + "|" +
                                    booked_id.ToString() + "|" +
                                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                    itemno + "|" +
                                    itemsDT[0].item_desc.Trim() + "|" +
                                    quantity.ToString() + "|" +
                                    price.ToString() + "|" +
                                    "" + "|" +
                                    itemno + "\r\n";
                            }

                            #endregion

                            #region Inserir Tabela Customizada Pedido

                            intComm = "";

                            string logAntigo = "";

                            int_commM.FillByOrderNo(int_commDT, orderNoReposicao);

                            if (int_commDT.Count > 0)
                            {
                                logAntigo = int_commDT[0].changelg;
                                int_commM.DeleteQuery(orderNoReposicao);
                            }

                            log = logAntigo + "\n\r\n\r" + log +
                                DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Inclusão" + "|" +
                                "Ovos Brasil: Não";

                            if (infoIncubatorio == "")
                                infoIncubatorio = descricaoServico;
                            else
                                infoIncubatorio = infoIncubatorio + " / " + descricaoServico;

                            intComm = listItensPVSession.Min(m => m.DataEntregaInicial).ToShortDateString() + " à " +
                                listItensPVSession.Min(m => m.DataEntregaFinal).ToShortDateString();
                            intComm = intComm + "\n\r\n\r Observação: " + pedVenda.Observacoes;

                            if (tipoColabOvosBrasil.Equals("Participa Lista"))
                            {
                                int_commM.InsertQuery(orderNoReposicao, intComm, log, false, infoIncubatorio,
                                    false, false, false, true, "", false, orderNoPrincipal, false, 
                                    transportadora, codEstabelecimento, false);
                            }
                            else
                            {
                                int_commM.InsertQuery(orderNoReposicao, intComm, log, false, infoIncubatorio,
                                    false, false, false, false, "", false, orderNoPrincipal, false, 
                                    transportadora, codEstabelecimento, false);
                            }

                            #endregion
                        }
                    }

                    //foreach (var item2 in listItensPV2)
                    //{
                    //    itemCod = itemCod + 1;
                    //}

                    if (qtdLiquida > 0)
                    {
                        string descricaoServico = "";
                        quantity = 0;
                        quantity = qtdLiquida + qtdBonificada + qtdReposicaoTipoReposicao;

                        #region Deleta os Items para adicioná-los novamente

                        if (orderNO != "")
                        {
                            //bookedM.DeleteItemsPriceZero(orderNO);
                            custitem.DeleteVaccinesAndServices(orderNO);
                            bookedM.DeleteVaccinesAndServices(orderNO);
                        }

                        #endregion

                        #region Vacina Primária

                        price = 0;
                        if (vacinaPrimariaWEB != null)
                        {
                            if (vacinaPrimariaWEB.PrecoUnitario != null)
                                price = Convert.ToDecimal(vacinaPrimariaWEB.PrecoUnitario);
                            else
                                price = valorVacinaPrimaria;

                            if (vacinaPrimariaWEB.Bonificada > 0) price = 0;
                        }

                        if (!temVaxxitek)
                        {
                            if (vacPrimaria != null)
                            {
                                //tables.FillByName(tablesDT, "booked");
                                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                tables.FillByName(tablesDT, "booked");
                                booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                itemCod = itemCod + 1;
                                item_ord = "0" + itemCod.ToString();
                                itemno = vacPrimaria1.USERCodigoCHIC;

                                items.FillByItemNo(itemsDT, itemno);

                                bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                    quantity, price, orderNO, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                                    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                    cal_date, 0, String.Empty, booked_id);

                                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                #region Insere Tipo de Cobrança

                                string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(vacinaPrimariaWEB.Bonificada), "", 0);

                                #endregion

                                if (tipoCobranca != "Normal")
                                    bookedM.UpdateComment1ByBookID("Detalhes da Vacina: "
                                        + tipoCobranca, booked_id);

                                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                    Session["login"].ToString() + "|" +
                                    "Vacina" + "|" +
                                    booked_id.ToString() + "|" +
                                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                    itemno + "|" +
                                    itemsDT[0].item_desc.Trim() + "|" +
                                    quantity.ToString() + "|" +
                                    price.ToString() + "|" +
                                    "Tipo Cobrança: " + tipoCobranca + "|" +
                                    "" + "|" +
                                    itemno + "\r\n";
                            }
                        }
                        else
                        {
                            //quantity = 0;

                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                            itemCod = itemCod + 1;
                            item_ord = "0" + itemCod.ToString();
                            itemno = "161";

                            items.FillByItemNo(itemsDT, itemno);

                            bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                quantity, price, orderNO, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                                "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                cal_date, 0, String.Empty, booked_id);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                            #region Insere Tipo de Cobrança

                            string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(vacinaPrimariaWEB.Bonificada), "", 0);

                            #endregion

                            if (tipoCobranca != "Normal")
                                bookedM.UpdateComment1ByBookID("Detalhes da Vacina: "
                                    + tipoCobranca, booked_id);

                            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Vacina" + "|" +
                                booked_id.ToString() + "|" +
                                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                itemno + "|" +
                                itemsDT[0].item_desc.Trim() + "|" +
                                quantity.ToString() + "|" +
                                price.ToString() + "|" +
                                "Tipo Cobrança: " + tipoCobranca + "|" +
                                "" + "|" +
                                itemno + "\r\n";

                            //price = 0;

                            // 08/12/2020 - Chamado 60115 - DESATIVADA RISPENSA AUTOMÁTICA PORQUE A VAXXITEK VIROU SECUNDÁRIA
                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            //itemCod = itemCod + 1;
                            //item_ord = "0" + itemCod.ToString();
                            ////itemno = "165";
                            //if (hatchLoc == "CH" || hatchLoc == "NM")
                            //    itemno = "901";
                            //else
                            //    itemno = "909";

                            //items.FillByItemNo(itemsDT, itemno);

                            //bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                            //    quantity, 0, orderNO, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                            //    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                            //    cal_date, 0, String.Empty, booked_id);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id));

                            //#region Insere Tipo de Cobrança

                            //tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(vacinaPrimariaWEB.Bonificada), "", 0);

                            //#endregion

                            //if (tipoCobranca != "Normal")
                            //    bookedM.UpdateComment1ByBookID("Detalhes da Vacina: "
                            //        + tipoCobranca, booked_id);

                            //log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                            //    Session["login"].ToString() + "|" +
                            //    "Vacina" + "|" +
                            //    booked_id.ToString() + "|" +
                            //    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                            //    itemno + "|" +
                            //    itemsDT[0].item_desc.Trim() + "|" +
                            //    quantity.ToString() + "|" +
                            //    "0" + "|" +
                            //    "Tipo Cobrança: " + tipoCobranca + "|" +
                            //    "" + "|" +
                            //    itemno + "\r\n";
                        }

                        #endregion

                        #region Insere LOG - Vacina Primária

                        Vacinas_Primaria_Pedido_Venda vacPrimObj = hlbappSession.Vacinas_Primaria_Pedido_Venda
                                .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                        LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                        if (vacPrimObj != null)
                        {
                            logVacPrim.IDPedidoVenda = vacPrimObj.IDPedidoVenda;
                            logVacPrim.ProdCodEstr = vacPrimObj.ProdCodEstr;
                            logVacPrim.DataHora = DateTime.Now;
                            logVacPrim.Operacao = "Importado p/ CHIC";
                            logVacPrim.IDVacPrimPedVenda = vacPrimObj.ID;
                            logVacPrim.IDLogPedidoVenda = logPV.ID;
                            logVacPrim.PrecoUnitario = vacPrimObj.PrecoUnitario;
                            logVacPrim.Bonificada = vacPrimObj.Bonificada;

                            hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                            hlbppLOG.SaveChanges();
                        }

                        #endregion

                        #region Vacinas Secundárias

                        var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                        foreach (var vacSec in listaVacSec)
                        {
                            price = 0;
                            if (vacSec.PrecoUnitario != null)
                                price = Convert.ToDecimal(vacSec.PrecoUnitario);

                            if (vacSec.Bonificada > 0) price = 0;

                            PRODUTO vacSecundaria = apoloStatic.PRODUTO
                                .Where(w => w.ProdCodEstr == vacSec.ProdCodEstr).FirstOrDefault();

                            PRODUTO1 vacSecundaria1 = apoloStatic.PRODUTO1
                                .Where(w => w.ProdCodEstr == vacSecundaria.ProdCodEstr).FirstOrDefault();

                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                            itemCod = itemCod + 1;
                            item_ord = "0" + itemCod.ToString();
                            itemno = vacSecundaria1.USERCodigoCHIC;

                            if (itemno != null && itemno != "")
                            {
                                items.FillByItemNo(itemsDT, itemno);

                                bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                    quantity, price, orderNO, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                                    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                    cal_date, 0, String.Empty, booked_id);

                                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                #region Insere Tipo de Cobrança

                                string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(vacSec.Bonificada), "", 0);

                                #endregion

                                if (tipoCobranca != "Normal")
                                    bookedM.UpdateComment1ByBookID("Detalhes da Vacina: "
                                        + tipoCobranca, booked_id);

                                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                    Session["login"].ToString() + "|" +
                                    "Vacina" + "|" +
                                    booked_id.ToString() + "|" +
                                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                    itemno + "|" +
                                    itemsDT[0].item_desc.Trim() + "|" +
                                    quantity.ToString() + "|" +
                                    price.ToString() + "|" +
                                    "Tipo Cobrança: " + tipoCobranca + "|" +
                                    "" + "|" +
                                    itemno + "\r\n";

                                #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                                logVacSec.Sequencia = vacSec.Sequencia;
                                logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                                logVacSec.DataHora = DateTime.Now;
                                logVacSec.Operacao = "Importado p/ CHIC";
                                logVacSec.IDVacSecPedVenda = vacSec.ID;
                                logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                logVacSec.PrecoUnitario = vacSec.PrecoUnitario;
                                logVacSec.Bonificada = vacSec.Bonificada;

                                hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                #endregion
                            }
                        }

                        #endregion

                        #region Serviço

                        Servicos_Pedido_Venda serv = hlbappSession.Servicos_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                        if (serv != null)
                        {
                            price = 0;
                            if (serv.PrecoUnitario != null)
                                price = Convert.ToDecimal(serv.PrecoUnitario);
                            else
                                price = valoServico;

                            if (serv.Bonificada > 0) price = 0;

                            PRODUTO servico = apoloStatic.PRODUTO
                                .Where(w => w.ProdCodEstr == serv.ProdCodEstr).FirstOrDefault();

                            PRODUTO1 servico1 = apoloStatic.PRODUTO1
                                .Where(w => w.ProdCodEstr == servico.ProdCodEstr).FirstOrDefault();

                            decimal percServ = Convert.ToDecimal(serv.PercAplicacaoServico);

                            int qtdServ = Convert.ToInt32(quantity * (percServ / 100.00m));

                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                            itemCod = itemCod + 1;
                            item_ord = "0" + itemCod.ToString();
                            itemno = servico1.USERCodigoCHIC;

                            items.FillByItemNo(itemsDT, itemno);

                            string comentServ = "Trat. Infra.: " + percServ.ToString() + "% do lote (Qtde.: "
                                    + String.Format("{0:N0}", qtdServ) + ")";

                            bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                qtdServ, price, orderNO, "O", comentServ, String.Empty, String.Empty, hatchLoc,
                                "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                cal_date, 0, String.Empty, booked_id);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                            #region Insere Tipo de Cobrança

                            string tipoCobranca = InsertUpdateCustItemCHIC(booked_id, Convert.ToInt32(serv.Bonificada), "", 0);

                            #endregion

                            //if (tipoCobranca != "Normal")
                            //    bookedM.UpdateComment1ByBookID(comentServ + " - Detalhes do Serviço: " + tipoCobranca, booked_id);

                            string descricaoTipoCobranca = "";
                            if (tipoCobranca != "Normal") descricaoTipoCobranca = " - Detalhes do Serviço: " + tipoCobranca;

                            string mascara = "";
                            if (serv.MascaraTI != "" && serv.MascaraTI != null) mascara = " - Máscara selecionada pelo Comercial: " + serv.MascaraTI;

                            bookedM.UpdateComment1ByBookID(comentServ + descricaoTipoCobranca + mascara, booked_id);

                            //descricaoServico = comentServ + " - Detalhes do Serviço: " + tipoCobranca;

                            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Serviço" + "|" +
                                booked_id.ToString() + "|" +
                                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                itemno + "|" +
                                itemsDT[0].item_desc.Trim() + "|" +
                                qtdServ.ToString() + "|" +
                                price.ToString() + "|" +
                                "Tipo Cobrança: " + tipoCobranca + "|" +
                                "" + "|" +
                                itemno + "\r\n";
                        }

                        #endregion

                        #region Insere LOG - Servico_Pedido_Venda

                        if (serv != null)
                        {
                            LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                            logServ.IDPedidoVenda = serv.IDPedidoVenda;
                            logServ.ProdCodEstr = serv.ProdCodEstr;
                            logServ.PercAplicacaoServico = serv.PercAplicacaoServico;
                            logServ.DataHora = DateTime.Now;
                            logServ.Operacao = "Importado p/ CHIC";
                            logServ.IDServPedVenda = serv.ID;
                            logServ.IDLogPedidoVenda = logPV.ID;
                            logServ.PrecoUnitario = serv.PrecoUnitario;
                            logServ.Bonificada = serv.Bonificada;

                            hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);
                        }

                        #endregion

                        #region Hidratante

                        if ((!cidade.UfSigla.Equals("SP")) &&
                            (!cidade.UfSigla.Equals("RJ")) &&
                            (!cidade.UfSigla.Equals("MG")) &&
                            //(!cidade.UfSigla.Equals("ES")) &&
                            (!cidade.UfSigla.Equals("PR")) &&
                            (!cidade.UfSigla.Equals("GO")) &&
                            existeOvos == 0)
                        {
                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                            itemCod = itemCod + 1;
                            item_ord = "0" + itemCod.ToString();

                            quantity = 0;
                            price = 0;

                            itemno = "172";
                            items.FillByItemNo(itemsDT, itemno);

                            bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                                String.Empty, String.Empty, String.Empty, hatchLoc, "", String.Empty, item_ord,
                                creatdby, datecrtd, creatdby, datecrtd, cal_date, 0, String.Empty, 0);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Hidratante" + "|" +
                                booked_id.ToString() + "|" +
                                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                itemno + "|" +
                                itemsDT[0].item_desc.Trim() + "|" +
                                quantity.ToString() + "|" +
                                price.ToString() + "|" +
                                "" + "|" +
                                itemno + "\r\n";
                        }

                        #endregion

                        #region Inserir Ovos Brasil

                        intComm = "";

                        int_commM.FillByOrderNo(int_commDT, orderNO);

                        if (pedVenda.OvosBrasil.Equals(1))
                        {
                            string logAntigo = "";

                            if (int_commDT.Count > 0)
                            {
                                logAntigo = int_commDT[0].changelg;
                                //int_commM.DeleteQuery(orderNO);
                            }

                            log = logAntigo + "\n\r\n\r" + log +
                                DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "" + "|" +
                                "Ovos Brasil: Sim";

                            intComm = data.Key.ToShortDateString() + " à " + dataFinal.ToShortDateString();
                            intComm = intComm + "\n\r\n\r Observação: " + pedVenda.Observacoes;

                            if (tipoColabOvosBrasil.Equals("Participa Lista"))
                            {
                                if (int_commDT.Count > 0)
                                {
                                    if (infoIncubatorio != "")
                                        infoIncubatorio = int_commDT[0].hatchinf.Trim() + " / " + infoIncubatorio;
                                    else
                                        infoIncubatorio = int_commDT[0].hatchinf.Trim();

                                    if (infoIncubatorio == "")
                                        infoIncubatorio = descricaoServico;
                                    else
                                        infoIncubatorio = infoIncubatorio + " / " + descricaoServico;

                                    int_commM.UpdateQuery(intComm, log, infoIncubatorio, false, codEstabelecimento, 
                                        false, false, orderNO);
                                }
                                else
                                {
                                    int_commM.InsertQuery(orderNO, intComm, log, false, infoIncubatorio, false,
                                    false, false, true, "", false, 0, false, transportadora, codEstabelecimento, false);
                                }
                            }
                            else
                            {
                                if (int_commDT.Count > 0)
                                {
                                    if (infoIncubatorio != "")
                                        infoIncubatorio = int_commDT[0].hatchinf.Trim() + " / " + infoIncubatorio;
                                    else
                                        infoIncubatorio = int_commDT[0].hatchinf.Trim();

                                    if (infoIncubatorio == "")
                                        infoIncubatorio = descricaoServico;
                                    else
                                        infoIncubatorio = infoIncubatorio + " / " + descricaoServico;

                                    int_commM.UpdateQuery(intComm, log, infoIncubatorio, true, codEstabelecimento, 
                                        false, false, orderNO);
                                }
                                else
                                {
                                    int_commM.InsertQuery(orderNO, intComm, log, true, infoIncubatorio, false,
                                        true, false, false, "", false, 0, false, transportadora, codEstabelecimento, false);
                                }
                            }
                        }
                        else
                        {
                            string logAntigo = "";

                            if (int_commDT.Count > 0)
                            {
                                logAntigo = int_commDT[0].changelg;
                                //int_commM.DeleteQuery(orderNO);
                            }

                            log = logAntigo + "\n\r\n\r" + log +
                                DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "" + "|" +
                                "Ovos Brasil: Não";

                            intComm = data.Key.ToShortDateString() + " à " + dataFinal.ToShortDateString();
                            intComm = intComm + "\n\r\n\r Observação: " + pedVenda.Observacoes;

                            if (tipoColabOvosBrasil.Equals("Participa Lista"))
                            {
                                if (int_commDT.Count > 0)
                                {
                                    if (infoIncubatorio != "")
                                        infoIncubatorio = int_commDT[0].hatchinf.Trim() + " / " + infoIncubatorio;
                                    else
                                        infoIncubatorio = int_commDT[0].hatchinf.Trim();

                                    if (infoIncubatorio == "")
                                        infoIncubatorio = descricaoServico;
                                    else
                                        infoIncubatorio = infoIncubatorio + " / " + descricaoServico;

                                    int_commM.UpdateQuery(intComm, log, infoIncubatorio, false, codEstabelecimento, 
                                        false, false, orderNO);
                                }
                                else
                                {
                                    int_commM.InsertQuery(orderNO, intComm, log, false, infoIncubatorio, false,
                                        false, false, true, "", false, 0, false, transportadora, codEstabelecimento, false);
                                }
                            }
                            else
                            {
                                if (int_commDT.Count > 0)
                                {
                                    if (infoIncubatorio != "")
                                        infoIncubatorio = int_commDT[0].hatchinf.Trim() + " / " + infoIncubatorio;
                                    else
                                        infoIncubatorio = int_commDT[0].hatchinf.Trim();

                                    if (infoIncubatorio == "")
                                        infoIncubatorio = descricaoServico;
                                    else
                                        infoIncubatorio = infoIncubatorio + " / " + descricaoServico;

                                    int_commM.UpdateQuery(intComm, log, infoIncubatorio, false, codEstabelecimento, 
                                        false, false, orderNO);
                                }
                                else
                                {
                                    int_commM.InsertQuery(orderNO, intComm, log, false, infoIncubatorio, false,
                                        false, false, false, "", false, 0, false, transportadora, codEstabelecimento, false);
                                }
                            }
                        }

                        #endregion
                    }
                }

                #region Envio de E-mails - Novo Geral

                MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                    new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                email.WorkFlowEmailCopiaPara = copiaPara;

                MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                    new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                #region Verifica Se existe Supervisores para gerar a copia

                string codigoVendedorApolo = pedVenda.Vendedor;
                if (pedVenda.Vendedor.Length == 6) codigoVendedorApolo = "0" + pedVenda.Vendedor;
                var listaSupVend = apolo.SUP_VENDEDOR
                    .Where(w => w.VendCod == codigoVendedorApolo
                        && w.FxaCod.Equals("0000003"))
                    .ToList();

                foreach (var sup in listaSupVend)
                {
                    MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                        .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                    if (supervisor != null)
                    {
                        copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                    }
                }

                #endregion

                ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String));

                apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                email.WorkFlowEmailStat = "Enviar";
                email.WorkFlowEmailData = DateTime.Now;
                email.WorkFlowEmailParaNome = nomeVendedor;
                email.WorkFlowEmailParaEmail = emailVendedor;
                //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                //email.WorkFlowEmailParaNome = "Teste";
                //email.WorkFlowEmailCopiaPara = email.WorkFlowEmailCopiaPara + ";programacao@hyline.com.br";
                email.WorkFlowEmailCopiaPara = email.WorkFlowEmailCopiaPara;
                email.WorkFlowEmailDeNome = "Sistema WEB";
                email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                email.WorkFlowEmailFormato = "Texto";
                email.WorkFlowEmailDocEmpCod = empresaApolo;

                string textCodigoCHIC = " Nº CHIC " + orderNO;

                email.WorkFlowEmailAssunto = empresa + " - PEDIDO ID " + pedVenda.ID.ToString()
                    + " IMPORTADO -" + textCodigoCHIC;

                string stringChar = "" + (char)13 + (char)10;

                corpoEmail = "Prezado " + nomeVendedor + "," + stringChar + stringChar
                    + "O pedido criado foi importado para o CHIC e gerou os seguintes pedidos: " + stringChar + stringChar
                    + corpoOperacao
                    + "Qualquer dúvida, entrar em contato com o Depto. de Programação." + stringChar + stringChar
                    + "SISTEMA WEB";

                email.WorkFlowEmailCorpo = corpoEmail;

                #region Gerar Solicitação de Venda PDF

                string caminho = GeraSolicitacaoVendaPDF(pedVenda.ID);

                email.WorkFlowEmailArquivosAnexos = caminho;

                #endregion

                apolo.WORKFLOW_EMAIL.AddObject(email);

                apolo.SaveChanges();

                #endregion

                //pedVenda.Status = "Importado";

                listItensPVSession = hlbappSession.Item_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == id).ToList();

                int qtdItensCancelados = listItensPVSession.Where(w => w.OrderNoCHIC == "Cancelado"
                    || w.OrderNoCHICReposicao == "Cancelado").Count();
                int qtdItenImportados = listItensPVSession
                    .Where(w => (w.OrderNoCHIC != "Cancelado" && w.OrderNoCHIC != "" && w.OrderNoCHIC != null)
                        || (w.OrderNoCHICReposicao != "Cancelado" && w.OrderNoCHICReposicao != ""
                            && w.OrderNoCHICReposicao != null))
                    .Count();

                if (qtdItensCancelados > 0 && qtdItenImportados > 0)
                    pedVenda.Status = "Importado Parcial";
                else if (qtdItensCancelados == 0 && qtdItenImportados > 0)
                    pedVenda.Status = "Importado Total";

                #endregion

                return retonro;
            }
            catch (Exception ex)
            {
                string msg = "";

                int linenum = Convert.ToInt32(ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' ')));

                if (ex.InnerException == null)
                    msg = ex.Message;
                else
                    msg = ex.Message + " / Inner Exception: " + ex.InnerException.Message;

                retonro = "Erro ao Importar para o CHIC: " + msg + " / Line Number: " + linenum.ToString();

                return retonro;
            }
        }

        public string InsertUpdateCustItemCHIC(int bookkey, int tipoCobranca, string tipoReposicao, int sobra)
        {
            custitemTableAdapter ciTA = new custitemTableAdapter();
            CHICMobileDataSet.custitemDataTable ciDT = new CHICMobileDataSet.custitemDataTable();
            string tipoCobrancaVacina = "Normal";
            if (tipoCobranca == 1) tipoCobrancaVacina = "Bonificação";
            else if (tipoCobranca == 2) tipoCobrancaVacina = "Cliente Envia";

            string sobraStr = "Não";
            if (sobra == 1) sobraStr = "Sim";

            ciTA.FillByBookkey(ciDT, bookkey);
            if (ciDT.Count > 0)
                ciTA.UpdateTipoCobrancaVacinaServico(tipoCobrancaVacina, sobraStr, bookkey);
            else
                ciTA.InsertQuery(bookkey, "", tipoCobrancaVacina, tipoReposicao, sobraStr);

            return tipoCobrancaVacina;
        }

        public ActionResult ImportaPVChic(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            try
            {
                #region Criação de Variáveis

                List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                int id = Convert.ToInt32(Session["idSelecionado"].ToString());
                Pedido_Venda pedVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();
                pedVenda.OvosBrasil = 0;
                DateTime orderDate = pedVenda.DataPedido;

                salesmanTableAdapter salesTA = new salesmanTableAdapter();
                CHICMobileDataSet.salesmanDataTable salesDT = new CHICMobileDataSet.salesmanDataTable();
                salesTA.FillByCode(salesDT, pedVenda.Vendedor);

                bookedMobileTableAdapter bookedM = new bookedMobileTableAdapter();
                tablesMobileTableAdapter tables = new tablesMobileTableAdapter();
                CHICMobileDataSet.tablesMobileDataTable tablesDT = new CHICMobileDataSet.tablesMobileDataTable();
                int_commMTableAdapter int_commM = new int_commMTableAdapter();
                CHICMobileDataSet.int_commMDataTable int_commDT = new CHICMobileDataSet.int_commMDataTable();
                itemsMobileTableAdapter items = new itemsMobileTableAdapter();
                CHICMobileDataSet.itemsMobileDataTable itemsDT = new CHICMobileDataSet.itemsMobileDataTable();

                string transportadora = "";
                string custoNo = "";
                string salesrep = "";
                string delivery = "";
                int itemCod = 0;
                string orderNO = "";
                string log = "";
                int booked_id = 0;
                string item_ord = "";
                string creatdby = Session["login"].ToString();
                DateTime datecrtd = DateTime.Now;
                string empresa = "";
                string empresaApolo = "";
                string copiaPara = "";
                string nomeVendedor = "";
                string emailVendedor = "";
                string corpoEmail = "";
                string corpoOperacao = "";
                string operacao = "";
                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();

                bool manterVolDisponivel = false;
                string motivo = "";

                #endregion

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                if (model["manterVolDisponivel"] != null)
                {
                    #region Informações p/ Incubatório

                    string infoIncubatorio = "";
                    if (model["infoIncubatorio"] != null)
                    {
                        if (model["infoIncubatorio"] != "")
                        {
                            infoIncubatorio = model["infoIncubatorio"];
                        }
                    }

                    #endregion

                    #region Valida Opção de Manter Volume Disponível

                    manterVolDisponivel = Convert.ToBoolean(model["manterVolDisponivel"].ToString().Replace("false,", ""));

                    if (model["motivo"] != null)
                        motivo = model["motivo"];

                    if (manterVolDisponivel && motivo == "")
                    {
                        ViewBag.Erro = "Com a opção de Manter Volume Disponível marcada, é necessário "
                            + "informar o Motivo!";
                        return View("FinalizaPV");
                    }

                    if (motivo.Length > 80)
                    {
                        ViewBag.Erro = "A observação só pode conter 80 caracteres pelo motivo do "
                            + "tamanho do campo no CHIC!!!";
                        return View("FinalizaPV");
                    }

                    int existeImportacaoCHIC = 0;
                    existeImportacaoCHIC = listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Count();
                    if (manterVolDisponivel && existeImportacaoCHIC == 0)
                    {
                        ViewBag.Erro = "Só é possível Manter Volume Disponível se existir item importado!";
                        return View("FinalizaPV");
                    }

                    #endregion

                    #region Valida se a data foi alterada (DESATIVADA)

                    //List<Item_Pedido_Venda> listItensPVMVD =
                    //        (List<Item_Pedido_Venda>)Session["ItensPVListMVD"];

                    //int existeDataAlterada = 0;

                    //var listaMVDVerificaDataAtual = listItensPVSession
                    //    .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado"
                    //        && w.Importar == 1).ToList();

                    //var listaMVDVerificaDataAnterior = listItensPVMVD
                    //    .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                    //    .ToList();

                    //foreach (var atual in listaMVDVerificaDataAtual)
                    //{
                    //    foreach (var antigo in listaMVDVerificaDataAnterior)
                    //    {
                    //        if (atual.DataEntregaInicial != antigo.DataEntregaInicial)
                    //            existeDataAlterada = existeDataAlterada + 1;
                    //    }
                    //}

                    //if ((existeDataAlterada == 0) && manterVolDisponivel)
                    //{
                    //    ViewBag.Erro = "Não foi realizada a alteração de Data dos itens alterados!"
                    //        + " Não é possível manter a disponibilidade!!!";
                    //    return View("FinalizaPV");
                    //}

                    #endregion

                    #region Valor Total do Pintinho

                    decimal valorTotalPintinho = 0;
                    if (model["valorTotalPintinho"] != null)
                    {
                        if (model["valorTotalPintinho"] != "")
                        {
                            valorTotalPintinho = Convert.ToDecimal(model["valorTotalPintinho"]);
                            pedVenda.ValorTotalPintinho = valorTotalPintinho;
                        }
                    }

                    #endregion

                    #region Manter Volume Disponível

                    if (manterVolDisponivel)
                    {
                        var listaMVD = listItensPVSession
                            .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado"
                                && w.Importar == 1)
                            .GroupBy(g => g.OrderNoCHIC).ToList();

                        #region Carregando Dados do Pedido

                        if (salesDT[0].inv_comp.Trim().Equals("BR"))
                        {
                            transportadora = "Transema";
                            custoNo = "0000178";
                            salesrep = "000095";
                            empresa = "[HLB]";
                            copiaPara = "confirmacoes@hyline.com.br";
                            empresaApolo = "5";
                        }
                        else if (salesDT[0].inv_comp.Trim().Equals("LB"))
                        {
                            transportadora = "Transema";
                            custoNo = "0008201";
                            salesrep = "000094";
                            empresa = "[LTZ]";
                            copiaPara = "confirmacoes@ltz.com.br";
                            empresaApolo = "7";
                        }
                        else if (salesDT[0].inv_comp.Trim().Equals("HN"))
                        {
                            transportadora = "H&N";
                            custoNo = "0008730";
                            salesrep = "000025";
                            empresa = "[H&N]";
                            copiaPara = "confirmacoes@hnavicultura.com.br";
                            empresaApolo = "14";
                        }
                        else if (salesDT[0].inv_comp.Trim().Equals("PL"))
                        {
                            transportadora = "Planalto";
                            custoNo = "0018971";
                            salesrep = "000139";
                            empresa = "[PPA]";
                            copiaPara = "confirmacoes@planaltopostura.com.br";
                            empresaApolo = "20";
                        }

                        delivery = motivo;

                        #region Envio de E-mails p/ Técnicos

                        MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE verificaCidade = apoloStatic.CIDADE
                            .Where(w => apoloStatic.ENTIDADE.Any(e => e.EntCod == pedVenda.CodigoCliente
                                && e.CidCod == w.CidCod))
                            .FirstOrDefault();

                        if (verificaCidade != null)
                        {
                            var listaTecnicos = apolo2Static.USUARIO
                                .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                        && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == verificaCidade.UfSigla)
                                        && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                            && e.USERCodigoCHIC == pedVenda.Empresa)))
                                .ToList();

                            foreach (var item in listaTecnicos)
                            {
                                if (copiaPara == "")
                                    copiaPara = item.UsuEmail;
                                else
                                    copiaPara = copiaPara + ";" + item.UsuEmail;
                            }
                        }

                        #endregion

                        #endregion

                        #region Insere LOG - Pedido_Venda

                        logPV = new LOG_Pedido_Venda();
                        logPV.DataPedido = pedVenda.DataPedido;
                        logPV.Usuario = Session["usuario"].ToString();
                        logPV.DataHora = DateTime.Now;
                        logPV.CodigoCliente = custoNo;
                        logPV.OvosBrasil = pedVenda.OvosBrasil;
                        logPV.CondicaoPagamento = delivery;
                        logPV.Observacoes = pedVenda.Observacoes;
                        logPV.Vendedor = salesrep;
                        logPV.Status = pedVenda.Status;
                        logPV.Operacao = "Volume Disponível Mantido";
                        logPV.IDPedidoVenda = pedVenda.ID;
                        logPV.Motivo = delivery;
                        logPV.Projecao = pedVenda.Projecao;

                        hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                        hlbppLOG.SaveChanges();

                        #endregion

                        foreach (var data in listaMVD)
                        {
                            #region Dados do Pedido

                            itemCod = 0;

                            string orderNoCHIC = data.Key;

                            CHICMobileDataSet.bookedMobileDataTable bookedDT =
                                    new CHICMobileDataSet.bookedMobileDataTable();

                            bookedM.FillChicksAndEggsByOrderNo(bookedDT, orderNoCHIC);

                            var listaBooked = bookedDT
                                    .GroupBy(g =>
                                        new
                                        {
                                            g.cal_date,
                                            g.item,
                                            g.accountno,
                                            g.location
                                        })
                                    .Select(s =>
                                        new
                                        {
                                            s.Key.cal_date,
                                            s.Key.item,
                                            s.Key.accountno,
                                            s.Key.location,
                                            qtd = s.Sum(m => m.quantity)
                                        })
                                    .ToList();

                            #endregion

                            #region Insere Cabeçalho do Pedido

                            CHICMobileDataSet.ordersMobileDataTable ordersDT = new CHICMobileDataSet.ordersMobileDataTable();
                            ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();

                            orderTA.FillByOrderNo(ordersDT, orderNoCHIC);

                            Thread.Sleep(5 * 1000);
                            //orderNO = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                            //orderNO = ProximoOrderNOCHIC();
                            //tables.FillByName(tablesDT, "orders");
                            //orderNO = (Convert.ToInt32(tablesDT[0].lastno) + 1).ToString();
                            orderNO = NextCodeCHIC("orders");

                            int_commM.DeleteQuery(orderNO);

                            orderTA.Insert(orderNO, 0, Convert.ToDateTime("01/01/1988"), ordersDT[0].order_date,
                                    custoNo, "Y", pedVenda.ID.ToString(), 0, ordersDT[0].del_date, delivery,
                                    String.Empty, String.Empty, String.Empty, String.Empty, String.Empty, 0, salesrep,
                                    String.Empty, String.Empty);

                            //tables.UpdateQuery(Convert.ToDecimal(orderNO), "orders");

                            log = "\r\n\r\n" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Cabeçalho|" +
                                orderNO + "|" +
                                ordersDT[0].del_date + "|" +
                                custoNo + "|" +
                                delivery + "|" +
                                salesrep + "\n\r";

                            #endregion

                            foreach (var item in listaBooked)
                            {
                                #region Verifica Data e Quantidade para Gerar Qtde. Parcial

                                vartablMobileTableAdapter varTA = new vartablMobileTableAdapter();
                                CHICMobileDataSet.vartablMobileDataTable varDT =
                                    new CHICMobileDataSet.vartablMobileDataTable();

                                items.FillByItemNo(itemsDT, item.item);

                                varTA.FillByVariety(varDT, itemsDT[0].variety);

                                string linha = varDT[0].desc.Trim();

                                Item_Pedido_Venda itemPV = listItensPVSession
                                    .Where(w => w.OrderNoCHIC == orderNoCHIC
                                        && w.ProdCodEstr == linha).FirstOrDefault();

                                if (itemPV == null)
                                    itemPV = listItensPVSession
                                        .Where(w => w.OrderNoCHIC == orderNoCHIC).FirstOrDefault();

                                DateTime cal_date = DateTime.Today;

                                ENTIDADE entidade = apoloStatic.ENTIDADE
                                    .Where(w => w.EntCod == pedVenda.CodigoCliente).FirstOrDefault();
                                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE
                                    .Where(w => w.CidCod == entidade.CidCod).FirstOrDefault();
                                UNID_FEDERACAO uf = apoloStatic.UNID_FEDERACAO
                                    .Where(w => w.UfSigla == cidade.UfSigla && w.PaisSigla == cidade.PaisSigla)
                                    .FirstOrDefault();

                                if (uf.UfRegGeog == "Norte" || uf.UfRegGeog == "Nordeste")
                                    cal_date = itemPV.DataEntregaInicial.AddDays(-23);
                                else
                                    cal_date = itemPV.DataEntregaInicial.AddDays(-22);

                                decimal qtdeParaManterDisponivel = item.qtd;
                                if (cal_date == item.cal_date && itemPV.QtdeLiquida < item.qtd)
                                    qtdeParaManterDisponivel = (item.qtd - itemPV.QtdeLiquida);

                                #endregion

                                #region Produto Vendido

                                itemCod = itemCod + 1;
                                item_ord = "0" + itemCod.ToString();

                                //tables.FillByName(tablesDT, "booked");
                                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");
                                booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                                bookedM.Insert(booked_id, item.cal_date, custoNo, item.item, qtdeParaManterDisponivel, 
                                    0, orderNO, "O",
                                    String.Empty, String.Empty, String.Empty, item.location, item.accountno,
                                    String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                    ordersDT[0].del_date, 0, String.Empty, 0);

                                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                        Session["login"].ToString() + "|" +
                                        " Produto" + "|" +
                                        booked_id.ToString() + "|" +
                                        item.cal_date.ToShortDateString() + " " + item.cal_date.ToShortTimeString() + "|" +
                                        item.item + "|" +
                                        item.qtd.ToString() + "|" +
                                        0 + "|" +
                                        item.accountno + "\r\n";

                                #endregion

                                #region Insere LOG - Item_Ped_Venda

                                LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                                logItemPV.IDPedidoVenda = itemPV.IDPedidoVenda;
                                logItemPV.Sequencia = itemPV.Sequencia;
                                logItemPV.ProdCodEstr = itemPV.ProdCodEstr;
                                logItemPV.DataEntregaInicial = ordersDT[0].del_date;
                                logItemPV.DataEntregaFinal = ordersDT[0].del_date;
                                logItemPV.QtdeLiquida = Convert.ToInt32(item.qtd);
                                logItemPV.PercBonificacao = 0;
                                logItemPV.QtdeBonificada = 0;
                                logItemPV.QtdeReposicao = 0;
                                logItemPV.PrecoUnitario = 0;
                                logItemPV.DataHora = DateTime.Now;
                                logItemPV.Operacao = "Volume Disponível Mantido";
                                logItemPV.IDItPedVenda = itemPV.ID;
                                logItemPV.IDLogPedidoVenda = logPV.ID;
                                logItemPV.OrderNoCHIC = orderNO;
                                logItemPV.OrderNoCHICReposicao = itemPV.OrderNoCHICReposicao;

                                hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                                #endregion

                                #region Envio de E-mails - Novo

                                items.FillByItemNo(itemsDT, item.item);

                                MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL emailMVD =
                                    new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                                ObjectParameter numeroMVD = new ObjectParameter("codigo", typeof(global::System.String)); ;

                                MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apoloMVD =
                                    new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                                apoloMVD.GerarCodigo("1", "WORKFLOW_EMAIL", numeroMVD);

                                emailMVD.WorkFlowEmailSeq = Convert.ToInt32(numeroMVD.Value);
                                emailMVD.WorkFlowEmailStat = "Enviar";
                                emailMVD.WorkFlowEmailData = DateTime.Now;
                                emailMVD.WorkFlowEmailParaNome = empresa;
                                emailMVD.WorkFlowEmailParaEmail = "programacao@hyline.com.br";
                                emailMVD.WorkFlowEmailCopiaPara = copiaPara;
                                emailMVD.WorkFlowEmailDeNome = "Sistema WEB";
                                emailMVD.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                                emailMVD.WorkFlowEmailFormato = "Texto";
                                emailMVD.WorkFlowEmailDocEmpCod = empresaApolo;

                                emailMVD.WorkFlowEmailAssunto = "**** VOLUME DISPONÍVEL DE " 
                                    + itemsDT[0].variety.Trim()
                                    + " EM " + item.cal_date.ToShortDateString() + " ****";

                                string stringCharMVD = "" + (char)13 + (char)10;

                                corpoEmail = "Prezado " + empresa + "," + stringCharMVD + stringCharMVD
                                    + "Com a alteração do pedido " + orderNoCHIC + " pelo motivo " + delivery
                                    + ", foi mantido o volume na data " 
                                    + item.cal_date.AddDays(21).ToShortDateString()
                                    + " da linhagem " + itemsDT[0].variety.Trim()
                                    + " com a quantidade de " + qtdeParaManterDisponivel.ToString()
                                    + " (Nº CHIC " + orderNO + ")." + stringCharMVD + stringCharMVD
                                    + "Qualquer dúvida, entrar em contato pelo e-mail programacao@hyline.com.br."
                                    + stringCharMVD + stringCharMVD + "SISTEMA WEB";

                                emailMVD.WorkFlowEmailCorpo = corpoEmail;

                                apoloMVD.WORKFLOW_EMAIL.AddObject(emailMVD);

                                apoloMVD.SaveChanges();

                                #endregion
                            }

                            #region Custom Order Info

                            decimal orderNoCHICDecimal = Convert.ToDecimal(orderNoCHIC);

                            int_commM.InsertQuery(orderNO, "", log, false, String.Empty, false, false, false, false,
                                "", false, orderNoCHICDecimal, false, "", "", false);

                            #endregion
                        }
                    }

                    #endregion

                    #region Pedido Normal - COMENTADO - Substituido por Função

                    //log = "";

                    ////var listaData = listItensPVSession.Where(w => w.Importar == 1)
                    ////    .GroupBy(g => g.DataEntregaInicial).ToList();

                    //var listaData = listItensPVSession.Where(w => w.OrderNoCHIC != "Cancelado")
                    //    .GroupBy(g => g.DataEntregaInicial).ToList();

                    //empresa = "";
                    //copiaPara = "";
                    //nomeVendedor = "";
                    //emailVendedor = "";
                    //corpoEmail = "";
                    //corpoOperacao = "";
                    //operacao = "";

                    //#region Dados do Pedido

                    //orderNO = "";
                    //booked_id = 0;
                    //item_ord = "";

                    //string hatchLoc = "CH";
                    //if (pedVenda.Empresa.Equals("PL"))
                    //    hatchLoc = "NM";

                    //DateTime cal_date = DateTime.Now;

                    //int_commDT = new CHICMobileDataSet.int_commMDataTable();

                    //custoNo = pedVenda.CodigoCliente;
                    //delivery = pedVenda.CondicaoPagamento;

                    //int tamanho = pedVenda.Observacoes.Length;

                    //string com1 = "";
                    //string com2 = "";
                    //string com3 = "";
                    //if (tamanho <= 80)
                    //{
                    //    com1 = pedVenda.Observacoes.Substring(0, tamanho);
                    //}
                    //if ((tamanho > 80) && (tamanho <= 160))
                    //{
                    //    com1 = pedVenda.Observacoes.Substring(0, 80);
                    //    com2 = pedVenda.Observacoes.Substring(80, tamanho - 80);
                    //}
                    //if ((tamanho > 160) && (tamanho <= 240))
                    //{
                    //    com1 = pedVenda.Observacoes.Substring(0, 80);
                    //    com2 = pedVenda.Observacoes.Substring(80, tamanho - 80);
                    //    com3 = pedVenda.Observacoes.Substring(160, tamanho - 160);
                    //}

                    //salesrep = pedVenda.Vendedor;

                    //string tipoColabOvosBrasil = "";
                    //ENTIDADE1 entidade1 = apoloStatic.ENTIDADE1
                    //                    .Where(e1 => e1.EntCod == custoNo)
                    //                    .First();

                    //ENTIDADE entidade = apoloStatic.ENTIDADE
                    //                    .Where(e1 => e1.EntCod == custoNo)
                    //                    .First();

                    //CIDADE cidade = apoloStatic.CIDADE.Where(w => w.CidCod == entidade.CidCod).FirstOrDefault();
                    //UNID_FEDERACAO uf = apoloStatic.UNID_FEDERACAO
                    //    .Where(w => w.UfSigla == cidade.UfSigla && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();

                    //#region Comentada a rotina dos Ovos Brasil, pois não utiliza mais

                    ////if (entidade1.USERTipoColabOvosBRasil != null)
                    ////{
                    ////    tipoColabOvosBrasil = entidade1.USERTipoColabOvosBRasil;
                    ////}

                    //#endregion

                    //itemCod = 0;

                    //if (salesDT[0].inv_comp.Trim().Equals("BR"))
                    //{
                    //    empresa = "[HLB]";
                    //    copiaPara = "confirmacoes@hyline.com.br";
                    //}
                    //else if (salesDT[0].inv_comp.Trim().Equals("LB"))
                    //{
                    //    empresa = "[LTZ]";
                    //    copiaPara = "confirmacoes@ltz.com.br";
                    //}
                    //else if (salesDT[0].inv_comp.Trim().Equals("HN"))
                    //{
                    //    empresa = "[H&N]";
                    //    copiaPara = "confirmacoes@hnavicultura.com.br";
                    //}
                    //else if (salesDT[0].inv_comp.Trim().Equals("PL"))
                    //{
                    //    empresa = "[PL]";
                    //    copiaPara = "programacao@planaltopostura.com.br";
                    //}

                    //nomeVendedor = salesDT[0].salesman.Trim();
                    //emailVendedor = salesDT[0].email.Trim().ToString();

                    //#region Envio de E-mails p/ Técnicos

                    //if (cidade != null)
                    //{
                    //    var listaTecnicos = apolo2Static.USUARIO
                    //        .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                    //                && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == cidade.UfSigla)
                    //                && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                    //                    && e.USERCodigoCHIC == pedVenda.Empresa)))
                    //        .ToList();

                    //    foreach (var item in listaTecnicos)
                    //    {
                    //        if (copiaPara == "")
                    //            copiaPara = item.UsuEmail;
                    //        else
                    //            copiaPara = copiaPara + ";" + item.UsuEmail;
                    //    }
                    //}

                    //#endregion

                    //#endregion

                    //#region Dados da Vacina Primária para verificar se é Vaxxitek por causa do Item

                    //string vacPrim = Session["vacinaPrimariaPV"].ToString();

                    //PRODUTO vacPrimaria = apoloStatic.PRODUTO
                    //    .Where(w => w.ProdCodEstr == vacPrim).FirstOrDefault();

                    //bool temVaxxitek = false;
                    //if (vacPrimaria != null)
                    //    if (vacPrimaria.ProdNomeAlt1.Contains("VAXXITEK"))
                    //        temVaxxitek = true;

                    //#endregion

                    //#region Insere LOG - Pedido_Venda

                    //logPV = new LOG_Pedido_Venda();
                    //logPV.DataPedido = pedVenda.DataPedido;
                    //logPV.Usuario = Session["usuario"].ToString();
                    //logPV.DataHora = DateTime.Now;
                    //logPV.CodigoCliente = pedVenda.CodigoCliente;
                    //logPV.OvosBrasil = pedVenda.OvosBrasil;
                    //logPV.CondicaoPagamento = pedVenda.CondicaoPagamento;
                    //logPV.Observacoes = pedVenda.Observacoes;
                    //logPV.Vendedor = pedVenda.Vendedor;
                    //logPV.Status = pedVenda.Status;
                    //logPV.Operacao = "Importado p/ CHIC";
                    //logPV.IDPedidoVenda = pedVenda.ID;

                    //hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                    //hlbppLOG.SaveChanges();

                    //#endregion

                    //foreach (var data in listaData)
                    //{
                    //    //var listItensPV = listItensPVSession
                    //    //    .Where(w => w.DataEntregaInicial == data.Key && w.Importar == 1)
                    //    //    .ToList();

                    //    var listItensPV = listItensPVSession
                    //        .Where(w => w.DataEntregaInicial == data.Key && w.OrderNoCHIC != "Cancelado")
                    //        .ToList();

                    //    //var listItensPV2 = listItensPVSession
                    //    //    .Where(w => w.DataEntregaInicial == data.Key && w.Importar == 0)
                    //    //    .ToList();

                    //    string itemno = "";
                    //    itemsDT = new CHICMobileDataSet.itemsMobileDataTable();
                    //    int quantity = 0;
                    //    decimal price = 0.0000m;
                    //    DateTime dataFinal = DateTime.Now;
                    //    string intComm = "";

                    //    int qtdLiquida = listItensPVSession.Sum(s => s.QtdeLiquida);

                    //    int qtdReposicao = Convert.ToInt32(listItensPVSession.Sum(s => s.QtdeReposicao));

                    //    bool edicao = false;
                    //    bool edicaoItem = false;
                    //    string edicaoText = "";
                    //    string edicaoItemText = "";

                    //    CHICMobileDataSet.ordersMobileDataTable ordersDT = new CHICMobileDataSet.ordersMobileDataTable();
                    //    ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();
                    //    CHICMobileDataSet.bookedNavDataTable bookedDT = new CHICMobileDataSet.bookedNavDataTable();

                    //    if (qtdLiquida > 0)
                    //    {
                    //        #region Verifica se Existe Pedido / Item

                    //        tables.FillByName(tablesDT, "booked");

                    //        string ordernoCHICExiste = "";
                    //        //if (item.OrderNoCHIC != null)
                    //        //ordernoCHICExiste = item.OrderNoCHIC;
                    //        if (listItensPV.Max(m => m.OrderNoCHIC) != "")
                    //            ordernoCHICExiste = listItensPV.Max(m => m.OrderNoCHIC);

                    //        if (ordernoCHICExiste == null)
                    //            ordernoCHICExiste = "";

                    //        orderTA.FillByOrderNo(ordersDT, ordernoCHICExiste);

                    //        bookedNavTableAdapter bookedTA = new bookedNavTableAdapter();

                    //        if (ordersDT.Count == 0)
                    //        {
                    //            orderNO = bookedTA.ReturnOrderNoByCustAndCalDate(cal_date, pedVenda.CodigoCliente,
                    //                salesDT[0].inv_comp);

                    //            if ((orderNO == "") || (orderNO == null))
                    //            {
                    //                //orderNO = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                    //                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                edicaoText = "Inclusão";
                    //            }
                    //            else
                    //            {
                    //                edicao = true;
                    //                bookedTA.FillByOrderNoAndItem(bookedDT, orderNO, itemno);
                    //                if (bookedDT.Count > 0)
                    //                {
                    //                    //booked_id = Convert.ToInt32(bookedDT[0].book_id);
                    //                    edicaoItem = true;
                    //                    edicaoItemText = "Alteração";
                    //                }
                    //                else
                    //                {
                    //                    //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                    edicaoItemText = "Inclusão";
                    //                }
                    //                edicaoText = "Alteração";
                    //            }
                    //        }
                    //        else
                    //        {
                    //            edicao = true;
                    //            edicaoItem = true;
                    //            orderNO = ordersDT[0].orderno.Trim();
                    //            bookedTA.FillByOrderNoAndItem(bookedDT, orderNO, itemno);
                    //            //booked_id = Convert.ToInt32(bookedDT[0].book_id);
                    //            edicaoText = "Alteração";
                    //            edicaoItemText = "Alteração";
                    //            if (uf.UfRegGeog.Equals("Norte") || uf.UfRegGeog.Equals("Nordeste"))
                    //                cal_date = listItensPVSession.Max(s => s.DataEntregaInicial).AddDays(-23);
                    //            else
                    //                cal_date = listItensPVSession.Max(s => s.DataEntregaInicial).AddDays(-22);
                    //        }

                    //        //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                    //        #endregion

                    //        #region Insere / Altera Cabeçalho do Pedido

                    //        DateTime dataEntregaFinal = listItensPVSession.Max(m => m.DataEntregaFinal);

                    //        if (edicao)
                    //        {
                    //            orderTA.UpdateQuery(orderDate, custoNo, data.Key, delivery,
                    //                String.Empty, String.Empty, String.Empty, salesrep, orderNO);

                    //            bookedM.UpdateCustomerAndCalDate(custoNo, cal_date, orderNO);
                    //        }
                    //        else
                    //        {
                    //            Thread.Sleep(5 * 1000);
                    //            orderNO = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                    //            //orderNO = ProximoOrderNOCHIC();
                    //            int_commM.DeleteQuery(orderNO);
                    //            orderTA.Insert(orderNO, 0, Convert.ToDateTime("01/01/1988"), orderDate, custoNo, "Y",
                    //                pedVenda.ID.ToString(), 0, data.Key, delivery,
                    //                String.Empty, String.Empty, String.Empty, String.Empty, String.Empty, 0, salesrep,
                    //                String.Empty, String.Empty);
                    //        }

                    //        log = "\r\n\r\n" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //            Session["login"].ToString() + "|" +
                    //            edicaoText + " Cabeçalho|" +
                    //            orderNO + "|" +
                    //            orderDate + "|" +
                    //            custoNo + "|" +
                    //            data.Key.ToShortDateString() + " " +
                    //            dataEntregaFinal.ToShortTimeString() + "|" +
                    //            delivery + "|" +
                    //            com1 + "|" +
                    //            com2 + "|" +
                    //            com3 + "|" +
                    //            salesrep + "\n\r";

                    //        #endregion
                    //    }

                    //    if ((qtdReposicao > 0) || (qtdReposicao == 0))
                    //    {
                    //        if (listItensPVSession.Max(m => m.OrderNoCHICReposicao) != null)
                    //        {
                    //            if (!listItensPVSession.Max(m => m.OrderNoCHICReposicao).Equals(""))
                    //            {
                    //                string orderNoReposicaoDelete = listItensPVSession.Max(m => m.OrderNoCHICReposicao);

                    //                #region Deleta os Items para adicioná-los novamente

                    //                bookedM.DeleteQuery(orderNoReposicaoDelete);

                    //                if ((qtdLiquida == 0) || (qtdReposicao == 0))
                    //                {
                    //                    int_commM.DeleteQuery(orderNoReposicaoDelete);
                    //                    orderTA.DeleteQuery(orderNoReposicaoDelete);
                    //                }

                    //                #endregion
                    //            }
                    //        }

                    //        #region Deleta Pedidos de Reposição Anteriores

                    //        if (!manterVolDisponivel)
                    //        {
                    //            CHICMobileDataSet.int_commMDataTable intCommReposicaoDT =
                    //                new CHICMobileDataSet.int_commMDataTable();

                    //            decimal orderNoPrincipalDelete = 0;
                    //            if (orderNO != "")
                    //            {
                    //                orderNoPrincipalDelete = Convert.ToDecimal(orderNO);

                    //                int_commM.FillByOrderNoMain(intCommReposicaoDT, orderNoPrincipalDelete);

                    //                foreach (var itemReposicao in intCommReposicaoDT.ToList())
                    //                {
                    //                    int_commM.DeleteQuery(itemReposicao.orderno);
                    //                    bookedM.DeleteQuery(itemReposicao.orderno);
                    //                    orderTA.DeleteQuery(itemReposicao.orderno);
                    //                }
                    //            }
                    //        }

                    //        #endregion
                    //    }

                    //    string orderNoReposicao = "";

                    //    #region Deleta Itens deletados no WEB

                    //    CHICMobileDataSet.bookedMobileDataTable bookedMDTItensOrder =
                    //        new CHICMobileDataSet.bookedMobileDataTable();
                    //    bookedM.FillChicksAndEggsByOrderNo(bookedMDTItensOrder, orderNO);

                    //    foreach (var item in bookedMDTItensOrder.ToList())
                    //    {
                    //        CHICMobileDataSet.itemsMobileDataTable iDel = 
                    //            new CHICMobileDataSet.itemsMobileDataTable();

                    //        items.FillByItemNo(iDel, item.item);

                    //        if (iDel.Count > 0)
                    //        {
                    //            vartablMobileTableAdapter varTA = new vartablMobileTableAdapter();
                    //            CHICMobileDataSet.vartablMobileDataTable vDT = 
                    //                new CHICMobileDataSet.vartablMobileDataTable();

                    //            varTA.FillByVariety(vDT, iDel[0].variety);

                    //            if (vDT.Count > 0)
                    //            {
                    //                string varDelItem = vDT[0].desc.Trim();
                    //                int existeItemWEB = listItensPV
                    //                    .Where(w => w.ProdCodEstr == varDelItem).Count();
                    //                if (existeItemWEB == 0)
                    //                {
                    //                    bookedM.DeleteBookID(item.book_id);
                    //                }
                    //            }
                    //        }
                    //    }

                    //    #endregion

                    //    foreach (var item in listItensPV)
                    //    {
                    //        #region Dados do Item

                    //        if (uf.UfRegGeog.Equals("Norte") || uf.UfRegGeog.Equals("Nordeste"))
                    //            cal_date = item.DataEntregaInicial.AddDays(-23);
                    //        else
                    //            cal_date = item.DataEntregaInicial.AddDays(-22);

                    //        dataFinal = item.DataEntregaFinal;

                    //        itemCod = itemCod + 1;

                    //        vartablMobileTableAdapter vartabl = new vartablMobileTableAdapter();
                    //        CHICMobileDataSet.vartablMobileDataTable vartablDT =
                    //            new CHICMobileDataSet.vartablMobileDataTable();
                    //        vartabl.FillByDesc(vartablDT, item.ProdCodEstr.Replace(" - Ovos", ""));
                    //        string varietyShort = vartablDT[0].variety;

                    //        string form = item.ProdCodEstr.Contains("Ovos") ? "HN" : "DV";

                    //        items.FillByVarietyAndForm(itemsDT, varietyShort, form);

                    //        // Localizando o Item
                    //        string accountno = "";
                    //        string descricao = "";
                    //        bool caixaPlastica = false;
                    //        bool vaxxitek = false;
                    //        bool temCaixaPlastica = false;
                    //        bool temVaxxitekFiltro = false;
                    //        for (int i = 0; i < itemsDT.Count; i++)
                    //        {
                    //            caixaPlastica = itemsDT[i].item_desc.Contains("-P") ? true : false;
                    //            if (caixaPlastica.Equals(false))
                    //                caixaPlastica = itemsDT[i].item_desc.Contains("- P") ? true : false;
                    //            vaxxitek = itemsDT[i].item_desc.Contains("VAXX") ? true : false;

                    //            if ((temCaixaPlastica) &&
                    //                (temVaxxitekFiltro) &&
                    //                (caixaPlastica) && (vaxxitek))
                    //            {
                    //                itemno = itemsDT[i].item_no;
                    //                accountno = itemsDT[i].account_no;
                    //                descricao = itemsDT[i].item_desc;
                    //            }
                    //            else if ((!temCaixaPlastica) &&
                    //                     (temVaxxitekFiltro) &&
                    //                     (!caixaPlastica) && (vaxxitek))
                    //            {
                    //                itemno = itemsDT[i].item_no;
                    //                accountno = itemsDT[i].account_no;
                    //                descricao = itemsDT[i].item_desc;
                    //            }
                    //            else if ((temCaixaPlastica) &&
                    //                     (!temVaxxitekFiltro) &&
                    //                     (caixaPlastica) && (!vaxxitek))
                    //            {
                    //                itemno = itemsDT[i].item_no;
                    //                accountno = itemsDT[i].account_no;
                    //                descricao = itemsDT[i].item_desc;
                    //            }
                    //            else if ((!temCaixaPlastica) &&
                    //                     (!temVaxxitekFiltro) &&
                    //                     (!caixaPlastica) && (!vaxxitek))
                    //            {
                    //                itemno = itemsDT[i].item_no;
                    //                accountno = itemsDT[i].account_no;
                    //                descricao = itemsDT[i].item_desc;
                    //            }
                    //        }

                    //        #endregion

                    //        if (item.QtdeLiquida > 0)
                    //        {
                    //            #region Produto Vendido

                    //            item_ord = "0" + itemCod.ToString();

                    //            //quantity = Convert.ToInt32(item.QtdeLiquida - item.QtdeReposicao);
                    //            quantity = Convert.ToInt32(item.QtdeLiquida);

                    //            price = 0.0000m;

                    //            if (tipoColabOvosBrasil.Equals("Participa Lista") &&
                    //                !pedVenda.OvosBrasil.Equals(0))
                    //            {
                    //                price = Convert.ToDecimal(item.PrecoUnitario + 0.0100m);
                    //            }
                    //            else
                    //            {
                    //                price = Convert.ToDecimal(item.PrecoUnitario);
                    //            }

                    //            if (edicaoItem)
                    //            {
                    //                CHICMobileDataSet.bookedMobileDataTable bookedMDT =
                    //                    new CHICMobileDataSet.bookedMobileDataTable();
                    //                bookedM.FillChicksAndEggsByOrderNoAndVariety(bookedMDT, orderNO,
                    //                    varietyShort);

                    //                CHICMobileDataSet.bookedMobileRow produtoVendido =
                    //                    bookedMDT.Where(w => w.alt_desc.Trim() == "").FirstOrDefault();

                    //                if (produtoVendido != null)
                    //                {
                    //                    booked_id = Convert.ToInt32(produtoVendido.book_id);

                    //                    bookedM.UpdateQuery(cal_date, custoNo, quantity, price,
                    //                        item.DataEntregaInicial, "", booked_id);
                    //                }
                    //                else
                    //                {
                    //                    tables.FillByName(tablesDT, "booked");
                    //                    booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                    //                    bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                    //                        String.Empty, String.Empty, String.Empty, hatchLoc, accountno, String.Empty, item_ord,
                    //                        creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0, String.Empty, 0);

                    //                    tables.UpdateQuery(Convert.ToDecimal(booked_id));
                    //                }
                    //                //itemsDT = new CHICMobileDataSet.itemsMobileDataTable();
                    //                //items.FillByVariety(itemsDT, varietyShort);

                    //                //for (int i = 0; i < itemsDT.Count; i++)
                    //                //{
                    //                //    bookedM.DeleteByItemOrderNo(orderNO, itemsDT[i].item_no);
                    //                //}
                    //            }
                    //            else
                    //            {
                    //                tables.FillByName(tablesDT, "booked");
                    //                booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                    //                bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                    //                    String.Empty, String.Empty, String.Empty, hatchLoc, accountno, String.Empty, item_ord,
                    //                    creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0, String.Empty, 0);

                    //                tables.UpdateQuery(Convert.ToDecimal(booked_id));
                    //            }

                    //            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                    Session["login"].ToString() + "|" +
                    //                    edicaoItemText + " Produto" + "|" +
                    //                    booked_id.ToString() + "|" +
                    //                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                    itemno + "|" +
                    //                    descricao.Trim() + "|" +
                    //                    quantity.ToString() + "|" +
                    //                    price.ToString() + "|" +
                    //                    accountno + "|" +
                    //                    itemno + "\r\n";

                    //            #endregion

                    //            #region Bonificação

                    //            quantity = Convert.ToInt32(item.QtdeBonificada);
                    //            price = 0;
                    //            string alt_desc = item.PercBonificacao.ToString() + "% Extra " + varietyShort;
                    //            itemCod = itemCod + 1;

                    //            if (edicaoItem)
                    //            {
                    //                CHICMobileDataSet.bookedMobileDataTable bookedMDT =
                    //                    new CHICMobileDataSet.bookedMobileDataTable();
                    //                bookedM.FillChicksAndEggsByOrderNoAndVariety(bookedMDT, orderNO,
                    //                    varietyShort);

                    //                CHICMobileDataSet.bookedMobileRow bonificacao =
                    //                    bookedMDT.Where(w => w.alt_desc.Trim() != "").FirstOrDefault();

                    //                if (bonificacao != null)
                    //                {
                    //                    booked_id = Convert.ToInt32(bonificacao.book_id);

                    //                    bookedM.UpdateQuery(cal_date, custoNo, quantity, 0,
                    //                        item.DataEntregaInicial, alt_desc, booked_id);
                    //                }
                    //                else
                    //                {
                    //                    tables.FillByName(tablesDT, "booked");
                    //                    booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                    //                    item_ord = "0" + itemCod.ToString();

                    //                    bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                    //                        String.Empty, String.Empty, String.Empty, hatchLoc, accountno, alt_desc, item_ord,
                    //                        creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0, String.Empty, 0);

                    //                    tables.UpdateQuery(Convert.ToDecimal(booked_id));
                    //                }
                    //            }
                    //            else
                    //            {

                    //                tables.FillByName(tablesDT, "booked");
                    //                booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                    //                item_ord = "0" + itemCod.ToString();

                    //                bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                    //                    String.Empty, String.Empty, String.Empty, hatchLoc, accountno, alt_desc, item_ord,
                    //                    creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0, String.Empty, 0);

                    //                tables.UpdateQuery(Convert.ToDecimal(booked_id));
                    //            }

                    //            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                Session["login"].ToString() + "|" +
                    //                edicaoItemText + " Bonificação" + "|" +
                    //                booked_id.ToString() + "|" +
                    //                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                itemno + "|" +
                    //                alt_desc + "|" +
                    //                quantity.ToString() + "|" +
                    //                price.ToString() + "|" +
                    //                accountno + "|" +
                    //                itemno + "\r\n";

                    //            #endregion
                    //        }

                    //        #region Atualiza Itens como: Tipo de Caixa, Caminhão e pintos por Caixa

                    //        if (edicao)
                    //        {
                    //            CHICMobileDataSet.bookedMobileDataTable bDT =
                    //                new CHICMobileDataSet.bookedMobileDataTable();

                    //            bookedM.FillBoxAndTruckByOrderNo(bDT, orderNO);

                    //            foreach (var otherItem in bDT)
                    //            {
                    //                bookedM.UpdateCalDate(cal_date, otherItem.book_id);
                    //            }
                    //        }

                    //        #endregion

                    //        #region Envio de E-mails - Novo

                    //        operacao = edicaoText;

                    //        corpoOperacao = corpoOperacao + "Pedido " + orderNO + " - " + item.ProdCodEstr + (char)13 + (char)10
                    //            + " - Qtde.Líquida: " + item.QtdeLiquida.ToString() + (char)13 + (char)10
                    //            + " - Qtde.Bonificada: " + item.QtdeBonificada.ToString() + (char)13 + (char)10
                    //            + " - Qtde.Reposição: " + item.QtdeReposicao.ToString() + (char)13 + (char)10
                    //            + " - Valor Unitário: " + item.PrecoUnitario.ToString() + (char)13 + (char)10
                    //            + " - Valor Total: " + (item.QtdeLiquida * item.PrecoUnitario).ToString() + (char)13 + (char)10
                    //            + " - Condição de Pagamento: " + delivery + (char)13 + (char)10;

                    //        if (tipoColabOvosBrasil.Equals("Participa Lista") &&
                    //                !pedVenda.OvosBrasil.Equals(0))
                    //        {
                    //            corpoOperacao = corpoOperacao + "OBS: Adicionado R$ 0,01 a mais no valor porque cliente assinou a lista de Ovos Brasil." + (char)13 + (char)10;
                    //        }

                    //        corpoOperacao = corpoOperacao + (char)13 + (char)10
                    //                + (char)13 + (char)10 + (char)13 + (char)10;

                    //        #endregion

                    //        #region Insere LOG - Item_Ped_Venda

                    //        LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                    //        logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                    //        logItemPV.Sequencia = item.Sequencia;
                    //        logItemPV.ProdCodEstr = item.ProdCodEstr;
                    //        logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                    //        logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                    //        logItemPV.QtdeLiquida = item.QtdeLiquida;
                    //        logItemPV.PercBonificacao = item.PercBonificacao;
                    //        logItemPV.QtdeBonificada = item.QtdeBonificada;
                    //        logItemPV.QtdeReposicao = item.QtdeReposicao;
                    //        logItemPV.PrecoUnitario = item.PrecoUnitario;
                    //        logItemPV.DataHora = DateTime.Now;
                    //        logItemPV.Operacao = "Importado p/ CHIC";
                    //        logItemPV.IDItPedVenda = item.ID;
                    //        logItemPV.IDLogPedidoVenda = logPV.ID;
                    //        logItemPV.OrderNoCHIC = orderNO;
                    //        logItemPV.OrderNoCHICReposicao = orderNoReposicao;
                    //        //logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    //        //logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                    //        hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                    //        #endregion

                    //        //item.DataEntregaFinal = item.DataEntregaInicial;
                    //        item.OrderNoCHIC = orderNO;
                    //        item.Importar = 0;

                    //        Item_Pedido_Venda itemPV = hlbappSession.Item_Pedido_Venda
                    //            .Where(w => w.ID == item.ID).FirstOrDefault();
                    //        itemPV.OrderNoCHIC = orderNO;
                    //        itemPV.Importar = 0;
                    //    }

                    //    int itemCodRep = 1;
                    //    decimal orderNoPrincipal = 0;

                    //    if (qtdLiquida > 0) orderNoPrincipal = Convert.ToDecimal(orderNO);

                    //    foreach (var item in listItensPVSession.Where(w => w.OrderNoCHIC != "Cancelado").ToList())
                    //    {
                    //        #region Dados do Item

                    //        if (uf.UfRegGeog.Equals("Norte") || uf.UfRegGeog.Equals("Nordeste"))
                    //            cal_date = item.DataEntregaInicial.AddDays(-23);
                    //        else
                    //            cal_date = item.DataEntregaInicial.AddDays(-22);

                    //        dataFinal = item.DataEntregaFinal;

                    //        itemCod = itemCod + 1;

                    //        vartablMobileTableAdapter vartabl = new vartablMobileTableAdapter();
                    //        CHICMobileDataSet.vartablMobileDataTable vartablDT =
                    //            new CHICMobileDataSet.vartablMobileDataTable();
                    //        vartabl.FillByDesc(vartablDT, item.ProdCodEstr.Replace(" - Ovos", ""));
                    //        string varietyShort = vartablDT[0].variety;

                    //        string form = item.ProdCodEstr.Contains("Ovos") ? "HN" : "DV";

                    //        items.FillByVarietyAndForm(itemsDT, varietyShort, form);

                    //        // Localizando o Item
                    //        string accountno = "";
                    //        string descricao = "";
                    //        bool caixaPlastica = false;
                    //        bool vaxxitek = false;
                    //        bool temCaixaPlastica = false;
                    //        bool temVaxxitekFiltro = false;
                    //        for (int i = 0; i < itemsDT.Count; i++)
                    //        {
                    //            caixaPlastica = itemsDT[i].item_desc.Contains("-P") ? true : false;
                    //            if (caixaPlastica.Equals(false))
                    //                caixaPlastica = itemsDT[i].item_desc.Contains("- P") ? true : false;
                    //            vaxxitek = itemsDT[i].item_desc.Contains("VAXX") ? true : false;

                    //            if ((temCaixaPlastica) &&
                    //                (temVaxxitekFiltro) &&
                    //                (caixaPlastica) && (vaxxitek))
                    //            {
                    //                itemno = itemsDT[i].item_no;
                    //                accountno = itemsDT[i].account_no;
                    //                descricao = itemsDT[i].item_desc;
                    //            }
                    //            else if ((!temCaixaPlastica) &&
                    //                     (temVaxxitekFiltro) &&
                    //                     (!caixaPlastica) && (vaxxitek))
                    //            {
                    //                itemno = itemsDT[i].item_no;
                    //                accountno = itemsDT[i].account_no;
                    //                descricao = itemsDT[i].item_desc;
                    //            }
                    //            else if ((temCaixaPlastica) &&
                    //                     (!temVaxxitekFiltro) &&
                    //                     (caixaPlastica) && (!vaxxitek))
                    //            {
                    //                itemno = itemsDT[i].item_no;
                    //                accountno = itemsDT[i].account_no;
                    //                descricao = itemsDT[i].item_desc;
                    //            }
                    //            else if ((!temCaixaPlastica) &&
                    //                     (!temVaxxitekFiltro) &&
                    //                     (!caixaPlastica) && (!vaxxitek))
                    //            {
                    //                itemno = itemsDT[i].item_no;
                    //                accountno = itemsDT[i].account_no;
                    //                descricao = itemsDT[i].item_desc;
                    //            }
                    //        }

                    //        #endregion

                    //        #region Reposição

                    //        if (item.QtdeReposicao > 0)
                    //        {
                    //            //if (item.OrderNoCHICReposicao != null)
                    //            //{
                    //            //    if (!item.OrderNoCHICReposicao.Equals(""))
                    //            //    {
                    //            //        orderNoReposicao = item.OrderNoCHICReposicao;

                    //            //        #region Deleta os Items para adicioná-los novamente

                    //            //        bookedM.DeleteQuery(orderNoReposicao);

                    //            //        #endregion
                    //            //    }
                    //            //}

                    //            #region Deleta Pedidos de Reposição Anteriores

                    //            //CHICMobileDataSet.int_commMDataTable intCommReposicaoDT =
                    //            //    new CHICMobileDataSet.int_commMDataTable();

                    //            //decimal orderNoPrincipal = 0;
                    //            //if (orderNO != "")
                    //            //{
                    //            //    orderNoPrincipal = Convert.ToDecimal(orderNO);

                    //            //    int_commM.FillByOrderNoMain(intCommReposicaoDT, orderNoPrincipal);

                    //            //    foreach (var itemReposicao in intCommReposicaoDT.ToList())
                    //            //    {
                    //            //        int_commM.DeleteQuery(itemReposicao.orderno);
                    //            //        bookedM.DeleteQuery(itemReposicao.orderno);
                    //            //        orderTA.DeleteQuery(itemReposicao.orderno);
                    //            //    }
                    //            //}

                    //            #endregion

                    //            #region Dados do Pedido (orders)
                    //            delivery = "DOAÇÃO";
                    //            string operacaoReposicao = "";

                    //            if (orderNoReposicao.Equals(""))
                    //            {
                    //                operacaoReposicao = "Inclusão";

                    //                Thread.Sleep(5 * 1000);
                    //                orderNoReposicao = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                    //                //orderNoReposicao = ProximoOrderNOCHIC();

                    //                orderTA.Insert(orderNoReposicao, 0, Convert.ToDateTime("01/01/1988"), orderDate,
                    //                    custoNo, "Y", "", 0, item.DataEntregaInicial, delivery, String.Empty,
                    //                    String.Empty, String.Empty, String.Empty, String.Empty, 0, salesrep,
                    //                    String.Empty, String.Empty);
                    //            }
                    //            else
                    //            {
                    //                operacaoReposicao = "Alteração";

                    //                orderTA.UpdateQuery(orderDate, custoNo, item.DataEntregaInicial, delivery,
                    //                    String.Empty, String.Empty, String.Empty, salesrep, orderNoReposicao);
                    //            }

                    //            log = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                Session["login"].ToString() + "|" +
                    //                operacaoReposicao + " Cabeçalho|" +
                    //                orderNoReposicao + "|" +
                    //                orderDate + "|" +
                    //                custoNo + "|" +
                    //                item.DataEntregaInicial.ToShortDateString() + " " +
                    //                item.DataEntregaFinal.ToShortTimeString() + "|" +
                    //                delivery + "|" +
                    //                com1 + "|" +
                    //                com2 + "|" +
                    //                com3 + "|" +
                    //                salesrep + "\n\r";

                    //            item_ord = "01";
                    //            #endregion

                    //            #region Produto Vendido

                    //            quantity = Convert.ToInt32(item.QtdeReposicao);

                    //            price = Convert.ToDecimal(item.PrecoUnitario);

                    //            item_ord = "0" + itemCodRep.ToString();

                    //            tables.FillByName(tablesDT, "booked");
                    //            booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;

                    //            bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNoReposicao,
                    //                "O", String.Empty, String.Empty, String.Empty, hatchLoc, accountno, String.Empty,
                    //                item_ord, creatdby, datecrtd, creatdby, datecrtd, item.DataEntregaInicial, 0,
                    //                String.Empty, 0);

                    //            tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                    Session["login"].ToString() + "|" +
                    //                    operacaoReposicao + " Produto" + "|" +
                    //                    booked_id.ToString() + "|" +
                    //                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                    itemno + "|" +
                    //                    descricao.Trim() + "|" +
                    //                    quantity.ToString() + "|" +
                    //                    price.ToString() + "|" +
                    //                    accountno + "|" +
                    //                    itemno + "\r\n";

                    //            #endregion

                    //            item.OrderNoCHICReposicao = orderNoReposicao;

                    //            Item_Pedido_Venda itemPV = hlbappSession.Item_Pedido_Venda
                    //            .Where(w => w.ID == item.ID).FirstOrDefault();
                    //            itemPV.OrderNoCHICReposicao = orderNoReposicao;
                    //        }

                    //        #endregion
                    //    }

                    //    price = 0;

                    //    if (qtdReposicao > 0)
                    //    {
                    //        if (orderNoReposicao != "")
                    //        {
                    //            #region Vacina Primária

                    //            if (!temVaxxitek)
                    //            {
                    //                if (vacPrimaria != null)
                    //                {
                    //                    tables.FillByName(tablesDT, "booked");
                    //                    booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                    itemCodRep = itemCodRep + 1;
                    //                    item_ord = "0" + itemCodRep.ToString();
                    //                    itemno = vacPrimaria.USERCodigoCHIC;

                    //                    items.FillByItemNo(itemsDT, itemno);

                    //                    bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                        0, price, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                    //                        "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                        cal_date, 0, String.Empty, 0);

                    //                    tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //                    log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                        Session["login"].ToString() + "|" +
                    //                        "Vacina" + "|" +
                    //                        booked_id.ToString() + "|" +
                    //                        cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                        itemno + "|" +
                    //                        itemsDT[0].item_desc.Trim() + "|" +
                    //                        price.ToString() + "|" +
                    //                        "" + "|" +
                    //                        itemno + "\r\n";

                    //                    #region Se for Vectormune FP-MG, Insere Rispens e HVT

                    //                    if (vacPrimaria.USERCodigoCHIC == "188")
                    //                    {
                    //                        quantity = 0;

                    //                        tables.FillByName(tablesDT, "booked");
                    //                        booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                        itemCod = itemCod + 1;
                    //                        item_ord = "0" + itemCod.ToString();
                    //                        itemno = "173";

                    //                        items.FillByItemNo(itemsDT, itemno);

                    //                        bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                            quantity, price, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                    //                            "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                            cal_date, 0, String.Empty, 0);

                    //                        tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //                        log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                            Session["login"].ToString() + "|" +
                    //                            "Vacina" + "|" +
                    //                            booked_id.ToString() + "|" +
                    //                            cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                            itemno + "|" +
                    //                            itemsDT[0].item_desc.Trim() + "|" +
                    //                            quantity.ToString() + "|" +
                    //                            price.ToString() + "|" +
                    //                            "" + "|" +
                    //                            itemno + "\r\n";
                    //                    }

                    //                    #endregion
                    //                }
                    //            }
                    //            else
                    //            {
                    //                quantity = 0;

                    //                tables.FillByName(tablesDT, "booked");
                    //                booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                itemCod = itemCod + 1;
                    //                item_ord = "0" + itemCod.ToString();
                    //                itemno = "161";

                    //                items.FillByItemNo(itemsDT, itemno);

                    //                bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                    quantity, price, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                    //                    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                    cal_date, 0, String.Empty, 0);

                    //                tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                    Session["login"].ToString() + "|" +
                    //                    "Vacina" + "|" +
                    //                    booked_id.ToString() + "|" +
                    //                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                    itemno + "|" +
                    //                    itemsDT[0].item_desc.Trim() + "|" +
                    //                    quantity.ToString() + "|" +
                    //                    price.ToString() + "|" +
                    //                    "" + "|" +
                    //                    itemno + "\r\n";

                    //                tables.FillByName(tablesDT, "booked");
                    //                booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                itemCod = itemCod + 1;
                    //                item_ord = "0" + itemCod.ToString();
                    //                itemno = "165";

                    //                items.FillByItemNo(itemsDT, itemno);

                    //                bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                    quantity, price, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                    //                    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                    cal_date, 0, String.Empty, 0);

                    //                tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                    Session["login"].ToString() + "|" +
                    //                    "Vacina" + "|" +
                    //                    booked_id.ToString() + "|" +
                    //                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                    itemno + "|" +
                    //                    itemsDT[0].item_desc.Trim() + "|" +
                    //                    quantity.ToString() + "|" +
                    //                    price.ToString() + "|" +
                    //                    "" + "|" +
                    //                    itemno + "\r\n";
                    //            }

                    //            #endregion

                    //            #region Vacinas Secundárias

                    //            var listaVacSecRep = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                    //            foreach (var vacSec in listaVacSecRep)
                    //            {
                    //                PRODUTO vacSecundaria = apoloStatic.PRODUTO
                    //                    .Where(w => w.ProdCodEstr == vacSec.ProdCodEstr).FirstOrDefault();

                    //                if (vacSecundaria.USERCodigoCHIC != null)
                    //                {
                    //                    tables.FillByName(tablesDT, "booked");
                    //                    booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                    itemCodRep = itemCodRep + 1;
                    //                    item_ord = "0" + itemCodRep.ToString();
                    //                    itemno = vacSecundaria.USERCodigoCHIC;

                    //                    items.FillByItemNo(itemsDT, itemno);

                    //                    bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                        0, price, orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                    //                        "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                        cal_date, 0, String.Empty, 0);

                    //                    tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //                    log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                        Session["login"].ToString() + "|" +
                    //                        "Vacina" + "|" +
                    //                        booked_id.ToString() + "|" +
                    //                        cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                        itemno + "|" +
                    //                        itemsDT[0].item_desc.Trim() + "|" +
                    //                        price.ToString() + "|" +
                    //                        "" + "|" +
                    //                        itemno + "\r\n";
                    //                }
                    //            }

                    //            #endregion

                    //            #region Serviço

                    //            Servicos_Pedido_Venda servRep = hlbappSession.Servicos_Pedido_Venda
                    //                .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                    //            if (servRep != null)
                    //            {
                    //                PRODUTO servico = apoloStatic.PRODUTO
                    //                    .Where(w => w.ProdCodEstr == servRep.ProdCodEstr).FirstOrDefault();

                    //                decimal percServ = Convert.ToDecimal(servRep.PercAplicacaoServico);

                    //                tables.FillByName(tablesDT, "booked");
                    //                booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                itemCodRep = itemCodRep + 1;
                    //                item_ord = "0" + itemCodRep.ToString();
                    //                itemno = servico.USERCodigoCHIC;

                    //                items.FillByItemNo(itemsDT, itemno);

                    //                string comentServ = "Tratar " + percServ.ToString() + "% do lote";

                    //                bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                    0, price, orderNoReposicao, "O", comentServ, String.Empty, String.Empty, hatchLoc,
                    //                    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                    cal_date, 0, String.Empty, 0);

                    //                tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                    Session["login"].ToString() + "|" +
                    //                    "Serviço" + "|" +
                    //                    booked_id.ToString() + "|" +
                    //                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                    itemno + "|" +
                    //                    itemsDT[0].item_desc.Trim() + "|" +
                    //                    price.ToString() + "|" +
                    //                    "" + "|" +
                    //                    itemno + "\r\n";
                    //            }

                    //            #endregion

                    //            #region Hidratante

                    //            if ((!cidade.UfSigla.Equals("SP")) &&
                    //                (!cidade.UfSigla.Equals("RJ")) &&
                    //                (!cidade.UfSigla.Equals("MG")) &&
                    //                (!cidade.UfSigla.Equals("ES")) &&
                    //                (!cidade.UfSigla.Equals("PR")) &&
                    //                (!cidade.UfSigla.Equals("GO")))
                    //            {
                    //                tables.FillByName(tablesDT, "booked");
                    //                booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                itemCod = itemCod + 1;
                    //                item_ord = "0" + itemCod.ToString();

                    //                quantity = 0;
                    //                price = 0;

                    //                itemno = "172";
                    //                items.FillByItemNo(itemsDT, itemno);

                    //                bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price,
                    //                    orderNoReposicao, "O", String.Empty, String.Empty, String.Empty, hatchLoc, "", 
                    //                    String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd, cal_date, 0, 
                    //                    String.Empty, 0);

                    //                tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                    Session["login"].ToString() + "|" +
                    //                    "Hidratante" + "|" +
                    //                    booked_id.ToString() + "|" +
                    //                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                    itemno + "|" +
                    //                    itemsDT[0].item_desc.Trim() + "|" +
                    //                    quantity.ToString() + "|" +
                    //                    price.ToString() + "|" +
                    //                    "" + "|" +
                    //                    itemno + "\r\n";
                    //            }

                    //            #endregion

                    //            #region Inserir Tabela Customizada Pedido

                    //            intComm = "";

                    //            string logAntigo = "";

                    //            int_commM.FillByOrderNo(int_commDT, orderNoReposicao);

                    //            if (int_commDT.Count > 0)
                    //            {
                    //                logAntigo = int_commDT[0].changelg;
                    //                int_commM.DeleteQuery(orderNoReposicao);
                    //            }

                    //            log = logAntigo + "\n\r\n\r" + log +
                    //                DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                Session["login"].ToString() + "|" +
                    //                "Inclusão" + "|" +
                    //                "Ovos Brasil: Não";

                    //            intComm = listItensPVSession.Min(m => m.DataEntregaInicial).ToShortDateString() + " à " +
                    //                listItensPVSession.Min(m => m.DataEntregaFinal).ToShortDateString();
                    //            intComm = intComm + "\n\r\n\r Observação: " + pedVenda.Observacoes;

                    //            if (tipoColabOvosBrasil.Equals("Participa Lista"))
                    //            {
                    //                int_commM.InsertQuery(orderNoReposicao, intComm, log, false, infoIncubatorio, 
                    //                    false, false, false, true, "", false, orderNoPrincipal);
                    //            }
                    //            else
                    //            {
                    //                int_commM.InsertQuery(orderNoReposicao, intComm, log, false, infoIncubatorio, 
                    //                    false, false, false, false, "", false, orderNoPrincipal);
                    //            }

                    //            #endregion
                    //        }
                    //    }

                    //    //foreach (var item2 in listItensPV2)
                    //    //{
                    //    //    itemCod = itemCod + 1;
                    //    //}

                    //    if (qtdLiquida > 0)
                    //    {
                    //        #region Deleta os Items para adicioná-los novamente

                    //        if (orderNO != "")
                    //            //bookedM.DeleteItemsPriceZero(orderNO);
                    //            bookedM.DeleteVaccinesAndServices(orderNO);

                    //        #endregion

                    //        #region Vacina Primária

                    //        if (!temVaxxitek)
                    //        {
                    //            if (vacPrimaria != null)
                    //            {
                    //                quantity = 0;

                    //                tables.FillByName(tablesDT, "booked");
                    //                booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //                itemCod = itemCod + 1;
                    //                item_ord = "0" + itemCod.ToString();
                    //                itemno = vacPrimaria.USERCodigoCHIC;

                    //                items.FillByItemNo(itemsDT, itemno);

                    //                bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                    quantity, price, orderNO, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                    //                    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                    cal_date, 0, String.Empty, 0);

                    //                tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                    Session["login"].ToString() + "|" +
                    //                    "Vacina" + "|" +
                    //                    booked_id.ToString() + "|" +
                    //                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                    itemno + "|" +
                    //                    itemsDT[0].item_desc.Trim() + "|" +
                    //                    quantity.ToString() + "|" +
                    //                    price.ToString() + "|" +
                    //                    "" + "|" +
                    //                    itemno + "\r\n";
                    //            }
                    //        }
                    //        else
                    //        {
                    //            quantity = 0;

                    //            tables.FillByName(tablesDT, "booked");
                    //            booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //            itemCod = itemCod + 1;
                    //            item_ord = "0" + itemCod.ToString();
                    //            itemno = "161";

                    //            items.FillByItemNo(itemsDT, itemno);

                    //            bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                quantity, price, orderNO, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                    //                "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                cal_date, 0, String.Empty, 0);

                    //            tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                Session["login"].ToString() + "|" +
                    //                "Vacina" + "|" +
                    //                booked_id.ToString() + "|" +
                    //                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                itemno + "|" +
                    //                itemsDT[0].item_desc.Trim() + "|" +
                    //                quantity.ToString() + "|" +
                    //                price.ToString() + "|" +
                    //                "" + "|" +
                    //                itemno + "\r\n";

                    //            tables.FillByName(tablesDT, "booked");
                    //            booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //            itemCod = itemCod + 1;
                    //            item_ord = "0" + itemCod.ToString();
                    //            itemno = "165";

                    //            items.FillByItemNo(itemsDT, itemno);

                    //            bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                quantity, price, orderNO, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                    //                "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                cal_date, 0, String.Empty, 0);

                    //            tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                Session["login"].ToString() + "|" +
                    //                "Vacina" + "|" +
                    //                booked_id.ToString() + "|" +
                    //                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                itemno + "|" +
                    //                itemsDT[0].item_desc.Trim() + "|" +
                    //                quantity.ToString() + "|" +
                    //                price.ToString() + "|" +
                    //                "" + "|" +
                    //                itemno + "\r\n";
                    //        }

                    //        #endregion

                    //        #region Insere LOG - Vacina Primária

                    //        Vacinas_Primaria_Pedido_Venda vacPrimObj = hlbappSession.Vacinas_Primaria_Pedido_Venda
                    //                .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                    //        LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                    //        if (vacPrimObj != null)
                    //        {
                    //            logVacPrim.IDPedidoVenda = vacPrimObj.IDPedidoVenda;
                    //            logVacPrim.ProdCodEstr = vacPrimObj.ProdCodEstr;
                    //            logVacPrim.DataHora = DateTime.Now;
                    //            logVacPrim.Operacao = "Importado p/ CHIC";
                    //            logVacPrim.IDVacPrimPedVenda = vacPrimObj.ID;
                    //            logVacPrim.IDLogPedidoVenda = logPV.ID;

                    //            hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                    //            hlbppLOG.SaveChanges();
                    //        }

                    //        #endregion

                    //        #region Vacinas Secundárias

                    //        var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                    //        foreach (var vacSec in listaVacSec)
                    //        {
                    //            PRODUTO vacSecundaria = apoloStatic.PRODUTO
                    //                .Where(w => w.ProdCodEstr == vacSec.ProdCodEstr).FirstOrDefault();

                    //            tables.FillByName(tablesDT, "booked");
                    //            booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //            itemCod = itemCod + 1;
                    //            item_ord = "0" + itemCod.ToString();
                    //            itemno = vacSecundaria.USERCodigoCHIC;

                    //            if (itemno != null && itemno != "")
                    //            {
                    //                items.FillByItemNo(itemsDT, itemno);

                    //                bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                    quantity, price, orderNO, "O", String.Empty, String.Empty, String.Empty, hatchLoc,
                    //                    "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                    cal_date, 0, String.Empty, 0);

                    //                tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                    Session["login"].ToString() + "|" +
                    //                    "Vacina" + "|" +
                    //                    booked_id.ToString() + "|" +
                    //                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                    itemno + "|" +
                    //                    itemsDT[0].item_desc.Trim() + "|" +
                    //                    quantity.ToString() + "|" +
                    //                    price.ToString() + "|" +
                    //                    "" + "|" +
                    //                    itemno + "\r\n";

                    //                #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                    //                LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                    //                logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                    //                logVacSec.Sequencia = vacSec.Sequencia;
                    //                logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                    //                logVacSec.DataHora = DateTime.Now;
                    //                logVacSec.Operacao = "Importado p/ CHIC";
                    //                logVacSec.IDVacSecPedVenda = vacSec.ID;
                    //                logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                    //                hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                    //                #endregion
                    //            }
                    //        }

                    //        #endregion

                    //        #region Serviço

                    //        Servicos_Pedido_Venda serv = hlbappSession.Servicos_Pedido_Venda
                    //            .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                    //        if (serv != null)
                    //        {
                    //            PRODUTO servico = apoloStatic.PRODUTO
                    //                .Where(w => w.ProdCodEstr == serv.ProdCodEstr).FirstOrDefault();

                    //            decimal percServ = Convert.ToDecimal(serv.PercAplicacaoServico);

                    //            tables.FillByName(tablesDT, "booked");
                    //            booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //            itemCod = itemCod + 1;
                    //            item_ord = "0" + itemCod.ToString();
                    //            itemno = servico.USERCodigoCHIC;

                    //            items.FillByItemNo(itemsDT, itemno);

                    //            string comentServ = "Tratar " + percServ.ToString() + "% do lote";

                    //            bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                    //                0, price, orderNO, "O", comentServ, String.Empty, String.Empty, hatchLoc,
                    //                "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                    //                cal_date, 0, String.Empty, 0);

                    //            tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                Session["login"].ToString() + "|" +
                    //                "Serviço" + "|" +
                    //                booked_id.ToString() + "|" +
                    //                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                itemno + "|" +
                    //                itemsDT[0].item_desc.Trim() + "|" +
                    //                quantity.ToString() + "|" +
                    //                price.ToString() + "|" +
                    //                "" + "|" +
                    //                itemno + "\r\n";
                    //        }

                    //        #endregion

                    //        #region Insere LOG - Servico_Pedido_Venda

                    //        if (serv != null)
                    //        {
                    //            LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    //            logServ.IDPedidoVenda = serv.IDPedidoVenda;
                    //            logServ.ProdCodEstr = serv.ProdCodEstr;
                    //            logServ.PercAplicacaoServico = serv.PercAplicacaoServico;
                    //            logServ.DataHora = DateTime.Now;
                    //            logServ.Operacao = "Importado p/ CHIC";
                    //            logServ.IDServPedVenda = serv.ID;
                    //            logServ.IDLogPedidoVenda = logPV.ID;

                    //            hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);
                    //        }

                    //        #endregion

                    //        #region Hidratante

                    //        if ((!cidade.UfSigla.Equals("SP")) &&
                    //            (!cidade.UfSigla.Equals("RJ")) &&
                    //            (!cidade.UfSigla.Equals("MG")) &&
                    //            //(!cidade.UfSigla.Equals("ES")) &&
                    //            (!cidade.UfSigla.Equals("PR")) &&
                    //            (!cidade.UfSigla.Equals("GO")))
                    //        {
                    //            tables.FillByName(tablesDT, "booked");
                    //            booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    //            itemCod = itemCod + 1;
                    //            item_ord = "0" + itemCod.ToString();

                    //            quantity = 0;
                    //            price = 0;

                    //            itemno = "172";
                    //            items.FillByItemNo(itemsDT, itemno);

                    //            bookedM.Insert(booked_id, cal_date, custoNo, itemno, quantity, price, orderNO, "O",
                    //                String.Empty, String.Empty, String.Empty, hatchLoc, "", String.Empty, item_ord,
                    //                creatdby, datecrtd, creatdby, datecrtd, cal_date, 0, String.Empty, 0);

                    //            tables.UpdateQuery(Convert.ToDecimal(booked_id));

                    //            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                Session["login"].ToString() + "|" +
                    //                "Hidratante" + "|" +
                    //                booked_id.ToString() + "|" +
                    //                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                    //                itemno + "|" +
                    //                itemsDT[0].item_desc.Trim() + "|" +
                    //                quantity.ToString() + "|" +
                    //                price.ToString() + "|" +
                    //                "" + "|" +
                    //                itemno + "\r\n";
                    //        }

                    //        #endregion

                    //        #region Inserir Ovos Brasil

                    //        intComm = "";

                    //        int_commM.FillByOrderNo(int_commDT, orderNO);

                    //        if (pedVenda.OvosBrasil.Equals(1))
                    //        {
                    //            string logAntigo = "";

                    //            if (int_commDT.Count > 0)
                    //            {
                    //                logAntigo = int_commDT[0].changelg;
                    //                //int_commM.DeleteQuery(orderNO);
                    //            }

                    //            log = logAntigo + "\n\r\n\r" + log +
                    //                DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                Session["login"].ToString() + "|" +
                    //                "" + "|" +
                    //                "Ovos Brasil: Sim";

                    //            intComm = data.Key.ToShortDateString() + " à " + dataFinal.ToShortDateString();
                    //            intComm = intComm + "\n\r\n\r Observação: " + pedVenda.Observacoes;

                    //            if (tipoColabOvosBrasil.Equals("Participa Lista"))
                    //            {
                    //                if (int_commDT.Count > 0)
                    //                {
                    //                    if (infoIncubatorio != "")
                    //                    {
                    //                        infoIncubatorio = int_commDT[0].hatchinf + "\n\r\n\r" + infoIncubatorio;
                    //                    }
                    //                    else
                    //                    {   
                    //                        infoIncubatorio = int_commDT[0].hatchinf;
                    //                    }

                    //                    int_commM.UpdateQuery(intComm, log, infoIncubatorio, false, orderNO);
                    //                }
                    //                else
                    //                {
                    //                    int_commM.InsertQuery(orderNO, intComm, log, false, infoIncubatorio, false,
                    //                    false, false, true, "", false, 0);
                    //                }
                    //            }
                    //            else
                    //            {
                    //                if (int_commDT.Count > 0)
                    //                {
                    //                    if (infoIncubatorio != "")
                    //                    {
                    //                        infoIncubatorio = int_commDT[0].hatchinf + "\n\r\n\r" + infoIncubatorio;
                    //                    }
                    //                    else
                    //                    {
                    //                        infoIncubatorio = int_commDT[0].hatchinf;
                    //                    }

                    //                    int_commM.UpdateQuery(intComm, log, infoIncubatorio, true, orderNO);
                    //                }
                    //                else
                    //                {
                    //                    int_commM.InsertQuery(orderNO, intComm, log, true, infoIncubatorio, false,
                    //                        true, false, false, "", false, 0);
                    //                }
                    //            }
                    //        }
                    //        else
                    //        {
                    //            string logAntigo = "";

                    //            if (int_commDT.Count > 0)
                    //            {
                    //                logAntigo = int_commDT[0].changelg;
                    //                //int_commM.DeleteQuery(orderNO);
                    //            }

                    //            log = log +
                    //                DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                    //                Session["login"].ToString() + "|" +
                    //                "" + "|" +
                    //                "Ovos Brasil: Não";

                    //            intComm = data.Key.ToShortDateString() + " à " + dataFinal.ToShortDateString();
                    //            intComm = intComm + "\n\r\n\r Observação: " + pedVenda.Observacoes;

                    //            if (tipoColabOvosBrasil.Equals("Participa Lista"))
                    //            {
                    //                if (int_commDT.Count > 0)
                    //                {
                    //                    if (infoIncubatorio != "")
                    //                    {
                    //                        infoIncubatorio = int_commDT[0].hatchinf + "\n\r\n\r" + infoIncubatorio;
                    //                    }
                    //                    else
                    //                    {
                    //                        infoIncubatorio = int_commDT[0].hatchinf;
                    //                    }

                    //                    int_commM.UpdateQuery(intComm, log, infoIncubatorio, false, orderNO);
                    //                }
                    //                else
                    //                {
                    //                    int_commM.InsertQuery(orderNO, intComm, log, false, infoIncubatorio, false,
                    //                        false, false, true, "", false, 0);
                    //                }
                    //            }
                    //            else
                    //            {
                    //                if (int_commDT.Count > 0)
                    //                {
                    //                    if (infoIncubatorio != "")
                    //                    {
                    //                        infoIncubatorio = int_commDT[0].hatchinf + "\n\r\n\r" + infoIncubatorio;
                    //                    }
                    //                    else
                    //                    {
                    //                        infoIncubatorio = int_commDT[0].hatchinf;
                    //                    }

                    //                    int_commM.UpdateQuery(intComm, log, infoIncubatorio, false, orderNO);
                    //                }
                    //                else
                    //                {
                    //                    int_commM.InsertQuery(orderNO, intComm, log, false, infoIncubatorio, false,
                    //                        false, false, false, "", false, 0);
                    //                }
                    //            }
                    //        }

                    //        #endregion
                    //    }
                    //}

                    //#region Envio de E-mails - Novo Geral

                    //MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                    //    new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                    //email.WorkFlowEmailCopiaPara = copiaPara;

                    //ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                    //MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                    //    new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                    //apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                    //email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                    //email.WorkFlowEmailStat = "Enviar";
                    //email.WorkFlowEmailData = DateTime.Now;
                    //email.WorkFlowEmailParaNome = nomeVendedor;
                    //email.WorkFlowEmailParaEmail = emailVendedor;
                    ////email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                    ////email.WorkFlowEmailParaNome = "Teste";
                    ////email.WorkFlowEmailCopiaPara = email.WorkFlowEmailCopiaPara + ";programacao@hyline.com.br";
                    //email.WorkFlowEmailCopiaPara = email.WorkFlowEmailCopiaPara;
                    //email.WorkFlowEmailDeNome = "Sistema WEB";
                    //email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                    //email.WorkFlowEmailFormato = "Texto";

                    //string textCodigoCHIC = " Nº CHIC " + orderNO;

                    //email.WorkFlowEmailAssunto = empresa + " - PEDIDO ID " + pedVenda.ID.ToString()
                    //    + " IMPORTADO -" + textCodigoCHIC;

                    //string stringChar = "" + (char)13 + (char)10;

                    //corpoEmail = "Prezado " + nomeVendedor + "," + (char)13 + (char)10 + (char)13 + (char)10
                    //    + "O pedido criado foi importado para o CHIC e gerou os seguintes pedidos: " + (char)13 + (char)10 + (char)13 + (char)10
                    //    + corpoOperacao
                    //    + "Qualquer dúvida, entrar em contato com o Depto. de Programação." + (char)13 + (char)10 + (char)13 + (char)10
                    //    + "SISTEMA WEB";

                    //email.WorkFlowEmailCorpo = corpoEmail;

                    //#region Gerar Solicitação de Venda PDF

                    //string caminho = GeraSolicitacaoVendaPDF(pedVenda.ID);

                    //email.WorkFlowEmailArquivosAnexos = caminho;

                    //#endregion

                    //apolo.WORKFLOW_EMAIL.AddObject(email);

                    //apolo.SaveChanges();

                    //#endregion

                    ////pedVenda.Status = "Importado";

                    //listItensPVSession = hlbappSession.Item_Pedido_Venda
                    //    .Where(w => w.IDPedidoVenda == id).ToList();

                    //int qtdItensCancelados = listItensPVSession.Where(w => w.OrderNoCHIC == "Cancelado"
                    //    || w.OrderNoCHICReposicao == "Cancelado").Count();
                    //int qtdItenImportados = listItensPVSession
                    //    .Where(w => (w.OrderNoCHIC != "Cancelado" && w.OrderNoCHIC != "" && w.OrderNoCHIC != null)
                    //        || (w.OrderNoCHICReposicao != "Cancelado" && w.OrderNoCHICReposicao != "" 
                    //            && w.OrderNoCHICReposicao != null))
                    //    .Count();

                    //if (qtdItensCancelados > 0 && qtdItenImportados > 0)
                    //    pedVenda.Status = "Importado Parcial";
                    //else if (qtdItensCancelados == 0 && qtdItenImportados > 0)
                    //    pedVenda.Status = "Importado Total";

                    #endregion

                    #region Pedido Normal - Novo

                    string retonro = ImportPVWebToCHIC(hlbappSession, pedVenda, listItensPVSession,
                        manterVolDisponivel);

                    if (retonro != "")
                    {
                        ViewBag.Erro = retonro;
                        return View("FinalizaPV");
                    }

                    #endregion

                    hlbppLOG.SaveChanges();
                    hlbappSession.SaveChanges();

                    ViewBag.Mensagem = "Pedido importado com sucesso! Agora pode conferi-lo na lista abaixo!"
                        + " O número do Pedido no CHIC será exibido na lista dos itens! Clique no ícone da impressora"
                        + " para visualizá-los!";

                    Session["listaIndexPV"] = FilterListaPV();
                }

                return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
            }
            catch (Exception ex)
            {
                string msg = "";

                int linenum = Convert.ToInt32(ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' ')));

                if (ex.InnerException == null)
                    msg = ex.Message;
                else
                    msg = ex.Message + " / Inner Exception: " + ex.InnerException.Message;
                ViewBag.Erro = "Erro ao Importar para o CHIC: " + msg + " / Line Number: " + linenum.ToString();
                return View("FinalizaPV");
            }
        }

        public ActionResult ReprovarPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            int id = Convert.ToInt32(Session["idSelecionado"].ToString());
            Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();

            if (model["motivo"] != null)
            {
                string motivo = model["motivo"];
                if ((motivo == "") || (motivo == null))
                {
                    ViewBag.Erro = "Antes de realizar a operação, por favor, informe o Motivo!";
                    return View("FinalizaPV");
                }

                List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                int existe = listItensPVSession
                    .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado").Count();

                if (existe == 0)
                {
                    pedidoVenda.Status = "Inclusão Reprovada";
                }
                else
                {
                    pedidoVenda.Status = "Alteração Reprovada";
                }

                #region Envio de E-mail

                MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                    new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                //salesmanTableAdapter sl = new salesmanTableAdapter();
                //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                //sl.FillByCode(slDT, pedidoVenda.Vendedor);

                var codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                if (pedidoVenda.Vendedor.Length == 7) codigoVendedorApolo = pedidoVenda.Vendedor;
                var vendedor = apoloStatic.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();

                string corpoEmail = "";
                string corpoOperacao = "";

                ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                    new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                string empresa = "";
                string copiaPara = "";
                string empresaApolo = "";
                if (vendedor.CodigoCHIC.Equals("BR"))
                {
                    empresa = "[HLB]";
                    copiaPara = "confirmacoes@hyline.com.br";
                    empresaApolo = "5";
                }
                else if (vendedor.CodigoCHIC.Equals("LB"))
                {
                    empresa = "[LTZ]";
                    copiaPara = "confirmacoes@ltz.com.br";
                    empresaApolo = "7";
                }
                else if (vendedor.CodigoCHIC.Equals("HN"))
                {
                    empresa = "[H&N]";
                    copiaPara = "confirmacoes@hnavicultura.com.br";
                    empresaApolo = "14";
                }
                else if (vendedor.CodigoCHIC.Equals("PL"))
                {
                    empresa = "[PL]";
                    copiaPara = "confirmacoes@planaltopostura.com.br";
                    empresaApolo = "20";
                }

                #region Envio de E-mails p/ Técnicos por Estado

                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE verificaCidade = apoloStatic.CIDADE
                    .Where(w => apoloStatic.ENTIDADE.Any(e => e.EntCod == pedidoVenda.CodigoCliente
                        && e.CidCod == w.CidCod))
                    .FirstOrDefault();

                if (verificaCidade != null)
                {
                    var listaTecnicos = apolo2Static.USUARIO
                        .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == verificaCidade.UfSigla)
                                && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                    && e.USERCodigoCHIC == pedidoVenda.Empresa)))
                        .ToList();

                    foreach (var item in listaTecnicos)
                    {
                        if (copiaPara == "")
                            copiaPara = item.UsuEmail;
                        else
                            copiaPara = copiaPara + ";" + item.UsuEmail;
                    }
                }

                #endregion

                #region Verifica Se existe Supervisores para gerar a copia

                //string codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                var listaSupVend = apolo.SUP_VENDEDOR
                    .Where(w => w.VendCod == codigoVendedorApolo
                        && w.FxaCod.Equals("0000003"))
                    .ToList();

                foreach (var sup in listaSupVend)
                {
                    MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                        .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                    if (supervisor != null)
                    {
                        copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                    }
                }

                #endregion

                email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                email.WorkFlowEmailStat = "Enviar";
                email.WorkFlowEmailData = DateTime.Now;
                email.WorkFlowEmailParaNome = vendedor.VendNome;
                email.WorkFlowEmailParaEmail = vendedor.Login;
                //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                //email.WorkFlowEmailParaNome = "Teste";
                //email.WorkFlowEmailCopiaPara = copiaPara + ";programacao@hyline.com.br";
                email.WorkFlowEmailCopiaPara = copiaPara;
                email.WorkFlowEmailDeNome = "Sistema WEB";
                email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                email.WorkFlowEmailFormato = "Texto";
                email.WorkFlowEmailDocEmpCod = empresaApolo;

                string textCodigoCHIC = "";
                if (existe > 0)
                    textCodigoCHIC = " - Nº CHIC " + listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Max(m => m.OrderNoCHIC);

                DateTime dataEntregaInicial = listItensPVSession
                        .Max(m => m.DataEntregaInicial);
                DateTime dataEntregaFinal = listItensPVSession
                        .Max(m => m.DataEntregaFinal);

                email.WorkFlowEmailAssunto = empresa + " - PEDIDO ID " + pedidoVenda.ID.ToString()
                    + " REPROVADO" + textCodigoCHIC;
                corpoOperacao = "O pedido " + pedidoVenda.ID.ToString() + textCodigoCHIC +
                    " - " + pedidoVenda.NomeCliente +
                    " - Entrega de " + dataEntregaInicial.ToShortDateString() +
                    " a " + dataEntregaFinal.ToShortDateString() +
                    " foi reprovado pelo Depto. de Progrmação pelo seguinte motivo: " + (char)13 + (char)10 + (char)13 + (char)10 +
                    motivo + (char)13 + (char)10 + (char)13 + (char)10 +
                    " Realize as alterações necessárias e salve o Pedido novamente para que possa ser" +
                    " analisado novamente!" + (char)13 + (char)10 +
                    "Qualquer dúvida, entrar em contato com o Depto. de Programação!";

                string stringChar = "" + (char)13 + (char)10;

                corpoEmail = "Prezado " + vendedor.VendNome + "," + (char)13 + (char)10 + (char)13 + (char)10
                    + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                    + "SISTEMA WEB";

                email.WorkFlowEmailCorpo = corpoEmail;

                apolo.WORKFLOW_EMAIL.AddObject(email);

                apolo.SaveChanges();

                #endregion

                #region LOG

                #region Insere LOG - Pedido_Venda

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                logPV.DataPedido = pedidoVenda.DataPedido;
                logPV.Usuario = Session["usuario"].ToString();
                logPV.DataHora = DateTime.Now;
                logPV.CodigoCliente = pedidoVenda.CodigoCliente;
                logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                logPV.CondicaoPagamento = pedidoVenda.CondicaoPagamento;
                logPV.Observacoes = pedidoVenda.Observacoes;
                logPV.Vendedor = pedidoVenda.Vendedor;
                logPV.Status = pedidoVenda.Status;
                logPV.Operacao = pedidoVenda.Status;
                logPV.IDPedidoVenda = pedidoVenda.ID;
                logPV.Motivo = motivo;
                logPV.Projecao = pedidoVenda.Projecao;

                hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                hlbppLOG.SaveChanges();

                #endregion

                List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                var listaItensImportar = listItensPV.Where(w => w.Importar == 1).ToList();

                foreach (var item in listaItensImportar)
                {
                    #region Insere LOG - Item_Ped_Venda

                    LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                    logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                    logItemPV.Sequencia = item.Sequencia;
                    logItemPV.ProdCodEstr = item.ProdCodEstr;
                    logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                    logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                    logItemPV.QtdeLiquida = item.QtdeLiquida;
                    logItemPV.PercBonificacao = item.PercBonificacao;
                    logItemPV.QtdeBonificada = item.QtdeBonificada;
                    logItemPV.QtdeReposicao = item.QtdeReposicao;
                    logItemPV.PrecoUnitario = item.PrecoUnitario;
                    logItemPV.DataHora = DateTime.Now;
                    logItemPV.Operacao = pedidoVenda.Status;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.IDItPedVenda = item.ID;
                    logItemPV.IDLogPedidoVenda = logPV.ID;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                    hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                    #endregion
                }

                Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                #region Insere LOG - Vacina Primária

                LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                if (vacinaPrimaria != null)
                {
                    logVacPrim.IDPedidoVenda = vacinaPrimaria.IDPedidoVenda;
                    logVacPrim.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                    logVacPrim.DataHora = DateTime.Now;
                    logVacPrim.Operacao = pedidoVenda.Status;
                    logVacPrim.IDVacPrimPedVenda = vacinaPrimaria.ID;
                    logVacPrim.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                    hlbppLOG.SaveChanges();
                }

                #endregion

                var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                foreach (var item in listaVacSec)
                {
                    #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                    LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                    logVacSec.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                    logVacSec.Sequencia = item.Sequencia;
                    logVacSec.ProdCodEstr = item.ProdCodEstr;
                    logVacSec.DataHora = DateTime.Now;
                    logVacSec.Operacao = pedidoVenda.Status;
                    logVacSec.IDVacSecPedVenda = item.ID;
                    logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                    hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                    #endregion
                }

                Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                if (servico != null)
                {
                    #region Insere LOG - Servico_Pedido_Venda

                    LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    logServ.IDPedidoVenda = servico.IDPedidoVenda;
                    logServ.ProdCodEstr = servico.ProdCodEstr;
                    logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                    logServ.DataHora = DateTime.Now;
                    logServ.Operacao = pedidoVenda.Status;
                    logServ.IDServPedVenda = servico.ID;
                    logServ.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                    #endregion
                }

                #endregion

                hlbppLOG.SaveChanges();

                Session["listaIndexPV"] = FilterListaPV();
            }

            hlbappSession.SaveChanges();

            ViewBag.Mensagem = "Pedido reprovado com sucesso!";

            return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
        }

        public ActionResult ListaReImportPVCHIC()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            HLBAPPEntities hlbapp = new HLBAPPEntities();
            var lista = hlbapp.VU_Verifica_Pedidos_Num_CHIC_Duplicados
                .OrderByDescending(o => hlbapp.Item_Pedido_Venda
                    .Where(a => o.ID == a.IDPedidoVenda).FirstOrDefault().DataEntregaInicial)
                .ToList();

            return View(lista);
        }

        public ActionResult ReImportPVCHIC(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            #region Carrega Variáveis

            HLBAPPEntities hlbapp = new HLBAPPEntities();

            //Pedido_Venda pedVenda = hlbapp.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();
            string orderNoCHIC = hlbapp.Item_Pedido_Venda
                 .Where(w => w.IDPedidoVenda == id).Max(m => m.OrderNoCHIC);
            if (orderNoCHIC == null || orderNoCHIC == "" || orderNoCHIC == "0" || orderNoCHIC == "Cancelado")
                orderNoCHIC = "vazio";

            string orderNoCHICReposicao = hlbapp.Item_Pedido_Venda
                .Where(w => w.IDPedidoVenda == id).Max(m => m.OrderNoCHICReposicao);
            if (orderNoCHICReposicao == null || orderNoCHICReposicao == "" || orderNoCHICReposicao == "0" 
                || orderNoCHICReposicao == "Cancelado")
                orderNoCHICReposicao = "vazio";

            bookedMobileTableAdapter bookedM = new bookedMobileTableAdapter();
            int_commMTableAdapter int_commM = new int_commMTableAdapter();
            ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();

            #endregion

            #region Deleta Pedidos

            List<VU_Verifica_Pedidos_Num_CHIC_Duplicados> listaPedidoDuplicados = 
                hlbapp.VU_Verifica_Pedidos_Num_CHIC_Duplicados
                .Where(w => hlbapp.Item_Pedido_Venda
                    .Any(i => i.IDPedidoVenda == w.ID
                        && (i.OrderNoCHIC == orderNoCHIC || i.OrderNoCHICReposicao == orderNoCHICReposicao)))
                .ToList();

            foreach (var pedidoDuplicado in listaPedidoDuplicados)
            {
                Pedido_Venda pedVenda = hlbapp.Pedido_Venda.Where(w => w.ID == pedidoDuplicado.ID).FirstOrDefault();

                if (pedVenda != null)
                {
                    CarregaPV(pedVenda.ID);

                    List<Item_Pedido_Venda> listItens = hlbapp.Item_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedVenda.ID).ToList();

                    foreach (var item in listItens)
                    {
                        if (item.OrderNoCHIC != null && item.OrderNoCHIC != "")
                        {
                            int_commM.DeleteQuery(item.OrderNoCHIC);
                            bookedM.DeleteQuery(item.OrderNoCHIC);
                            orderTA.DeleteQuery(item.OrderNoCHIC);
                        }

                        if (item.OrderNoCHICReposicao != null && item.OrderNoCHICReposicao != "")
                        {
                            int_commM.DeleteQuery(item.OrderNoCHICReposicao);
                            bookedM.DeleteQuery(item.OrderNoCHICReposicao);
                            orderTA.DeleteQuery(item.OrderNoCHICReposicao);
                        }

                        item.OrderNoCHIC = null;
                        item.OrderNoCHICReposicao = null;
                        item.Importar = 1;
                    }

                    pedVenda.Status = "Inclusão Pendente";

                    #region Pedido Normal - Novo

                    ImportPVWebToCHIC(hlbapp, pedVenda, listItens, false);

                    #endregion
                }
            }

            hlbapp.SaveChanges();

            #endregion

            var lista = hlbapp.VU_Verifica_Pedidos_Num_CHIC_Duplicados
                .ToList();

            return View("ListaReImportPVCHIC", lista);
        }

        #endregion

        #region Integração AniPlan

        public ActionResult ProgramarPVAniPlan(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            try
            {
                #region Criação de Variáveis

                List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                int id = Convert.ToInt32(Session["idSelecionado"].ToString());
                Pedido_Venda pedVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();
                pedVenda.OvosBrasil = 0;
                DateTime orderDate = pedVenda.DataPedido;

                string orderNO = "";
                string creatdby = Session["login"].ToString();
                DateTime datecrtd = DateTime.Now;
                string empresa = "";
                string empresaApolo = "";
                string copiaPara = "";
                string nomeVendedor = "";
                string emailVendedor = "";
                string corpoEmail = "";
                string corpoOperacao = "";
                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();

                #endregion

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                if (model["ProgramarPVButton"] != null)
                {
                    #region Verifica se o Período da Disponibilidade de Ovos está fechado para alteração

                    //var verificaFechamentoInicialDO = hlbappSession.LOG_DATA_FECH_LANC
                    //    .Where(w => w.Location == "Disponibilidade de Ovos - Inicial")
                    //    .OrderByDescending(o => o.DataHora)
                    //    .FirstOrDefault();

                    //var verificaFechamentoFinalDO = hlbappSession.LOG_DATA_FECH_LANC
                    //    .Where(w => w.Location == "Disponibilidade de Ovos - Final")
                    //    .OrderByDescending(o => o.DataHora)
                    //    .FirstOrDefault();

                    ////var dataNascimento = listItensPVSession.FirstOrDefault().DataNascimento;
                    //var dataNascimento = CalculaDataNascimento(pedVenda.CodigoCliente, listItensPVSession.FirstOrDefault().DataEntregaInicial,
                    //    listItensPVSession.FirstOrDefault().ProdCodEstr);

                    //if (verificaFechamentoInicialDO != null && verificaFechamentoFinalDO != null)
                    //{
                    //    if (dataNascimento >= verificaFechamentoInicialDO.Data_Fech_Lanc && dataNascimento <= verificaFechamentoFinalDO.Data_Fech_Lanc)
                    //    {
                    //        ViewBag.Erro = "Pedido não pode ser alterado para essa data pois o período da disponibilidade de ovos está fechado!";
                    //        return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
                    //    }
                    //}

                    #endregion

                    #region Programar Pedido

                    listItensPVSession = hlbappSession.Item_Pedido_Venda.Where(w => w.IDPedidoVenda == id).ToList();

                    int qtdItensCancelados = listItensPVSession.Where(w => w.OrderNoCHIC == "Cancelado"
                        || w.OrderNoCHICReposicao == "Cancelado").Count();
                    int qtdItenImportados = listItensPVSession
                        .Where(w => (w.OrderNoCHIC != "Cancelado" && w.OrderNoCHIC != "" && w.OrderNoCHIC != null)
                            || (w.OrderNoCHICReposicao != "Cancelado" && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != null)
                            || (w.Importar == 1)
                            )
                        .Count();

                    if (qtdItensCancelados > 0 && qtdItenImportados > 0)
                        pedVenda.Status = "Programado Parcial";
                    else if (qtdItensCancelados == 0 && qtdItenImportados > 0)
                        pedVenda.Status = "Programado Total";

                    foreach (var item in listItensPVSession)
                    {
                        if (item.Importar == 1) item.Importar = 0;
                    }

                    hlbappSession.SaveChanges();

                    #endregion

                    #region Envio de E-mails - Novo Geral

                    MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                        new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                    email.WorkFlowEmailCopiaPara = copiaPara;

                    MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                        new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                    #region Verifica Se existe Supervisores para gerar a copia

                    string codigoVendedorApolo = "0" + pedVenda.Vendedor;
                    var listaSupVend = apolo.SUP_VENDEDOR
                        .Where(w => w.VendCod == codigoVendedorApolo
                            && w.FxaCod.Equals("0000003"))
                        .ToList();

                    foreach (var sup in listaSupVend)
                    {
                        MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                            .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                        if (supervisor != null)
                        {
                            copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                        }
                    }

                    #endregion

                    ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String));

                    apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                    email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                    email.WorkFlowEmailStat = "Enviar";
                    email.WorkFlowEmailData = DateTime.Now;
                    email.WorkFlowEmailParaNome = nomeVendedor;
                    email.WorkFlowEmailParaEmail = emailVendedor;
                    //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                    //email.WorkFlowEmailParaNome = "Teste";
                    //email.WorkFlowEmailCopiaPara = email.WorkFlowEmailCopiaPara + ";programacao@hyline.com.br";
                    email.WorkFlowEmailCopiaPara = email.WorkFlowEmailCopiaPara;
                    email.WorkFlowEmailDeNome = "Sistema WEB";
                    email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                    email.WorkFlowEmailFormato = "Texto";
                    email.WorkFlowEmailDocEmpCod = empresaApolo;

                    string textCodigoCHIC = " Nº CHIC " + orderNO;

                    email.WorkFlowEmailAssunto = empresa + " - PEDIDO ID " + pedVenda.ID.ToString()
                        + " IMPORTADO -" + textCodigoCHIC;

                    string stringChar = "" + (char)13 + (char)10;

                    corpoEmail = "Prezado " + nomeVendedor + "," + stringChar + stringChar
                        + "O pedido criado foi importado para o CHIC e gerou os seguintes pedidos: " + stringChar + stringChar
                        + corpoOperacao
                        + "Qualquer dúvida, entrar em contato com o Depto. de Programação." + stringChar + stringChar
                        + "SISTEMA WEB";

                    email.WorkFlowEmailCorpo = corpoEmail;

                    #region Gerar Solicitação de Venda PDF

                    string caminho = GeraSolicitacaoVendaPDF(pedVenda.ID);

                    email.WorkFlowEmailArquivosAnexos = caminho;

                    #endregion

                    apolo.WORKFLOW_EMAIL.AddObject(email);

                    apolo.SaveChanges();

                    #endregion

                    #region Gerar LOG

                    #region Insere LOG - Pedido_Venda

                    logPV = new LOG_Pedido_Venda();
                    logPV.DataPedido = pedVenda.DataPedido;
                    logPV.Usuario = Session["usuario"].ToString();
                    logPV.DataHora = DateTime.Now;
                    logPV.CodigoCliente = pedVenda.CodigoCliente;
                    logPV.OvosBrasil = pedVenda.OvosBrasil;
                    logPV.CondicaoPagamento = pedVenda.CondicaoPagamento;
                    logPV.Observacoes = pedVenda.Observacoes;
                    logPV.Vendedor = pedVenda.Vendedor;
                    logPV.Status = pedVenda.Status;
                    logPV.Operacao = "Programado p/ AniPlan";
                    logPV.IDPedidoVenda = pedVenda.ID;
                    logPV.Projecao = pedVenda.Projecao;

                    hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                    hlbppLOG.SaveChanges();

                    #endregion

                    var listItensPV = listItensPVSession
                        //.Where(w => w.DataEntregaInicial == data.Key && w.OrderNoCHIC != "Cancelado")
                        .Where(w => w.OrderNoCHIC != "Cancelado")
                        .ToList();

                    foreach (var item in listItensPV)
                    {
                        #region Insere LOG - Item_Ped_Venda

                        LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                        logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                        logItemPV.Sequencia = item.Sequencia;
                        logItemPV.ProdCodEstr = item.ProdCodEstr;
                        logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                        logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                        logItemPV.QtdeLiquida = item.QtdeLiquida;
                        logItemPV.PercBonificacao = item.PercBonificacao;
                        logItemPV.QtdeBonificada = item.QtdeBonificada;
                        logItemPV.QtdeReposicao = item.QtdeReposicao;
                        logItemPV.PrecoUnitario = item.PrecoUnitario;
                        logItemPV.DataHora = DateTime.Now;
                        logItemPV.Operacao = "Programado p/ AniPlan";
                        logItemPV.IDItPedVenda = item.ID;
                        logItemPV.IDLogPedidoVenda = logPV.ID;
                        logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                        logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                        logItemPV.PrecoPinto = item.PrecoPinto;
                        logItemPV.ValorTotal = item.ValorTotal;
                        logItemPV.TipoReposicao = item.TipoReposicao;

                        hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                        #endregion
                    }

                    #region Insere LOG - Vacina Primária

                    Vacinas_Primaria_Pedido_Venda vacPrimObj = hlbappSession.Vacinas_Primaria_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                    LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                    if (vacPrimObj != null)
                    {
                        logVacPrim.IDPedidoVenda = vacPrimObj.IDPedidoVenda;
                        logVacPrim.ProdCodEstr = vacPrimObj.ProdCodEstr;
                        logVacPrim.DataHora = DateTime.Now;
                        logVacPrim.Operacao = "Programado p/ AniPlan";
                        logVacPrim.IDVacPrimPedVenda = vacPrimObj.ID;
                        logVacPrim.IDLogPedidoVenda = logPV.ID;
                        logVacPrim.PrecoUnitario = vacPrimObj.PrecoUnitario;
                        logVacPrim.Bonificada = vacPrimObj.Bonificada;

                        hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                        hlbppLOG.SaveChanges();
                    }

                    #endregion

                    #region Vacinas Secundárias

                    var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                    foreach (var vacSec in listaVacSec)
                    {
                        #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                        LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                        logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                        logVacSec.Sequencia = vacSec.Sequencia;
                        logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                        logVacSec.DataHora = DateTime.Now;
                        logVacSec.Operacao = "Programado p/ AniPlan";
                        logVacSec.IDVacSecPedVenda = vacSec.ID;
                        logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                        logVacSec.PrecoUnitario = vacSec.PrecoUnitario;
                        logVacSec.Bonificada = vacSec.Bonificada;

                        hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                        #endregion
                    }

                    #endregion

                    #region Insere LOG - Servico_Pedido_Venda

                    Servicos_Pedido_Venda serv = hlbappSession.Servicos_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == pedVenda.ID).FirstOrDefault();

                    if (serv != null)
                    {
                        LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                        logServ.IDPedidoVenda = serv.IDPedidoVenda;
                        logServ.ProdCodEstr = serv.ProdCodEstr;
                        logServ.PercAplicacaoServico = serv.PercAplicacaoServico;
                        logServ.DataHora = DateTime.Now;
                        logServ.Operacao = "Programado p/ AniPlan";
                        logServ.IDServPedVenda = serv.ID;
                        logServ.IDLogPedidoVenda = logPV.ID;
                        logServ.PrecoUnitario = serv.PrecoUnitario;
                        logServ.Bonificada = serv.Bonificada;

                        hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);
                    }

                    #endregion

                    #endregion

                    hlbappSession.SaveChanges();
                    hlbppLOG.SaveChanges();

                    ViewBag.Mensagem = "Pedido programado com sucesso! Agora pode conferi-lo na lista abaixo!";

                    Session["listaIndexPV"] = FilterListaPV();
                }

                return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
            }
            catch (Exception ex)
            {
                string msg = "";

                int linenum = Convert.ToInt32(ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' ')));

                if (ex.InnerException == null)
                    msg = ex.Message;
                else
                    msg = ex.Message + " / Inner Exception: " + ex.InnerException.Message;
                ViewBag.Erro = "Erro ao Programar para o AniPlan: " + msg + " / Line Number: " + linenum.ToString();
                return View("FinalizaPV");
            }
        }

        public ActionResult ConfirmaCancelaPVAniPlan(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();
            HLBAPPEntities hlbppLOG = new HLBAPPEntities();

            try
            {
                if (model["ConfirmaCancelaAniPlanButton"] != null)
                {
                    #region Carregar Variáveis e Objetos

                    int id = Convert.ToInt32(Session["idSelecionado"].ToString());
                    Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();
                    List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                    string motivo = "";
                    bool manterVolDisponivel = false;
                    string empresa = "";
                    string empresaApolo = "";
                    string copiaPara = "";
                    string corpoEmail = "";
                    string corpoOperacao = "";
                    LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();

                    #endregion

                    #region Verifica se o Período da Disponibilidade de Ovos está fechado para alteração

                    var verificaFechamentoInicialDO = hlbappSession.LOG_DATA_FECH_LANC
                        .Where(w => w.Location == "Disponibilidade de Ovos - Inicial")
                        .OrderByDescending(o => o.DataHora)
                        .FirstOrDefault();

                    var verificaFechamentoFinalDO = hlbappSession.LOG_DATA_FECH_LANC
                        .Where(w => w.Location == "Disponibilidade de Ovos - Final")
                        .OrderByDescending(o => o.DataHora)
                        .FirstOrDefault();

                    var dataNascimento = listItensPVSession.FirstOrDefault().DataNascimento;

                    if (verificaFechamentoInicialDO != null && verificaFechamentoFinalDO != null)
                    {
                        if (dataNascimento >= verificaFechamentoInicialDO.Data_Fech_Lanc && dataNascimento <= verificaFechamentoFinalDO.Data_Fech_Lanc)
                        {
                            ViewBag.Erro = "Pedido não pode ser alterado para essa data pois o período da disponibilidade de ovos está fechado!";
                            return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
                        }
                    }

                    #endregion

                    #region Valida Opção de Manter Volume Disponível

                    manterVolDisponivel = Convert.ToBoolean(model["manterVolDisponivel"].ToString().Replace("false,", ""));

                    if (model["motivo"] != null) motivo = model["motivo"];

                    if (manterVolDisponivel && motivo == "")
                    {
                        ViewBag.Erro = "Com a opção de Manter Volume Disponível marcada, é necessário "
                            + "informar o Motivo!";
                        return View("FinalizaPV");
                    }

                    int existeImportacaoCHIC = 0;
                    existeImportacaoCHIC = listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Count();
                    if (manterVolDisponivel && existeImportacaoCHIC == 0)
                    {
                        ViewBag.Erro = "Só é possível Manter Volume Disponível se existir item importado!";
                        return View("FinalizaPV");
                    }

                    #endregion

                    #region Verifica se tem rastreabilidade. Caso tenha, será bloqueado e só será cancelado após o exclusão da mesma.

                    var listaItensImportados = listItensPVSession
                        .Where(w => w.Alterado == 3 || w.Alterado == 4 || w.Alterado == 5).ToList();

                    foreach (var item in listaItensImportados)
                    {
                        var existeRastreabilidade = hlbappSession.HATCHERY_ORDER_FLOCK_DATA
                            .Where(w => w.OrderNoCHIC == item.OrderNoCHIC || w.OrderNoCHIC == item.OrderNoCHICReposicao)
                            .FirstOrDefault();

                        if (existeRastreabilidade != null)
                        {
                            ViewBag.Erro = "Existe rastreabilidade digitada para o pedido " + existeRastreabilidade.OrderNoCHIC
                                + "! Por favor, entrar em contato com o Incubatório para excluir a mesma para continuar com o cancelamento!";
                            return View("FinalizaPV");
                        }
                    }

                    #endregion

                    #region Manter Volume Disponível

                    if (manterVolDisponivel)
                    {
                        #region Carregando Dados do Pedido

                        CarregaPV(id);
                        CalculaValoresVacinasServicosPV();
                        var custoNo = "";
                        var salesrep = "000095";

                        Pedido_Venda pedVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();

                        if (pedVenda.Empresa.Equals("BR"))
                        {
                            custoNo = "0000178";
                            salesrep = "000095";
                        }
                        else if (pedVenda.Empresa.Equals("LB"))
                        {
                            custoNo = "0008201";
                            salesrep = "000094";
                        }
                        else if (pedVenda.Empresa.Equals("HN"))
                        {
                            custoNo = "0008730";
                            salesrep = "000025";
                        }
                        else if (pedVenda.Empresa.Equals("PL"))
                        {
                            custoNo = "0021364";
                            salesrep = "000131";
                        }

                        var nomeCliente = "";
                        var clienteApolo = apoloStatic.ENTIDADE.Where(w => w.EntCod == custoNo).FirstOrDefault();
                        if (clienteApolo != null) nomeCliente = clienteApolo.EntNome;

                        #endregion

                        #region Pedido_Venda

                        Pedido_Venda pedVendaDuplicado = new Pedido_Venda();
                        pedVendaDuplicado.CodigoCliente = custoNo;
                        pedVendaDuplicado.DataPedido = DateTime.Today;
                        pedVendaDuplicado.Usuario = Session["usuario"].ToString().Trim();
                        pedVendaDuplicado.DataHora = DateTime.Now;
                        pedVendaDuplicado.OvosBrasil = pedVenda.OvosBrasil;
                        pedVendaDuplicado.CondicaoPagamento = pedVenda.CondicaoPagamento;
                        pedVendaDuplicado.Observacoes = "Volume Disponível Mantido pelo seguinte motivo: " + motivo;
                        pedVendaDuplicado.Vendedor = salesrep;
                        pedVendaDuplicado.EnderEntSeq = 0;

                        //pedVendaDuplicado.Status = "Programado Total";
                        pedVendaDuplicado.Status = "Inclusão Pendente";

                        pedVendaDuplicado.Empresa = pedVenda.Empresa;
                        pedVendaDuplicado.NomeCliente = nomeCliente;
                        pedVendaDuplicado.Projecao = pedVenda.Projecao;

                        #region Dados Exportação

                        pedVendaDuplicado.EnviadoVia = pedVenda.EnviadoVia;
                        pedVendaDuplicado.AeroportoOrigem = pedVenda.AeroportoOrigem;
                        pedVendaDuplicado.AeroportoDestino = pedVenda.AeroportoDestino;
                        pedVendaDuplicado.ValorDocumentacao = pedVenda.ValorDocumentacao;
                        pedVendaDuplicado.ValorFrete = pedVenda.ValorFrete;
                        pedVendaDuplicado.NumCaixas = pedVenda.NumCaixas;
                        pedVendaDuplicado.DataEnvio = pedVenda.DataEnvio;
                        pedVendaDuplicado.DataSaidaIncubatorio = pedVenda.DataSaidaIncubatorio;
                        pedVendaDuplicado.TipoPedido = pedVenda.TipoPedido;
                        pedVendaDuplicado.NumPaletes = pedVenda.NumPaletes;
                        pedVendaDuplicado.NumFatura = pedVenda.NumFatura;
                        pedVendaDuplicado.NumeroVoo = pedVenda.NumeroVoo;
                        pedVendaDuplicado.CiaAerea = pedVenda.CiaAerea;
                        pedVendaDuplicado.NCM = pedVenda.NCM;
                        pedVendaDuplicado.AWB = pedVenda.AWB;
                        pedVendaDuplicado.DataColetaNascimento = pedVenda.DataColetaNascimento;
                        pedVendaDuplicado.Placa = pedVenda.Placa;
                        pedVendaDuplicado.Lacre = pedVenda.Lacre;
                        pedVendaDuplicado.Motorista = pedVenda.Motorista;
                        pedVendaDuplicado.RGMotorista = pedVenda.RGMotorista;
                        pedVendaDuplicado.Veterinario = pedVenda.Veterinario;

                        #endregion

                        hlbappSession.Pedido_Venda.AddObject(pedVendaDuplicado);
                        hlbappSession.SaveChanges();

                        #region Insere LOG - Pedido_Venda

                        logPV = new LOG_Pedido_Venda();
                        logPV.DataPedido = pedVendaDuplicado.DataPedido;
                        logPV.Usuario = Session["usuario"].ToString();
                        logPV.DataHora = DateTime.Now;
                        logPV.CodigoCliente = pedVendaDuplicado.CodigoCliente;
                        logPV.OvosBrasil = pedVendaDuplicado.OvosBrasil;
                        logPV.CondicaoPagamento = pedVendaDuplicado.CondicaoPagamento;
                        logPV.Observacoes = pedVendaDuplicado.Observacoes;
                        logPV.Vendedor = pedVendaDuplicado.Vendedor;
                        logPV.Status = "Programado Total";
                        logPV.Operacao = "Volume Disponível Mantido";
                        logPV.IDPedidoVenda = pedVendaDuplicado.ID;
                        logPV.Motivo = motivo;
                        logPV.Projecao = pedVendaDuplicado.Projecao;

                        hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                        hlbppLOG.SaveChanges();

                        #endregion

                        #endregion

                        #region Item_Pedido_Venda

                        //List<Item_Pedido_Venda> listItensPV = hlbappSession.Item_Pedido_Venda
                        //    .Where(w => w.IDPedidoVenda == pedVenda.ID)
                        //    .ToList();

                        foreach (var item in listaItensImportados)
                        {
                            Item_Pedido_Venda itemPedVenda = new Item_Pedido_Venda();
                            itemPedVenda.IDPedidoVenda = pedVendaDuplicado.ID;
                            itemPedVenda.Sequencia = item.Sequencia;

                            itemPedVenda.ProdCodEstr = item.ProdCodEstr;
                            itemPedVenda.DataEntregaInicial = item.DataEntregaInicial;
                            itemPedVenda.DataEntregaFinal = item.DataEntregaFinal;

                            itemPedVenda.QtdeLiquida = item.QtdeLiquida;
                            itemPedVenda.PercBonificacao = item.PercBonificacao;
                            itemPedVenda.QtdeBonificada = item.QtdeBonificada;
                            itemPedVenda.QtdeReposicao = item.QtdeReposicao;
                            itemPedVenda.PrecoUnitario = item.PrecoUnitario;
                            itemPedVenda.PrecoPinto = item.PrecoPinto;
                            itemPedVenda.TipoReposicao = item.TipoReposicao;
                            itemPedVenda.ValorTotal = item.ValorTotal;
                            itemPedVenda.DataNascimento = CalculaDataNascimento(pedVenda.CodigoCliente,
                            itemPedVenda.DataEntregaInicial, itemPedVenda.ProdCodEstr);

                            hlbappSession.Item_Pedido_Venda.AddObject(itemPedVenda);
                            hlbappSession.SaveChanges();

                            #region Insere LOG - Item_Ped_Venda

                            LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                            logItemPV.IDPedidoVenda = itemPedVenda.IDPedidoVenda;
                            logItemPV.Sequencia = itemPedVenda.Sequencia;
                            logItemPV.ProdCodEstr = itemPedVenda.ProdCodEstr;
                            logItemPV.DataEntregaInicial = itemPedVenda.DataEntregaInicial;
                            logItemPV.DataEntregaFinal = itemPedVenda.DataEntregaFinal;
                            
                            logItemPV.QtdeLiquida = 0;
                            logItemPV.PercBonificacao = 0;
                            logItemPV.QtdeBonificada = 0;
                            logItemPV.QtdeReposicao = 0;

                            #region Mantém Pedido Normal

                            if (item.OrderNoCHIC != null && (item.Alterado == 3 || item.Alterado == 5))
                            {
                                logItemPV.QtdeLiquida = itemPedVenda.QtdeLiquida;
                                logItemPV.PercBonificacao = itemPedVenda.PercBonificacao;
                                logItemPV.QtdeBonificada = itemPedVenda.QtdeBonificada;
                            }

                            #endregion

                            #region Mantém Reposição

                            if (item.OrderNoCHICReposicao != null && (item.Alterado == 4 || item.Alterado == 5))
                            {
                                logItemPV.QtdeReposicao = itemPedVenda.QtdeReposicao;
                            }

                            #endregion

                            logItemPV.PrecoUnitario = itemPedVenda.PrecoUnitario;
                            logItemPV.PrecoPinto = itemPedVenda.PrecoPinto;
                            logItemPV.TipoReposicao = itemPedVenda.TipoReposicao;
                            logItemPV.ValorTotal = itemPedVenda.ValorTotal;
                            logItemPV.DataHora = DateTime.Now;
                            logItemPV.Operacao = "Volume Disponível Mantido";
                            logItemPV.OrderNoCHIC = itemPedVenda.OrderNoCHIC;
                            logItemPV.IDItPedVenda = itemPedVenda.ID;
                            logItemPV.IDLogPedidoVenda = logPV.ID;
                            logItemPV.OrderNoCHIC = "";
                            logItemPV.OrderNoCHICReposicao = "";
                            logItemPV.TipoAlteracao = "";
                            hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                            #endregion

                            itemPedVenda.Alterado = 0;
                            itemPedVenda.Importar = 0;
                        }

                        #endregion

                        #region Atualiza Status para Programar Pedido

                        hlbppLOG.SaveChanges();
                        pedVendaDuplicado.Status = "Programado Total";
                        hlbappSession.SaveChanges();

                        #endregion
                    }

                    #endregion

                    #region Cancela Pedido

                    string textoEmail = "";
                    string stringChar = "" + (char)13 + (char)10;

                    #region Texto Detalhado

                    #region Cabeçalho

                    ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == pedidoVenda.CodigoCliente)
                        .FirstOrDefault();
                    MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();
                    UNID_FEDERACAO uf = apoloStatic.UNID_FEDERACAO
                        .Where(w => w.UfSigla == cidade.UfSigla
                            && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();
                    string empresaL = Session["empresa"].ToString();

                    textoEmail = "CLIENTE: " + entidade.EntNome + stringChar
                        + "DATA DO PEDIDO: " + pedidoVenda.DataPedido.ToShortDateString() + stringChar + stringChar
                        + "**** ITENS ****: " + stringChar + stringChar;

                    #endregion

                    #region Itens

                    Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == id).FirstOrDefault();

                    foreach (var item in listaItensImportados)
                    {
                        #region Preço Unit. s/ Vac.

                        string condPag = "";
                        if (Session["condicaoPagamentoPV"].ToString().Equals("PAGTO ANTECIPADO"))
                        {
                            condPag = Session["condicaoPagamentoPV"].ToString();
                        }
                        else
                        {
                            condPag = "Faturamento";
                        }

                        Tabela_Precos precoLinhagem = hlbappSession
                            .Tabela_Precos.Where(w => w.Tipo == condPag && w.Produto == item.ProdCodEstr
                            && w.Regiao == uf.UfRegGeog && w.Empresa == empresaL
                            && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                        .FirstOrDefault();

                        decimal? precoLin = 0;
                        if (precoLinhagem != null)
                        {
                            if (item.QtdeLiquida < 5000)
                            {
                                precoLin = precoLinhagem.ValorMenor5000Aves;
                            }
                            else
                            {
                                precoLin = precoLinhagem.ValorNormal;
                            }
                        }

                        #endregion

                        #region Qtde. Tratamento Infra.

                        decimal? qtTV = 0;
                        if (servico != null)
                        {
                            decimal qtdTratVerm = 1;
                            qtdTratVerm = Convert.ToDecimal(servico.PercAplicacaoServico);
                            qtTV = ((item.QtdeLiquida + item.QtdeBonificada) * (qtdTratVerm / 100));
                        }

                        #endregion

                        textoEmail = textoEmail
                            + "Data Inicial de Entrega: " + item.DataEntregaInicial.ToShortDateString() + stringChar
                            + "Data Final de Entrega: " + item.DataEntregaFinal.ToShortDateString() + stringChar
                            + "Linhagem: " + item.ProdCodEstr + stringChar
                            + "Qtde. Líquida: " + item.QtdeLiquida.ToString() + stringChar
                            + "% Bonificação: " + item.PercBonificacao.ToString() + "%" + stringChar
                            + "Qtde. Bonificada: " + item.QtdeBonificada.ToString() + stringChar
                            + "Qtde. Reposição: " + item.QtdeReposicao.ToString() + stringChar
                            + "Qtde. Total: " + (item.QtdeLiquida + item.QtdeBonificada).ToString() + stringChar
                            + "Preço Unit. s/ Vac.: R$ " + String.Format("{0:N4}", precoLin) + stringChar
                            + "Preço Unit. c/ Vac.: R$ " + String.Format("{0:N4}", item.PrecoUnitario) + stringChar
                            + "Valor Total: R$ " + String.Format("{0:N2}", (item.PrecoUnitario * item.QtdeLiquida)
                                + (Convert.ToDecimal(Session["valorServicoPV"]) * qtTV)) + stringChar
                            + (item.Alterado == 3 || item.Alterado == 5 ? "Cód. CHIC: " + item.OrderNoCHIC + stringChar : "")
                            + (item.Alterado == 4 || item.Alterado == 5 ? "Cód. CHIC Reposição: " + item.OrderNoCHICReposicao + stringChar : "") + stringChar;
                    }

                    #endregion

                    #region Vacina Primária

                    Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == id).FirstOrDefault();

                    if (vacinaPrimaria == null) vacinaPrimaria = new Vacinas_Primaria_Pedido_Venda();
                    PRODUTO vacinaApolo = apoloStatic.PRODUTO
                        .Where(w => w.ProdCodEstr == vacinaPrimaria.ProdCodEstr).FirstOrDefault();

                    #region Preço Vacina Primária

                    decimal? precoVacina = 0;
                    DateTime menorDataInicial = listItensPVSession.Min(m => m.DataEntregaInicial);
                    DateTime maiorDataFinal = listItensPVSession.Max(m => m.DataEntregaFinal);

                    if (vacinaApolo != null)
                    {
                        Tabela_Precos precoVacinaPrimaria = hlbappSession.Tabela_Precos
                            .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaApolo.ProdNomeAlt2
                                && w.Regiao == "Todas" && w.Empresa == empresaL
                                && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                            .FirstOrDefault();

                        if (precoVacinaPrimaria != null)
                            precoVacina = precoVacinaPrimaria.ValorNormal;
                    }

                    #endregion

                    if (vacinaApolo != null)
                    {
                        textoEmail = textoEmail
                            + "VACINA PRIMÁRIA: " + vacinaApolo.ProdNomeAlt1
                            + " - R$ " + String.Format("{0:N4}", precoVacina)
                            + stringChar + stringChar;
                    }

                    textoEmail = textoEmail
                            + "**** VACINAS SECUNDÁRIAS ****" + stringChar + stringChar;

                    #endregion

                    #region Vacinas Secundárias

                    List<Vacinas_Secundaria_Pedido_Venda> listaVacSec =
                        (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                    foreach (var item in listaVacSec)
                    {
                        #region Valor Vacina

                        PRODUTO vacinaSecObject = apoloStatic.PRODUTO
                            .Where(w => w.ProdCodEstr == item.ProdCodEstr)
                            .FirstOrDefault();

                        Tabela_Precos precoVacinaSec = hlbappSession.Tabela_Precos
                            .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaSecObject.ProdNomeAlt2
                                && w.Regiao == "Todas" && w.Empresa == empresaL
                                && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                            .FirstOrDefault();

                        decimal? valorvacina = 0;
                        if (precoVacinaSec != null)
                        {
                            valorvacina = precoVacinaSec.ValorNormal;
                        }

                        #endregion

                        textoEmail = textoEmail
                            + vacinaSecObject.ProdNomeAlt1 + " - R$ " + String.Format("{0:N4}", valorvacina)
                            + stringChar;
                    }

                    #endregion

                    #region Serviços

                    if (servico != null)
                    {
                        textoEmail = textoEmail + stringChar
                            + "TRATAMENTO INFRAVERMELHO: Sim - "
                            + String.Format("{0:N2}", servico.PercAplicacaoServico) + "%"
                            + stringChar + stringChar;
                    }
                    else
                    {
                        textoEmail = textoEmail + stringChar
                            + "TRATAMENTO INFRAVERMELHO: Não"
                            + stringChar + stringChar;
                    }

                    #endregion

                    #region Outras Informações

                    if (pedidoVenda.OvosBrasil.Equals(1))
                    {
                        textoEmail = textoEmail
                            + "OVOS BRASIL: Sim"
                            + stringChar;
                    }
                    else
                    {
                        textoEmail = textoEmail
                            + "OVOS BRASIL: Não"
                            + stringChar;
                    }

                    textoEmail = textoEmail
                        + "CONDIÇÃO DE PAGAMENTO: " + pedidoVenda.CondicaoPagamento + stringChar
                        + "OBSERVAÇÕES: " + pedidoVenda.Observacoes + stringChar;

                    #endregion

                    #endregion

                    #region Assunto sobre Nº CHIC Cancelado

                    int existeCHIC = listaItensImportados
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado"
                            && (w.Alterado == 3 || w.Alterado == 5))
                        .Count();
                    string textCodigoCHIC = "";
                    if (existeCHIC > 0)
                        textCodigoCHIC = " - Nº CHIC " + listaItensImportados
                            .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado"
                                && (w.Alterado == 3 || w.Alterado == 5))
                            .Max(m => m.OrderNoCHIC);

                    int existeCHICReposicao = listaItensImportados
                            .Where(w => w.OrderNoCHICReposicao != null && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != "Cancelado"
                                && (w.Alterado == 4 || w.Alterado == 5))
                            .Count();
                    if (existeCHICReposicao > 0)
                        textCodigoCHIC = textCodigoCHIC + " / - Nº CHIC Rep. " + listaItensImportados
                            .Where(w => w.OrderNoCHICReposicao != null && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != "Cancelado"
                                && (w.Alterado == 4 || w.Alterado == 5))
                            .Max(m => m.OrderNoCHICReposicao);

                    LOG_Pedido_Venda logpv = hlbappSession.LOG_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == id
                            && (w.Operacao == "Cancelamento Pendente"
                                || w.Operacao == "Cancelamento Aguardando Análise Gerência"))
                        .FirstOrDefault();

                    #endregion

                    if (logpv != null)
                        motivo = logpv.Motivo;

                    foreach (var item in listaItensImportados)
                    {
                        #region Deleta Pedido Normal

                        if (item.OrderNoCHIC != null && (item.Alterado == 3 || item.Alterado == 5))
                        {
                            Item_Pedido_Venda itemPV = hlbappSession.Item_Pedido_Venda.Where(w => w.ID == item.ID).FirstOrDefault();
                            itemPV.Alterado = 0;
                            itemPV.OrderNoCHIC = "Cancelado";

                            #region Cancela Roteiro de Entrega e Mortalidade 07 Dias Fluig

                            var retornoCancelaFluig = CancelaRoteiroEntregaEMortalidade07Dias(item.OrderNoCHIC, Session["usuario"].ToString());

                            if (retornoCancelaFluig != "OK" && retornoCancelaFluig != "")
                            {
                                ViewBag.Erro = "Erro ao Cancelar Roteiros no Fluig: " + retornoCancelaFluig;
                                return View("FinalizaPV");
                            }

                            #endregion
                        }

                        #endregion

                        #region Deleta Reposição

                        if (item.OrderNoCHICReposicao != null && (item.Alterado == 4 || item.Alterado == 5))
                        {
                            Item_Pedido_Venda itemPV = hlbappSession.Item_Pedido_Venda.Where(w => w.ID == item.ID).FirstOrDefault();
                            itemPV.Alterado = 0;
                            //itemPV.QtdeReposicao = 0;
                            itemPV.OrderNoCHICReposicao = "Cancelado";
                        }

                        #endregion
                    }

                    hlbappSession.SaveChanges();

                    #region Atualiza Status do Pedido

                    listItensPVSession = hlbappSession.Item_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == id).ToList();

                    int qtdItensCancelados = listItensPVSession.Where(w => w.OrderNoCHIC == "Cancelado").Count()
                        + listItensPVSession.Where(w => w.OrderNoCHICReposicao == "Cancelado").Count();
                    int qtdItenImportados = listItensPVSession
                        .Where(w => w.OrderNoCHIC != "Cancelado" && w.OrderNoCHIC != "" && w.OrderNoCHIC != null)
                        .Count()
                        +
                        listItensPVSession
                        .Where(w => w.OrderNoCHICReposicao != "Cancelado" && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != null)
                        .Count();

                    if (qtdItensCancelados > 0 && qtdItenImportados > 0)
                        pedidoVenda.Status = "Programado Parcial";
                    else if (qtdItensCancelados > 0 && qtdItenImportados == 0)
                        pedidoVenda.Status = "Cancelado";

                    #endregion

                    #endregion

                    #region Envio de E-mail

                    MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email = new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                    corpoEmail = "";
                    corpoOperacao = "";

                    ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                    MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo = new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                    apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                    empresa = "";
                    copiaPara = "";
                    empresaApolo = "";
                    if (pedidoVenda.Empresa.Equals("BR"))
                    {
                        empresa = "[HLB]";
                        copiaPara = "confirmacoes@hyline.com.br";
                        empresaApolo = "5";
                    }
                    else if (pedidoVenda.Empresa.Equals("LB"))
                    {
                        empresa = "[LTZ]";
                        copiaPara = "confirmacoes@ltz.com.br";
                        empresaApolo = "7";
                    }
                    else if (pedidoVenda.Empresa.Equals("HN"))
                    {
                        empresa = "[H&N]";
                        copiaPara = "confirmacoes@hnavicultura.com.br";
                        empresaApolo = "14";
                    }
                    else if (pedidoVenda.Empresa.Equals("PL"))
                    {
                        empresa = "[PL]";
                        copiaPara = "programacao@planaltopostura.com.br";
                        empresaApolo = "20";
                    }

                    #region Envio de E-mails p/ Técnicos por Estado

                    MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE verificaCidade = apoloStatic.CIDADE
                        .Where(w => apoloStatic.ENTIDADE.Any(e => e.EntCod == pedidoVenda.CodigoCliente
                            && e.CidCod == w.CidCod))
                        .FirstOrDefault();

                    if (verificaCidade != null)
                    {
                        var listaTecnicos = apolo2Static.USUARIO
                            .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                    && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == verificaCidade.UfSigla)
                                    && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                        && e.USERCodigoCHIC == pedidoVenda.Empresa)))
                            .ToList();

                        foreach (var item in listaTecnicos)
                        {
                            if (copiaPara == "")
                                copiaPara = item.UsuEmail;
                            else
                                copiaPara = copiaPara + ";" + item.UsuEmail;
                        }
                    }

                    #endregion

                    #region Verifica Se existe Supervisores para gerar a copia

                    string codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                    var listaSupVend = apolo.SUP_VENDEDOR
                        .Where(w => w.VendCod == codigoVendedorApolo
                            && w.FxaCod.Equals("0000003"))
                        .ToList();

                    foreach (var sup in listaSupVend)
                    {
                        MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                            .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                        if (supervisor != null)
                        {
                            copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                        }
                    }

                    #endregion

                    #region Carrega E-mail Vendedor

                    var codVendedorApolo = "0" + pedidoVenda.Vendedor;
                    var emailVendedor = "";
                    var nomeVendedor = "";
                    var vendedorApolo = apolo.VENDEDOR.Where(w => w.VendCod == codVendedorApolo).FirstOrDefault();
                    if (vendedorApolo != null)
                    {
                        emailVendedor = vendedorApolo.USERLoginSite;
                        nomeVendedor = vendedorApolo.VendNome;
                    }

                    #endregion

                    email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                    email.WorkFlowEmailStat = "Enviar";
                    email.WorkFlowEmailData = DateTime.Now;
                    email.WorkFlowEmailParaNome = nomeVendedor;
                    email.WorkFlowEmailParaEmail = emailVendedor;
                    //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                    //email.WorkFlowEmailParaNome = "Teste";
                    //email.WorkFlowEmailCopiaPara = copiaPara + ";programacao@hyline.com.br";
                    email.WorkFlowEmailCopiaPara = copiaPara;
                    email.WorkFlowEmailDeNome = "Sistema WEB";
                    email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                    email.WorkFlowEmailFormato = "Texto";
                    email.WorkFlowEmailDocEmpCod = empresaApolo;

                    DateTime dataEntregaInicial = listItensPVSession
                            .Max(m => m.DataEntregaInicial);
                    DateTime dataEntregaFinal = listItensPVSession
                            .Max(m => m.DataEntregaFinal);

                    string statusCancelamentoEmail = "";
                    if (pedidoVenda.Status.Equals("Cancelado"))
                        statusCancelamentoEmail = " CANCELADO TOTAL";
                    else
                        statusCancelamentoEmail = " CANCELADO PARCIAL";

                    var assunto = empresa + " - PEDIDO ID " + pedidoVenda.ID.ToString()
                        + statusCancelamentoEmail + textCodigoCHIC;
                    if (assunto.Length > 80)
                        email.WorkFlowEmailAssunto = assunto.Substring(0, 80);
                    else
                        email.WorkFlowEmailAssunto = assunto;

                    corpoOperacao = "O pedido " + pedidoVenda.ID.ToString() + textCodigoCHIC +
                        " - " + pedidoVenda.NomeCliente +
                        " - Entrega de " + dataEntregaInicial.ToShortDateString() +
                        " a " + dataEntregaFinal.ToShortDateString() +
                        " foi cancelado pelo Depto. de Programação conforme solicitado pelo seguinte motivo:"
                        + (char)13 + (char)10 + (char)13 + (char)10 +
                        motivo + (char)13 + (char)10 + (char)13 + (char)10 +
                        "Seguem Dados que foram realizada o Cancelamento " + ":" + stringChar + stringChar +
                        textoEmail + stringChar + stringChar +
                        "Qualquer dúvida, entrar em contato com o Depto. de Programação!";

                    corpoEmail = "Prezado " + nomeVendedor + "," + (char)13 + (char)10 + (char)13 + (char)10
                        + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                        + "SISTEMA WEB";

                    email.WorkFlowEmailCorpo = corpoEmail;

                    apolo.WORKFLOW_EMAIL.AddObject(email);

                    apolo.SaveChanges();

                    #endregion

                    #region LOG

                    #region Insere LOG - Pedido_Venda

                    logPV = new LOG_Pedido_Venda();
                    logPV.DataPedido = pedidoVenda.DataPedido;
                    logPV.Usuario = Session["usuario"].ToString();
                    logPV.DataHora = DateTime.Now;
                    logPV.CodigoCliente = pedidoVenda.CodigoCliente;
                    logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                    logPV.CondicaoPagamento = pedidoVenda.CondicaoPagamento;
                    logPV.Observacoes = pedidoVenda.Observacoes;
                    logPV.Vendedor = pedidoVenda.Vendedor;
                    logPV.Status = pedidoVenda.Status;
                    logPV.Operacao = "Cancelamento p/ AniPlan";
                    logPV.IDPedidoVenda = pedidoVenda.ID;
                    logPV.Motivo = motivo;
                    logPV.Projecao = pedidoVenda.Projecao;

                    hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                    hlbppLOG.SaveChanges();

                    #endregion

                    foreach (var item in listaItensImportados)
                    {
                        #region Insere LOG - Item_Ped_Venda

                        LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                        logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                        logItemPV.Sequencia = item.Sequencia;
                        logItemPV.ProdCodEstr = item.ProdCodEstr;
                        logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                        logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                        logItemPV.QtdeLiquida = item.QtdeLiquida;
                        logItemPV.PercBonificacao = item.PercBonificacao;
                        logItemPV.QtdeBonificada = item.QtdeBonificada;
                        logItemPV.QtdeReposicao = item.QtdeReposicao;
                        logItemPV.PrecoUnitario = item.PrecoUnitario;
                        logItemPV.DataHora = DateTime.Now;
                        logItemPV.Operacao = logPV.Operacao;
                        logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                        logItemPV.IDItPedVenda = item.ID;
                        logItemPV.IDLogPedidoVenda = logPV.ID;
                        logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                        logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                        hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                        #endregion
                    }

                    vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                    #region Insere LOG - Vacina Primária

                    LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                    if (vacinaPrimaria != null)
                    {
                        logVacPrim.IDPedidoVenda = vacinaPrimaria.IDPedidoVenda;
                        logVacPrim.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                        logVacPrim.DataHora = DateTime.Now;
                        logVacPrim.Operacao = logPV.Operacao;
                        logVacPrim.IDVacPrimPedVenda = vacinaPrimaria.ID;
                        logVacPrim.IDLogPedidoVenda = logPV.ID;

                        hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                        hlbppLOG.SaveChanges();
                    }

                    #endregion

                    listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                    foreach (var item in listaVacSec)
                    {
                        #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                        LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                        logVacSec.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                        logVacSec.Sequencia = item.Sequencia;
                        logVacSec.ProdCodEstr = item.ProdCodEstr;
                        logVacSec.DataHora = DateTime.Now;
                        logVacSec.Operacao = logPV.Operacao;
                        logVacSec.IDVacSecPedVenda = item.ID;
                        logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                        hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                        #endregion
                    }

                    servico = hlbappSession.Servicos_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                    if (servico != null)
                    {
                        #region Insere LOG - Servico_Pedido_Venda

                        LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                        logServ.IDPedidoVenda = servico.IDPedidoVenda;
                        logServ.ProdCodEstr = servico.ProdCodEstr;
                        logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                        logServ.DataHora = DateTime.Now;
                        logServ.Operacao = logPV.Operacao;
                        logServ.IDServPedVenda = servico.ID;
                        logServ.IDLogPedidoVenda = logPV.ID;

                        hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                        #endregion
                    }

                    #endregion

                    hlbappSession.SaveChanges();

                    Session["listaIndexPV"] = FilterListaPV();
                }

                ViewBag.Mensagem = "Pedido cancelado com sucesso!";

                return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
            }
            catch (Exception ex)
            {
                int linenum = Convert.ToInt32(ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' ')));
                string msg = "";
                if (ex.InnerException == null)
                    msg = ex.Message;
                else
                    msg = ex.Message + " / Inner Exception: " + ex.InnerException.Message;
                ViewBag.Erro = "Erro ao Cancelar no AniPlan: " + msg + " / Linha do Erro: " + linenum.ToString();
                return View("FinalizaPV");
            }
        }

        #endregion

        #region Cancel PV

        public ActionResult CancelaPV(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["solicitaCancelarPV"] = true;
            Session["idSelecionado"] = id;

            CarregaPV(id);

            List<Item_Pedido_Venda> listItens = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            var listaItensImportado = listItens
                .Where(w => (w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                    || (w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != null && w.OrderNoCHICReposicao != "Cancelado"))
                .ToList();

            Session["ItensPVList"] = listaItensImportado;

            return View("ListItensPV");
        }

        public ActionResult CancelaPVReturn()
        {
            return View("ListItensPV");
        }   

        public ActionResult FinalizaSolicitacaoCancelamentoAntigo(FormCollection model)
        {
            String[] fileItensCancelados = null;
            int[] selectedIndices = null;
            if (model.Count > 0)
            {
                fileItensCancelados = ("," + model["idCancela"]).Split(',');
                selectedIndices = model["cancela"].Replace("true,false", "true")
                                    .Split(',')
                                    .Select((item, index) => new { item = item, index = index })
                                    .Where(row => row.item == "true")
                                    .Select(row => row.index).ToArray();

                List<String> listItensCancelados = new List<string>();
                foreach (var index in selectedIndices)
                {
                    listItensCancelados.Add(fileItensCancelados[index]);
                }

                if (listItensCancelados.Count == 0)
                {
                    ViewBag.Erro = "É necessário selecionar pelo menos 01 item!!!";
                    return View("ListItensPV");
                }

                List<Item_Pedido_Venda> listItens = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                foreach (var item in listItens)
                {
                    foreach (var item2 in listItensCancelados)
                    {
                        if (item.Sequencia.ToString() == item2)
                        {
                            item.Alterado = 1;
                        }
                    }
                }

                Session["ItensPVList"] = listItens;
            }

            return View("FinalizaPV");
        }

        public ActionResult FinalizaSolicitacaoCancelamento(FormCollection model)
        {
            String[] fileItensCanceladosNormal = null;
            int[] selectedIndicesNormal = null;
            String[] fileItensCanceladosReposicao = null;
            int[] selectedIndicesReposicao = null;
            if (model.Count > 0)
            {
                List<String> listItensCanceladosNormal = new List<string>();
                if (model["cancela_normal"] != null)
                {
                    fileItensCanceladosNormal = ("," + model["idCancela_normal"]).Split(',');
                    selectedIndicesNormal = model["cancela_normal"].Replace("true,false", "true")
                                        .Split(',')
                                        .Select((item, index) => new { item = item, index = index })
                                        .Where(row => row.item == "true")
                                        .Select(row => row.index).ToArray();

                    foreach (var index in selectedIndicesNormal)
                    {
                        listItensCanceladosNormal.Add(fileItensCanceladosNormal[index]);
                    }
                }

                List<String> listItensCanceladosReposicao = new List<string>();
                if (model["cancela_reposicao"] != null)
                {
                    fileItensCanceladosReposicao = ("," + model["idCancela_reposicao"]).Split(',');
                    selectedIndicesReposicao = model["cancela_reposicao"].Replace("true,false", "true")
                                        .Split(',')
                                        .Select((item, index) => new { item = item, index = index })
                                        .Where(row => row.item == "true")
                                        .Select(row => row.index).ToArray();

                    foreach (var index in selectedIndicesReposicao)
                    {
                        listItensCanceladosReposicao.Add(fileItensCanceladosReposicao[index]);
                    }
                }

                if (listItensCanceladosNormal.Count == 0 && listItensCanceladosReposicao.Count == 0)
                {
                    ViewBag.Erro = "É necessário selecionar pelo menos 01 item!!!";
                    return View("ListItensPV");
                }

                List<Item_Pedido_Venda> listItens = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                foreach (var item in listItens)
                {
                    foreach (var item2 in listItensCanceladosNormal)
                    {
                        if (item.Sequencia.ToString() == item2)
                        {
                            item.Alterado = 3; // Cancelado Normal
                        }
                    }

                    foreach (var item2 in listItensCanceladosReposicao)
                    {
                        if (item.Sequencia.ToString() == item2)
                        {
                            if (item.Alterado == 3)
                                item.Alterado = 5; // Cancelado Normal e Reposição
                            else
                                item.Alterado = 4; // Cancelado Reposição
                        }
                    }
                }

                Session["ItensPVList"] = listItens;
            }

            return View("FinalizaPV");
        }

        public ActionResult ConfirmaSolicitacaoCancelaPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            int id = Convert.ToInt32(Session["idSelecionado"].ToString());
            Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();
            List<Item_Pedido_Venda> listItens = hlbappSession.Item_Pedido_Venda
                .Where(w => w.IDPedidoVenda == pedidoVenda.ID
                    && (w.OrderNoCHIC != "Cancelado" || w.OrderNoCHICReposicao != "Cancelado")).ToList();

            if (model["motivo"] != null)
            {
                string motivo = model["motivo"];

                Empresas configEmpresa = hlbappSession.Empresas
                    .Where(w => w.CodigoCHIC == pedidoVenda.Empresa).FirstOrDefault();

                if (configEmpresa.AprovacaoGerencia.Equals("Sim"))
                    pedidoVenda.Status = "Cancelamento Aguardando Análise Gerência";
                else
                    pedidoVenda.Status = "Cancelamento Pendente";

                //pedidoVenda.Status = "Cancelamento Pendente";

                if ((motivo == "") || (motivo == null))
                {
                    ViewBag.Erro = "Antes de realizar a operação, por favor, informe o Motivo!";
                    return View("FinalizaPV");
                }

                List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                foreach (var item in listItens)
                {
                    Item_Pedido_Venda itemSession = listItensPVSession.Where(w => w.ID == item.ID).FirstOrDefault();
                    if (itemSession != null) item.Alterado = itemSession.Alterado;
                }

                //foreach (var item in listItensPVSession)
                //{
                //    if (item.ID != 0)
                //        hlbappSession.AttachTo("Item_Pedido_Venda", item);
                //}

                //foreach (var item in listItensPVSession)
                //{
                //    item.Alterado = 0;
                //}

                string status = "";

                listItensPVSession = hlbappSession.Item_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == id).ToList();

                int qtdItensCancelados = listItensPVSession.Where(w => w.OrderNoCHIC == "Cancelado").Count()
                    + listItensPVSession.Where(w => w.OrderNoCHICReposicao == "Cancelado").Count();
                int qtdItenImportados = listItensPVSession
                    .Where(w => w.OrderNoCHIC != "Cancelado" && w.OrderNoCHIC != "" && w.OrderNoCHIC != null)
                    .Count()
                    +
                    listItensPVSession
                    .Where(w => w.OrderNoCHICReposicao != "Cancelado" && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != null)
                    .Count();

                if (qtdItensCancelados > 0 && qtdItenImportados > 0)
                    status = "PARCIAL";
                else if (qtdItensCancelados > 0 && qtdItenImportados == 0)
                    status = "TOTAL";

                #region Envio de E-mail

                string textoEmail = "";
                string stringChar = "" + (char)13 + (char)10;

                #region Texto Detalhado

                #region Cabeçalho

                ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == pedidoVenda.CodigoCliente)
                    .FirstOrDefault();
                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();
                UNID_FEDERACAO uf = apoloStatic.UNID_FEDERACAO
                    .Where(w => w.UfSigla == cidade.UfSigla
                        && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();
                string empresaL = Session["empresa"].ToString();

                textoEmail = "CLIENTE: " + entidade.EntNome + stringChar
                    + "DATA DO PEDIDO: " + pedidoVenda.DataPedido.ToShortDateString() + stringChar + stringChar
                    + "**** ITENS ****: " + stringChar + stringChar;

                #endregion

                #region Itens

                Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == id).FirstOrDefault();

                foreach (var item in listItensPVSession.Where(w => w.Alterado == 3 || w.Alterado == 4 || w.Alterado == 5).ToList())
                {
                    #region Preço Unit. s/ Vac.

                    string condPag = "";
                    if (Session["condicaoPagamentoPV"].ToString().Equals("PAGTO ANTECIPADO"))
                    {
                        condPag = Session["condicaoPagamentoPV"].ToString();
                    }
                    else
                    {
                        condPag = "Faturamento";
                    }

                    Tabela_Precos precoLinhagem = hlbappSession
                        .Tabela_Precos.Where(w => w.Tipo == condPag && w.Produto == item.ProdCodEstr
                        && w.Regiao == uf.UfRegGeog && w.Empresa == empresaL
                        && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                    .FirstOrDefault();

                    decimal? precoLin = 0;
                    if (precoLinhagem != null)
                    {
                        if (item.QtdeLiquida < 5000)
                        {
                            precoLin = precoLinhagem.ValorMenor5000Aves;
                        }
                        else
                        {
                            precoLin = precoLinhagem.ValorNormal;
                        }
                    }

                    #endregion

                    #region Qtde. Tratamento Infra.

                    decimal? qtTV = 0;
                    if (servico != null)
                    {
                        decimal qtdTratVerm = 1;
                        qtdTratVerm = Convert.ToDecimal(servico.PercAplicacaoServico);
                        qtTV = ((item.QtdeLiquida + item.QtdeBonificada) * (qtdTratVerm / 100));
                    }

                    #endregion

                    textoEmail = textoEmail
                        + "Data Inicial de Entrega: " + item.DataEntregaInicial.ToShortDateString() + stringChar
                        + "Data Final de Entrega: " + item.DataEntregaFinal.ToShortDateString() + stringChar
                        + "Linhagem: " + item.ProdCodEstr + stringChar
                        + "Qtde. Líquida: " + item.QtdeLiquida.ToString() + stringChar
                        + "% Bonificação: " + item.PercBonificacao.ToString() + "%" + stringChar
                        + "Qtde. Bonificada: " + item.QtdeBonificada.ToString() + stringChar
                        + "Qtde. Reposição: " + item.QtdeReposicao.ToString() + stringChar
                        + "Qtde. Total: " + (item.QtdeLiquida + item.QtdeBonificada).ToString() + stringChar
                        + "Preço Unit. s/ Vac.: R$ " + String.Format("{0:N4}", precoLin) + stringChar
                        + "Preço Unit. c/ Vac.: R$ " + String.Format("{0:N4}", item.PrecoUnitario) + stringChar
                        + "Valor Total: R$ " + String.Format("{0:N2}", (item.PrecoUnitario * item.QtdeLiquida)
                            + (Convert.ToDecimal(Session["valorServicoPV"]) * qtTV)) + stringChar
                        + (item.Alterado == 3 || item.Alterado == 5 ? "Cód. CHIC: " + item.OrderNoCHIC + stringChar : "")
                        + (item.Alterado == 4 || item.Alterado == 5 ? "Cód. CHIC Reposição: " + item.OrderNoCHICReposicao + stringChar : "") + stringChar;
                }

                #endregion

                #region Vacina Primária

                Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == id).FirstOrDefault();

                if (vacinaPrimaria == null) vacinaPrimaria = new Vacinas_Primaria_Pedido_Venda();
                PRODUTO vacinaApolo = apoloStatic.PRODUTO
                    .Where(w => w.ProdCodEstr == vacinaPrimaria.ProdCodEstr).FirstOrDefault();

                #region Preço Vacina Primária

                decimal? precoVacina = 0;
                DateTime menorDataInicial = listItensPVSession.Min(m => m.DataEntregaInicial);
                DateTime maiorDataFinal = listItensPVSession.Max(m => m.DataEntregaFinal);

                if (vacinaApolo != null)
                {
                    Tabela_Precos precoVacinaPrimaria = hlbappSession.Tabela_Precos
                        .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaApolo.ProdNomeAlt2
                            && w.Regiao == "Todas" && w.Empresa == empresaL
                            && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                        .FirstOrDefault();

                    if (precoVacinaPrimaria != null)
                        precoVacina = precoVacinaPrimaria.ValorNormal;
                }

                #endregion

                if (vacinaApolo != null)
                {
                    textoEmail = textoEmail
                        + "VACINA PRIMÁRIA: " + vacinaApolo.ProdNomeAlt1
                        + " - R$ " + String.Format("{0:N4}", precoVacina)
                        + stringChar + stringChar;
                }

                textoEmail = textoEmail
                        + "**** VACINAS SECUNDÁRIAS ****" + stringChar + stringChar;

                #endregion

                #region Vacinas Secundárias

                List<Vacinas_Secundaria_Pedido_Venda> listaVacSec =
                    (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                foreach (var item in listaVacSec)
                {
                    #region Valor Vacina

                    PRODUTO vacinaSecObject = apoloStatic.PRODUTO
                        .Where(w => w.ProdCodEstr == item.ProdCodEstr)
                        .FirstOrDefault();

                    Tabela_Precos precoVacinaSec = hlbappSession.Tabela_Precos
                        .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaSecObject.ProdNomeAlt2
                            && w.Regiao == "Todas" && w.Empresa == empresaL
                            && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                        .FirstOrDefault();

                    decimal? valorvacina = 0;
                    if (precoVacinaSec != null)
                    {
                        valorvacina = precoVacinaSec.ValorNormal;
                    }

                    #endregion

                    textoEmail = textoEmail
                        + vacinaSecObject.ProdNomeAlt1 + " - R$ " + String.Format("{0:N4}", valorvacina)
                        + stringChar;
                }

                #endregion

                #region Serviços

                if (servico != null)
                {
                    textoEmail = textoEmail + stringChar
                        + "TRATAMENTO INFRAVERMELHO: Sim - "
                        + String.Format("{0:N2}", servico.PercAplicacaoServico) + "%"
                        + stringChar + stringChar;
                }
                else
                {
                    textoEmail = textoEmail + stringChar
                        + "TRATAMENTO INFRAVERMELHO: Não"
                        + stringChar + stringChar;
                }

                #endregion

                #region Outras Informações

                if (pedidoVenda.OvosBrasil.Equals(1))
                {
                    textoEmail = textoEmail
                        + "OVOS BRASIL: Sim"
                        + stringChar;
                }
                else
                {
                    textoEmail = textoEmail
                        + "OVOS BRASIL: Não"
                        + stringChar;
                }

                textoEmail = textoEmail
                    + "CONDIÇÃO DE PAGAMENTO: " + pedidoVenda.CondicaoPagamento + stringChar
                    + "OBSERVAÇÕES: " + pedidoVenda.Observacoes + stringChar;

                #endregion

                #endregion

                MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                    new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                //salesmanTableAdapter sl = new salesmanTableAdapter();
                //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                //sl.FillByCode(slDT, pedidoVenda.Vendedor);

                var codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                if (pedidoVenda.Vendedor.Length == 7) codigoVendedorApolo = pedidoVenda.Vendedor;
                var vendedor = apoloStatic.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();

                if (vendedor != null)
                {
                    string corpoEmail = "";
                    string corpoOperacao = "";

                    ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                    MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                        new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                    apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                    string empresa = "";
                    string copiaPara = "";
                    string empresaApolo = "";
                    if (vendedor.CodigoCHIC.Equals("BR"))
                    {
                        empresa = "[HLB]";
                        copiaPara = "confirmacoes@hyline.com.br";
                        empresaApolo = "5";
                    }
                    else if (vendedor.CodigoCHIC.Equals("LB"))
                    {
                        empresa = "[LTZ]";
                        copiaPara = "confirmacoes@ltz.com.br";
                        empresaApolo = "7";
                    }
                    else if (vendedor.CodigoCHIC.Equals("HN"))
                    {
                        empresa = "[H&N]";
                        copiaPara = "confirmacoes@hnavicultura.com.br";
                        empresaApolo = "14";
                    }
                    else if (vendedor.CodigoCHIC.Equals("PL"))
                    {
                        empresa = "[PL]";
                        copiaPara = "programacao@planaltopostura.com.br";
                        empresaApolo = "20";
                    }

                    #region Envio de E-mails p/ Técnicos por Estado

                    MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE verificaCidade = apoloStatic.CIDADE
                        .Where(w => apoloStatic.ENTIDADE.Any(e => e.EntCod == pedidoVenda.CodigoCliente
                            && e.CidCod == w.CidCod))
                        .FirstOrDefault();

                    if (verificaCidade != null)
                    {
                        var listaTecnicos = apolo2Static.USUARIO
                            .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                    && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == verificaCidade.UfSigla)
                                    && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                        && e.USERCodigoCHIC == pedidoVenda.Empresa)))
                            .ToList();

                        foreach (var item in listaTecnicos)
                        {
                            if (copiaPara == "")
                                copiaPara = item.UsuEmail;
                            else
                                copiaPara = copiaPara + ";" + item.UsuEmail;
                        }
                    }

                    #endregion

                    #region Verifica Se existe Supervisores para gerar a copia

                    //string codigoVendedorApolo2 = "0" + pedidoVenda.Vendedor;
                    var listaSupVend = apolo.SUP_VENDEDOR
                        .Where(w => w.VendCod == codigoVendedorApolo
                            && w.FxaCod.Equals("0000003"))
                        .ToList();

                    foreach (var sup in listaSupVend)
                    {
                        MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                            .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                        if (supervisor != null)
                        {
                            copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                        }
                    }

                    #endregion

                    email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                    email.WorkFlowEmailStat = "Enviar";
                    email.WorkFlowEmailData = DateTime.Now;
                    email.WorkFlowEmailParaNome = vendedor.VendNome;
                    email.WorkFlowEmailParaEmail = vendedor.Login;
                    //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                    //email.WorkFlowEmailParaNome = "Teste";
                    //email.WorkFlowEmailCopiaPara = copiaPara + "programacao@hyline.com.br";
                    if (configEmpresa.AprovacaoGerencia.Equals("Sim"))
                        email.WorkFlowEmailCopiaPara = copiaPara;
                    else
                        //email.WorkFlowEmailCopiaPara = copiaPara + ";programacao@hyline.com.br";
                        email.WorkFlowEmailCopiaPara = copiaPara;
                    email.WorkFlowEmailDeNome = "Sistema WEB";
                    email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                    email.WorkFlowEmailFormato = "Texto";
                    email.WorkFlowEmailDocEmpCod = empresaApolo;

                    int existeCHIC = listItensPVSession
                            .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado"
                                && (w.Alterado == 3 || w.Alterado == 5))
                            .Count();
                    string textCodigoCHIC = "";
                    if (existeCHIC > 0)
                        textCodigoCHIC = " - Nº CHIC " + listItensPVSession
                            .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado"
                                && (w.Alterado == 3 || w.Alterado == 5))
                            .Max(m => m.OrderNoCHIC);

                    int existeCHICReposicao = listItensPVSession
                            .Where(w => w.OrderNoCHICReposicao != null && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != "Cancelado"
                                && (w.Alterado == 4 || w.Alterado == 5))
                            .Count();
                    if (existeCHICReposicao > 0)
                        textCodigoCHIC = textCodigoCHIC + " / - Nº CHIC Rep. " + listItensPVSession
                            .Where(w => w.OrderNoCHICReposicao != null && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != "Cancelado"
                                && (w.Alterado == 4 || w.Alterado == 5))
                            .Max(m => m.OrderNoCHICReposicao);

                    DateTime dataEntregaInicial = listItensPVSession
                            .Max(m => m.DataEntregaInicial);
                    DateTime dataEntregaFinal = listItensPVSession
                            .Max(m => m.DataEntregaFinal);

                    email.WorkFlowEmailAssunto = empresa + " - ID " + pedidoVenda.ID.ToString()
                        + " SOL. CANC. " + status + " " + textCodigoCHIC;
                    corpoOperacao = "O pedido " + pedidoVenda.ID.ToString() + textCodigoCHIC +
                        " - " + pedidoVenda.NomeCliente +
                        " - Entrega de " + dataEntregaInicial.ToShortDateString() +
                        " a " + dataEntregaFinal.ToShortDateString() +
                        " foi solicitado o cancelamento " + status + " pelo usuário " + Session["usuario"].ToString()
                        + " pelo seguinte motivo: " + (char)13 + (char)10 + (char)13 + (char)10 +
                        motivo + (char)13 + (char)10 + (char)13 + (char)10 +
                        "Seguem Dados que foram realizada a Solicitação de Cancelamento:" + stringChar + stringChar +
                        textoEmail + stringChar + stringChar +
                        " Por favor, realizar a análise a confirmação do cancelamento ou a reprovação do mesmo.";

                    //string stringChar = "" + (char)13 + (char)10;

                    corpoEmail = "Prezado Depto. de Programação," + (char)13 + (char)10 + (char)13 + (char)10
                        + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                        + "SISTEMA WEB";

                    email.WorkFlowEmailCorpo = corpoEmail;

                    apolo.WORKFLOW_EMAIL.AddObject(email);

                    apolo.SaveChanges();
                }

                #endregion

                #region LOG

                #region Insere LOG - Pedido_Venda

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                logPV.DataPedido = pedidoVenda.DataPedido;
                logPV.Usuario = Session["usuario"].ToString();
                logPV.DataHora = DateTime.Now;
                logPV.CodigoCliente = pedidoVenda.CodigoCliente;
                logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                logPV.CondicaoPagamento = pedidoVenda.CondicaoPagamento;
                logPV.Observacoes = pedidoVenda.Observacoes;
                logPV.Vendedor = pedidoVenda.Vendedor;
                logPV.Status = pedidoVenda.Status;
                logPV.Operacao = pedidoVenda.Status;
                logPV.IDPedidoVenda = pedidoVenda.ID;
                logPV.Motivo = motivo;
                logPV.Projecao = pedidoVenda.Projecao;

                hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                hlbppLOG.SaveChanges();

                #endregion

                var listaItensImportados = listItensPVSession
                    .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado").ToList();
                foreach (var item in listaItensImportados)
                {
                    #region Insere LOG - Item_Ped_Venda

                    LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                    logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                    logItemPV.Sequencia = item.Sequencia;
                    logItemPV.ProdCodEstr = item.ProdCodEstr;
                    logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                    logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                    logItemPV.QtdeLiquida = item.QtdeLiquida;
                    logItemPV.PercBonificacao = item.PercBonificacao;
                    logItemPV.QtdeBonificada = item.QtdeBonificada;
                    logItemPV.QtdeReposicao = item.QtdeReposicao;
                    logItemPV.PrecoUnitario = item.PrecoUnitario;
                    logItemPV.DataHora = DateTime.Now;
                    logItemPV.Operacao = pedidoVenda.Status;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.IDItPedVenda = item.ID;
                    logItemPV.IDLogPedidoVenda = logPV.ID;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                    hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                    #endregion
                }

                vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                #region Insere LOG - Vacina Primária

                LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                if (vacinaPrimaria != null)
                {
                    logVacPrim.IDPedidoVenda = vacinaPrimaria.IDPedidoVenda;
                    logVacPrim.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                    logVacPrim.DataHora = DateTime.Now;
                    logVacPrim.Operacao = pedidoVenda.Status;
                    logVacPrim.IDVacPrimPedVenda = vacinaPrimaria.ID;
                    logVacPrim.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                    hlbppLOG.SaveChanges();
                }

                #endregion

                listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                foreach (var item in listaVacSec)
                {
                    #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                    LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                    logVacSec.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                    logVacSec.Sequencia = item.Sequencia;
                    logVacSec.ProdCodEstr = item.ProdCodEstr;
                    logVacSec.DataHora = DateTime.Now;
                    logVacSec.Operacao = pedidoVenda.Status;
                    logVacSec.IDVacSecPedVenda = item.ID;
                    logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                    hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                    #endregion
                }

                servico = hlbappSession.Servicos_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                if (servico != null)
                {
                    #region Insere LOG - Servico_Pedido_Venda

                    LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    logServ.IDPedidoVenda = servico.IDPedidoVenda;
                    logServ.ProdCodEstr = servico.ProdCodEstr;
                    logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                    logServ.DataHora = DateTime.Now;
                    logServ.Operacao = pedidoVenda.Status;
                    logServ.IDServPedVenda = servico.ID;
                    logServ.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                    #endregion
                }

                #endregion

                hlbappSession.SaveChanges();
                hlbppLOG.SaveChanges();

                Session["listaIndexPV"] = FilterListaPV();
            }

            ViewBag.Mensagem = "Pedido solicitação de cancelamento realizada com sucesso!";

            Session["idSelecionado"] = null;
            Session["solicitaCancelarPV"] = false;

            return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
        }

        public ActionResult ConfirmaCancelaPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            try
            {
                if (model["ConfirmaCancelaButton"] != null)
                {
                    #region Carregar Variáveis e Objetos

                    int id = Convert.ToInt32(Session["idSelecionado"].ToString());
                    Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();
                    List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                    string motivo = "";
                    bool manterVolDisponivel = false;
                    //salesmanTableAdapter salesTA = new salesmanTableAdapter();
                    //CHICMobileDataSet.salesmanDataTable salesDT = new CHICMobileDataSet.salesmanDataTable();
                    //salesTA.FillByCode(salesDT, pedidoVenda.Vendedor);
                    string custoNo = "";
                    string salesrep = "";
                    string delivery = "";
                    string empresa = "";
                    string empresaApolo = "";
                    string copiaPara = "";
                    string nomeVendedor = "";
                    string emailVendedor = "";
                    string corpoEmail = "";
                    string corpoOperacao = "";
                    string operacao = "";
                    LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                    HLBAPPEntities hlbppLOG = new HLBAPPEntities();
                    int itemCod = 0;
                    bookedMobileTableAdapter bookedM = new bookedMobileTableAdapter();
                    string orderNO = "";
                    string log = "";
                    int booked_id = 0;
                    string item_ord = "";
                    string creatdby = Session["login"].ToString();
                    DateTime datecrtd = DateTime.Now;
                    tablesMobileTableAdapter tables = new tablesMobileTableAdapter();
                    CHICMobileDataSet.tablesMobileDataTable tablesDT = new CHICMobileDataSet.tablesMobileDataTable();
                    itemsMobileTableAdapter items = new itemsMobileTableAdapter();
                    CHICMobileDataSet.itemsMobileDataTable itemsDT = new CHICMobileDataSet.itemsMobileDataTable();
                    int_commMTableAdapter int_commM = new int_commMTableAdapter();
                    ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();
                    CHICMobileDataSet.ordersMobileDataTable ordersDT = new CHICMobileDataSet.ordersMobileDataTable();

                    var codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                    if (pedidoVenda.Vendedor.Length == 7) codigoVendedorApolo = pedidoVenda.Vendedor;
                    var vendedor = apoloStatic.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();

                    #endregion

                    #region Valida Opção de Manter Volume Disponível

                    manterVolDisponivel = 
                        Convert.ToBoolean(model["manterVolDisponivel"].ToString().Replace("false,", ""));

                    if (model["motivo"] != null)
                        motivo = model["motivo"];

                    if (manterVolDisponivel && motivo == "")
                    {
                        ViewBag.Erro = "Com a opção de Manter Volume Disponível marcada, é necessário "
                            + "informar o Motivo!";
                        return View("FinalizaPV");
                    }

                    if (motivo.Length > 80)
                    {
                        ViewBag.Erro = "A observação só pode conter 80 caracteres pelo motivo do "
                            + "tamanho do campo no CHIC!!!";
                        return View("FinalizaPV");
                    }

                    int existeImportacaoCHIC = 0;
                    existeImportacaoCHIC = listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Count();
                    if (manterVolDisponivel && existeImportacaoCHIC == 0)
                    {
                        ViewBag.Erro = "Só é possível Manter Volume Disponível se existir item importado!";
                        return View("FinalizaPV");
                    }

                    #endregion

                    #region Verifica se tem rastreabilidade. Caso tenha, será bloqueado e só será cancelado após o exclusão da mesma.

                    var listaItensImportados = listItensPVSession
                        .Where(w => w.Alterado == 3 || w.Alterado == 4 || w.Alterado == 5).ToList();

                    foreach (var item in listaItensImportados)
                    {
                        var existeRastreabilidade = hlbappSession.HATCHERY_ORDER_FLOCK_DATA
                            .Where(w => w.OrderNoCHIC == item.OrderNoCHIC || w.OrderNoCHIC == item.OrderNoCHICReposicao)
                            .FirstOrDefault();

                        if (existeRastreabilidade != null)
                        {
                            ViewBag.Erro = "Existe rastreabilidade digitada para o pedido " + existeRastreabilidade.OrderNoCHIC 
                                + "! Por favor, entrar em contato com o Incubatório para excluir a mesma para continuar com o cancelamento!";
                            return View("FinalizaPV");
                        }
                    }

                    #endregion

                    #region Manter Volume Disponível

                    if (manterVolDisponivel)
                    {
                        var listaMVD = listItensPVSession
                            .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado"
                                && w.Alterado == 1)
                            .GroupBy(g => g.OrderNoCHIC).ToList();

                        #region Carregando Dados do Pedido

                        if (vendedor.CodigoCHIC.Equals("BR"))
                        {
                            custoNo = "0000178";
                            salesrep = "000095";
                            empresa = "[HLB]";
                            copiaPara = "confirmacoes@hyline.com.br";
                            empresaApolo = "5";
                        }
                        else if (vendedor.CodigoCHIC.Equals("LB"))
                        {
                            custoNo = "0008201";
                            salesrep = "000094";
                            empresa = "[LTZ]";
                            copiaPara = "confirmacoes@ltz.com.br";
                            empresaApolo = "7";
                        }
                        else if (vendedor.CodigoCHIC.Equals("HN"))
                        {
                            custoNo = "0008730";
                            salesrep = "000025";
                            empresa = "[H&N]";
                            copiaPara = "confirmacoes@hnavicultura.com.br";
                            empresaApolo = "14";
                        }
                        else if (vendedor.CodigoCHIC.Equals("PL"))
                        {
                            custoNo = "0021364";
                            salesrep = "000131";
                            empresa = "[PL]";
                            copiaPara = "programacao@planaltopostura.com.br";
                            empresaApolo = "20";
                        }

                        delivery = motivo;

                        #endregion

                        #region Insere LOG - Pedido_Venda

                        logPV = new LOG_Pedido_Venda();
                        logPV.DataPedido = pedidoVenda.DataPedido;
                        logPV.Usuario = Session["usuario"].ToString();
                        logPV.DataHora = DateTime.Now;
                        logPV.CodigoCliente = custoNo;
                        logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                        logPV.CondicaoPagamento = delivery;
                        logPV.Observacoes = pedidoVenda.Observacoes;
                        logPV.Vendedor = salesrep;
                        logPV.Status = pedidoVenda.Status;
                        logPV.Operacao = "Volume Disponível Mantido";
                        logPV.IDPedidoVenda = pedidoVenda.ID;
                        logPV.Motivo = delivery;
                        logPV.Projecao = pedidoVenda.Projecao;

                        hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                        hlbppLOG.SaveChanges();

                        #endregion

                        foreach (var data in listaMVD)
                        {
                            #region Dados do Pedido

                            itemCod = 0;

                            string orderNoCHIC = data.Key;

                            CHICMobileDataSet.bookedMobileDataTable bookedDT =
                                new CHICMobileDataSet.bookedMobileDataTable();
                            
                            bookedM.FillChicksAndEggsByOrderNo(bookedDT, orderNoCHIC);

                            var listaBooked = bookedDT
                                .GroupBy(g =>
                                    new
                                    {
                                        g.cal_date,
                                        g.item,
                                        g.accountno,
                                        g.location
                                    })
                                .Select(s =>
                                    new
                                    {
                                        s.Key.cal_date,
                                        s.Key.item,
                                        s.Key.accountno,
                                        s.Key.location,
                                        qtd = s.Sum(m => m.quantity)
                                    })
                                .ToList();

                            #endregion

                            #region Insere Cabeçalho do Pedido

                            orderTA.FillByOrderNo(ordersDT, orderNoCHIC);

                            Thread.Sleep(5 * 1000);
                            //orderNO = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                            //orderNO = ProximoOrderNOCHIC();
                            //tables.FillByName(tablesDT, "orders");
                            //orderNO = (Convert.ToInt32(tablesDT[0].lastno) + 1).ToString();
                            orderNO = NextCodeCHIC("orders");

                            orderTA.Insert(orderNO, 0, Convert.ToDateTime("01/01/1988"), ordersDT[0].order_date,
                                    custoNo, "Y", pedidoVenda.ID.ToString(), 0, ordersDT[0].del_date, delivery,
                                    String.Empty, String.Empty, String.Empty, String.Empty, String.Empty, 0, 
                                    salesrep, String.Empty, String.Empty);

                            //tables.UpdateQuery(Convert.ToDecimal(orderNO), "orders");

                            log = "\r\n\r\n" + DateTime.Now.ToShortDateString() + " " + 
                                DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Cabeçalho|" +
                                orderNO + "|" +
                                ordersDT[0].del_date + "|" +
                                custoNo + "|" +
                                delivery + "|" +
                                salesrep + "\n\r";

                            #endregion

                            foreach (var item in listaBooked)
                            {
                                CHICMobileDataSet.itemsMobileDataTable itemDT =
                                new CHICMobileDataSet.itemsMobileDataTable();
                                itemsMobileTableAdapter itemTA = new itemsMobileTableAdapter();
                                CHICMobileDataSet.vartablMobileDataTable vDT =
                                    new CHICMobileDataSet.vartablMobileDataTable();
                                vartablMobileTableAdapter vTA = new vartablMobileTableAdapter();
                                itemTA.Fill(itemDT);
                                vTA.Fill(vDT);

                                var descricao = vDT
                                    .Where(v => itemDT.Any(i => i.variety == v.variety
                                        && i.item_no == item.item))
                                    .FirstOrDefault().desc.Trim();

                                Item_Pedido_Venda itemPedidoVenda = listItensPVSession
                                    .Where(w => w.OrderNoCHIC == orderNoCHIC && w.Alterado == 1
                                        && w.ProdCodEstr == descricao)
                                    .FirstOrDefault();

                                if (itemPedidoVenda != null)
                                {
                                    #region Produto Vendido

                                    itemCod = itemCod + 1;
                                    item_ord = "0" + itemCod.ToString();

                                    tables.FillByName(tablesDT, "booked");
                                    //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                    //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");
                                    booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                                    bookedM.Insert(booked_id, item.cal_date, custoNo, item.item, item.qtd, 0, orderNO,
                                        "O", String.Empty, String.Empty, String.Empty, item.location, item.accountno,
                                        String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                        ordersDT[0].del_date, 0, String.Empty, 0);

                                    //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                    log = log + DateTime.Now.ToShortDateString() + " " +
                                            DateTime.Now.ToShortTimeString() + "|" +
                                            Session["login"].ToString() + "|" +
                                            " Produto" + "|" +
                                            booked_id.ToString() + "|" +
                                            item.cal_date.ToShortDateString() + " " +
                                            item.cal_date.ToShortTimeString() + "|" +
                                            item.item + "|" +
                                            item.qtd.ToString() + "|" +
                                            0 + "|" +
                                            item.accountno + "\r\n";

                                    #endregion

                                    #region Insere LOG - Item_Ped_Venda

                                    vartablMobileTableAdapter varTA = new vartablMobileTableAdapter();
                                    CHICMobileDataSet.vartablMobileDataTable varDT =
                                        new CHICMobileDataSet.vartablMobileDataTable();

                                    items.FillByItemNo(itemsDT, item.item);

                                    varTA.FillByVariety(varDT, itemsDT[0].variety);

                                    string linha = varDT[0].desc.Trim();

                                    //Item_Pedido_Venda itemPV = listItensPVMVD
                                    //    .Where(w => w.OrderNoCHIC == orderNoCHIC).FirstOrDefault();
                                    Item_Pedido_Venda itemPV = listItensPVSession
                                        .Where(w => w.OrderNoCHIC == orderNoCHIC
                                            && w.ProdCodEstr == linha).FirstOrDefault();

                                    LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                                    logItemPV.IDPedidoVenda = itemPV.IDPedidoVenda;
                                    logItemPV.Sequencia = itemPV.Sequencia;
                                    logItemPV.ProdCodEstr = itemPV.ProdCodEstr;
                                    logItemPV.DataEntregaInicial = ordersDT[0].del_date;
                                    logItemPV.DataEntregaFinal = ordersDT[0].del_date;
                                    logItemPV.QtdeLiquida = Convert.ToInt32(item.qtd);
                                    logItemPV.PercBonificacao = 0;
                                    logItemPV.QtdeBonificada = 0;
                                    logItemPV.QtdeReposicao = 0;
                                    logItemPV.PrecoUnitario = 0;
                                    logItemPV.DataHora = DateTime.Now;
                                    logItemPV.Operacao = "Volume Disponível Mantido";
                                    logItemPV.IDItPedVenda = itemPV.ID;
                                    logItemPV.IDLogPedidoVenda = logPV.ID;
                                    logItemPV.OrderNoCHIC = orderNO;
                                    logItemPV.OrderNoCHICReposicao = itemPV.OrderNoCHICReposicao;

                                    hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                                    #endregion

                                    #region Envio de E-mails - Novo

                                    items.FillByItemNo(itemsDT, item.item);

                                    MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL emailMVD =
                                        new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                                    ObjectParameter numeroMVD = new ObjectParameter("codigo",
                                        typeof(global::System.String));

                                    MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apoloMVD =
                                        new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                                    apoloMVD.GerarCodigo("1", "WORKFLOW_EMAIL", numeroMVD);

                                    emailMVD.WorkFlowEmailSeq = Convert.ToInt32(numeroMVD.Value);
                                    emailMVD.WorkFlowEmailStat = "Enviar";
                                    emailMVD.WorkFlowEmailData = DateTime.Now;
                                    emailMVD.WorkFlowEmailParaNome = empresa;
                                    emailMVD.WorkFlowEmailParaEmail = copiaPara;
                                    //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                                    //email.WorkFlowEmailParaNome = "Teste";
                                    emailMVD.WorkFlowEmailCopiaPara = "programacao@hyline.com.br";
                                    emailMVD.WorkFlowEmailDeNome = "Sistema WEB";
                                    emailMVD.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                                    emailMVD.WorkFlowEmailFormato = "Texto";
                                    emailMVD.WorkFlowEmailDocEmpCod = empresaApolo;

                                    emailMVD.WorkFlowEmailAssunto = "**** VOLUME DISPONÍVEL DE "
                                        + itemsDT[0].item_desc.Trim()
                                        + " EM " + item.cal_date.ToShortDateString() + " ****";

                                    string stringCharMVD = "" + (char)13 + (char)10;

                                    corpoEmail = "Prezado " + empresa + "," + stringCharMVD + stringCharMVD
                                        + "Com a alteração do pedido " + orderNoCHIC + " pelo motivo " + delivery
                                        + ", foi mantido o volume na data " + item.cal_date.ToShortDateString()
                                        + " da linhagem " + itemsDT[0].item_desc.Trim()
                                        + " com a quantidade de " + item.qtd.ToString()
                                        + " (Nº CHIC " + orderNO + ")." + stringCharMVD + stringCharMVD
                                        + "Qualquer dúvida, entrar em contato pelo e-mail programacao@hyline.com.br."
                                        + stringCharMVD + stringCharMVD + "SISTEMA WEB";

                                    emailMVD.WorkFlowEmailCorpo = corpoEmail;

                                    apoloMVD.WORKFLOW_EMAIL.AddObject(emailMVD);

                                    apoloMVD.SaveChanges();

                                    #endregion
                                }
                            }

                            #region Custom Order Info

                            decimal orderNoCHICDecimal = Convert.ToDecimal(orderNoCHIC);

                            int_commM.InsertQuery(orderNO, "", log, false, String.Empty, false, false, false, false,
                                "", false, orderNoCHICDecimal, false, "", "", false);

                            #endregion
                        }
                    }

                    #endregion

                    #region Cancela Pedido

                    //var listaItensImportados = listItensPVSession
                    //    .Where(w => w.Alterado == 3 || w.Alterado == 4 || w.Alterado == 5).ToList();

                    string textoEmail = "";
                    string stringChar = "" + (char)13 + (char)10;

                    #region Texto Detalhado

                    #region Cabeçalho

                    ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == pedidoVenda.CodigoCliente)
                        .FirstOrDefault();
                    MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(c => c.CidCod == entidade.CidCod).FirstOrDefault();
                    UNID_FEDERACAO uf = apoloStatic.UNID_FEDERACAO
                        .Where(w => w.UfSigla == cidade.UfSigla
                            && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();
                    string empresaL = Session["empresa"].ToString();

                    textoEmail = "CLIENTE: " + entidade.EntNome + stringChar
                        + "DATA DO PEDIDO: " + pedidoVenda.DataPedido.ToShortDateString() + stringChar + stringChar
                        + "**** ITENS ****: " + stringChar + stringChar;

                    #endregion

                    #region Itens

                    Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == id).FirstOrDefault();

                    foreach (var item in listaItensImportados)
                    {
                        #region Preço Unit. s/ Vac.

                        string condPag = "";
                        if (Session["condicaoPagamentoPV"].ToString().Equals("PAGTO ANTECIPADO"))
                        {
                            condPag = Session["condicaoPagamentoPV"].ToString();
                        }
                        else
                        {
                            condPag = "Faturamento";
                        }

                        Tabela_Precos precoLinhagem = hlbappSession
                            .Tabela_Precos.Where(w => w.Tipo == condPag && w.Produto == item.ProdCodEstr
                            && w.Regiao == uf.UfRegGeog && w.Empresa == empresaL
                            && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                        .FirstOrDefault();

                        decimal? precoLin = 0;
                        if (precoLinhagem != null)
                        {
                            if (item.QtdeLiquida < 5000)
                            {
                                precoLin = precoLinhagem.ValorMenor5000Aves;
                            }
                            else
                            {
                                precoLin = precoLinhagem.ValorNormal;
                            }
                        }

                        #endregion

                        #region Qtde. Tratamento Infra.

                        decimal? qtTV = 0;
                        if (servico != null)
                        {
                            decimal qtdTratVerm = 1;
                            qtdTratVerm = Convert.ToDecimal(servico.PercAplicacaoServico);
                            qtTV = ((item.QtdeLiquida + item.QtdeBonificada) * (qtdTratVerm / 100));
                        }

                        #endregion

                        textoEmail = textoEmail
                            + "Data Inicial de Entrega: " + item.DataEntregaInicial.ToShortDateString() + stringChar
                            + "Data Final de Entrega: " + item.DataEntregaFinal.ToShortDateString() + stringChar
                            + "Linhagem: " + item.ProdCodEstr + stringChar
                            + "Qtde. Líquida: " + item.QtdeLiquida.ToString() + stringChar
                            + "% Bonificação: " + item.PercBonificacao.ToString() + "%" + stringChar
                            + "Qtde. Bonificada: " + item.QtdeBonificada.ToString() + stringChar
                            + "Qtde. Reposição: " + item.QtdeReposicao.ToString() + stringChar
                            + "Qtde. Total: " + (item.QtdeLiquida + item.QtdeBonificada).ToString() + stringChar
                            + "Preço Unit. s/ Vac.: R$ " + String.Format("{0:N4}", precoLin) + stringChar
                            + "Preço Unit. c/ Vac.: R$ " + String.Format("{0:N4}", item.PrecoUnitario) + stringChar
                            + "Valor Total: R$ " + String.Format("{0:N2}", (item.PrecoUnitario * item.QtdeLiquida)
                                + (Convert.ToDecimal(Session["valorServicoPV"]) * qtTV)) + stringChar
                            + (item.Alterado == 3 || item.Alterado == 5 ? "Cód. CHIC: " + item.OrderNoCHIC + stringChar : "")
                            + (item.Alterado == 4 || item.Alterado == 5 ? "Cód. CHIC Reposição: " + item.OrderNoCHICReposicao + stringChar : "") + stringChar;
                    }

                    #endregion

                    #region Vacina Primária

                    Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == id).FirstOrDefault();

                    if (vacinaPrimaria == null) vacinaPrimaria = new Vacinas_Primaria_Pedido_Venda();
                    PRODUTO vacinaApolo = apoloStatic.PRODUTO
                        .Where(w => w.ProdCodEstr == vacinaPrimaria.ProdCodEstr).FirstOrDefault();

                    #region Preço Vacina Primária

                    decimal? precoVacina = 0;
                    DateTime menorDataInicial = listItensPVSession.Min(m => m.DataEntregaInicial);
                    DateTime maiorDataFinal = listItensPVSession.Max(m => m.DataEntregaFinal);

                    if (vacinaApolo != null)
                    {
                        Tabela_Precos precoVacinaPrimaria = hlbappSession.Tabela_Precos
                            .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaApolo.ProdNomeAlt2
                                && w.Regiao == "Todas" && w.Empresa == empresaL
                                && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                            .FirstOrDefault();

                        if (precoVacinaPrimaria != null)
                            precoVacina = precoVacinaPrimaria.ValorNormal;
                    }

                    #endregion

                    if (vacinaApolo != null)
                    {
                        textoEmail = textoEmail
                            + "VACINA PRIMÁRIA: " + vacinaApolo.ProdNomeAlt1
                            + " - R$ " + String.Format("{0:N4}", precoVacina)
                            + stringChar + stringChar;
                    }

                    textoEmail = textoEmail
                            + "**** VACINAS SECUNDÁRIAS ****" + stringChar + stringChar;

                    #endregion

                    #region Vacinas Secundárias

                    List<Vacinas_Secundaria_Pedido_Venda> listaVacSec =
                        (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                    foreach (var item in listaVacSec)
                    {
                        #region Valor Vacina

                        PRODUTO vacinaSecObject = apoloStatic.PRODUTO
                            .Where(w => w.ProdCodEstr == item.ProdCodEstr)
                            .FirstOrDefault();

                        Tabela_Precos precoVacinaSec = hlbappSession.Tabela_Precos
                            .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaSecObject.ProdNomeAlt2
                                && w.Regiao == "Todas" && w.Empresa == empresaL
                                && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                            .FirstOrDefault();

                        decimal? valorvacina = 0;
                        if (precoVacinaSec != null)
                        {
                            valorvacina = precoVacinaSec.ValorNormal;
                        }

                        #endregion

                        textoEmail = textoEmail
                            + vacinaSecObject.ProdNomeAlt1 + " - R$ " + String.Format("{0:N4}", valorvacina)
                            + stringChar;
                    }

                    #endregion

                    #region Serviços

                    if (servico != null)
                    {
                        textoEmail = textoEmail + stringChar
                            + "TRATAMENTO INFRAVERMELHO: Sim - "
                            + String.Format("{0:N2}", servico.PercAplicacaoServico) + "%"
                            + stringChar + stringChar;
                    }
                    else
                    {
                        textoEmail = textoEmail + stringChar
                            + "TRATAMENTO INFRAVERMELHO: Não"
                            + stringChar + stringChar;
                    }

                    #endregion

                    #region Outras Informações

                    if (pedidoVenda.OvosBrasil.Equals(1))
                    {
                        textoEmail = textoEmail
                            + "OVOS BRASIL: Sim"
                            + stringChar;
                    }
                    else
                    {
                        textoEmail = textoEmail
                            + "OVOS BRASIL: Não"
                            + stringChar;
                    }

                    textoEmail = textoEmail
                        + "CONDIÇÃO DE PAGAMENTO: " + pedidoVenda.CondicaoPagamento + stringChar
                        + "OBSERVAÇÕES: " + pedidoVenda.Observacoes + stringChar;

                    #endregion

                    #endregion

                    #region Assunto sobre Nº CHIC Cancelado

                    int existeCHIC = listaItensImportados
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado"
                            && (w.Alterado == 3 || w.Alterado == 5))
                        .Count();
                    string textCodigoCHIC = "";
                    if (existeCHIC > 0)
                        textCodigoCHIC = " - Nº CHIC " + listaItensImportados
                            .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado"
                                && (w.Alterado == 3 || w.Alterado == 5))
                            .Max(m => m.OrderNoCHIC);

                    int existeCHICReposicao = listaItensImportados
                            .Where(w => w.OrderNoCHICReposicao != null && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != "Cancelado"
                                && (w.Alterado == 4 || w.Alterado == 5))
                            .Count();
                    if (existeCHICReposicao > 0)
                        textCodigoCHIC = textCodigoCHIC + " / - Nº CHIC Rep. " + listaItensImportados
                            .Where(w => w.OrderNoCHICReposicao != null && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != "Cancelado"
                                && (w.Alterado == 4 || w.Alterado == 5))
                            .Max(m => m.OrderNoCHICReposicao);

                    LOG_Pedido_Venda logpv = hlbappSession.LOG_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == id 
                            && (w.Operacao == "Cancelamento Pendente" 
                                || w.Operacao == "Cancelamento Aguardando Análise Gerência"))
                        .FirstOrDefault();

                    #endregion

                    if (logpv != null)
                        motivo = logpv.Motivo;

                    foreach (var item in listaItensImportados)
                    {
                        #region Deleta Pedido Normal

                        orderNO = "";
                        if (item.OrderNoCHIC != null && (item.Alterado == 3 || item.Alterado == 5))
                        {
                            orderNO = item.OrderNoCHIC;
                            vartablMobileTableAdapter vartabl = new vartablMobileTableAdapter();
                            CHICMobileDataSet.vartablMobileDataTable vartablDT =
                                new CHICMobileDataSet.vartablMobileDataTable();
                            vartabl.FillByDesc(vartablDT, item.ProdCodEstr.Replace(" - Ovos", "").Replace(" - Machos","").Replace(" - Macho", ""));
                            string varietyShort = vartablDT[0].variety;

                            #region Deleta Produto Vendido

                            CHICMobileDataSet.bookedMobileDataTable bookedMDT =
                                        new CHICMobileDataSet.bookedMobileDataTable();
                            bookedM.FillChicksAndEggsByOrderNoAndVariety(bookedMDT, orderNO,
                                varietyShort);

                            CHICMobileDataSet.bookedMobileRow produtoVendido =
                                bookedMDT.Where(w => w.alt_desc.Trim() == "").FirstOrDefault();

                            booked_id = 0;
                            if (produtoVendido != null)
                            {
                                booked_id = Convert.ToInt32(produtoVendido.book_id);

                                bookedM.DeleteBookID(booked_id);
                            }

                            #endregion

                            #region Deleta Bonificação

                            CHICMobileDataSet.bookedMobileRow bonificacao =
                                        bookedMDT.Where(w => w.alt_desc.Trim() != "").FirstOrDefault();

                            if (bonificacao != null)
                            {
                                booked_id = Convert.ToInt32(bonificacao.book_id);

                                bookedM.DeleteBookID(booked_id);
                            }

                            #endregion

                            //bookedM.DeleteQuery(orderNO);

                            int existe = listItensPVSession
                                .Where(w => w.OrderNoCHIC == orderNO && w.Alterado == 0).Count();

                            if (existe == 0)
                            {
                                bookedM.DeleteQuery(orderNO);
                                int_commM.DeleteQuery(orderNO);
                                orderTA.DeleteQuery(orderNO);
                            }

                            Item_Pedido_Venda itemPV = hlbappSession.Item_Pedido_Venda
                                .Where(w => w.ID == item.ID).FirstOrDefault();
                            itemPV.Alterado = 0;
                            itemPV.OrderNoCHIC = "Cancelado";

                            #region Cancela Roteiro de Entrega e Mortalidade 07 Dias Fluig

                            var retornoCancelaFluig = CancelaRoteiroEntregaEMortalidade07Dias(orderNO, Session["usuario"].ToString());

                            if (retornoCancelaFluig != "OK" && retornoCancelaFluig != "")
                            {
                                ViewBag.Erro = "Erro ao Cancelar Roteiros no Fluig: " + retornoCancelaFluig;
                                return View("FinalizaPV");
                            }

                            #endregion
                        }

                        #endregion

                        #region Deleta Reposição

                        if (item.OrderNoCHICReposicao != null && (item.Alterado == 4 || item.Alterado == 5))
                        {
                            orderNO = item.OrderNoCHICReposicao;
                            vartablMobileTableAdapter vartabl = new vartablMobileTableAdapter();
                            CHICMobileDataSet.vartablMobileDataTable vartablDT =
                                new CHICMobileDataSet.vartablMobileDataTable();
                            vartabl.FillByDesc(vartablDT, item.ProdCodEstr.Replace(" - Ovos", "").Replace(" - Machos", "").Replace(" - Macho", ""));
                            string varietyShort = vartablDT[0].variety;

                            #region Deleta Produto Vendido

                            CHICMobileDataSet.bookedMobileDataTable bookedMDT =
                                        new CHICMobileDataSet.bookedMobileDataTable();
                            bookedM.FillChicksAndEggsByOrderNoAndVariety(bookedMDT, orderNO,
                                varietyShort);

                            CHICMobileDataSet.bookedMobileRow produtoVendido =
                                bookedMDT.Where(w => w.alt_desc.Trim() == "").FirstOrDefault();

                            booked_id = 0;
                            if (produtoVendido != null)
                            {
                                booked_id = Convert.ToInt32(produtoVendido.book_id);

                                bookedM.DeleteBookID(booked_id);
                            }

                            #endregion

                            #region Deleta Bonificação

                            CHICMobileDataSet.bookedMobileRow bonificacao =
                                        bookedMDT.Where(w => w.alt_desc.Trim() != "").FirstOrDefault();

                            if (bonificacao != null)
                            {
                                booked_id = Convert.ToInt32(bonificacao.book_id);

                                bookedM.DeleteBookID(booked_id);
                            }

                            #endregion

                            //bookedM.DeleteQuery(orderNO);

                            int existe = listItensPVSession
                                .Where(w => w.OrderNoCHICReposicao == orderNO && w.Alterado == 0).Count();

                            if (existe == 0)
                            {
                                bookedM.DeleteQuery(orderNO);
                                int_commM.DeleteQuery(orderNO);
                                orderTA.DeleteQuery(orderNO);
                            }

                            Item_Pedido_Venda itemPV = hlbappSession.Item_Pedido_Venda.Where(w => w.ID == item.ID).FirstOrDefault();
                            itemPV.Alterado = 0;
                            itemPV.QtdeReposicao = 0;
                            itemPV.OrderNoCHICReposicao = "Cancelado";
                        }

                        #endregion
                    }

                    #region Atualiza Status do Pedido

                    listItensPVSession = hlbappSession.Item_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == id).ToList();

                    int qtdItensCancelados = listItensPVSession.Where(w => w.OrderNoCHIC == "Cancelado").Count()
                        + listItensPVSession.Where(w => w.OrderNoCHICReposicao == "Cancelado").Count();
                    int qtdItenImportados = listItensPVSession
                        .Where(w => w.OrderNoCHIC != "Cancelado" && w.OrderNoCHIC != "" && w.OrderNoCHIC != null)
                        .Count()
                        +
                        listItensPVSession
                        .Where(w => w.OrderNoCHICReposicao != "Cancelado" && w.OrderNoCHICReposicao != "" && w.OrderNoCHICReposicao != null)
                        .Count();

                    if (qtdItensCancelados > 0 && qtdItenImportados > 0)
                        pedidoVenda.Status = "Importado Parcial";
                    else if (qtdItensCancelados > 0 && qtdItenImportados == 0)
                        pedidoVenda.Status = "Cancelado";

                    #endregion

                    #endregion

                    #region Envio de E-mail

                    MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                        new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                    //salesmanTableAdapter sl = new salesmanTableAdapter();
                    //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                    //sl.FillByCode(slDT, pedidoVenda.Vendedor);

                    corpoEmail = "";
                    corpoOperacao = "";

                    ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                    MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                        new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                    apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                    empresa = "";
                    copiaPara = "";
                    empresaApolo = "";
                    if (vendedor.CodigoCHIC.Equals("BR"))
                    {
                        empresa = "[HLB]";
                        copiaPara = "confirmacoes@hyline.com.br";
                        empresaApolo = "5";
                    }
                    else if (vendedor.CodigoCHIC.Equals("LB"))
                    {
                        empresa = "[LTZ]";
                        copiaPara = "confirmacoes@ltz.com.br";
                        empresaApolo = "7";
                    }
                    else if (vendedor.CodigoCHIC.Equals("HN"))
                    {
                        empresa = "[H&N]";
                        copiaPara = "confirmacoes@hnavicultura.com.br";
                        empresaApolo = "14";
                    }
                    else if (vendedor.CodigoCHIC.Equals("PL"))
                    {
                        empresa = "[PL]";
                        copiaPara = "programacao@planaltopostura.com.br";
                        empresaApolo = "20";
                    }

                    #region Envio de E-mails p/ Técnicos por Estado

                    MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE verificaCidade = apoloStatic.CIDADE
                        .Where(w => apoloStatic.ENTIDADE.Any(e => e.EntCod == pedidoVenda.CodigoCliente
                            && e.CidCod == w.CidCod))
                        .FirstOrDefault();

                    if (verificaCidade != null)
                    {
                        var listaTecnicos = apolo2Static.USUARIO
                            .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                    && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == verificaCidade.UfSigla)
                                    && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                        && e.USERCodigoCHIC == pedidoVenda.Empresa)))
                            .ToList();

                        foreach (var item in listaTecnicos)
                        {
                            if (copiaPara == "")
                                copiaPara = item.UsuEmail;
                            else
                                copiaPara = copiaPara + ";" + item.UsuEmail;
                        }
                    }

                    #endregion

                    #region Verifica Se existe Supervisores para gerar a copia

                    //string codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                    var listaSupVend = apolo.SUP_VENDEDOR
                        .Where(w => w.VendCod == codigoVendedorApolo
                            && w.FxaCod.Equals("0000003"))
                        .ToList();

                    foreach (var sup in listaSupVend)
                    {
                        MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                            .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                        if (supervisor != null)
                        {
                            copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                        }
                    }

                    #endregion

                    email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                    email.WorkFlowEmailStat = "Enviar";
                    email.WorkFlowEmailData = DateTime.Now;
                    email.WorkFlowEmailParaNome = vendedor.VendNome;
                    email.WorkFlowEmailParaEmail = vendedor.Login;
                    //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                    //email.WorkFlowEmailParaNome = "Teste";
                    //email.WorkFlowEmailCopiaPara = copiaPara + ";programacao@hyline.com.br";
                    email.WorkFlowEmailCopiaPara = copiaPara;
                    email.WorkFlowEmailDeNome = "Sistema WEB";
                    email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                    email.WorkFlowEmailFormato = "Texto";
                    email.WorkFlowEmailDocEmpCod = empresaApolo;

                    //int existeCHIC = listItensPVSession
                    //        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                    //        .Count();
                    //string textCodigoCHIC = "";
                    //if (existeCHIC > 0)
                    //    textCodigoCHIC = " - Nº CHIC " + listItensPVSession
                    //        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                    //        .Max(m => m.OrderNoCHIC);

                    DateTime dataEntregaInicial = listItensPVSession
                            .Max(m => m.DataEntregaInicial);
                    DateTime dataEntregaFinal = listItensPVSession
                            .Max(m => m.DataEntregaFinal);

                    string statusCancelamentoEmail = "";
                    if (pedidoVenda.Status.Equals("Cancelado"))
                        statusCancelamentoEmail = " CANCELADO TOTAL";
                    else
                        statusCancelamentoEmail = " CANCELADO PARCIAL";

                    email.WorkFlowEmailAssunto = empresa + " - PEDIDO ID " + pedidoVenda.ID.ToString()
                        + statusCancelamentoEmail + textCodigoCHIC;
                    corpoOperacao = "O pedido " + pedidoVenda.ID.ToString() + textCodigoCHIC +
                        " - " + pedidoVenda.NomeCliente +
                        " - Entrega de " + dataEntregaInicial.ToShortDateString() +
                        " a " + dataEntregaFinal.ToShortDateString() +
                        " foi cancelado pelo Depto. de Programação conforme solicitado pelo seguinte motivo:"
                        + (char)13 + (char)10 + (char)13 + (char)10 +
                        motivo + (char)13 + (char)10 + (char)13 + (char)10 +
                        "Seguem Dados que foram realizada o Cancelamento " + ":" + stringChar + stringChar +
                        textoEmail + stringChar + stringChar +
                        "Qualquer dúvida, entrar em contato com o Depto. de Programação!";

                    //string stringChar = "" + (char)13 + (char)10;

                    corpoEmail = "Prezado " + vendedor.VendNome + "," + (char)13 + (char)10 + (char)13 + (char)10
                        + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                        + "SISTEMA WEB";

                    email.WorkFlowEmailCorpo = corpoEmail;

                    apolo.WORKFLOW_EMAIL.AddObject(email);

                    apolo.SaveChanges();

                    #endregion

                    #region LOG

                    #region Insere LOG - Pedido_Venda

                    logPV = new LOG_Pedido_Venda();
                    logPV.DataPedido = pedidoVenda.DataPedido;
                    logPV.Usuario = Session["usuario"].ToString();
                    logPV.DataHora = DateTime.Now;
                    logPV.CodigoCliente = pedidoVenda.CodigoCliente;
                    logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                    logPV.CondicaoPagamento = pedidoVenda.CondicaoPagamento;
                    logPV.Observacoes = pedidoVenda.Observacoes;
                    logPV.Vendedor = pedidoVenda.Vendedor;
                    logPV.Status = pedidoVenda.Status;
                    logPV.Operacao = pedidoVenda.Status;
                    logPV.IDPedidoVenda = pedidoVenda.ID;
                    logPV.Motivo = motivo;
                    logPV.Projecao = pedidoVenda.Projecao;

                    hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                    hlbppLOG.SaveChanges();

                    #endregion

                    foreach (var item in listaItensImportados)
                    {
                        #region Insere LOG - Item_Ped_Venda

                        LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                        logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                        logItemPV.Sequencia = item.Sequencia;
                        logItemPV.ProdCodEstr = item.ProdCodEstr;
                        logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                        logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                        logItemPV.QtdeLiquida = item.QtdeLiquida;
                        logItemPV.PercBonificacao = item.PercBonificacao;
                        logItemPV.QtdeBonificada = item.QtdeBonificada;
                        logItemPV.QtdeReposicao = item.QtdeReposicao;
                        logItemPV.PrecoUnitario = item.PrecoUnitario;
                        logItemPV.DataHora = DateTime.Now;
                        logItemPV.Operacao = pedidoVenda.Status;
                        logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                        logItemPV.IDItPedVenda = item.ID;
                        logItemPV.IDLogPedidoVenda = logPV.ID;
                        logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                        logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                        hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                        #endregion
                    }

                    vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                            .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                    #region Insere LOG - Vacina Primária

                    LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                    if (vacinaPrimaria != null)
                    {
                        logVacPrim.IDPedidoVenda = vacinaPrimaria.IDPedidoVenda;
                        logVacPrim.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                        logVacPrim.DataHora = DateTime.Now;
                        logVacPrim.Operacao = pedidoVenda.Status;
                        logVacPrim.IDVacPrimPedVenda = vacinaPrimaria.ID;
                        logVacPrim.IDLogPedidoVenda = logPV.ID;

                        hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                        hlbppLOG.SaveChanges();
                    }

                    #endregion

                    listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                    foreach (var item in listaVacSec)
                    {
                        #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                        LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                        logVacSec.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                        logVacSec.Sequencia = item.Sequencia;
                        logVacSec.ProdCodEstr = item.ProdCodEstr;
                        logVacSec.DataHora = DateTime.Now;
                        logVacSec.Operacao = pedidoVenda.Status;
                        logVacSec.IDVacSecPedVenda = item.ID;
                        logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                        hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                        #endregion
                    }

                    servico = hlbappSession.Servicos_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                    if (servico != null)
                    {
                        #region Insere LOG - Servico_Pedido_Venda

                        LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                        logServ.IDPedidoVenda = servico.IDPedidoVenda;
                        logServ.ProdCodEstr = servico.ProdCodEstr;
                        logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                        logServ.DataHora = DateTime.Now;
                        logServ.Operacao = pedidoVenda.Status;
                        logServ.IDServPedVenda = servico.ID;
                        logServ.IDLogPedidoVenda = logPV.ID;

                        hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                        #endregion
                    }

                    #endregion

                    hlbappSession.SaveChanges();

                    Session["listaIndexPV"] = FilterListaPV();
                }

                ViewBag.Mensagem = "Pedido cancelado com sucesso!";

                return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
            }
            catch (Exception ex)
            {
                int linenum = Convert.ToInt32(ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' ')));
                string msg = "";
                if (ex.InnerException == null)
                    msg = ex.Message;
                else
                    msg = ex.Message + " / Inner Exception: " + ex.InnerException.Message;
                ViewBag.Erro = "Erro ao Importar para o CHIC: " + msg + " / Linha do Erro: " + linenum.ToString();
                return View("FinalizaPV");
            }
        }

        public ActionResult ReprovarCancelamentoPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            if (model["motivo"] != null)
            {
                int id = Convert.ToInt32(Session["idSelecionado"].ToString());
                Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();

                string motivo = model["motivo"];
                pedidoVenda.Status = "Cancelamento Reprovado";

                if ((motivo == "") || (motivo == null))
                {
                    ViewBag.Erro = "Antes de realizar a operação, por favor, informe o Motivo!";
                    return View("FinalizaPV");
                }

                #region Envio de E-mail

                MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                    new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                //salesmanTableAdapter sl = new salesmanTableAdapter();
                //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                //sl.FillByCode(slDT, pedidoVenda.Vendedor);

                var codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                if (pedidoVenda.Vendedor.Length == 7) codigoVendedorApolo = pedidoVenda.Vendedor;
                var vendedor = apoloStatic.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();

                string corpoEmail = "";
                string corpoOperacao = "";

                ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                    new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                string empresa = "";
                string copiaPara = "";
                string empresaApolo = "";
                if (vendedor.CodigoCHIC.Equals("BR"))
                {
                    empresa = "[HLB]";
                    copiaPara = "confirmacoes@hyline.com.br";
                    empresaApolo = "5";
                }
                else if (vendedor.CodigoCHIC.Equals("LB"))
                {
                    empresa = "[LTZ]";
                    copiaPara = "confirmacoes@ltz.com.br";
                    empresaApolo = "7";
                }
                else if (vendedor.CodigoCHIC.Equals("HN"))
                {
                    empresa = "[H&N]";
                    copiaPara = "confirmacoes@hnavicultura.com.br";
                    empresaApolo = "14";
                }
                else if (vendedor.CodigoCHIC.Equals("PL"))
                {
                    empresa = "[PL]";
                    copiaPara = "programacao@planaltopostura.com.br";
                    empresaApolo = "20";
                }

                #region Envio de E-mails p/ Técnicos por Estado

                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE verificaCidade = apoloStatic.CIDADE
                    .Where(w => apoloStatic.ENTIDADE.Any(e => e.EntCod == pedidoVenda.CodigoCliente
                        && e.CidCod == w.CidCod))
                    .FirstOrDefault();

                if (verificaCidade != null)
                {
                    var listaTecnicos = apolo2Static.USUARIO
                        .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == verificaCidade.UfSigla)
                                && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                    && e.USERCodigoCHIC == pedidoVenda.Empresa)))
                        .ToList();

                    foreach (var item in listaTecnicos)
                    {
                        if (copiaPara == "")
                            copiaPara = item.UsuEmail;
                        else
                            copiaPara = copiaPara + ";" + item.UsuEmail;
                    }
                }

                #endregion

                #region Verifica Se existe Supervisores para gerar a copia

                //string codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                var listaSupVend = apolo.SUP_VENDEDOR
                    .Where(w => w.VendCod == codigoVendedorApolo
                        && w.FxaCod.Equals("0000003"))
                    .ToList();

                foreach (var sup in listaSupVend)
                {
                    MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                        .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                    if (supervisor != null)
                    {
                        copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                    }
                }

                #endregion

                email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                email.WorkFlowEmailStat = "Enviar";
                email.WorkFlowEmailData = DateTime.Now;
                email.WorkFlowEmailParaNome = vendedor.VendNome;
                email.WorkFlowEmailParaEmail = vendedor.Login;
                //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                //email.WorkFlowEmailParaNome = "Teste";
                //email.WorkFlowEmailCopiaPara = copiaPara + ";programacao@hyline.com.br";
                email.WorkFlowEmailCopiaPara = copiaPara;
                email.WorkFlowEmailDeNome = "Sistema WEB";
                email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                email.WorkFlowEmailFormato = "Texto";
                email.WorkFlowEmailDocEmpCod = empresaApolo;

                int existe = listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Count();
                string textCodigoCHIC = "";
                if (existe > 0)
                    textCodigoCHIC = " - Nº CHIC " + listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Max(m => m.OrderNoCHIC);

                DateTime dataEntregaInicial = listItensPVSession
                        .Max(m => m.DataEntregaInicial);
                DateTime dataEntregaFinal = listItensPVSession
                        .Max(m => m.DataEntregaFinal);

                email.WorkFlowEmailAssunto = empresa + " - CANCELAMENTO DO PEDIDO ID " + pedidoVenda.ID.ToString()
                    + " REPROVADO" + textCodigoCHIC;
                corpoOperacao = "O cancelamento do pedido " + pedidoVenda.ID.ToString() + textCodigoCHIC +
                    " - " + pedidoVenda.NomeCliente +
                    " - Entrega de " + dataEntregaInicial.ToShortDateString() +
                    " a " + dataEntregaFinal.ToShortDateString() +
                    " foi reprovado pelo Depto. de Progrmação pelo seguinte motivo: " + (char)13 + (char)10 + (char)13 + (char)10 +
                    motivo + (char)13 + (char)10 + (char)13 + (char)10 +
                    "Qualquer dúvida, entrar em contato com o Depto. de Programação!";

                string stringChar = "" + (char)13 + (char)10;

                corpoEmail = "Prezado " + vendedor.VendNome + "," + (char)13 + (char)10 + (char)13 + (char)10
                    + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                    + "SISTEMA WEB";

                email.WorkFlowEmailCorpo = corpoEmail;

                apolo.WORKFLOW_EMAIL.AddObject(email);

                apolo.SaveChanges();

                #endregion

                #region LOG

                #region Insere LOG - Pedido_Venda

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                logPV.DataPedido = pedidoVenda.DataPedido;
                logPV.Usuario = Session["usuario"].ToString();
                logPV.DataHora = pedidoVenda.DataHora;
                logPV.CodigoCliente = pedidoVenda.CodigoCliente;
                logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                logPV.CondicaoPagamento = pedidoVenda.CondicaoPagamento;
                logPV.Observacoes = pedidoVenda.Observacoes;
                logPV.Vendedor = pedidoVenda.Vendedor;
                logPV.Status = pedidoVenda.Status;
                logPV.Operacao = pedidoVenda.Status;
                logPV.IDPedidoVenda = pedidoVenda.ID;
                logPV.Motivo = motivo;
                logPV.Projecao = pedidoVenda.Projecao;

                hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                hlbppLOG.SaveChanges();

                #endregion

                List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                foreach (var item in listItensPV)
                {
                    #region Insere LOG - Item_Ped_Venda

                    LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                    logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                    logItemPV.Sequencia = item.Sequencia;
                    logItemPV.ProdCodEstr = item.ProdCodEstr;
                    logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                    logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                    logItemPV.QtdeLiquida = item.QtdeLiquida;
                    logItemPV.PercBonificacao = item.PercBonificacao;
                    logItemPV.QtdeBonificada = item.QtdeBonificada;
                    logItemPV.QtdeReposicao = item.QtdeReposicao;
                    logItemPV.PrecoUnitario = item.PrecoUnitario;
                    logItemPV.DataHora = DateTime.Now;
                    logItemPV.Operacao = pedidoVenda.Status;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.IDItPedVenda = item.ID;
                    logItemPV.IDLogPedidoVenda = logPV.ID;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                    hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                    #endregion
                }

                Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                #region Insere LOG - Vacina Primária

                LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                if (vacinaPrimaria != null)
                {
                    logVacPrim.IDPedidoVenda = vacinaPrimaria.IDPedidoVenda;
                    logVacPrim.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                    logVacPrim.DataHora = DateTime.Now;
                    logVacPrim.Operacao = pedidoVenda.Status;
                    logVacPrim.IDVacPrimPedVenda = vacinaPrimaria.ID;
                    logVacPrim.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                    hlbppLOG.SaveChanges();
                }

                #endregion

                var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                foreach (var item in listaVacSec)
                {
                    #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                    LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                    logVacSec.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                    logVacSec.Sequencia = item.Sequencia;
                    logVacSec.ProdCodEstr = item.ProdCodEstr;
                    logVacSec.DataHora = DateTime.Now;
                    logVacSec.Operacao = pedidoVenda.Status;
                    logVacSec.IDVacSecPedVenda = item.ID;
                    logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                    hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                    #endregion
                }

                Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                if (servico != null)
                {
                    #region Insere LOG - Servico_Pedido_Venda

                    LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    logServ.IDPedidoVenda = servico.IDPedidoVenda;
                    logServ.ProdCodEstr = servico.ProdCodEstr;
                    logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                    logServ.DataHora = DateTime.Now;
                    logServ.Operacao = pedidoVenda.Status;
                    logServ.IDServPedVenda = servico.ID;
                    logServ.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                    #endregion
                }

                #endregion

                hlbappSession.SaveChanges();

                Session["listaIndexPV"] = FilterListaPV();
            }

            ViewBag.Mensagem = "Cancelamento de Pedido reprovado com sucesso!";

            return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
        }

        public string CancelaRoteiroEntregaEMortalidade07Dias(string chicNum, string usuario)
        {
            string retorno = "";

            #region Carrega Entities

            bdApoloEntities apoloSession = new bdApoloEntities();
            Apolo10Entities apolo2Session = new Apolo10Entities();
            fluigEntities fluigSession = new fluigEntities();

            #endregion

            #region Carrega Dados NF

            var nfNum = "";
            var pv = apoloSession.PED_VENDA1.Where(w => w.USERPEDCHIC == chicNum).FirstOrDefault();
            if (pv != null)
            {
                var nf = apolo2Session.NOTA_FISCAL.Where(w => w.EmpCod == pv.EmpCod && w.NFPedVenda == pv.PedVendaNum).FirstOrDefault();
                if (nf != null)
                {
                    nfNum = nf.NFNum;
                }
            }

            #endregion

            if (nfNum != "")
            {
                var motivo = "Cancelamento do Pedido " + chicNum + " realizada pelos Pedidos Web pelo usuário " + usuario + "!";

                #region Verifica se Existe Roteiro de Entrega e Cancela

                var listaRE = fluigSession.VU_Roteiro_Entrega_Fluig.Where(w => w.nfnum.Contains(nfNum) && w.STATUS != 2).ToList();
                foreach (var item in listaRE)
                {
                    retorno = CancelaSolicitacaoFluig(item.NUM_PROCES, motivo);
                    if (retorno != "OK")
                        return retorno;
                }

                #endregion

                #region Verifica se Existe Coleta de M07 e Cancela

                var listaM07 = fluigSession.VU_Mort_07.Where(w => w.chicnums.Contains(chicNum)
                    && w.StatusProcesso != 2).ToList();
                foreach (var item in listaM07)
                {
                    if (item.StatusProcesso != 2)
                    {
                        retorno = CancelaSolicitacaoFluig(item.NumSolicitacao, motivo);
                        if (retorno != "OK")
                            return retorno;
                    }
                }

                #endregion
            }

            return retorno;
        }

        #endregion

        #region Management Permission

        public ActionResult AprovaGerenciaPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            if (model["AprovarGerenciaButton"] != null)
            {
                int id = Convert.ToInt32(Session["idSelecionado"].ToString());
                Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();

                List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                int existe = listItensPVSession
                    .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado").Count();

                if (pedidoVenda.Status.Equals("Cancelamento Aguardando Análise Gerência"))
                {
                    pedidoVenda.Status = "Cancelamento Pendente";
                }
                else
                {
                    if (existe == 0)
                    {
                        pedidoVenda.Status = "Inclusão Pendente";
                    }
                    else
                    {
                        pedidoVenda.Status = "Alteração Pendente";
                    }
                }

                #region Atualiza Mascara do Tratamento Infravermelho

                Servicos_Pedido_Venda serv = hlbappSession.Servicos_Pedido_Venda.Where(w => w.IDPedidoVenda == id).FirstOrDefault();

                if (serv != null)
                {
                    if (Convert.ToBoolean(Session["mascaraTIDiferenteProtocolo"]))
                        serv.MascaraTI = Session["mascaraTI"].ToString();
                    else
                        serv.MascaraTI = "";
                }

                #endregion

                #region Envio de E-mail

                MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                //salesmanTableAdapter sl = new salesmanTableAdapter();
                //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                //sl.FillByCode(slDT, pedidoVenda.Vendedor);

                var codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                if (pedidoVenda.Vendedor.Length == 7) codigoVendedorApolo = pedidoVenda.Vendedor;
                var vendedor = apoloStatic.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();

                string corpoEmail = "";
                string corpoOperacao = "";

                ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                    new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                string empresa = "";
                string copiaPara = "";
                string empresaApolo = "";
                if (vendedor == null)
                {
                    vendedor = apoloStatic.VU_Vendedores.Where(w => w.CodigoCHIC == pedidoVenda.Empresa && w.VendNome.Contains("DEPARTAMENTO")).FirstOrDefault();
                }

                if (vendedor.CodigoCHIC.Equals("BR"))
                {
                    empresa = "[HLB]";
                    copiaPara = "confirmacoes@hyline.com.br";
                    empresaApolo = "5";
                }
                else if (vendedor.CodigoCHIC.Equals("LB"))
                {
                    empresa = "[LTZ]";
                    copiaPara = "confirmacoes@ltz.com.br";
                    empresaApolo = "7";
                }
                else if (vendedor.CodigoCHIC.Equals("HN"))
                {
                    empresa = "[H&N]";
                    copiaPara = "confirmacoes@hnavicultura.com.br";
                    empresaApolo = "14";
                }
                else if (vendedor.CodigoCHIC.Equals("PL"))
                {
                    empresa = "[PL]";
                    copiaPara = "programacao@planaltopostura.com.br";
                    empresaApolo = "20";
                }

                #region Envio de E-mails p/ Técnicos por Estado

                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE verificaCidade = apoloStatic.CIDADE
                    .Where(w => apoloStatic.ENTIDADE.Any(e => e.EntCod == pedidoVenda.CodigoCliente
                        && e.CidCod == w.CidCod))
                    .FirstOrDefault();

                if (verificaCidade != null)
                {
                    var listaTecnicos = apolo2Static.USUARIO
                        .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == verificaCidade.UfSigla)
                                && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                    && e.USERCodigoCHIC == pedidoVenda.Empresa)))
                        .ToList();

                    foreach (var item in listaTecnicos)
                    {
                        if (copiaPara == "")
                            copiaPara = item.UsuEmail;
                        else
                            copiaPara = copiaPara + ";" + item.UsuEmail;
                    }
                }

                #endregion

                #region Verifica Se existe Supervisores para gerar a copia

                //string codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                var listaSupVend = apolo.SUP_VENDEDOR
                    .Where(w => w.VendCod == codigoVendedorApolo
                        && w.FxaCod.Equals("0000003"))
                    .ToList();

                foreach (var sup in listaSupVend)
                {
                    MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                        .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                    if (supervisor != null)
                    {
                        copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                    }
                }

                #endregion

                email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                email.WorkFlowEmailStat = "Enviar";
                email.WorkFlowEmailData = DateTime.Now;
                email.WorkFlowEmailParaNome = vendedor.VendNome;
                email.WorkFlowEmailParaEmail = vendedor.Login;
                //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                //email.WorkFlowEmailParaNome = "Teste";
                //email.WorkFlowEmailCopiaPara = copiaPara + ";programacao@hyline.com.br";
                email.WorkFlowEmailCopiaPara = copiaPara;
                email.WorkFlowEmailDeNome = "Sistema WEB";
                email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                email.WorkFlowEmailFormato = "Texto";
                email.WorkFlowEmailDocEmpCod = empresaApolo;

                int existeCHIC = listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Count();
                string textCodigoCHIC = "";
                if (existeCHIC > 0)
                    textCodigoCHIC = " - Nº CHIC " + listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Max(m => m.OrderNoCHIC);

                DateTime dataEntregaInicial = listItensPVSession
                        .Max(m => m.DataEntregaInicial);
                DateTime dataEntregaFinal = listItensPVSession
                        .Max(m => m.DataEntregaFinal);

                email.WorkFlowEmailAssunto = empresa + " - PEDIDO ID " + pedidoVenda.ID.ToString()
                    + " APROVADO PELA GERÊNCIA" + textCodigoCHIC;
                corpoOperacao = "Foi aprovada(o) " + pedidoVenda.Status + " do pedido "
                    + pedidoVenda.ID.ToString() + textCodigoCHIC +
                    " - " + pedidoVenda.NomeCliente +
                    " - Entrega de " + dataEntregaInicial.ToShortDateString() +
                    " a " + dataEntregaFinal.ToShortDateString() +
                    " pela Gerência." + (char)13 +
                    "Aguardando a confirmação da programação." + (char)13 + (char)10 +
                    "Qualquer dúvida, entrar em contato com a Gerência!";

                string stringChar = "" + (char)13 + (char)10;

                corpoEmail = "Prezado " + vendedor.VendNome + "," + (char)13 + (char)10 + (char)13 + (char)10
                    + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                    + "SISTEMA WEB";

                email.WorkFlowEmailCorpo = corpoEmail;

                apolo.WORKFLOW_EMAIL.AddObject(email);

                apolo.SaveChanges();

                #endregion

                #region LOG

                #region Insere LOG - Pedido_Venda

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                logPV.DataPedido = pedidoVenda.DataPedido;
                logPV.Usuario = Session["usuario"].ToString();
                logPV.DataHora = DateTime.Now;
                logPV.CodigoCliente = pedidoVenda.CodigoCliente;
                logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                logPV.CondicaoPagamento = pedidoVenda.CondicaoPagamento;
                logPV.Observacoes = pedidoVenda.Observacoes;
                logPV.Vendedor = pedidoVenda.Vendedor;
                logPV.Status = pedidoVenda.Status;
                logPV.Operacao = "Aprovado pela Gerência";
                logPV.IDPedidoVenda = pedidoVenda.ID;
                logPV.Motivo = "";
                logPV.Projecao = pedidoVenda.Projecao;

                hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                hlbppLOG.SaveChanges();

                #endregion

                List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                var listaItensImportar = listItensPV.Where(w => w.Importar == 1).ToList();

                foreach (var item in listaItensImportar)
                {
                    #region Insere LOG - Item_Ped_Venda

                    LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                    logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                    logItemPV.Sequencia = item.Sequencia;
                    logItemPV.ProdCodEstr = item.ProdCodEstr;
                    logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                    logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                    logItemPV.QtdeLiquida = item.QtdeLiquida;
                    logItemPV.PercBonificacao = item.PercBonificacao;
                    logItemPV.QtdeBonificada = item.QtdeBonificada;
                    logItemPV.QtdeReposicao = item.QtdeReposicao;
                    logItemPV.PrecoUnitario = item.PrecoUnitario;
                    logItemPV.DataHora = DateTime.Now;
                    logItemPV.Operacao = pedidoVenda.Status;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.IDItPedVenda = item.ID;
                    logItemPV.IDLogPedidoVenda = logPV.ID;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                    hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                    #endregion
                }

                Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                #region Insere LOG - Vacina Primária

                LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                if (vacinaPrimaria != null)
                {
                    logVacPrim.IDPedidoVenda = vacinaPrimaria.IDPedidoVenda;
                    logVacPrim.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                    logVacPrim.DataHora = DateTime.Now;
                    logVacPrim.Operacao = pedidoVenda.Status;
                    logVacPrim.IDVacPrimPedVenda = vacinaPrimaria.ID;
                    logVacPrim.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                    hlbppLOG.SaveChanges();
                }

                #endregion

                var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                foreach (var item in listaVacSec)
                {
                    #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                    LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                    logVacSec.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                    logVacSec.Sequencia = item.Sequencia;
                    logVacSec.ProdCodEstr = item.ProdCodEstr;
                    logVacSec.DataHora = DateTime.Now;
                    logVacSec.Operacao = pedidoVenda.Status;
                    logVacSec.IDVacSecPedVenda = item.ID;
                    logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                    hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                    #endregion
                }

                Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                if (servico != null)
                {
                    #region Insere LOG - Servico_Pedido_Venda

                    LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    logServ.IDPedidoVenda = servico.IDPedidoVenda;
                    logServ.ProdCodEstr = servico.ProdCodEstr;
                    logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                    logServ.DataHora = DateTime.Now;
                    logServ.Operacao = pedidoVenda.Status;
                    logServ.IDServPedVenda = servico.ID;
                    logServ.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                    #endregion
                }

                #endregion

                hlbappSession.SaveChanges();

                if (!pedidoVenda.Empresa.Equals("LB"))
                    Session["idPedidoSearchPedVenda"] = pedidoVenda.ID;

                Session["listaIndexPV"] = FilterListaPV();
            }

            ViewBag.Mensagem = "Pedido aprovado com sucesso!";

            return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
        }

        public ActionResult ReprovarGerenciaPV(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            if (model["motivo"] != null)
            {
                int id = Convert.ToInt32(Session["idSelecionado"].ToString());
                Pedido_Venda pedidoVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();

                string motivo = model["motivo"];
                if ((motivo == "") || (motivo == null))
                {
                    ViewBag.Erro = "Antes de realizar a operação, por favor, informe o Motivo!";
                    return View("FinalizaPV");
                }

                List<Item_Pedido_Venda> listItensPVSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                pedidoVenda.Status = "Reprovado Pela Gerência";

                #region Envio de E-mail

                MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL email =
                    new MvcAppHyLinedoBrasil.Models.Apolo.WORKFLOW_EMAIL();

                //salesmanTableAdapter sl = new salesmanTableAdapter();
                //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                //sl.FillByCode(slDT, pedidoVenda.Vendedor);

                var codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                if (pedidoVenda.Vendedor.Length == 7) codigoVendedorApolo = pedidoVenda.Vendedor;
                var vendedor = apoloStatic.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();

                string corpoEmail = "";
                string corpoOperacao = "";

                ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities apolo =
                    new MvcAppHyLinedoBrasil.Models.Apolo.ApoloEntities();

                apolo.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                string empresa = "";
                string copiaPara = "";
                string empresaApolo = "";
                if (vendedor.CodigoCHIC.Equals("BR"))
                {
                    empresa = "[HLB]";
                    copiaPara = "confirmacoes@hyline.com.br";
                    empresaApolo = "5";
                }
                else if (vendedor.CodigoCHIC.Equals("LB"))
                {
                    empresa = "[LTZ]";
                    copiaPara = "confirmacoes@ltz.com.br";
                    empresaApolo = "7";
                }
                else if (vendedor.CodigoCHIC.Equals("HN"))
                {
                    empresa = "[H&N]";
                    copiaPara = "confirmacoes@hnavicultura.com.br";
                    empresaApolo = "14";
                }
                else if (vendedor.CodigoCHIC.Equals("PL"))
                {
                    empresa = "[PL]";
                    copiaPara = "programacao@planaltopostura.com.br";
                    empresaApolo = "20";
                }

                #region Envio de E-mails p/ Técnicos por Estado

                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE verificaCidade = apoloStatic.CIDADE
                    .Where(w => apoloStatic.ENTIDADE.Any(e => e.EntCod == pedidoVenda.CodigoCliente
                        && e.CidCod == w.CidCod))
                    .FirstOrDefault();

                if (verificaCidade != null)
                {
                    var listaTecnicos = apolo2Static.USUARIO
                        .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                                && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == verificaCidade.UfSigla)
                                && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                                    && e.USERCodigoCHIC == pedidoVenda.Empresa)))
                        .ToList();

                    foreach (var item in listaTecnicos)
                    {
                        if (copiaPara == "")
                            copiaPara = item.UsuEmail;
                        else
                            copiaPara = copiaPara + ";" + item.UsuEmail;
                    }
                }

                #endregion

                #region Verifica Se existe Supervisores para gerar a copia

                //string codigoVendedorApolo = "0" + pedidoVenda.Vendedor;
                var listaSupVend = apolo.SUP_VENDEDOR
                    .Where(w => w.VendCod == codigoVendedorApolo
                        && w.FxaCod.Equals("0000003"))
                    .ToList();

                foreach (var sup in listaSupVend)
                {
                    MvcAppHyLinedoBrasil.Models.Apolo.VENDEDOR supervisor = apolo.VENDEDOR
                        .Where(w => w.VendCod == sup.SupVendCod).FirstOrDefault();

                    if (supervisor != null)
                    {
                        copiaPara = copiaPara + supervisor.USERLoginSite + ";";
                    }
                }

                #endregion

                email.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                email.WorkFlowEmailStat = "Enviar";
                email.WorkFlowEmailData = DateTime.Now;
                email.WorkFlowEmailParaNome = vendedor.VendNome;
                email.WorkFlowEmailParaEmail = vendedor.Login;
                //email.WorkFlowEmailParaEmail = "palves@hyline.com.br";
                //email.WorkFlowEmailParaNome = "Teste";
                email.WorkFlowEmailCopiaPara = copiaPara;
                email.WorkFlowEmailDeNome = "Sistema WEB";
                email.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                email.WorkFlowEmailFormato = "Texto";
                email.WorkFlowEmailDocEmpCod = empresaApolo;

                int existeCHIC = listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Count();
                string textCodigoCHIC = "";
                if (existeCHIC > 0)
                    textCodigoCHIC = " - Nº CHIC " + listItensPVSession
                        .Where(w => w.OrderNoCHIC != null && w.OrderNoCHIC != "" && w.OrderNoCHIC != "Cancelado")
                        .Max(m => m.OrderNoCHIC);

                DateTime dataEntregaInicial = listItensPVSession
                        .Max(m => m.DataEntregaInicial);
                DateTime dataEntregaFinal = listItensPVSession
                        .Max(m => m.DataEntregaFinal);

                email.WorkFlowEmailAssunto = empresa + " - PEDIDO ID " + pedidoVenda.ID.ToString()
                    + " REPROVADO PELA GERÊNCIA" + textCodigoCHIC;
                corpoOperacao = "O pedido " + pedidoVenda.ID.ToString() + textCodigoCHIC +
                    " - " + pedidoVenda.NomeCliente +
                    " - Entrega de " + dataEntregaInicial.ToShortDateString() +
                    " a " + dataEntregaFinal.ToShortDateString() +
                    " foi reprovado pela Gerência pelo seguinte motivo: " + (char)13 + (char)10 + (char)13 + (char)10 +
                    motivo + (char)13 + (char)10 + (char)13 + (char)10 +
                    " Realize as alterações necessárias e salve o Pedido novamente para que possa ser" +
                    " analisado novamente!" + (char)13 + (char)10 +
                    "Qualquer dúvida, entrar em contato com o Gerência!";

                string stringChar = "" + (char)13 + (char)10;

                corpoEmail = "Prezado " + vendedor.VendNome + "," + (char)13 + (char)10 + (char)13 + (char)10
                    + corpoOperacao + (char)13 + (char)10 + (char)13 + (char)10
                    + "SISTEMA WEB";

                email.WorkFlowEmailCorpo = corpoEmail;

                apolo.WORKFLOW_EMAIL.AddObject(email);

                apolo.SaveChanges();

                #endregion

                #region LOG

                #region Insere LOG - Pedido_Venda

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                logPV.DataPedido = pedidoVenda.DataPedido;
                logPV.Usuario = Session["usuario"].ToString();
                logPV.DataHora = DateTime.Now;
                logPV.CodigoCliente = pedidoVenda.CodigoCliente;
                logPV.OvosBrasil = pedidoVenda.OvosBrasil;
                logPV.CondicaoPagamento = pedidoVenda.CondicaoPagamento;
                logPV.Observacoes = pedidoVenda.Observacoes;
                logPV.Vendedor = pedidoVenda.Vendedor;
                logPV.Status = pedidoVenda.Status;
                logPV.Operacao = pedidoVenda.Status;
                logPV.IDPedidoVenda = pedidoVenda.ID;
                logPV.Motivo = motivo;
                logPV.Projecao = pedidoVenda.Projecao;

                hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                hlbppLOG.SaveChanges();

                #endregion

                List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                var listaItensImportar = listItensPV.Where(w => w.Importar == 1).ToList();

                foreach (var item in listaItensImportar)
                {
                    #region Insere LOG - Item_Ped_Venda

                    LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                    logItemPV.IDPedidoVenda = item.IDPedidoVenda;
                    logItemPV.Sequencia = item.Sequencia;
                    logItemPV.ProdCodEstr = item.ProdCodEstr;
                    logItemPV.DataEntregaInicial = item.DataEntregaInicial;
                    logItemPV.DataEntregaFinal = item.DataEntregaFinal;
                    logItemPV.QtdeLiquida = item.QtdeLiquida;
                    logItemPV.PercBonificacao = item.PercBonificacao;
                    logItemPV.QtdeBonificada = item.QtdeBonificada;
                    logItemPV.QtdeReposicao = item.QtdeReposicao;
                    logItemPV.PrecoUnitario = item.PrecoUnitario;
                    logItemPV.DataHora = DateTime.Now;
                    logItemPV.Operacao = pedidoVenda.Status;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.IDItPedVenda = item.ID;
                    logItemPV.IDLogPedidoVenda = logPV.ID;
                    logItemPV.OrderNoCHIC = item.OrderNoCHIC;
                    logItemPV.OrderNoCHICReposicao = item.OrderNoCHICReposicao;

                    hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);

                    #endregion
                }

                Vacinas_Primaria_Pedido_Venda vacinaPrimaria = hlbappSession.Vacinas_Primaria_Pedido_Venda
                        .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                #region Insere LOG - Vacina Primária

                LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                if (vacinaPrimaria != null)
                {
                    logVacPrim.IDPedidoVenda = vacinaPrimaria.IDPedidoVenda;
                    logVacPrim.ProdCodEstr = vacinaPrimaria.ProdCodEstr;
                    logVacPrim.DataHora = DateTime.Now;
                    logVacPrim.Operacao = pedidoVenda.Status;
                    logVacPrim.IDVacPrimPedVenda = vacinaPrimaria.ID;
                    logVacPrim.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                    hlbppLOG.SaveChanges();
                }

                #endregion

                var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                foreach (var item in listaVacSec)
                {
                    #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                    LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                    logVacSec.IDVacPrimPedVenda = item.IDVacPrimPedVenda;
                    logVacSec.Sequencia = item.Sequencia;
                    logVacSec.ProdCodEstr = item.ProdCodEstr;
                    logVacSec.DataHora = DateTime.Now;
                    logVacSec.Operacao = pedidoVenda.Status;
                    logVacSec.IDVacSecPedVenda = item.ID;
                    logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;

                    hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                    #endregion
                }

                Servicos_Pedido_Venda servico = hlbappSession.Servicos_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == pedidoVenda.ID).FirstOrDefault();

                if (servico != null)
                {
                    #region Insere LOG - Servico_Pedido_Venda

                    LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                    logServ.IDPedidoVenda = servico.IDPedidoVenda;
                    logServ.ProdCodEstr = servico.ProdCodEstr;
                    logServ.PercAplicacaoServico = servico.PercAplicacaoServico;
                    logServ.DataHora = DateTime.Now;
                    logServ.Operacao = pedidoVenda.Status;
                    logServ.IDServPedVenda = servico.ID;
                    logServ.IDLogPedidoVenda = logPV.ID;

                    hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);

                    #endregion
                }

                #endregion

                hlbppLOG.SaveChanges();
                hlbappSession.SaveChanges();

                if (!pedidoVenda.Empresa.Equals("LB"))
                    Session["idPedidoSearchPedVenda"] = pedidoVenda.ID;

                Session["listaIndexPV"] = FilterListaPV();
            }

            ViewBag.Mensagem = "Pedido reprovado com sucesso!";

            return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
        }

        #endregion

        #region LOG Methods

        public ActionResult LogItemPV(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            var lista = hlbappSession.LOG_Item_Pedido_Venda
                .Where(w => w.IDItPedVenda == id)
                .ToList();

            Session["idSelecionadoLOG"] = lista[0].IDLogPedidoVenda;

            Session["ListaHistoricoItem"] = lista;

            return View("LogItemPV");
        }

        public ActionResult LogPV(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            var lista = hlbappSession.LOG_Pedido_Venda
                .Where(w => w.IDPedidoVenda == id)
                .OrderBy(o => o.DataHora)
                .ToList();

            CarregaPV(id);
            //CalculaValoresPV();

            Session["ListaHistorico"] = lista;
            Session["LogPV"] = true;

            return View("LogPV");
        }

        public ActionResult LogPVReturn()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            return View("LogPV");
        }

        public ActionResult LogItemPVDetalhe(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            var lista = hlbappSession.LOG_Item_Pedido_Venda
                .Where(w => w.IDLogPedidoVenda == id)
                .ToList();

            Session["idSelecionadoLOG"] = id;

            Session["ListaHistoricoItem"] = lista;

            return View("LogItemPV");
        }

        public ActionResult LogItemDetalheReturn()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            return View("LogItemPV");
        }

        #endregion

        #region Confirmation

        public ActionResult GerarRelConfirmacaoPDF(int id, string orderNo, string operacao)
        {
            if (VerificaSessao()) return RedirectToAction("LogOn", "Account");

            HLBAPPEntities hlbapp = new HLBAPPEntities();

            Pedido_Venda pedVenda = hlbapp.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();

            string pattern = @"(?i)[^0-9a-z\s]";
            string replacement = "";
            Regex rgx = new Regex(pattern);
            string nameFileOld = pedVenda.NomeCliente.Replace("\\", "").Replace("/", "");
            string nameFileNew = rgx.Replace(nameFileOld, replacement);

            string pattern2 = @"(?i)[^0-9a-z]";
            Regex rgx2 = new Regex(pattern2);
            string replacement2 = "_";
            string nameFileNew2 = rgx2.Replace(nameFileNew, replacement2);

            /**** 21/03/2021 - DESATIVADO DEVIDO A MIGRAÇÃO DO CHIC P/ ANIPLAN ****/
            //var nameFile = nameFileNew2 + "_" + orderNo + ".pdf";
            //string destino = GeraRelConfirmacao(orderNo, pedVenda.NomeCliente, nameFile);
            var nameFile = nameFileNew2 + "_" + id.ToString() + ".pdf";
            var report = "NovaConfirmacao";
            string destino = GeraRelNovaConfirmacao(id, pedVenda.NomeCliente, nameFile, operacao, report);

            //return File(destino, "application/pdf", nameFile);
            return new EmptyResult();
        }

        public ActionResult GerarRelNovaConfirmacaoPDF(int id, string operacao)
        {
            //if (VerificaSessao()) return RedirectToAction("LogOn", "Account");

            HLBAPPEntities hlbapp = new HLBAPPEntities();

            Pedido_Venda pedVenda = hlbapp.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();

            string pattern = @"(?i)[^0-9a-z\s]";
            string replacement = "";
            Regex rgx = new Regex(pattern);
            string nameFileOld = pedVenda.NomeCliente.Replace("\\", "").Replace("/", "");
            string nameFileNew = rgx.Replace(nameFileOld, replacement);

            string pattern2 = @"(?i)[^0-9a-z]";
            Regex rgx2 = new Regex(pattern2);
            string replacement2 = "_";
            string nameFileNew2 = rgx2.Replace(nameFileNew, replacement2);

            //var nameFile = nameFileNew2 + "_" + orderNo + ".pdf";
            //string destino = GeraRelConfirmacao(orderNo, pedVenda.NomeCliente, nameFile);
            var nameFile = nameFileNew2 + "_" + id.ToString() + ".pdf";
            var report = "NovaConfirmacao";
            string destino = GeraRelNovaConfirmacao(id, pedVenda.NomeCliente, nameFile, operacao, report);

            //return File(destino, "application/pdf", nameFile);
            return new EmptyResult();
        }

        public ActionResult GerarRelFatConfirmacaoPDF(int id, string operacao)
        {
            //if (VerificaSessao()) return RedirectToAction("LogOn", "Account");

            HLBAPPEntities hlbapp = new HLBAPPEntities();

            Pedido_Venda pedVenda = hlbapp.Pedido_Venda.Where(w => w.ID == id).FirstOrDefault();

            string pattern = @"(?i)[^0-9a-z\s]";
            string replacement = "";
            Regex rgx = new Regex(pattern);
            string nameFileOld = pedVenda.NomeCliente.Replace("\\", "").Replace("/", "");
            string nameFileNew = rgx.Replace(nameFileOld, replacement);

            string pattern2 = @"(?i)[^0-9a-z]";
            Regex rgx2 = new Regex(pattern2);
            string replacement2 = "_";
            string nameFileNew2 = rgx2.Replace(nameFileNew, replacement2);

            //var nameFile = nameFileNew2 + "_" + orderNo + ".pdf";
            //string destino = GeraRelConfirmacao(orderNo, pedVenda.NomeCliente, nameFile);
            var nameFile = nameFileNew2 + "_" + id.ToString() + ".pdf";
            var report = "NovaConfirmacaoFat";
            string destino = GeraRelNovaConfirmacao(id, pedVenda.NomeCliente, nameFile, operacao, report);

            //return File(destino, "application/pdf", nameFile);
            return new EmptyResult();
        }

        public string GeraRelConfirmacao(string orderNo, string cliente, string nameFile)
        {
            string pattern = @"(?i)[^0-9a-z\s]";
            string replacement = "";
            Regex rgx = new Regex(pattern);
            string nameFileOld = cliente.Replace("\\", "").Replace("/", "");
            string nameFileNew = rgx.Replace(nameFileOld, replacement);

            string pattern2 = @"(?i)[^0-9a-z]";
            Regex rgx2 = new Regex(pattern2);
            string replacement2 = "_";
            string nameFileNew2 = rgx2.Replace(nameFileNew, replacement2);

            string caminho = @"C:\inetpub\wwwroot\Relatorios\Conf\" + nameFileNew2 + "_" + orderNo + ".pdf";

            CrystalDecisions.CrystalReports.Engine.ReportDocument MyReport = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //MyReport.Load("C:\\inetpub\\wwwroot\\Relatorios\\Crystal\\ConfirmacaoPedido.rpt");
            MyReport.Load("\\\\srv-web-02\\c$\\inetpub\\wwwroot\\Relatorios\\Crystal\\ConfirmacaoPedido.rpt");
            MyReport.SetParameterValue("@pPedido", orderNo);
            //MyReport.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, caminho);
            var response = System.Web.HttpContext.Current.Response;
            MyReport.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, response, false, nameFile);

            MyReport.Close();
            MyReport.Dispose();

            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();

            return caminho;
        }

        public string GeraRelNovaConfirmacao(int id, string cliente, string nameFile, string operacao, string report)
        {
            string pattern = @"(?i)[^0-9a-z\s]";
            string replacement = "";
            Regex rgx = new Regex(pattern);
            string nameFileOld = cliente.Replace("\\", "").Replace("/", "");
            string nameFileNew = rgx.Replace(nameFileOld, replacement);

            string pattern2 = @"(?i)[^0-9a-z]";
            Regex rgx2 = new Regex(pattern2);
            string replacement2 = "_";
            string nameFileNew2 = rgx2.Replace(nameFileNew, replacement2);

            string caminho = @"C:\inetpub\wwwroot\Relatorios\Conf\" + nameFileNew2 + "_" + id.ToString() + ".pdf";

            CrystalDecisions.CrystalReports.Engine.ReportDocument MyReport = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //MyReport.Load("C:\\inetpub\\wwwroot\\Relatorios\\Crystal\\ConfirmacaoPedido.rpt");
            MyReport.Load("\\\\srv-web-02\\c$\\inetpub\\wwwroot\\Relatorios\\Crystal\\" + report + ".rpt");
            //MyReport.Load(Server.MapPath("~/Reports/NovaConfirmacao.rpt"));
            MyReport.SetParameterValue("@pIDPedidoVenda", id);
            MyReport.SetParameterValue("@pOperacao", operacao);
            //MyReport.SetDatabaseLogon("sa", "", "srv-sql", "HLBAPP");
            //MyReport.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, caminho);
            var response = System.Web.HttpContext.Current.Response;
            MyReport.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, response, false, nameFile);

            MyReport.Close();
            MyReport.Dispose();

            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();

            return caminho;
        }

        #endregion

        #region Integração Fluig

        public string GeraAprovacaoExcecaoPedidoVendaWebFluig(string empresa, string email, string tipoExcecao,
            string excecao, Pedido_Venda pv, List<Item_Pedido_Venda> listaIpv, 
            List<Vacinas_Secundaria_Pedido_Venda> listaVacSec, int idLog)
        {
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            try
            {
                string retornoMsg = "";

                ECMWorkflowEngineServiceService client = new ECMWorkflowEngineServiceService();

                bdApoloEntities apoloS = new bdApoloEntities();
                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = 
                    apoloS.CIDADE
                    .Where(w => apoloS.ENTIDADE.Any(a => a.CidCod == w.CidCod
                            && a.EntCod == pv.CodigoCliente))
                    .FirstOrDefault();

                string vendCodApolo = "0" + pv.Vendedor;
                if (pv.Vendedor.Length == 7) vendCodApolo = pv.Vendedor;
                VENDEDOR vendedor = apoloS.VENDEDOR.Where(w => w.VendCod == vendCodApolo).FirstOrDefault();

                if (email.IndexOf("@") < 0)
                {
                    if (empresa == "BR") email = email + "@hyline.com.br";
                    if (empresa == "LB") email = email + "@ltz.com.br";
                    if (empresa == "HN") email = email + "@hnavicultura.com.br";
                    if (empresa == "PL") email = email + "@planaltopostura.com.br";
                }

                #region Carrega Endereco de Entrega

                string enderecoEntrega = "Mesmo do Faturamento";
                ENDER_ENT shipAddress = apolo2Static
                    .ENDER_ENT.Where(w => w.EntCod == pv.CodigoCliente && w.EnderEntSeq == pv.EnderEntSeq)
                    .FirstOrDefault();
                if (shipAddress == null)
                {
                    shippingTableAdapter sTA = new shippingTableAdapter();

                    CHICMobileDataSet.shippingDataTable sDT = new CHICMobileDataSet.shippingDataTable();

                    sTA.FillByOrderNo(sDT, pv.CodigoCliente);

                    MvcAppHylinedoBrasilMobile.Models.CHICMobileDataSet.shippingRow sR =
                        sDT.Where(w => w.contact_no == pv.EnderEntSeq).FirstOrDefault();

                    if (sR != null)
                    {
                        enderecoEntrega = (sR.address1.Trim() + " "
                            + sR.address2.Trim() + " - " + sR.address3.Trim()
                            + " - " + sR.address4.Trim() + " - " + sR.address5.Trim());
                    }
                    else
                    {
                        if (pv.EnderEntSeq > 0)
                            enderecoEntrega = "*** ENDEREÇO DE ENTREGA NÃO EXISTE MAIS NO CADASTRO! POR FAVOR, "
                                + "REALIZAR A ALTERAÇÃO DO MESMO! ****";
                    }
                }
                else
                {
                    MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidadeShipAddress = apoloStatic
                        .CIDADE.Where(w => w.CidCod == shipAddress.CidCod).FirstOrDefault();

                    enderecoEntrega = (shipAddress.EnderEnt + " "
                        + shipAddress.EnderEntNo + " - " + shipAddress.EnderEntComp
                        + " - " + shipAddress.EnderEntBair);

                    if (cidadeShipAddress != null)
                    {
                        enderecoEntrega = enderecoEntrega + 
                            (" - " + cidadeShipAddress.CidNomeComp + " - " + cidadeShipAddress.UfSigla
                            + " - " + cidadeShipAddress.PaisSigla);
                    }
                }

                #endregion

                #region Carrega dados do pedido de venda

                List<string[]> listaDadosFormulario = new List<string[]>();
                listaDadosFormulario.Add(new string[] { "data_solicitacao", DateTime.Now.ToString("dd/MM/yyyy HH:mm") });
                //listaDadosFormulario.Add(new string[] { "solicitante", colleagueDto[0].colleagueName });
                //listaDadosFormulario.Add(new string[] { "usuario_solicitante", colleagueDto[0].colleagueId });
                listaDadosFormulario.Add(new string[] { "solicitante", Session["usuario"].ToString() });
                listaDadosFormulario.Add(new string[] { "usuario_solicitante", email });
                listaDadosFormulario.Add(new string[] { "data_decisao", "" });
                listaDadosFormulario.Add(new string[] { "decisor", "" });
                listaDadosFormulario.Add(new string[] { "usuario_decisor", "" });
                listaDadosFormulario.Add(new string[] { "empresa", empresa });
                listaDadosFormulario.Add(new string[] { "tipo_excecao", tipoExcecao });
                listaDadosFormulario.Add(new string[] { "mensagem", excecao });
                listaDadosFormulario.Add(new string[] { "status", "Pendente" });
                listaDadosFormulario.Add(new string[] { "id_web", pv.ID.ToString() });
                listaDadosFormulario.Add(new string[] { "status_pedido", pv.Status });
                listaDadosFormulario.Add(new string[] { "codigo_cliente", pv.CodigoCliente });
                listaDadosFormulario.Add(new string[] { "nome_cliente", pv.NomeCliente });
                listaDadosFormulario.Add(new string[] { "cidade", cidade.CidNomeComp });
                listaDadosFormulario.Add(new string[] { "uf", cidade.UfSigla });
                listaDadosFormulario.Add(new string[] { "endereco_entrega", enderecoEntrega });
                listaDadosFormulario.Add(new string[] { "codigo_representante", pv.Vendedor });
                listaDadosFormulario.Add(new string[] { "nome_representante", vendedor.VendNome });
                listaDadosFormulario.Add(new string[] { "email_representante", vendedor.USERLoginSite });

                #endregion

                #region Carrega dados dos itens

                for (int i = 0; i < listaIpv.Count; i++)
                {
                    listaDadosFormulario
                        .Add(new string[] { "sequencia_ipv___" + (i + 1), listaIpv[i].Sequencia.ToString() });
                    listaDadosFormulario
                        .Add(new string[] { "data_inicial_entrega_ipv___" + (i + 1), listaIpv[i]
                            .DataEntregaInicial.ToString("dd/MM/yyyy") });
                    listaDadosFormulario
                        .Add(new string[] { "data_final_entrega_ipv___" + (i + 1), listaIpv[i]
                            .DataEntregaFinal.ToString("dd/MM/yyyy") });
                    listaDadosFormulario
                        .Add(new string[] { "linha_ipv___" + (i + 1), listaIpv[i].ProdCodEstr });
                    listaDadosFormulario
                        .Add(new string[] { "qtde_liquida_ipv___" + (i + 1), 
                            String.Format("{0:N0}",listaIpv[i].QtdeLiquida) });
                    listaDadosFormulario
                        .Add(new string[] { "perc_bonificada_ipv___" + (i + 1), 
                            String.Format("{0:N2}",listaIpv[i].PercBonificacao) });

                    int qtdeTotal = Convert.ToInt32(listaIpv[i].QtdeLiquida + listaIpv[i].QtdeBonificada 
                        + listaIpv[i].QtdeReposicao);
                    listaDadosFormulario
                        .Add(new string[] { "qtde_total_ipv___" + (i + 1), 
                            String.Format("{0:N0}",qtdeTotal) });
                    listaDadosFormulario
                        .Add(new string[] { "preco_total_ipv___" + (i + 1), 
                            String.Format("{0:N2}", listaIpv[i].PrecoUnitario) });
                    listaDadosFormulario
                        .Add(new string[] { "valor_total_ipv___" + (i + 1), 
                            String.Format("{0:N2}", listaIpv[i].ValorTotal) });
                }

                #endregion

                listaDadosFormulario.Add(new string[] { "vacina_primaria", 
                    CarregaDescricaoVacinaPrimaria(empresa, pv.ID) });

                #region Carrega dados das Vacinas Secundárias

                for (int i = 0; i < listaVacSec.Count; i++)
                {
                    string prodcodestr = listaVacSec[i].ProdCodEstr;
                    string descricaoVS = apoloStatic.PRODUTO
                        .Where(w => w.ProdCodEstr == prodcodestr).FirstOrDefault().ProdNomeAlt1;
                    listaDadosFormulario.Add(new string[] { "descricao_vs___" + (i + 1), descricaoVS });

                    listaDadosFormulario.Add(new string[] { "preco_unit_vs___" + (i + 1), 
                            String.Format("{0:N2}",listaVacSec[i].PrecoUnitario) });

                    string tipoCobranca = "Normal";
                    if (listaVacSec[i].Bonificada == 1) tipoCobranca = "Bonificação";
                    else if (listaVacSec[i].Bonificada == 2) tipoCobranca = "Cliente Envia";
                    listaDadosFormulario.Add(new string[] { "tipo_cobranca_vs___" + (i + 1), tipoCobranca });
                }

                #endregion

                listaDadosFormulario.Add(new string[] { "tratamento_infravermelho", 
                    CarregaDescricaoTratamentoInfravermelho(empresa, pv.ID) });
                listaDadosFormulario.Add(new string[] { "condicao_pagamento", pv.CondicaoPagamento });
                listaDadosFormulario.Add(new string[] { "observacoes", pv.Observacoes });

                string[][] dadosFormulario = listaDadosFormulario.ToArray();

                processAttachmentDto[] attachments = new processAttachmentDto[] { };
                processTaskAppointmentDto[] apps = new processTaskAppointmentDto[] { };

                string processo = "APROVAPEDIDOWEBVENDAHLB";
                if (empresa == "LB") processo = "APROVAPEDIDOWEBVENDALTZ";
                if (empresa == "HN") processo = "APROVAPEDIDOWEBVENDAHEN";
                if (empresa == "PL") processo = "APROVAPEDIDOWEBVENDAPPA";

                var retorno = client.startProcess("sistemas@hyline.com.br", "123", 1, processo, 0,
                    new String[] { }, "", "fluig", true, attachments, dadosFormulario,
                    apps, false);

                #region Atualiza Motivo do LOG Inserindo os dados da Solicitação Gerada

                if (retorno.Length > 1)
                {
                    string numSolicitacaoFluig = retorno[5][1];

                    string msg = "\r\n ** FOI GERADA SOLICITAÇÃO DE APROVAÇÃO DEVIDO AO STATUS DO CLIENTE SER "
                        + "'EM DÉBITO' - SOLICITAÇÃO FLUIG Nº " + numSolicitacaoFluig;

                    HLBAPPEntities hlbappFluig = new HLBAPPEntities();
                    var logPV = hlbappFluig.LOG_Pedido_Venda
                        .Where(w => w.ID == idLog).FirstOrDefault();
                    logPV.Motivo = logPV.Motivo + msg;
                    hlbappFluig.SaveChanges();
                }

                #endregion

                return retornoMsg;
            }
            catch (Exception ex)
            {
                #region Se ocorrer erro na rotina, será gerado um e-mail e enviado para TI.

                ImportaCHICService.Data.WORKFLOW_EMAIL emailObj = new ImportaCHICService.Data.WORKFLOW_EMAIL();
                ImportaCHICService.Data.ApoloServiceEntities apoloService =
                    new ImportaCHICService.Data.ApoloServiceEntities();

                string msgErro = ex.Message;
                if (ex.InnerException != null)
                    msgErro = msgErro + " / Erro interno: " + ex.InnerException.Message;

                ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                apoloService.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                emailObj.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                emailObj.WorkFlowEmailStat = "Enviar";
                emailObj.WorkFlowEmailAssunto = "[ERRO] ERRO NO WEB DESKTOP AO GERAR APROVAÇÃO DE PEDIDO DE VENDA WEB NO FLUIG";
                emailObj.WorkFlowEmailData = DateTime.Now;
                emailObj.WorkFlowEmailParaNome = "TI";
                emailObj.WorkFlowEmailParaEmail = "ti@hyline.com.br";
                emailObj.WorkFlowEmailDeNome = "Serviço de Importação";
                emailObj.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                emailObj.WorkFlowEmailFormato = "Texto";
                emailObj.WorkFlowEmailCopiaPara = null;
                emailObj.WorkFlowEmailDocEspec = "APV";
                emailObj.WorkFlowEmailDocNum = pv.ID.ToString();
                emailObj.WorkFlowEmailDocSerie = empresa;

                int linenum = Convert.ToInt32(ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' ')));

                string corpoEmail = "";
                corpoEmail = "Erro ao realizar Geração de Aprovação de Pedido de Venda no Fluig: " + (char)13 + (char)10 + (char)13 + (char)10
                    + "ID Pedido de Venda: " + pv.ID.ToString() + (char)13 + (char)10
                    + "Linha de Código do Erro: " + linenum.ToString() + (char)13 + (char)10
                    + "Mensagem do Erro do WEB Desktop: " + msgErro;

                emailObj.WorkFlowEmailCorpo = corpoEmail;

                apoloService.WORKFLOW_EMAIL.AddObject(emailObj);
                apoloService.SaveChanges();

                #endregion

                return "";
            }
        }

        public br.com.hyline.fluigteste1.colleagueDto[] getUserFluig(string email, string empresa)
        {
            ECMColleagueServiceService client = new ECMColleagueServiceService();

            //if (email.IndexOf("@") < 0)
            //{
            //    if (empresa == "BR") email = email + "@hyline.com.br";
            //    if (empresa == "LB") email = email + "@ltz.com.br";
            //    if (empresa == "HN") email = email + "@hnavicultura.com.br";
            //    if (empresa == "PL") email = email + "@planaltopostura.com.br";
            //}

            br.com.hyline.fluigteste1.colleagueDto[] retorno = 
                client.getColleaguesMail("fluig", "fluig", 1, email);

            return retorno;
        }

        public string CancelaSolicitacaoFluig(int numSolicitacao, string motivoCancelamento)
        {
            string retorno = "";

            try
            {
                ECMWorkflowEngineServiceService client = new ECMWorkflowEngineServiceService();

                processAttachmentDto[] attachments = new processAttachmentDto[] { };
                processTaskAppointmentDto[] apps = new processTaskAppointmentDto[] { };

                retorno = client.cancelInstance("sistemas@hyline.com.br", "123", 1, numSolicitacao, "fluig", motivoCancelamento);

                return retorno;
            }
            catch (Exception ex)
            {
                #region Se ocorrer erro na rotina, será gerado um e-mail e enviado para TI.

                ImportaCHICService.Data.WORKFLOW_EMAIL emailObj = new ImportaCHICService.Data.WORKFLOW_EMAIL();
                ImportaCHICService.Data.ApoloServiceEntities apoloService =
                    new ImportaCHICService.Data.ApoloServiceEntities();

                string msgErro = ex.Message;
                if (ex.InnerException != null)
                    msgErro = msgErro + " / Erro interno: " + ex.InnerException.Message;

                ObjectParameter numero = new ObjectParameter("codigo", typeof(global::System.String)); ;

                apoloService.GerarCodigo("1", "WORKFLOW_EMAIL", numero);

                emailObj.WorkFlowEmailSeq = Convert.ToInt32(numero.Value);
                emailObj.WorkFlowEmailStat = "Enviar";
                emailObj.WorkFlowEmailAssunto = "[ERRO] ERRO NO WEB MOBILE AO CANCELAR A SOLICITAÇÃO " + numSolicitacao.ToString() + " DO FLUIG";
                emailObj.WorkFlowEmailData = DateTime.Now;
                emailObj.WorkFlowEmailParaNome = "TI";
                emailObj.WorkFlowEmailParaEmail = "ti@hyline.com.br";
                emailObj.WorkFlowEmailDeNome = "Serviço de Importação";
                emailObj.WorkFLowEmailDeEmail = "sistemas@hyline.com.br";
                emailObj.WorkFlowEmailFormato = "Texto";
                emailObj.WorkFlowEmailCopiaPara = null;
                emailObj.WorkFlowEmailDocEspec = "CSF";
                emailObj.WorkFlowEmailDocNum = numSolicitacao.ToString();
                emailObj.WorkFlowEmailDocSerie = "";

                int linenum = Convert.ToInt32(ex.StackTrace.Substring(ex.StackTrace.LastIndexOf(' ')));

                string corpoEmail = "";
                corpoEmail = "Erro ao realizar Cancelamento de Solicitação no Fluig: " + (char)13 + (char)10 + (char)13 + (char)10
                    + "Nº Solicitação Fluig: " + numSolicitacao.ToString() + (char)13 + (char)10
                    + "Linha de Código do Erro: " + linenum.ToString() + (char)13 + (char)10
                    + "Mensagem do Erro do WEB Mobile: " + msgErro + (char)13 + (char)10
                    + "Mensagem do Erro do Fluig: " + retorno;

                emailObj.WorkFlowEmailCorpo = corpoEmail;

                apoloService.WORKFLOW_EMAIL.AddObject(emailObj);
                apoloService.SaveChanges();

                #endregion

                return "";
            }
        }

        #endregion

        #endregion

        #region Populate / Update Lists

        public List<SelectListItem> CarregaEmpresas(bool filtro)
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            List<SelectListItem> listaEmpresas = new List<SelectListItem>();

            if (Session["empresa"].ToString().Length > 2)
            {
                if (filtro)
                    listaEmpresas.Add(new SelectListItem
                    {
                        Text = "(Todas)",
                        Value = "(Todas)",
                        Selected = true
                    });
                else
                    listaEmpresas.Add(new SelectListItem
                    {
                        Text = "(Selecione uma Empresa)",
                        Value = "",
                        Selected = true
                    });
            }

            for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
            {
                string empStr = Session["empresa"].ToString().Substring(i, 2);

                Empresas emp = hlbappSession.Empresas
                    .Where(w => w.CodigoCHIC == empStr)
                    .FirstOrDefault();

                listaEmpresas.Add(new SelectListItem
                {
                    Text = emp.Descricaro,
                    Value = empStr,
                    Selected = false
                });
            }

            return listaEmpresas;
        }

        public List<SelectListItem> CarregaVendedores(string id, bool todos)
        {
            //[HttpPost]
            //public ActionResult CarregaVendedores(string id)
            //if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            List<SelectListItem> listaVendedores = new List<SelectListItem>();

            if (MvcAppHyLinedoBrasil.Controllers.AccountController.GetGroup("HLBAPP-AcessoListaVendedoresRelComercial",
                (System.Collections.ArrayList)Session["Direitos"]))
            {
                if (todos)
                    listaVendedores.Add(new SelectListItem
                    {
                        Text = "(Todos)",
                        Value = "(Todos)",
                        Selected = true
                    });

                //CHICMobileDataSet.salesmanDataTable vendedores =
                //    new CHICMobileDataSet.salesmanDataTable();
                //salesmanTableAdapter sl = new salesmanTableAdapter();
                //if (id.Equals("(Todas)"))
                //    sl.FillWithEmail(vendedores);
                //else
                //    sl.FillByEmpresa(vendedores, id);
                //var listaVendedoresOrdenada = vendedores.OrderBy(o => o.salesman).ToList();

                bdApoloEntities apoloSession = new bdApoloEntities();
                var listaVendedoresOrdenada = apoloSession.VU_Vendedores
                    .Where(w => (w.CodigoCHIC == id || id == "(Todas)")
                        && w.Login != "")
                    .OrderBy(o => o.VendNome)
                    .ToList();

                foreach (var item in listaVendedoresOrdenada)
                {
                    listaVendedores.Add(new SelectListItem
                    {
                        //Text = item.sl_code.Trim() + " - " + item.salesman.Trim(),
                        //Value = item.sl_code.Trim(),
                        Text = item.VendCod + " - " + item.VendNome,
                        Value = item.VendCod,
                        Selected = false
                    });
                }
            }

            //return listaVendedores.OrderBy(o => o.Text).ToList();
            return listaVendedores.ToList();

            //return Json(listaVendedores);
        }

        public List<SelectListItem> CarregaClientes()
        {
            bdApoloEntities apoloStatic = new bdApoloEntities();

            List<SelectListItem> listaClientesDDL = new List<SelectListItem>();
            List<String> listaClientesOriginalApolo = new List<string>();

            string login = "";

            if (Session["login"].ToString().Contains("@"))
            {
                login = Session["login"].ToString();
            }

            string empresaApoloSession = Session["empresaApolo"].ToString();

            //string codigoCliente = Session["selectedCustomer"].ToString();

            var listaClientes = apoloStatic.ENTIDADE
                .Where(w => apoloStatic.VEND_ENT.Any(a => a.EntCod == w.EntCod
                    && apoloStatic.VENDEDOR.Any(n => n.VendCod == a.VendCod
                        && (n.USERLoginSite == login || login == "")
                        && (empresaApoloSession.Contains(n.USEREmpresa) || empresaApoloSession.Equals("TODAS"))))
                    //&& w.EntCod == codigoCliente
                    && (w.StatEntCod == "01" || w.StatEntCod == "02" || w.StatEntCod == "03"))
                .Join(
                    apoloStatic.ENT_CATEG.Where(c => c.CategCodEstr == "01" || c.CategCodEstr == "01.01"),
                    e => e.EntCod,
                    c => c.EntCod,
                    (e, c) => new { ENTIDADE = e, ENT_CATEG = c })
                .GroupJoin(
                    apoloStatic.CIDADE,
                    ecid => ecid.ENTIDADE.CidCod,
                    c => c.CidCod,
                    (ecid, c) => new { ENTIDADE = ecid, CIDADE = c })
                .SelectMany(n => n.CIDADE.DefaultIfEmpty(),
                    (n, c) => new { n.ENTIDADE, CIDADE = c})
                .GroupJoin(
                    apoloStatic.STAT_ENT,
                    est => est.ENTIDADE.ENTIDADE.StatEntCod,
                    s => s.StatEntCod,
                    (est, s) => new { ENTIDADE = est, STAT_ENT = s })
                .SelectMany(n => n.STAT_ENT.DefaultIfEmpty(),
                    (n, s) => new { n.ENTIDADE, STAT_ENT = s })
                .OrderBy(o => o.ENTIDADE.ENTIDADE.ENTIDADE.EntNome)
                .Select(c => new
                {
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntCod,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntNome,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntEnder,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntEnderNo,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntEnderComp,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntBair,
                    c.ENTIDADE.CIDADE.CidNomeComp,
                    c.ENTIDADE.CIDADE.UfSigla,
                    c.ENTIDADE.CIDADE.PaisSigla,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntCpfCgc,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntRgIe,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntAgropInsc,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.EntTipoFJ,
                    c.ENTIDADE.ENTIDADE.ENTIDADE.StatEntCod,
                    c.STAT_ENT.StatEntDescr
                }).ToList();

            foreach (var item in listaClientes)
            {
                string cidadeStr = "";
                //CIDADE cidade = apoloStatic.CIDADE.Where(w => w.CidCod == item.CidCod).FirstOrDefault();
                if (item.CidNomeComp != null)
                    cidadeStr = " - " + item.CidNomeComp + " - " + item.UfSigla
                         + " - " + item.PaisSigla;

                //bool select = false;
                //if (item.EntCod == codigoCliente)
                //    select = true;

                string ie = "";
                if (item.EntRgIe != "" && item.EntRgIe != null)
                    ie = item.EntRgIe;
                else
                    ie = item.EntAgropInsc;

                string tipoNacional = " - CNPJ: ";
                if (item.EntTipoFJ.Equals("Física")) tipoNacional = " - CPF: ";
                
                string tipoEstadual = " - IE: ";
                if (item.EntTipoFJ.Equals("Física")) tipoEstadual = " - RG: ";

                //var statusApolo = apoloStatic.STAT_ENT
                //    .Where(w => w.StatEntCod == item.StatEntCod)
                //    .FirstOrDefault().StatEntDescr;
                var statusApolo = item.StatEntDescr;

                listaClientesDDL.Add(new SelectListItem
                {
                    Text = item.EntCod + " - " + item.EntNome + " - " + item.EntEnder + " "
                        + item.EntEnderNo + " - " + item.EntEnderComp + " - " + item.EntBair
                        + cidadeStr + tipoNacional + item.EntCpfCgc + tipoEstadual + ie
                        + " | " + statusApolo,
                    Value = item.EntCod,
                    Selected = false
                });

                listaClientesOriginalApolo.Add(item.EntCod);
            }

            Session["listaClientesOriginalApolo"] = listaClientesOriginalApolo;

            return listaClientesDDL;
        }

        public List<SelectListItem> CarregaEnderecoEntregaList(string id, int seq)
        {
            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            List<SelectListItem> items = new List<SelectListItem>();

            var listaShipAddress = apolo2Static.ENDER_ENT
                .Where(w => w.EntCod == id && w.EnderEntEntrega.Equals("Sim")
                    && w.EnderEntDataValFinal == null)
                .OrderBy(o => o.EnderEntSeq)
                .ToList();

            bool selected = false;
            if (seq == 0) selected = true;

            items.Add(new SelectListItem
            {
                Text = "Mesmo Endereço de Entrega do Faturamento",
                Value = "0",
                Selected = selected
            });

            foreach (var item in listaShipAddress)
            {
                selected = false;
                string cidadeStr = "";
                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(w => w.CidCod == item.CidCod).FirstOrDefault();
                if (cidade != null)
                    cidadeStr = " - " + cidade.CidNomeComp + " - " + cidade.UfSigla
                            + " - " + cidade.PaisSigla;

                if (seq == item.EnderEntSeq) selected = true;

                string entender = item.EnderEnt + " "
                        + item.EnderEntNo + " - " + item.EnderEntComp + " - " + item.EnderEntBair
                        + cidadeStr;

                if (items.Where(w => w.Text == entender).Count() == 0)
                {
                    string texto = item.EnderEntNome + " - " + item.EnderEnt + " "
                            + item.EnderEntNo + " - " + item.EnderEntComp + " - " + item.EnderEntBair
                            + cidadeStr;

                    if (item.EnderEntCod != null)
                    {
                        ENTIDADE entidadeEndereoEntrega = apoloStatic.ENTIDADE
                            .Where(w => w.EntCod == item.EnderEntCod).FirstOrDefault();

                        if (entidadeEndereoEntrega != null)
                        {
                            cidade = apoloStatic.CIDADE
                                .Where(w => w.CidCod == entidadeEndereoEntrega.CidCod)
                                .FirstOrDefault();
                            if (cidade != null)
                                cidadeStr = " - " + cidade.CidNomeComp + " - " + cidade.UfSigla
                                        + " - " + cidade.PaisSigla;

                            texto = entidadeEndereoEntrega.EntCod + " - " + entidadeEndereoEntrega.EntNome + " - "
                                + entidadeEndereoEntrega.EntEnder + " " + entidadeEndereoEntrega.EntEnderNo
                                + " - " + entidadeEndereoEntrega.EntEnderComp + " - " 
                                + entidadeEndereoEntrega.EntBair
                                + cidadeStr;
                        }
                    }

                    items.Add(new SelectListItem
                    {
                        Text = texto,
                        Value = item.EnderEntSeq.ToString(),
                        Selected = false
                    });
                }
            }

            return items;
        }

        public List<SelectListItem> CarregaVacinasPrimarias()
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            List<SelectListItem> ddlVacinas = new List<SelectListItem>();

            bool todasVacinas = (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaVisualizaTodasVacinas",
                (System.Collections.ArrayList)Session["Direitos"]));

            string empresas = Session["empresa"].ToString();

            for (int i = 0; i < empresas.Length; i = i + 2)
            {
                string empStr = empresas.Substring(i, 2);

                var listaVacinasApolo = apoloStatic.PRODUTO
                    .Where(w => apoloStatic.PROD_GRUPO_SUBGRUPO.Any(a => a.ProdCodEstr == w.ProdCodEstr
                            && a.GrpProdCod == "041" && a.SubGrpProdCod == "042")
                        && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(a => a.ProdCodEstr == w.ProdCodEstr
                            && a.GrpProdCod == "042" && (a.SubGrpProdCod == empStr || todasVacinas)))
                    .OrderBy(o => o.ProdNomeAlt1)
                    .ToList();

                //string codigoVendedor = Session["vendedorPV"].ToString();

                //CHICMobileDataSet.salesmanNavDataTable salesmanDT = 
                //    new CHICMobileDataSet.salesmanNavDataTable();
                //salesmanNavTableAdapter salesmanTA = new salesmanNavTableAdapter();

                //salesmanTA.FillByCode(salesmanDT, codigoVendedor);

                //var vendedor = salesmanDT.ToList().Where(w => w.sl_code == codigoVendedor).FirstOrDefault();

                //string empresaL = vendedor.inv_comp.Trim();

                var itensPVList = (List<MvcAppHylinedoBrasilMobile.Models.Item_Pedido_Venda>)
                    Session["ItensPVList"];

                if (itensPVList.Count > 0)
                {
                    DateTime menorDataInicial = itensPVList.Min(m => m.DataEntregaInicial);
                    DateTime maiorDataFinal = itensPVList.Max(m => m.DataEntregaFinal);

                    foreach (var item in listaVacinasApolo)
                    {
                        if (listaVacinasApolo.IndexOf(item) == 0)
                            if ((Session["vacinaPrimariaPV"] == null)
                                || (Session["vacinaPrimariaPV"].ToString() == ""))
                                Session["vacinaPrimariaPV"] = item.ProdCodEstr;

                        if (ddlVacinas.Where(w => w.Value == item.ProdCodEstr).Count() == 0)
                        {
                            //Tabela_Precos precoVacinaPrimaria = hlbappSession.Tabela_Precos
                            //        .Where(w => w.Tipo == "Vacina" && w.Produto == item.ProdNomeAlt2
                            //            && w.Regiao == "Todas" && w.Empresa == empStr
                            //            && menorDataInicial >= w.DataInicial && maiorDataFinal <= w.DataFinal)
                            //        .FirstOrDefault();

                            string precoVacinaStr = "";

                            //if (precoVacinaPrimaria != null)
                            //{
                            //    precoVacinaStr = " - R$ " + String.Format("{0:N4}",
                            //        precoVacinaPrimaria.ValorNormal);
                            //}

                            if (ddlVacinas.Where(w => w.Value == item.ProdCodEstr).Count() == 0)
                            {
                                ddlVacinas.Add(new SelectListItem
                                {
                                    Text = item.ProdNomeAlt1 + precoVacinaStr,
                                    Value = item.ProdCodEstr,
                                    Selected = false
                                });
                            }
                        }
                    }
                }
                else
                {
                    foreach (var item in listaVacinasApolo)
                    {
                        if (ddlVacinas.Where(w => w.Value == item.ProdCodEstr).Count() == 0)
                        {
                            ddlVacinas.Add(new SelectListItem
                            {
                                Text = item.ProdNomeAlt1,
                                Value = item.ProdCodEstr,
                                Selected = false
                            });
                        }
                    }
                }
            }

            return ddlVacinas;
        }

        public void UpdateStatusListSelected(List<String> listCount)
        {
            List<SelectListItem> list = (List<SelectListItem>)Session["ListaStatus"];

            foreach (var item in list)
            {
                String iCount = listCount.Where(w => w == item.Text).FirstOrDefault();
                if (item.Value == iCount)
                {
                    item.Selected = true;
                }
                else
                {
                    item.Selected = false;
                }
            }

            Session["ListaStatus"] = list;
        }

        public void UpdateLinhasListSelected(List<String> listCount)
        {
            List<SelectListItem> list = (List<SelectListItem>)Session["ListaLinhagensFiltro"];

            foreach (var item in list)
            {
                String iCount = listCount.Where(w => w == item.Text).FirstOrDefault();
                if (item.Value == iCount)
                {
                    item.Selected = true;
                }
                else
                {
                    item.Selected = false;
                }
            }

            Session["ListaLinhagensFiltro"] = list;
        }

        public List<SelectListItem> CarregaListaEnvio()
        {
            bdApoloEntities apoloStatic = new bdApoloEntities();

            CRIA_CAMPO criaCampo = apoloStatic.CRIA_CAMPO
                .Where(c => c.TabSistCod == "AEROPORTO" && c.CriaCampoNome == "USERTipoTransporte")
                .FirstOrDefault();

            var listaTipoDEO = criaCampo.CriaCampoItem.Replace("\n", "").Split((char)13);

            List<SelectListItem> items = new List<SelectListItem>();

            foreach (var item in listaTipoDEO)
            {
                items.Add(new SelectListItem { Text = item, Value = item, Selected = false });
            }

            return items;
        }

        public List<SelectListItem> CarregaListaCondPag()
        {
            Apolo10Entities apolo2Static = new Apolo10Entities();

            List<COND_PAG> listaCondPag = apolo2Static.COND_PAG
                .Where(w => w.CondPagOper == "Receber"
                    && w.CondPagNome.Contains("DDL"))
                .OrderBy(o => o.CondPagNome)
                .ToList();

            List<SelectListItem> ddlPayCodes = new List<SelectListItem>();

            foreach (var item in listaCondPag.ToList())
            {
                int n;
                bool isNumeric = int.TryParse(item.CondPagNome.Substring(0,1), out n);
                if (isNumeric)
                {
                    if (listaCondPag.ToList().IndexOf(item) == 0)
                        if (Session["condicaoPagamentoPV"] == null)
                            Session["condicaoPagamentoPV"] = item.CondPagNome;

                    ddlPayCodes.Add(new SelectListItem
                    {
                        Text = item.CondPagNome,
                        Value = item.CondPagNome,
                        Selected = false
                    });
                }
            }

            ddlPayCodes.Add(new SelectListItem
            {
                Text = "PAGTO ANTECIPADO",
                Value = "PAGTO ANTECIPADO",
                Selected = false
            });

            return ddlPayCodes;
        }

        public List<SelectListItem> CarregaListaAeroporto(bool exterior)
        {
            Apolo10Entities apolo2Static = new Apolo10Entities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            List<SelectListItem> items = new List<SelectListItem>();

            List<AEROPORTO> listAeroporto = apolo2Static.AEROPORTO.ToList();

            items.Add(new SelectListItem
            {
                Text = "(Nenhum)",
                Value = "",
                Selected = false
            });

            foreach (var item in listAeroporto)
            {
                MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(w => w.CidCod == item.CidCod).FirstOrDefault();
                MvcAppHylinedoBrasilMobile.Models.bdApolo2.PAIS pais = apolo2Static.PAIS.Where(w => w.PaisSigla == cidade.PaisSigla).FirstOrDefault();

                if (cidade.PaisSigla.Equals("BRA") && !exterior)
                {
                    items.Add(new SelectListItem
                    {
                        Text = item.AeropNome + " - " + pais.PaisNome,
                        Value = item.AeropNome + " - " + pais.PaisNome,
                        Selected = false
                    });
                }
                else if (!cidade.PaisSigla.Equals("BRA") && exterior)
                {
                    items.Add(new SelectListItem
                    {
                        Text = item.AeropNome + " - " + pais.PaisNome,
                        Value = item.AeropNome + " - " + pais.PaisNome,
                        Selected = false
                    });
                }
            }

            return items;
        }

        public List<SelectListItem> CarregaListaTipoVenda()
        {
            List<SelectListItem> listItens = new List<SelectListItem>();
            listItens.Add(new SelectListItem
            {
                Text = "Venda Direta",
                Value = "Venda Direta",
                Selected = false
            });
            listItens.Add(new SelectListItem
            {
                Text = "Triangulação",
                Value = "Triangulação",
                Selected = false
            });

            return listItens;
        }

        public List<SelectListItem> CarregaLinhagens(DateTime dataEntregaInicial, string filtraEmpresa, bool somenteLinhagem)
        {
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            List<SelectListItem> ddlLinhagens = new List<SelectListItem>();

            if (filtraEmpresa == "")
            {
                ddlLinhagens.Add(new SelectListItem
                {
                    Text = "(Todas as Linhas)",
                    Value = "(Todas as Linhas)",
                    Selected = true
                });
            }
            else
            {
                ddlLinhagens.Add(new SelectListItem
                {
                    Text = "(Selecione uma Linhagem)",
                    Value = "(Selecione uma Linhagem)",
                    Selected = true
                });
            }

            bool viewAll = (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaVisualizarTodosPedidos",
                (System.Collections.ArrayList)Session["Direitos"]));

            if (!MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"])
                || viewAll)
            {
                List<string> listaLin = new List<string>();

                for (int i = 0; i < Session["empresa"].ToString().Length; i = i + 2)
                {
                    string empStr = Session["empresa"].ToString().Substring(i, 2);

                    var listaLinhagens = hlbappSession.Tabela_Precos
                        .Where(w => w.Empresa == empStr
                            && (filtraEmpresa == "" || w.Empresa == filtraEmpresa)
                            && w.Tipo == "Faturamento"
                            && ((somenteLinhagem && !w.Produto.Contains("Ovos") && !w.Produto.Contains("Macho")) || !somenteLinhagem)
                            && dataEntregaInicial >= w.DataInicial && dataEntregaInicial <= w.DataFinal)
                        .GroupBy(g => g.Produto)
                        .OrderBy(o => o.Key)
                        .ToList();

                    foreach (var item in listaLinhagens)
                    {
                        if (item.Key.Contains("Ovos"))
                        {
                            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                                .GetGroup("HLBAPPM-PedidoVendaVisualizaLinhagemOvos",
                                (System.Collections.ArrayList)Session["Direitos"]))
                            {
                                listaLin.Add(item.Key);
                            }
                        }
                        else
                            listaLin.Add(item.Key);
                    }
                }

                foreach (var item in listaLin)
                {
                    ddlLinhagens.Add(new SelectListItem { Text = item, Value = item, Selected = false });
                }
            }

            if (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"])
                || viewAll)
            {
                List<PRODUTO> listProdutoExport = apoloStatic.PRODUTO
                    .Where(w => (w.FxaProdCod == "7" || w.FxaProdCod == "8")
                        && (w.CategProdCod == "1" || w.CategProdCod == "4" || w.CategProdCod == "2") && w.ProdStat == "Ativado"
                        && apoloStatic.PRODUTO1.Any(p1 => p1.ProdCodEstr == w.ProdCodEstr
                        && (p1.USEREmpresaLinha == "BR" || p1.USEREmpresaLinha == "HN" || p1.USEREmpresaLinha == "LB")))
                    .OrderByDescending(o => o.FxaProdCod).ThenByDescending(t => t.ProdNomeAlt2)
                    .ToList();

                foreach (var item in listProdutoExport)
                {
                    ddlLinhagens.Add(new SelectListItem { Text = item.ProdNome, Value = item.ProdCodEstr, Selected = false });
                }

                string codigoCliente = Session["selectedCustomer"].ToString();

                ENTIDADE1 entidade1 = apoloStatic.ENTIDADE1.Where(w => w.EntCod == codigoCliente).FirstOrDefault();

                Session["precoDE"] = 0;
                if (entidade1 != null)
                {
                    if (entidade1.USERPrecoVenda != null && entidade1.USERPrecoVenda != 0)
                        Session["precoDE"] = entidade1.USERPrecoVenda;
                }

                Session["percBonificacaoDE"] = 0;
            }

            return ddlLinhagens;
        }

        public List<SelectListItem> CarregaListaMascaraTI()
        {
            List<SelectListItem> listItens = new List<SelectListItem>();
            listItens.Add(new SelectListItem { Text = "24/23", Value = "24/23", Selected = false });
            listItens.Add(new SelectListItem { Text = "23/23", Value = "23/23", Selected = false });

            return listItens;
        }

        public void AtualizaLinhagemSelecionada(string linhagem)
        {
            List<SelectListItem> linhagens = (List<SelectListItem>)Session["ListaLinhagens"];

            foreach (var item in linhagens)
            {
                if (item.Value == linhagem)
                {
                    item.Selected = true;
                }
                else
                {
                    item.Selected = false;
                }
            }

            Session["ListaLinhagens"] = linhagens;
        }

        public void AtualizaVacinaSelecionada(string vacina)
        {
            List<SelectListItem> vacinas = (List<SelectListItem>)Session["ListaVacinasPrimarias"];

            foreach (var item in vacinas)
            {
                if (item.Value == vacina)
                {
                    item.Selected = true;
                }
                else
                {
                    item.Selected = false;
                }
            }

            Session["ListaVacinasPrimarias"] = vacinas;
        }

        public void AtualizaCondPagSelecionado(string condPag)
        {
            List<SelectListItem> condPags = (List<SelectListItem>)Session["ListaCondicaoPagamento"];

            foreach (var item in condPags)
            {
                if (item.Value == condPag)
                {
                    item.Selected = true;
                }
                else
                {
                    item.Selected = false;
                }
            }

            Session["ListaCondicaoPagamento"] = condPags;
        }

        public void AtualizaVendedorSelecionado(string vendCod)
        {
            List<SelectListItem> listVend = (List<SelectListItem>)Session["ListaVendedores"];

            foreach (var item in listVend)
            {
                if (item.Value == vendCod)
                {
                    item.Selected = true;
                }
                else
                {
                    item.Selected = false;
                }
            }

            Session["ListaVendedores"] = listVend;
        }

        public void CarregaTipoAlteracao()
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            var lista = hlbappSession.Tipo_Alteracao_Ped_Venda
                .OrderBy(o => o.TipoAlteracao).ToList();

            List<SelectListItem> listaDDL = new List<SelectListItem>();

            foreach (var item in lista)
            {
                SelectListItem ddlItem = new SelectListItem();
                ddlItem.Text = item.TipoAlteracao;
                ddlItem.Value = item.TipoAlteracao;
                ddlItem.Selected = false;

                listaDDL.Add(ddlItem);
            }

            Session["ListaTipoAlteracaoPV"] = listaDDL;
        }

        public void CarregaListaStatus()
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            if (Session["usuario"].ToString() != "0")
            {
                string login = Session["login"].ToString();

                List<SelectListItem> items = new List<SelectListItem>();

                var listaStatus = hlbappSession.Status_Ped_Venda.OrderBy(o => o.Status).ToList();

                items.Add(new SelectListItem
                {
                    Text = "(Todos os Status)",
                    Value = "(Todos os Status)",
                    Selected = true
                });

                foreach (var item in listaStatus)
                {
                    if (((Convert.ToInt32(Session["existeConfigAprovGerenciaPV"]) > 0)
                        && item.Descricao.Contains("Gerência"))
                        ||
                        (!item.Descricao.Contains("Gerência"))
                        ||
                        (MvcAppHyLinedoBrasil.Controllers.AccountController
                            .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                            (System.Collections.ArrayList)Session["Direitos"])
                            && item.Descricao.Equals("Documentação de Exportação")
                         ))
                    {
                        items.Add(new SelectListItem
                        {
                            Text = item.Status,
                            Value = item.Status,
                            Selected = false
                        });
                    }
                }

                List<Params_Usuario_Pedido_Venda> listStatusLogin = hlbappSession.Params_Usuario_Pedido_Venda
                    .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                        && w.Parametro == "Status").ToList();

                foreach (var item in items)
                {
                    Params_Usuario_Pedido_Venda statusLogin = hlbappSession.Params_Usuario_Pedido_Venda
                        .Where(w => w.Login == login && w.Modulo == "PedidoVenda"
                            && w.Parametro == "Status" && w.Valor == item.Text).FirstOrDefault();

                    if (statusLogin != null)
                        item.Selected = true;
                    else
                        item.Selected = false;
                }

                Session["ListaStatus"] = items;
            }
        }

        public List<SelectListItem> AtualizaDDL(string text, List<SelectListItem> lista)
        {
            List<SelectListItem> listItens = lista;

            foreach (var item in listItens)
            {
                if (item.Value == text)
                {
                    item.Selected = true;
                }
                else
                {
                    item.Selected = false;
                }
            }

            return listItens;
        }

        public void CarregaListaNucleos()
        {
            if (Session["usuario"].ToString() != "0")
            {
                bdApoloEntities apoloStatic = new bdApoloEntities();

                int sequencia = Convert.ToInt32(Session["idItemSelecionado"].ToString());

                var listaItensSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];

                Item_Pedido_Venda ipv = listaItensSession.Where(w => w.Sequencia == sequencia).FirstOrDefault();

                PRODUTO produto = apoloStatic.PRODUTO.Where(w => w.ProdCodEstr == ipv.ProdCodEstr).FirstOrDefault();

                string variety = "";
                if (produto.FxaProdCod.Equals("7"))
                    variety = produto.ProdNomeAlt1;
                else
                    variety = produto.ProdNomeAlt2;

                string location = "";
                if ((produto.CategProdCod.Equals("1") && produto.FxaProdCod.Equals("7"))
                    || (produto.CategProdCod.Equals("4") && produto.FxaProdCod.Equals("8")))
                    location = "PP";
                else
                    location = "GP";

                FLOCKS1TableAdapter nucleos = new FLOCKS1TableAdapter();
                MvcAppHyLinedoBrasil.Data.FLIPDataSet flip = new MvcAppHyLinedoBrasil.Data.FLIPDataSet();
                bdApoloEntities bdApolo = new bdApoloEntities();
                ImportaIncubacao.Data.Apolo.Apolo10EntitiesService apoloService = 
                    new ImportaIncubacao.Data.Apolo.Apolo10EntitiesService();

                List<SelectListItem> items = new List<SelectListItem>();

                nucleos.FillFarms(flip.FLOCKS1);

                foreach (var item in flip.FLOCKS1.Where(f => f.LOCATION == location).ToList())
                {
                    FLOCKSTableAdapter flocks = new FLOCKSTableAdapter();

                    flocks.FillActivesByFarm(flip.FLOCKS, "HYBR", "BR", location, item.FARM_ID);

                    var listFlocksVariety = flip.FLOCKS
                        .Where(f => !f.FLOCK_ID.Contains("K"))
                            //&& (f.VARIETY == variety))
                        .ToList();

                    if (listFlocksVariety.Count > 0)
                        items.Add(new SelectListItem { Text = item.FARM_ID, Value = item.FARM_ID, Selected = false });
                }

                Session["ListaNucleosPV"] = items;
                Session["locationPV"] = location;

                List<SelectListItem> itemsGalpoes = new List<SelectListItem>();

                itemsGalpoes.Add(new SelectListItem { Text = "01", Value = "01", Selected = false });
                itemsGalpoes.Add(new SelectListItem { Text = "02", Value = "02", Selected = false });
                itemsGalpoes.Add(new SelectListItem { Text = "03", Value = "03", Selected = false });
                itemsGalpoes.Add(new SelectListItem { Text = "04", Value = "04", Selected = false });

                Session["ListaGalpoesPV"] = itemsGalpoes;
            }
        }

        public void CarregaTipoExportacaoRelatorio()
        {
            List<SelectListItem> items = new List<SelectListItem>();

            items.Add(new SelectListItem
            {
                Text = "PDF",
                Value = "PDF",
                Selected = false
            });

            items.Add(new SelectListItem
            {
                Text = "Excel",
                Value = "Excel",
                Selected = false
            });

            items.Add(new SelectListItem
            {
                Text = "Word",
                Value = "Word",
                Selected = false
            });

            Session["ListaTipoExportacaoRelatorio"] = items;
        }

        public void CarregaListaVeterinarioResponsavel()
        {
            Apolo10Entities apolo2Static = new Apolo10Entities();

            List<SelectListItem> items = new List<SelectListItem>();

            List<FUNCIONARIO> listVeterinario = apolo2Static.FUNCIONARIO
                .Where(w => w.CargoCodEstr == "006.001")
                .OrderBy(b => b.FuncNome)
                .ToList();

            foreach (var item in listVeterinario)
            {
                items.Add(new SelectListItem
                {
                    Text = item.FuncNome,
                    Value = item.FuncCod,
                    Selected = false
                });
            }

            Session["ListVeterinarioResponsavel"] = items;
        }

        public List<SelectListItem> CarregaListaMotivoReposicao()
        {
            List<SelectListItem> listItens = new List<SelectListItem>();
            listItens.Add(new SelectListItem
            {
                Text = "Mortalidade",
                Value = "Mortalidade",
                Selected = false
            });
            listItens.Add(new SelectListItem
            {
                Text = "Acerto Comercial",
                Value = "Acerto Comercial",
                Selected = false
            });

            return listItens;
        }

        public List<SelectListItem> CarregaListaSimNao()
        {
            List<SelectListItem> listItens = new List<SelectListItem>();
            listItens.Add(new SelectListItem
            {
                Text = "Não",
                Value = "Não",
                Selected = true
            });
            listItens.Add(new SelectListItem
            {
                Text = "Sim",
                Value = "Sim",
                Selected = false
            });

            return listItens;
        }

        public List<SelectListItem> CarregaListaIncubatorios(bool mudaCodigoAjapi)
        {
            Session["location"] = "PP";

            string location = Session["location"].ToString();

            FLIPDataSetMobile.HATCHERY_CODESDataTable hDT = new FLIPDataSetMobile.HATCHERY_CODESDataTable();
            MvcAppHylinedoBrasilMobile.Models.FLIPDataSetMobileTableAdapters.HATCHERY_CODESTableAdapter hTA =
                new Models.FLIPDataSetMobileTableAdapters.HATCHERY_CODESTableAdapter();

            hTA.FillByLocation(hDT, location);

            List<SelectListItem> items = new List<SelectListItem>();

            items.Add(new SelectListItem
            {
                Text = "(Selecione um Incubatório)",
                Value = "",
                Selected = true
            });

            foreach (var item in hDT)
            {
                if (MvcAppHylinedoBrasilMobile.Controllers.AccountMobileController
                    .GetGroup("HLBAPP-Acesso" + item.HATCH_LOC, (System.Collections.ArrayList)Session["Direitos"]))
                {
                    var hatchLoc = item.HATCH_LOC;
                    if (hatchLoc == "TB" && mudaCodigoAjapi) hatchLoc = "AJ";
                    items.Add(new SelectListItem { Text = item.HATCH_DESC, Value = hatchLoc, Selected = false });
                }
            }

            //Session["ListaIncubatorios"] = items;
            return items;
        }

        public List<SelectListItem> CarregaListaTipoMatriz()
        {
            List<SelectListItem> listItens = new List<SelectListItem>();
            listItens.Add(new SelectListItem
            {
                Text = "Nova",
                Value = "Nova",
                Selected = false
            });
            listItens.Add(new SelectListItem
            {
                Text = "Velha",
                Value = "Velha",
                Selected = false
            });

            return listItens;
        }

        #endregion

        #region Json Methods

        [HttpPost]
        public ActionResult AtualizaMotivo(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            string msg = "";

            if (Session["origemItemPV"].ToString().Equals("Alteração")
                && id == "")
                msg = "Toda alteração exige um motivo! Por favor, insira o mesmo!";
            else
                Session["motivoAlteracaoPV"] = id;

            return Json(msg);
        }

        [HttpPost]
        public ActionResult AutoCompleteCustomer(string term)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            var result = apoloStatic.ENTIDADE
                .Where(w => w.EntNome.Contains(term)
                    && w.EntNome.Contains("ALIMENTOS"))
                .ToList();
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult CarregaLotes(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            if (Session["usuario"] != null)
            {
                if (Session["usuario"].ToString() != "0")
                {
                    FLOCKSTableAdapter flocks = new FLOCKSTableAdapter();
                    MvcAppHyLinedoBrasil.Data.FLIPDataSet flip = new MvcAppHyLinedoBrasil.Data.FLIPDataSet();

                    List<SelectListItem> items = new List<SelectListItem>();

                    Session["listLotesPV"] = new List<Lotes>();
                    string location = Session["locationPV"].ToString();

                    List<Lotes> listaLotes = new List<Lotes>();

                    //flocks.FillActivesByFarm(flip.FLOCKS, "HYBR", "BR", location, id);
                    flocks.Fill(flip.FLOCKS);

                    string variety = "";
                    int sequencia = Convert.ToInt32(Session["idItemSelecionado"].ToString());
                    var listaItensSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                    Item_Pedido_Venda ipv = listaItensSession.Where(w => w.Sequencia == sequencia).FirstOrDefault();
                    PRODUTO produto = apoloStatic.PRODUTO.Where(w => w.ProdCodEstr == ipv.ProdCodEstr).FirstOrDefault();

                    if (produto.FxaProdCod.Equals("7"))
                        variety = produto.ProdNomeAlt1;
                    else
                        variety = produto.ProdNomeAlt2;

                    List<MvcAppHyLinedoBrasil.Data.FLIPDataSet.FLOCKSRow> flocksTable = flip.FLOCKS
                        .Where(f => !f.FLOCK_ID.Contains("K")
                            && f.LOCATION == location && f.ACTIVE == 1)
                            //&& (f.VARIETY == variety))
                            .ToList();

                    for (int i = 0; i < flocksTable.Count; i++)
                    {
                        if (items.Where(t => t.Text == flocksTable[i].NUM_1.ToString()).Count() == 0)
                        {
                            items.Add(new SelectListItem { Text = flocksTable[i].NUM_1.ToString(), Value = flocksTable[i].NUM_1.ToString(), Selected = false });
                        }
                        listaLotes.Add(new Lotes
                        {
                            Granja = flocksTable[i].FARM_ID,
                            Linhagem = flocksTable[i].VARIETY,
                            LoteCompleto = flocksTable[i].FLOCK_ID,
                            NumeroLote = flocksTable[i].NUM_1.ToString(),
                            DataNascimento = flocksTable[i].HATCH_DATE,
                            Location = flocksTable[i].LOCATION
                        });
                    }

                    Session["listLotesPV"] = listaLotes;
                    Session["ListaLotesPV"] = items;

                    return Json(items);
                }
                else
                {
                    return RedirectToAction("Login", "AccountMobile");
                }
            }
            else
            {
                return RedirectToAction("Login", "AccountMobile");
            }
        }

        [HttpPost]
        public ActionResult CarregaGalpoes(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            if (Session["usuario"] != null)
            {
                if (Session["usuario"].ToString() != "0")
                {
                    List<Lotes> items = new List<Lotes>();

                    List<SelectListItem> itemsGlp = new List<SelectListItem>();

                    string galpao = "";

                    List<Lotes> listaLotes = (List<Lotes>)Session["listLotesPV"];

                    var loteSelecionado = listaLotes
                        .Where(s => s.NumeroLote == id)
                        .ToList();

                    foreach (var lote in loteSelecionado)
                    {
                        int tamanho = lote.LoteCompleto.Length - 1;

                        Session["loteCompletoSelecionado"] = lote.LoteCompleto;

                        galpao = "";

                        for (int i = tamanho; i >= 0; i--)
                        {
                            double Num;
                            bool isNum = double.TryParse(lote.LoteCompleto.Substring(i, 1), out Num);

                            if ((isNum) && (galpao.Equals("")))
                            {
                                galpao = "0" + lote.LoteCompleto.Substring(i, 1);
                                items.Add(new Lotes { Galpao = galpao, Linhagem = lote.Linhagem, LoteCompleto = lote.LoteCompleto, Location = lote.Location });
                                //if (Session["location"].ToString().Equals("GP"))
                                //    itemsGlp.Add(new SelectListItem { Text = galpao + " - " + lote.Linhagem, Value = galpao + " - " + lote.Linhagem, Selected = false });
                                //else
                                //    itemsGlp.Add(new SelectListItem { Text = galpao, Value = galpao, Selected = false });
                                itemsGlp.Add(new SelectListItem { Text = galpao, Value = galpao, Selected = false });

                                foreach (var item in listaLotes)
                                {
                                    if (item.LoteCompleto == lote.LoteCompleto)
                                    {
                                        item.Galpao = galpao;
                                    }
                                }
                            }
                        }
                    }

                    Session["listLotesPV"] = listaLotes;
                    Session["ListaGalpoesPV"] = itemsGlp;

                    return Json(items);
                }
                else
                {
                    return RedirectToAction("Login", "AccountMobile");
                }
            }
            else
            {
                return RedirectToAction("Login", "AccountMobile");
            }
        }

        #region Métodos Edit Form

        #region Passo 01 - Cliente / Endereço de Entrega

        [HttpPost]
        public ActionResult FiltraCliente(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            string filtroNome = id.ToUpper();

            Session["filtroClientePV"] = id;

            List<SelectListItem> listaFiltroOriginal = (List<SelectListItem>)Session["ListaClientesPVOriginal"];

            List<SelectListItem> listaFiltro = listaFiltroOriginal
                .Where(w => w.Text.ToUpper().Contains(filtroNome)).ToList();

            Session["ListaClientesPV"] = listaFiltro;

            if (listaFiltro.Count > 0)
            {
                Session["selectedCustomer"] = listaFiltro.FirstOrDefault().Value;
                string entidadeSelecionada = listaFiltro.FirstOrDefault().Value;

                #region Verifica Se o Cliente está no Bolsão de LTI

                string participaBolsao = "Não"; ;
                string codigoCliente = Session["selectedCustomer"].ToString();
                string enderecoEntrega = Session["selectedShipAddress"].ToString();
                string tipoEnderecoEntrega = Session["selectedTypeAddress"].ToString();

                ENTIDADE cliente = apoloStatic.ENTIDADE.Where(w => w.EntCod == codigoCliente).FirstOrDefault();

                if (cliente != null)
                {
                    if (tipoEnderecoEntrega.Equals("Faturamento"))
                    {
                        MvcAppHylinedoBrasilMobile.Models.bdApolo2.CIDADE cidade =
                            apolo2Static.CIDADE.Where(w => w.CidCod == cliente.CidCod).FirstOrDefault();

                        if (cidade != null)
                        {
                            if (cidade.USERBolsaoLT != null && cidade.USERBolsaoLT != "(Nenhum)")
                                participaBolsao = "Sim";
                        }
                    }
                }

                Session["clienteParticipaBolsao"] = participaBolsao;

                #endregion

                string retornoVerificaCadastroEntidade = VerificaCadastroEntidade(entidadeSelecionada);

                if (retornoVerificaCadastroEntidade != "")
                {
                    SelectListItem primeiroClienteErrado = new SelectListItem();
                    primeiroClienteErrado.Text = retornoVerificaCadastroEntidade;
                    primeiroClienteErrado.Value = "Erro";
                    listaFiltro.Add(primeiroClienteErrado);
                }
            }

            AtualizaDDL(id, (List<SelectListItem>)Session["ListaClientesPV"]);

            List<SelectListItem> items = CarregaEnderecoEntregaList(id, -1);

            Session["ListaEnderecoEntrega"] = items;

            return Json(listaFiltro);
        }

        [HttpPost]
        public ActionResult CarregaEnderecoEntrega(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();
            Apolo10Entities apolo2Static = new Apolo10Entities();

            Session["selectedCustomer"] = id;

            #region Verifica Se o Cliente está no Bolsão de LTI

            string participaBolsao = "Não";
            string codigoCliente = Session["selectedCustomer"].ToString();
            string enderecoEntrega = Session["selectedShipAddress"].ToString();
            string tipoEnderecoEntrega = Session["selectedTypeAddress"].ToString();

            ENTIDADE cliente = apoloStatic.ENTIDADE.Where(w => w.EntCod == codigoCliente).FirstOrDefault();

            if (cliente != null)
            {
                if (tipoEnderecoEntrega.Equals("Faturamento"))
                {
                    MvcAppHylinedoBrasilMobile.Models.bdApolo2.CIDADE cidade =
                        apolo2Static.CIDADE.Where(w => w.CidCod == cliente.CidCod).FirstOrDefault();

                    if (cidade != null)
                    {
                        if (cidade.USERBolsaoLT != null && cidade.USERBolsaoLT != "(Nenhum)")
                            participaBolsao = "Sim";
                    }
                }
            }

            Session["clienteParticipaBolsao"] = participaBolsao;

            #endregion

            AtualizaDDL(id, (List<SelectListItem>)Session["ListaClientesPV"]);

            List<SelectListItem> items = CarregaEnderecoEntregaList(id, -1);

            List<SelectListItem> itemsRetorno = items;

            ENTIDADE clienteSelecionado = apoloStatic.ENTIDADE
                    .Where(w => w.EntCod == id).FirstOrDefault();

            Session["selectedTypeAddress"] = "Faturamento";
            Session["selectedShipAddress"] = 0;

            if (clienteSelecionado != null)
            {
                string retornoVerificaCadastroEntidade =
                    VerificaCadastroEntidade(clienteSelecionado.EntCod);

                if (retornoVerificaCadastroEntidade != "")
                {
                    SelectListItem primeiroClienteErrado = new SelectListItem();
                    primeiroClienteErrado.Text = retornoVerificaCadastroEntidade;
                    primeiroClienteErrado.Value = "Erro";
                    itemsRetorno.Add(primeiroClienteErrado);
                }
            }

            Session["ListaEnderecoEntrega"] = items;

            return Json(itemsRetorno);
        }

        [HttpPost]
        public ActionResult AtualizaEnderecoEntrega(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            int idInt = Convert.ToInt32(id);

            if (idInt == 0)
                Session["selectedTypeAddress"] = "Faturamento";
            else
                Session["selectedTypeAddress"] = "Outro";

            Session["selectedShipAddress"] = idInt;

            AtualizaDDL(id, (List<SelectListItem>)Session["ListaEnderecoEntrega"]);

            return Json("");
        }

        [HttpPost]
        public ActionResult VerificaBonificacoesPendentes(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Apolo10Entities apolo2Static = new Apolo10Entities();

            //salesmanTableAdapter sl = new salesmanTableAdapter();
            //CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
            //sl.FillByCode(slDT, Session["vendedorPV"].ToString());
            //string empresa = slDT[0].inv_comp.Trim();

            bdApoloEntities apoloSession = new bdApoloEntities();
            var codigoVendedorApolo = "0" + Session["vendedorPV"].ToString();
            if (Session["vendedorPV"].ToString().Length == 7) codigoVendedorApolo = Session["vendedorPV"].ToString();
            var vendedor = apoloSession.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();
            string empresa = vendedor.CodigoCHIC;

            var listaNFs = (from w in apolo2Static.NOTA_FISCAL
                where w.EntCod == id
                && (w.USERRRCAcaoEmergTomada == "Bonificação" || w.USERRRCAcaoEmergTomada == "Bonificação")
                && w.USERRRCAETStatus == "Pendente"
                && (
                    (empresa == "BR" && w.EmpCod == "1") ||
                    (empresa == "LB" && (w.EmpCod == "12" || w.EmpCod == "21")) ||
                    (empresa == "HN" && w.EmpCod == "15") ||
                    (empresa == "PL" && w.EmpCod == "20")
                   )
                select new
                {
                    DataNascimento = (w.USERRRCDataNasc == null ? w.NFDataSaidaEntrada : w.USERRRCDataNasc),
                    AcaoTomada = w.USERRRCAcaoEmergTomada,
                    w.NFNum,
                    QtdeBonificada = w.USERRRCAETQtdeValorBonificado
                })
                .ToList()
                .Select(s => new
                {
                    DataNascimento = Convert.ToDateTime(s.DataNascimento).ToString("dd/MM/yyyy"),
                    AcaoTomada = s.AcaoTomada,
                    s.NFNum,
                    QtdeBonificada = s.QtdeBonificada
                }).ToList();

            return Json(listaNFs);
        }

        [HttpPost]
        public ActionResult VerificaParticaBolsao(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bool participaBolsao = false;
            if (Session["clienteParticipaBolsao"].ToString().Equals("Sim"))
                participaBolsao = true;

            return Json(participaBolsao);
        }

        #endregion

        #region Passo 02 - Itens

        [HttpPost]
        public ActionResult VerificaDataTabelaPreco(string data, string linhagem)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();
            HLBAPPEntities hlbappStatic = new HLBAPPEntities();

            string retorno = "";

            #region Carrega Dados do Pedido

            string codigoVendedor = "";
            if (Session["selectedCustomer"] != null)
            {
                codigoVendedor = Session["vendedorPV"].ToString();
            }

            //CHICMobileDataSet.salesmanNavDataTable salesmanDT = new CHICMobileDataSet.salesmanNavDataTable();
            //salesmanNavTableAdapter salesmanTA = new salesmanNavTableAdapter();
            //salesmanTA.FillByCode(salesmanDT, codigoVendedor);
            //var vendedor = salesmanDT.ToList().Where(w => w.sl_code == codigoVendedor).FirstOrDefault();
            bdApoloEntities apoloSession = new bdApoloEntities();
            var codigoVendedorApolo = "0" + codigoVendedor;
            if (codigoVendedor.Length == 7) codigoVendedorApolo = codigoVendedor;
            var vendedor = apoloSession.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();

            string empresaL = "";
            if (vendedor != null)
            {
                //empresaL = vendedor.inv_comp.Trim();
                empresaL = vendedor.CodigoCHIC;
            }
            else
            {
                //empresaL = Session["empresa"].ToString().Substring(0, 2);
                empresaL = Session["empresa"].ToString();
            }

            string codigoCliente = "";
            if (Session["selectedCustomer"] != null)
            {
                codigoCliente = Session["selectedCustomer"].ToString();
            }
            string condPag = Session["condicaoPagamentoPV"].ToString();
            if (!condPag.Equals("PAGTO ANTECIPADO")) condPag = "Faturamento";

            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE
                .Where(w => apoloStatic.ENTIDADE.Any(a => a.CidCod == w.CidCod
                    && a.EntCod == codigoCliente)).FirstOrDefault();

            UNID_FEDERACAO uf = apoloStatic
                .UNID_FEDERACAO.Where(w => w.UfSigla == cidade.UfSigla
                    && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();

            #endregion

            DateTime dataT = new DateTime();

            if (DateTime.TryParse(data, out dataT))
            {
                if (dataT < DateTime.Today)
                {
                    retorno = "A data não pode ser menor que a data atual!";
                }
                else
                {
                    #region Verifica se existe tabela de preço

                    // Verifica por Estado
                    Tabela_Precos precoLinhagem = hlbappStatic.Tabela_Precos
                        .Where(w => w.Tipo == condPag && w.Produto == linhagem
                            //&& w.Regiao == uf.UfSigla && w.Empresa == empresaL
                            && w.Regiao == uf.UfSigla && empresaL.Contains(w.Empresa)
                            && dataT >= w.DataInicial && dataT <= w.DataFinal)
                        .FirstOrDefault();

                    // Verifica por Região
                    if (precoLinhagem == null)
                    {
                        precoLinhagem = hlbappStatic
                            .Tabela_Precos.Where(w => w.Tipo == condPag && w.Produto == linhagem
                                //&& w.Regiao == uf.UfRegGeog && w.Empresa == empresaL
                            && w.Regiao == uf.UfRegGeog && empresaL.Contains(w.Empresa)
                            && dataT >= w.DataInicial && dataT <= w.DataFinal)
                        .FirstOrDefault();
                    }

                    // Verifica por Ovos
                    if (precoLinhagem == null)
                    {
                        precoLinhagem = hlbappStatic
                            .Tabela_Precos.Where(w => w.Tipo == condPag
                                && w.Produto == linhagem 
                                && (w.Produto.Contains("Ovos") || w.Produto.Contains("Machos"))
                                //&& w.Regiao == "Todas" && w.Empresa == empresaL
                                && w.Regiao == "Todas" && empresaL.Contains(w.Empresa)
                                && dataT >= w.DataInicial && dataT <= w.DataFinal)
                        .FirstOrDefault();
                    }

                    if (precoLinhagem == null)
                        retorno = "Não existe tabela de preço para a linhagem " + linhagem
                            + " na data " + dataT.ToShortDateString()
                            + "! Verifique com o Gerente Comercial ou o Departamento de Programação!";

                    #endregion
                }

                #region Verifica se já existe o item e pega a data atual para verificar se é atraso ou antecipação

                bool existeAntecipacao = false;
                List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                var item = listItensPV.Where(w => w.ProdCodEstr == linhagem)
                    .FirstOrDefault();
                DateTime? dataAntiga = null;
                if (item != null) dataAntiga = item.DataEntregaFinal;

                if (dataAntiga != null)
                {
                    if (dataAntiga > dataT) existeAntecipacao = true;
                }

                #endregion

                #region Verifica saldo de pintos na linhagem

                DateTime dataNascimento = CalculaDataNascimento(codigoCliente, dataT, linhagem);
                int anoPedido = dataNascimento.Year;
                int mesPedido = dataNascimento.Month;

                bool existeSaldoConfigurado = ExisteConfiguracaoSaldoPinto(linhagem, anoPedido, mesPedido);
                int saldoUtilizado = SaldoUtilizadoPinto(codigoCliente, linhagem, anoPedido, mesPedido);
                int saldoConfigurado = SaldoConfiguradoPinto(linhagem, anoPedido, mesPedido);
                //int qtdeTotalSolicitada = ((item.QtdeLiquida == null ? 0 : item.QtdeLiquida) +
                //    Convert.ToInt32(item.QtdeBonificada == null ? 0 : item.QtdeBonificada) +
                //    Convert.ToInt32(item.QtdeReposicao == null ? 0 : item.QtdeReposicao));

                //if ((saldoUtilizado) > saldoConfigurado && existeSaldoConfigurado)
                //{
                //    retorno = "Saldo indisponível para a Linhagem " + linhagem
                //        + " no período de " + mesPedido.ToString() + "/" + anoPedido.ToString() + "!<br />"
                //        + "Qtde. Utilizada: " + String.Format("{0:N0}", saldoUtilizado) + "<br />"
                //        + "Qtde. Projetada: " + String.Format("{0:N0}", saldoConfigurado) + "<br />"
                //        + "Saldo: " + String.Format("{0:N0}", (saldoConfigurado - saldoUtilizado)) + "<br />"
                //        + "Em caso de duvidas, entrar em contato com o Gerente Comercial!";
                //}
                //else 
                if (!existeSaldoConfigurado)
                {
                    #region Verifica bloqueio de linhagem por data cadastrado no Fluig

                    fluigEntities bdFluig = new fluigEntities();

                    bool existeBloqueio = false;
                    DateTime dataPermitida = new DateTime();

                    var listaBloqueios = bdFluig.FF40F29A5F_3F17F927
                        .Where(w => dataT < w.PERMITIR_PEDIDO_DT_1
                            && w.DELETED == false)
                        .ToList();

                    foreach (var bloqueio in listaBloqueios)
                    {
                        dataPermitida = Convert.ToDateTime(bloqueio.PERMITIR_PEDIDO_DT_1);

                        var listaColunas = bloqueio.GetType().GetProperties();

                        foreach (var coluna in listaColunas)
                        {
                            if (coluna.Name.Contains("LINHAGENS_BLOQU_CHK_"))
                            {
                                string value = "";
                                if (coluna.GetValue(bloqueio, null) != null)
                                    value = coluna.GetValue(bloqueio, null).ToString();
                                if (value == linhagem)
                                {
                                    existeBloqueio = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (existeBloqueio && existeAntecipacao)
                    {
                        retorno = "Previsão de disponibilidade da linhagem "
                            + linhagem + " a partir de " + dataPermitida.ToShortDateString()
                            + "! Em caso de duvidas, entrar em contato com o Gerente Comercial!";
                    }

                    #endregion
                }

                #endregion
            }
            else
            {
                retorno = "Data incorreta!";
            }

            return Json(retorno);
        }

        [HttpPost]
        public ActionResult CarregaPrecoTabelaPreco(string id, string dataI, string dataF, string qtde)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            decimal valor = 0;
            string codigoCliente = Session["selectedCustomer"].ToString();
            DateTime dataInicial = Convert.ToDateTime(dataI);
            DateTime dataFinal = Convert.ToDateTime(dataF);
            string condPag = "";
            if (Session["condicaoPagamentoPV"] != null) 
                condPag = Session["condicaoPagamentoPV"].ToString();
            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
            string empresa = "";
            if (Session["login"].ToString().Contains("@"))
                empresa = Session["empresa"].ToString();
            else
                empresa = Session["empresa"].ToString().Substring(0, 2);

            #region Carrega Qtde Mesma Data

            int idItemSelecionado = Convert.ToInt32(Session["idItemSelecionado"].ToString());
            int qtdTotalMesmaData = Convert.ToInt32(qtde);
            if (listItensPV.Count > 0)
            {
                Item_Pedido_Venda itemPV = listItensPV
                     .Where(w => w.DataEntregaInicial == dataInicial
                        && w.Sequencia != idItemSelecionado).FirstOrDefault();

                if (itemPV != null)
                {
                    qtdTotalMesmaData = qtdTotalMesmaData + itemPV.QtdeLiquida;
                }
            }

            #endregion

            #region Verifica se foi importado no CHIC. Se foi, enviará o valor -1.

            bool importadoCHIC = false;
            foreach (var item in listItensPV)
            {
                if ((item.OrderNoCHIC != null && item.OrderNoCHIC != "")
                    ||
                    (item.OrderNoCHICReposicao != null && item.OrderNoCHICReposicao != ""))
                    importadoCHIC = true;
            }

            #endregion

            if (importadoCHIC)
                valor = -1;
            else
                valor = CalculaValorLinhagemTabelaPrecoNovoPedido(codigoCliente, id, dataInicial, dataFinal,
                    condPag, listItensPV, empresa, qtdTotalMesmaData);

            int casasDecimais = 2;
            if (id.Contains("Ovos")) casasDecimais = 4;

            return Json(Math.Round(valor, casasDecimais).ToString().Replace(".", ","));
        }

        [HttpPost]
        public ActionResult CarregaItensPV()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            var listaItensSession = (List<Item_Pedido_Venda>)Session["ItensPVList"];
            var retornoLista = listaItensSession.Where(w => w.QtdeLiquida > 0).Count();

            return Json(retornoLista);
        }

        #endregion

        #region Passo 03 - Vacinas

        [HttpPost]
        public ActionResult AtualizaVacinaPrimaria(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            Session["vacinaPrimariaPV"] = id;
            AtualizaVacinaSelecionada(id);

            Session["bonificaVacPrimPV"] = false;
            Session["clienteVacPrimPV"] = false;

            Session["VacinasSecundariaPVList"] = new List<Vacinas_Secundaria_Pedido_Venda>();
            Session["VacinasSecundariaItemPVListExibe"] = new List<Vacinas_Secundaria_Pedido_Venda>();
            Session["VacinasSecundariaItemPVList"] = new List<Vacinas_Secundaria_Pedido_Venda>();

            Session["boubaAviariaPV"] = false;
            Session["boubaZoetisPV"] = false;
            Session["coccidiosePV"] = false;
            Session["gumboroPV"] = false;
            Session["laringoClientePV"] = false;
            Session["laringoIncubatorioPV"] = false;
            Session["newcastlePV"] = false;
            Session["salmonellaPV"] = false;
            Session["vectormuneFPMG"] = false;
            Session["magniplex"] = false;
            Session["livacoxQ"] = false;
            Session["vectormuneFPLT"] = false;
            Session["innovaxNDIBD"] = false;

            Session["bonificaCoccidiosePV"] = false;
            Session["bonificaLaringoIncubatorioPV"] = false;
            Session["bonificaNewcastlePV"] = false;
            Session["bonificaVectormuneFPMGPV"] = false;
            Session["bonificaMagniplex"] = false;
            Session["bonificaVectormuneFPLT"] = false;
            Session["bonificaInnovaxNDIBD"] = false;

            Session["clienteCoccidiosePV"] = false;
            Session["clienteLaringoIncubatorioPV"] = false;
            Session["clienteNewcastlePV"] = false;
            Session["clienteVectormuneFPMGPV"] = false;
            Session["clienteMagniplex"] = false;
            Session["clienteVectormuneFPLT"] = false;
            Session["clienteInnovaxNDIBD"] = false;

            Session["disabledBoubaAviariaPV"] = true;
            Session["disabledBoubaZoetisPV"] = true;
            Session["disabledCoccidiosePV"] = true;
            Session["disabledGumboroPV"] = true;
            Session["disabledLaringoClientePV"] = true;
            Session["disabledLaringoIncubatorioPV"] = true;
            Session["disabledNewcastlePV"] = true;
            Session["disabledSalmonellaPV"] = true;
            Session["disabledVectormuneFPMG"] = true;
            Session["disabledMagniplex"] = true;
            Session["disabledLivacoxQ"] = true;
            Session["disabledVectormuneFPLT"] = true;
            Session["disabledInnovaxNDIBD"] = true;

            string empStr = Session["empresa"].ToString().Substring(0, 2);
            
            List<string> listaNaoPode = new List<string>();

            var listaSecundaria = apoloStatic.PRODUTO
                    .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                        && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                            && n.GrpProdCod == "041" && n.SubGrpProdCod == "042")
                        && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(g => g.ProdCodEstr == w.ProdCodEstr
                            && g.GrpProdCod == "042" && g.SubGrpProdCod == empStr)
                            && a.ProdCodEstr == id))
                    .ToList();

            foreach (var item in listaSecundaria)
            {
                AtualizaSessionDisabledVacinasSecundarias(item.ProdCodEstr, false);
                listaNaoPode.Add(item.ProdCodEstr);
            }

            CalculaValoresVacinasServicosPV();
            AtualizaValorTotalItens();

            return Json(listaNaoPode);
        }

        [HttpPost]
        public ActionResult CarregasVacinasSecundarias(string id, string chamada)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            bool todasVacinas = (MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaVisualizaTodasVacinas",
                (System.Collections.ArrayList)Session["Direitos"]));

            List<VacinaSecundaria> listaVacSec = new List<VacinaSecundaria>();

            if (id != null)
            {
                Session["vacinaPrimariaPV"] = id;
                AtualizaVacinaSelecionada(id);

                Session["bonificaVacPrimPV"] = false;
                Session["clienteVacPrimPV"] = false;

                if (chamada == "trocaVacinaPrimaria")
                {
                    Session["VacinasSecundariaPVList"] = new List<Vacinas_Secundaria_Pedido_Venda>();
                    Session["VacinasSecundariaItemPVListExibe"] = new List<Vacinas_Secundaria_Pedido_Venda>();
                    Session["VacinasSecundariaItemPVList"] = new List<Vacinas_Secundaria_Pedido_Venda>();
                }

                var listaVacinasSecundariaPV = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                string empStr = Session["empresa"].ToString().Substring(0, 2);
                int idPedidoVenda = Convert.ToInt32(Session["idSelecionado"].ToString());
                HLBAPPEntities hlbappSession = new HLBAPPEntities();
                Pedido_Venda pv = hlbappSession.Pedido_Venda.Where(w => w.ID == idPedidoVenda).FirstOrDefault();
                if (pv != null) empStr = pv.Empresa;

                //var listaSecundaria = apoloStatic.PRODUTO
                //        .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                //            && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                //                && n.GrpProdCod == "041" && n.SubGrpProdCod == "042")
                //            && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(g => g.ProdCodEstr == w.ProdCodEstr
                //                && g.GrpProdCod == "042" && g.SubGrpProdCod == empStr)
                //                && a.ProdCodEstr == id))
                //        .ToList();

                var listaSecundaria = apoloStatic.PRODUTO
                        .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                            && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.FicTecProdCodEstr
                                && n.GrpProdCod == "041" && n.SubGrpProdCod == "043")
                            && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(g => g.ProdCodEstr == w.ProdCodEstr
                                && g.GrpProdCod == "042" && (g.SubGrpProdCod == empStr || todasVacinas))
                                && a.ProdCodEstr == id))
                        .ToList();

                foreach (var item in listaSecundaria)
                {
                    //AtualizaSessionDisabledVacinasSecundarias(item.ProdCodEstr, false);
                    Vacinas_Secundaria_Pedido_Venda vacSecPV = listaVacinasSecundariaPV
                        .Where(w => w.ProdCodEstr == item.ProdCodEstr).FirstOrDefault();

                    VacinaSecundaria vacSec = new VacinaSecundaria();
                    vacSec.CodigoVacinaApolo = item.ProdCodEstr;
                    vacSec.NomeComercialVacina = item.ProdNomeAlt1;
                    vacSec.Bonificacao = false;
                    vacSec.ClienteEnvia = false;
                    vacSec.ExistePV = false;
                    decimal valorVacina = CarregaValorVacina(vacSec.CodigoVacinaApolo);
                    if (valorVacina > 0)
                        vacSec.Preco = "R$ " + String.Format("{0:N4}", valorVacina);
                    else
                        vacSec.Preco = "";
                    if (vacSecPV != null)
                    {
                        vacSec.ExistePV = true;
                        if (vacSecPV.Bonificada == 1)
                            vacSec.Bonificacao = true;
                        else if (vacSecPV.Bonificada == 2)
                            vacSec.ClienteEnvia = true;
                    }
                    else
                    {
                        vacSec.ExistePV = CarregaVacinaSelecionadaConfigCliente(vacSec.CodigoVacinaApolo);
                    }

                    listaVacSec.Add(vacSec);
                }

                CalculaValoresVacinasServicosPV();
                AtualizaValorTotalItens();
            }

            return Json(listaVacSec.OrderBy(o => o.NomeComercialVacina).ToList());
        }

        public void AtualizaSessionCheckedVacinasSecundarias(string vacinaSec, bool check)
        {
            if (vacinaSec.Equals("003.006.074"))
                Session["boubaAviariaPV"] = check;

            if (vacinaSec.Equals("003.006.050"))
                Session["boubaZoetisPV"] = check;

            if (vacinaSec.Equals("003.006.060"))
                Session["coccidiosePV"] = check;

            if (vacinaSec.Equals("003.006.004"))
                Session["gumboroPV"] = check;

            if (vacinaSec.Equals("003.006.081"))
                Session["laringoClientePV"] = check;

            if (vacinaSec.Equals("003.006.064"))
                Session["laringoIncubatorioPV"] = check;

            if (vacinaSec.Equals("003.006.098"))
                Session["newcastlePV"] = check;

            if (vacinaSec.Equals("003.006.082"))
                Session["salmonellaPV"] = check;

            if (vacinaSec.Equals("003.006.104"))
                Session["vectormuneFPMGPV"] = check;

            if (vacinaSec.Equals("003.006.110"))
                Session["magniplex"] = check;

            if (vacinaSec.Equals("003.006.028"))
                Session["livacoxQ"] = check;

            if (vacinaSec.Equals("003.006.139"))
                Session["vectormuneFPLT"] = check;

            if (vacinaSec.Equals("003.006.140"))
                Session["innovaxNDIBD"] = check;
        }

        public void AtualizaSessionCheckedBonificaVacinasSecundarias(string vacinaSec, bool check)
        {
            if (vacinaSec.Equals("003.006.060"))
                Session["bonificaCoccidiosePV"] = check;

            if (vacinaSec.Equals("003.006.064"))
                Session["bonificaLaringoIncubatorioPV"] = check;

            if (vacinaSec.Equals("003.006.098"))
                Session["bonificaNewcastlePV"] = check;

            if (vacinaSec.Equals("003.006.104"))
                Session["bonificaVectormuneFPMGPV"] = check;

            if (vacinaSec.Equals("003.006.110"))
                Session["bonificaMagniplex"] = check;

            if (vacinaSec.Equals("003.006.139"))
                Session["bonificaVectormuneFPLT"] = check;
            
            if (vacinaSec.Equals("003.006.140"))
                Session["bonificaInnovaxNDIBD"] = check;
        }

        public void AtualizaSessionCheckedClienteVacinasSecundarias(string vacinaSec, bool check)
        {
            if (vacinaSec.Equals("003.006.060"))
                Session["clienteCoccidiosePV"] = check;

            if (vacinaSec.Equals("003.006.064"))
                Session["clienteLaringoIncubatorioPV"] = check;

            if (vacinaSec.Equals("003.006.098"))
                Session["clienteNewcastlePV"] = check;

            if (vacinaSec.Equals("003.006.104"))
                Session["clienteVectormuneFPMGPV"] = check;

            if (vacinaSec.Equals("003.006.110"))
                Session["clienteMagniplex"] = check;

            if (vacinaSec.Equals("003.006.139"))
                Session["clienteVectormuneFPLT"] = check;

            if (vacinaSec.Equals("003.006.140"))
                Session["clienteInnovaxNDIBD"] = check;
        }

        public void AtualizaSessionDisabledVacinasSecundarias(string vacinaSec, bool disabled)
        {
            if (vacinaSec.Equals("003.006.074"))
                Session["disabledBoubaAviariaPV"] = disabled;

            if (vacinaSec.Equals("003.006.050"))
                Session["disabledBoubaZoetisPV"] = disabled;

            if (vacinaSec.Equals("003.006.060"))
                Session["disabledCoccidiosePV"] = disabled;

            if (vacinaSec.Equals("003.006.004"))
                Session["disabledGumboroPV"] = disabled;

            if (vacinaSec.Equals("003.006.081"))
            {
                string participaBolsao = Session["clienteParticipaBolsao"].ToString();
                if (participaBolsao != "Sim") disabled = true;
                Session["disabledLaringoClientePV"] = disabled;
            }

            if (vacinaSec.Equals("003.006.064"))
            {
                /***
                 * 25/01/2019 - Retirado bloqueio da vacina de laringo do incubatorio de acordo
                 * com o chamado do Fluig nº 780.
                 ****/
                //string participaBolsao = Session["clienteParticipaBolsao"].ToString();
                //if (participaBolsao != "Sim") disabled = true;
                Session["disabledLaringoIncubatorioPV"] = disabled;
            }

            if (vacinaSec.Equals("003.006.098"))
                Session["disabledNewcastlePV"] = disabled;

            if (vacinaSec.Equals("003.006.082"))
                Session["disabledSalmonellaPV"] = disabled;

            if (vacinaSec.Equals("003.006.104"))
                Session["disabledVectormuneFPMG"] = disabled;

            if (vacinaSec.Equals("003.006.110"))
                Session["disabledMagniplex"] = disabled;

            if (vacinaSec.Equals("003.006.028"))
                Session["disabledLivacoxQ"] = disabled;

            if (vacinaSec.Equals("003.006.139"))
                Session["disabledVectormuneFPLT"] = disabled;

            if (vacinaSec.Equals("003.006.140"))
                Session["disabledInnovaxNDIBD"] = disabled;
        }

        public decimal CarregaValorVacina(string codigoVacina)
        {
            decimal valorVacina = 0;

            #region Dados para calculo do preço da vacina

            bdApoloEntities apoloSession = new bdApoloEntities();
            string vacina = "";
            PRODUTO vacinaObject = apoloSession.PRODUTO
                .Where(w => w.ProdCodEstr == codigoVacina)
                .FirstOrDefault();
            if (vacinaObject != null) vacina = vacinaObject.ProdNomeAlt2;
            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
            string empresa = "";
            if (Session["login"].ToString().Contains("@"))
                empresa = Session["empresa"].ToString();
            else
            {
                //empresa = Session["empresa"].ToString().Substring(0, 2);
                var codigoVendedor = Session["vendedorPV"].ToString();
                var codVendFormat = (codigoVendedor.Length == 7 ? codigoVendedor : "0" + codigoVendedor);
                var vendedorObj = apoloSession.VU_Vendedores
                    .Where(w => w.VendCod == codVendFormat).FirstOrDefault();
                empresa = vendedorObj.CodigoCHIC;
            }
            DateTime dataInicial = DateTime.Today;
            DateTime dataFinal = DateTime.Today;
            if (listItensPV.Count > 0)
            {
                dataInicial = listItensPV.Min(m => m.DataEntregaInicial);
                dataFinal = listItensPV.Min(m => m.DataEntregaFinal);
            }

            string codigoCliente = Session["selectedCustomer"].ToString();

            #endregion

            valorVacina = CalculaValoresVacinasServicosNovoPV(vacina, dataInicial, dataFinal,
                empresa, "Vacina", codigoCliente);

            return valorVacina;
        }

        public bool CarregaVacinaSelecionadaConfigCliente(string codigoVacina)
        {
            bool eSelecionada = false;

            #region Dados para calculo do preço da vacina

            bdApoloEntities apoloSession = new bdApoloEntities();
            string vacina = "";
            PRODUTO vacinaObject = apoloSession.PRODUTO
                .Where(w => w.ProdCodEstr == codigoVacina)
                .FirstOrDefault();
            if (vacinaObject != null) vacina = vacinaObject.ProdNomeAlt2;
            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
            string empresa = "";
            if (Session["login"].ToString().Contains("@"))
                empresa = Session["empresa"].ToString();
            else
                empresa = Session["empresa"].ToString().Substring(0, 2);
            DateTime dataInicial = DateTime.Today;
            DateTime dataFinal = DateTime.Today;
            if (listItensPV.Count > 0)
            {
                dataInicial = listItensPV.Min(m => m.DataEntregaInicial);
                dataFinal = listItensPV.Min(m => m.DataEntregaFinal);
            }

            string codigoCliente = Session["selectedCustomer"].ToString();

            #endregion

            eSelecionada = eSelecionadaVacinasServicosNovoPV(vacina, empresa, "Vacina", codigoCliente);

            return eSelecionada;
        }

        [HttpPost]
        public ActionResult CarregaPrecoVacinaPrimaria(string codigoVacina)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            decimal valorVacina = 0;

            valorVacina = CarregaValorVacina(codigoVacina);

            return Json(String.Format("{0:N2}", valorVacina));
        }

        [HttpPost]
        public ActionResult AtualizaBonificaVacinaPrimaria(bool bonificaCheck)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["bonificaVacPrimPV"] = bonificaCheck;
            if (bonificaCheck) Session["clienteVacPrimPV"] = false;

            return Json("");
        }

        [HttpPost]
        public ActionResult AtualizaClienteVacinaPrimaria(bool clienteCheck)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["clienteVacPrimPV"] = clienteCheck;
            if (clienteCheck) Session["bonificaVacPrimPV"] = false;

            return Json("");
        }

        [HttpPost]
        public ActionResult VerificaVacinaSecundaria(string id, bool check)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            List<string> listaNaoPode = new List<string>();

            var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

            if (check)
            {
                AtualizaSessionCheckedVacinasSecundarias(id, true);

                if (listaVacSec.Where(w => w.ProdCodEstr == id).Count() == 0)
                {
                    int sequencia = 0;
                    if (listaVacSec.Count > 0)
                        sequencia = listaVacSec.Max(m => m.Sequencia);

                    Vacinas_Secundaria_Pedido_Venda vacSec = new Vacinas_Secundaria_Pedido_Venda();

                    vacSec.Sequencia = sequencia + 1;
                    vacSec.ProdCodEstr = id;

                    #region Dados para calculo do preço da vacina

                    string vacina = "";
                    PRODUTO vacinaObject = apoloStatic.PRODUTO
                        .Where(w => w.ProdCodEstr == vacSec.ProdCodEstr)
                        .FirstOrDefault();
                    if (vacinaObject != null) vacina = vacinaObject.ProdNomeAlt2;
                    List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                    string empresa = "";
                    if (Session["login"].ToString().Contains("@"))
                        empresa = Session["empresa"].ToString();
                    else
                        empresa = Session["empresa"].ToString().Substring(0, 2);
                    DateTime dataInicial = DateTime.Today;
                    DateTime dataFinal = DateTime.Today;
                    if (listItensPV.Count > 0)
                    {
                        dataInicial = listItensPV.Min(m => m.DataEntregaInicial);
                        dataFinal = listItensPV.Min(m => m.DataEntregaFinal);
                    }

                    string codigoCliente = Session["selectedCustomer"].ToString();

                    #endregion

                    vacSec.Bonificada = 0;
                    vacSec.PrecoUnitario = CalculaValoresVacinasServicosNovoPV(vacina, dataInicial, dataFinal,
                        empresa, "Vacina", codigoCliente);

                    int seqItemPV = Convert.ToInt32(Session["idItemSelecionado"]);
                    vacSec.SeqItemPedVenda = seqItemPV;

                    listaVacSec.Add(vacSec);

                    Session["VacinasSecundariaPVList"] = listaVacSec;
                }
            }
            else
            {
                AtualizaSessionCheckedVacinasSecundarias(id, false);

                //List<Vacinas_Secundaria_Pedido_Venda> listaDelete = null;
                //if (Session["ItensSecVacListDelete"] != null)
                //    listaDelete = (List<Vacinas_Secundaria_Pedido_Venda>)Session["ItensSecVacListDelete"];
                //else
                //    listaDelete = new List<Vacinas_Secundaria_Pedido_Venda>();

                Vacinas_Secundaria_Pedido_Venda ipv = listaVacSec
                    .Where(w => w.ProdCodEstr == id).FirstOrDefault();
                //listaDelete.Add(ipv);

                //listaVacSec.RemoveAll(w => w.ProdCodEstr == id);
                listaVacSec.Remove(ipv);

                Session["VacinasSecundariaPVList"] = listaVacSec;
                //Session["ItensSecVacListDelete"] = listaDelete;
            }

            string vacinaPrimaria = Session["vacinaPrimariaPV"].ToString();

            string empStr = Session["empresa"].ToString().Substring(0, 2);
            int idPedidoVenda = Convert.ToInt32(Session["idSelecionado"].ToString());
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            Pedido_Venda pv = hlbappSession.Pedido_Venda.Where(w => w.ID == idPedidoVenda).FirstOrDefault();
            if (pv != null) empStr = pv.Empresa;

            var listaFilhosVacSec = apoloStatic.PRODUTO
                .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                    && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                        && n.GrpProdCod == "041" && n.SubGrpProdCod == "043")
                        && a.ProdCodEstr == id))
                .ToList();

            var listaPaiVacSec = apoloStatic.PRODUTO
                .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.ProdCodEstr == w.ProdCodEstr
                    && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                        && n.GrpProdCod == "041" && n.SubGrpProdCod == "043")
                        && a.FicTecProdCodEstr == id))
                .ToList();

            if (listaFilhosVacSec.Count > 0)
            {
                foreach (var itemFilho in listaFilhosVacSec)
                {
                    var listaSecundaria = apoloStatic.PRODUTO
                        .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                            && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                                && n.GrpProdCod == "041" && n.SubGrpProdCod == "042")
                            && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(g => g.ProdCodEstr == w.ProdCodEstr
                                && g.GrpProdCod == "042" && g.SubGrpProdCod == empStr)
                                && a.ProdCodEstr == vacinaPrimaria)
                            && w.ProdCodEstr == itemFilho.ProdCodEstr)
                        .ToList();

                    if (listaSecundaria.Count > 0)
                    {
                        AtualizaSessionDisabledVacinasSecundarias(itemFilho.ProdCodEstr, check);
                        listaNaoPode.Add(itemFilho.ProdCodEstr);
                    }
                }
            }

            if (listaPaiVacSec.Count > 0)
            {
                foreach (var itemPai in listaPaiVacSec)
                {
                    var listaSecundaria = apoloStatic.PRODUTO
                        .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                            && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                                && n.GrpProdCod == "041" && n.SubGrpProdCod == "042")
                            && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(g => g.ProdCodEstr == w.ProdCodEstr
                                && g.GrpProdCod == "042" && g.SubGrpProdCod == empStr)
                                && a.ProdCodEstr == vacinaPrimaria)
                            && w.ProdCodEstr == itemPai.ProdCodEstr)
                        .ToList();

                    if (listaSecundaria.Count > 0)
                    {
                        AtualizaSessionDisabledVacinasSecundarias(itemPai.ProdCodEstr, check);
                        listaNaoPode.Add(itemPai.ProdCodEstr);
                    }
                }
            }

            CalculaValoresVacinasServicosPV();
            AtualizaValorTotalItens();

            return Json(listaNaoPode);
        }

        [HttpPost]
        public ActionResult VerificaBonificacaoVacinaSecundaria(string id, bool check, bool bonificaCheck)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

            Vacinas_Secundaria_Pedido_Venda ipv = listaVacSec
                .Where(w => w.ProdCodEstr == id).FirstOrDefault();

            AtualizaSessionCheckedBonificaVacinasSecundarias(id, bonificaCheck);

            if (!bonificaCheck)
            {
                #region Dados para calculo do preço da vacina

                string vacina = "";
                PRODUTO vacinaObject = apoloStatic.PRODUTO
                    .Where(w => w.ProdCodEstr == ipv.ProdCodEstr)
                    .FirstOrDefault();
                if (vacinaObject != null) vacina = vacinaObject.ProdNomeAlt2;
                List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                string empresa = "";
                if (Session["login"].ToString().Contains("@"))
                    empresa = Session["empresa"].ToString();
                else
                    empresa = Session["empresa"].ToString().Substring(0, 2);
                DateTime dataInicial = DateTime.Today;
                DateTime dataFinal = DateTime.Today;
                if (listItensPV.Count > 0)
                {
                    dataInicial = listItensPV.Min(m => m.DataEntregaInicial);
                    dataFinal = listItensPV.Min(m => m.DataEntregaFinal);
                }

                string codigoCliente = Session["selectedCustomer"].ToString();

                #endregion

                ipv.Bonificada = 0;
                ipv.PrecoUnitario = CalculaValoresVacinasServicosNovoPV(vacina, dataInicial, dataFinal,
                    empresa, "Vacina", codigoCliente);
            }
            else
            {
                ipv.Bonificada = 1;
                ipv.PrecoUnitario = 0;
            }

            Session["VacinasSecundariaPVList"] = listaVacSec;

            return Json("");
        }

        [HttpPost]
        public ActionResult VerificaClienteVacinaSecundaria(string id, bool check, bool clienteCheck)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

            Vacinas_Secundaria_Pedido_Venda ipv = listaVacSec
                .Where(w => w.ProdCodEstr == id).FirstOrDefault();

            AtualizaSessionCheckedClienteVacinasSecundarias(id, clienteCheck);

            if (!clienteCheck)
            {
                #region Dados para calculo do preço da vacina

                string vacina = "";
                PRODUTO vacinaObject = apoloStatic.PRODUTO
                    .Where(w => w.ProdCodEstr == ipv.ProdCodEstr)
                    .FirstOrDefault();
                if (vacinaObject != null) vacina = vacinaObject.ProdNomeAlt2;
                List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                string empresa = "";
                if (Session["login"].ToString().Contains("@"))
                    empresa = Session["empresa"].ToString();
                else
                    empresa = Session["empresa"].ToString().Substring(0, 2);
                DateTime dataInicial = DateTime.Today;
                DateTime dataFinal = DateTime.Today;
                if (listItensPV.Count > 0)
                {
                    dataInicial = listItensPV.Min(m => m.DataEntregaInicial);
                    dataFinal = listItensPV.Min(m => m.DataEntregaFinal);
                }

                string codigoCliente = Session["selectedCustomer"].ToString();

                #endregion

                ipv.Bonificada = 0;
                ipv.PrecoUnitario = CalculaValoresVacinasServicosNovoPV(vacina, dataInicial, dataFinal,
                    empresa, "Vacina", codigoCliente);
            }
            else
            {
                ipv.Bonificada = 2;
                ipv.PrecoUnitario = 0;
            }

            Session["VacinasSecundariaPVList"] = listaVacSec;

            return Json("");
        }

        #endregion

        #region Passo 04 - Outras Informações

        [HttpPost]
        public ActionResult AtualizaTratInfra(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["tratamentoInfravermelhoPV"] = Convert.ToBoolean(id);

            if (!Convert.ToBoolean(id))
            {
                Session["qtdTratamentoInfravermelhoPV"] = "";
                Session["bonificaServicoPV"] = false;
            }
            else
            {
                Session["qtdTratamentoInfravermelhoPV"] = 100;
            }

            return Json("");
        }

        [HttpPost]
        public ActionResult AtualizaQtdTratVermelho(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            string msg = "";

            if (id == "")
            {
                msg = "Como a opção 'Tratamento Infravermelho' está marcada, é necessário informar uma Quantidade";
            }
            else
            {
                float result = 0;
                if (float.TryParse(id, out result))
                {
                    decimal qtdTIV = Convert.ToDecimal(id);

                    if ((qtdTIV < 1) || (qtdTIV > 100))
                    {
                        msg = "A quantidade deve de 1% a 100%!";
                    }
                    else
                    {
                        //List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                        //int? qtdTotal = listItensPV.Sum(s => s.QtdeLiquida + s.QtdeBonificada);
                        //if (qtdTIV > qtdTotal)
                        //    msg = "A quantidade p/ Tratamento é maior que a solicitada! (Total Solicitado (Líquido + Bonificado): " + Convert.ToInt32(qtdTotal) + ")";
                        //else
                        //    Session["qtdTratamentoInfravermelhoPV"] = qtdTIV;
                        Session["qtdTratamentoInfravermelhoPV"] = qtdTIV;
                    }
                }
                else
                {
                    msg = "Somente números são permitidos!";
                }
            }

            return Json(msg);
        }

        [HttpPost]
        public ActionResult AtualizaBonificaServico(bool bonificaCheck)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["bonificaServicoPV"] = bonificaCheck;

            return Json("");
        }

        [HttpPost]
        public ActionResult AtualizaOvosBrasil(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["ovosBrasilPV"] = Convert.ToBoolean(id);

            return Json("");
        }

        [HttpPost]
        public ActionResult AtualizaCondPag(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["condicaoPagamentoPV"] = id;
            AtualizaCondPagSelecionado(id);

            return Json("");
        }

        [HttpPost]
        public ActionResult FiltraCondicaoPagamento(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            id = id.ToUpper();

            Session["filtroCondPagPV"] = id;

            List<SelectListItem> ddlPayCodes = CarregaListaCondPag();

            List<SelectListItem> listaFiltro = ddlPayCodes
                .Where(w => w.Text.Contains(id))
                .OrderBy(o => o.Text)
                .ToList();

            Session["condicaoPagamentoPV"] = listaFiltro.FirstOrDefault().Value;

            Session["ListaCondicaoPagamento"] = listaFiltro;

            return Json(listaFiltro);
        }

        [HttpPost]
        public ActionResult AtualizaObservacao(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["observacaoPV"] = id;

            return Json("");
        }

        [HttpPost]
        public ActionResult AtualizaVendedor(string id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["vendedorPV"] = id;
            AtualizaVendedorSelecionado(id);

            return Json("");
        }

        #endregion

        #endregion

        [HttpPost]
        public ActionResult VerificaMascaraTIDiferenteProtocolo(bool check)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["mascaraTIDiferenteProtocolo"] = check;

            if (!check) Session["mascaraTI"] = "";

            return Json("");
        }

        [HttpPost]
        public ActionResult AtualizaMascaraTI(string mascaraTI)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["mascaraTI"] = mascaraTI;
            AtualizaDDL(Session["mascaraTI"].ToString(), (List<SelectListItem>)Session["ListaMascaraTI"]);

            return Json("");
        }

        [HttpPost]
        public ActionResult AtualizaSession(string valor, string campo, string tipo)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            string msgRetorno = "";

            HLBAPPEntities bd = new HLBAPPEntities();

            if (tipo == "List")
            {
                AtualizaDDL(valor, (List<SelectListItem>)Session[campo]);
                if (campo.Contains("ListaEmpresas"))
                {
                    //List<SelectListItem> items = new List<SelectListItem>();
                    //var listaLinhagens = bd.Tabela_Precos
                    //    .Where(w => w.Empresa == valor && w.Tipo == "Faturamento"
                    //        && w.Produto.Contains("Ovos"))
                    //    .GroupBy(g => new
                    //    {
                    //        g.Produto
                    //    })
                    //    .Select(s => new
                    //    {
                    //        s.Key.Produto
                    //    })
                    //    .OrderBy(o => o.Produto)
                    //    .ToList();

                    //foreach (var item in listaLinhagens)
                    //{
                    //    items.Add(new SelectListItem { Text = item.Produto, Value = item.Produto, Selected = false });
                    //}

                    DateTime dataTransferencia = Convert.ToDateTime(Session["dataTransferencia"]);
                    var items = CarregaLinhagens(dataTransferencia, valor, true);

                    List<List<SelectListItem>> listaRetorno = new List<List<SelectListItem>>();
                    listaRetorno.Add(items);

                    if (campo.Contains("Origem"))
                        Session["ListaLinhagemOrigem"] = items;
                    else
                        Session["ListaLinhagemDestino"] = items;

                    #region Atualiza a Lista da empresa de origem / destino para não duplicar

                    if (campo.Contains("Origem"))
                    {
                        var listaEmpresas = CarregaEmpresas(false);
                        List<SelectListItem> listaEmpresasAtualizada = new List<SelectListItem>();
                        foreach (var item in listaEmpresas)
                        {
                            if (item.Value != valor) listaEmpresasAtualizada.Add(item);
                        }

                        if (campo.Contains("Origem"))
                            Session["ListaEmpresasDestino"] = listaEmpresasAtualizada;
                        else
                            Session["ListaEmpresasOrigem"] = listaEmpresasAtualizada;

                        listaRetorno.Add(listaEmpresasAtualizada);
                    }

                    #endregion

                    return Json(listaRetorno);
                }
                else
                    return Json(msgRetorno);
            }
            else
            {
                Session[campo] = valor;
                return Json(msgRetorno);
            }
        }

        #endregion

        #region Calculate Methods

        public void CalculaValoresPV()
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            decimal valorVacinasServicos = 0;
            string cliente = Session["selectedCustomer"].ToString();
            //string empresa = Session["empresa"].ToString();
            string empresa = Session["empresa"].ToString().Substring(0,2);
            string condPag = "";
            if (Session["condicaoPagamentoPV"].ToString().Equals("PAGTO ANTECIPADO"))
                condPag = Session["condicaoPagamentoPV"].ToString();
            else
                condPag = "Faturamento";

            ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == cliente).FirstOrDefault();
            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE.Where(w => w.CidCod == entidade.CidCod).FirstOrDefault();
            UNID_FEDERACAO uf = apoloStatic.UNID_FEDERACAO.Where(w => w.UfSigla == cidade.UfSigla
                && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();

            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            string vacinaPrimaria = Session["vacinaPrimariaPV"].ToString();
            PRODUTO vacinaPrimariaObject = apoloStatic.PRODUTO
                    .Where(w => w.ProdCodEstr == vacinaPrimaria)
                    .FirstOrDefault();

            if (vacinaPrimariaObject == null)
                vacinaPrimariaObject = new PRODUTO();

            foreach (var item in listItensPV)
            {
                bool confirmacaoEnviada = false;
                if (item.OrderNoCHIC != null)
                {
                    int_commMTableAdapter iTA = new int_commMTableAdapter();
                    CHICMobileDataSet.int_commMDataTable iDT = new CHICMobileDataSet.int_commMDataTable();
                    iTA.FillByOrderNo(iDT, item.OrderNoCHIC);

                    if (iDT.Count > 0)
                    {
                        confirmacaoEnviada = iDT[0].confenvi;
                    }
                }

                if (!confirmacaoEnviada)
                {
                    Tabela_Precos precoLinhagem = hlbappSession.Tabela_Precos
                        .Where(w => w.Tipo == condPag && w.Produto == item.ProdCodEstr
                            && (w.Regiao == uf.UfSigla || w.Regiao == "Todas")
                            && w.Empresa == empresa
                            && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                        .FirstOrDefault();

                    if (precoLinhagem == null)
                    {
                        precoLinhagem = hlbappSession.Tabela_Precos
                            .Where(w => w.Tipo == condPag && w.Produto == item.ProdCodEstr
                                && w.Regiao == uf.UfRegGeog 
                                && w.Empresa == empresa
                                && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                            .FirstOrDefault();
                    }

                    if (precoLinhagem != null)
                    {
                        //empresa = precoLinhagem.Empresa;

                        int qtdTotalMesmaData = 0;
                        //if (empresa == "PL")
                        //    qtdTotalMesmaData = listItensPV
                        //         .Where(w => w.DataEntregaInicial == item.DataEntregaInicial).FirstOrDefault().QtdeLiquida;
                        //else
                        qtdTotalMesmaData = listItensPV
                                .Where(w => w.DataEntregaInicial == item.DataEntregaInicial)
                                .Sum(s => s.QtdeLiquida);

                        if (qtdTotalMesmaData < 5000)
                            item.PrecoUnitario = precoLinhagem.ValorMenor5000Aves;
                        else
                            item.PrecoUnitario = precoLinhagem.ValorNormal;
                    }

                    Tabela_Precos precoVacinaPrimaria = hlbappSession.Tabela_Precos
                        .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaPrimariaObject.ProdNomeAlt2
                            && w.Regiao == "Todas" && w.Empresa == empresa
                            && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                        .FirstOrDefault();

                    if (precoVacinaPrimaria != null)
                    {
                        decimal? valorVacinaPrimariaBonificacao =
                            (item.PercBonificacao / 100) * precoVacinaPrimaria.ValorNormal;
                        item.PrecoUnitario = item.PrecoUnitario
                            + precoVacinaPrimaria.ValorNormal + valorVacinaPrimariaBonificacao;

                        valorVacinasServicos = Convert.ToDecimal(precoVacinaPrimaria.ValorNormal);
                    }

                    var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                    foreach (var itemVacSec in listaVacSec)
                    {
                        PRODUTO vacinaSecObject = apoloStatic.PRODUTO
                            .Where(w => w.ProdCodEstr == itemVacSec.ProdCodEstr)
                            .FirstOrDefault();

                        Tabela_Precos precoVacinaSec = hlbappSession.Tabela_Precos
                            .Where(w => w.Tipo == "Vacina" && w.Produto == vacinaSecObject.ProdNomeAlt2
                                && w.Regiao == "Todas" && w.Empresa == empresa
                                && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                            .FirstOrDefault();

                        if (precoVacinaSec != null)
                        {
                            decimal? valorVacinaSecBonificacao =
                                (item.PercBonificacao / 100) * precoVacinaSec.ValorNormal;
                            item.PrecoUnitario = item.PrecoUnitario
                                + precoVacinaSec.ValorNormal + valorVacinaSecBonificacao;

                            valorVacinasServicos = valorVacinasServicos + Convert.ToDecimal(precoVacinaSec.ValorNormal);
                        }
                    }

                    //if (Session["valorServicoPV"] == null)
                    //{
                    Tabela_Precos precoServico = hlbappSession.Tabela_Precos
                        .Where(w => w.Tipo == "Serviço" && w.Produto == "Tratamento Infravermelho"
                            && w.Regiao == "Todas" && w.Empresa == empresa
                            && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                        .FirstOrDefault();

                    if (precoServico != null)
                        Session["valorServicoPV"] = precoServico.ValorNormal;
                    else
                        Session["valorServicoPV"] = 0;
                    //}

                    if (Convert.ToBoolean(Session["ovosBrasilPV"]))
                    {
                        item.PrecoUnitario = item.PrecoUnitario + 0.01m;
                        valorVacinasServicos = valorVacinasServicos + 0.01m;
                    }
                }
            }

            Session["valorVacinaAntigo"] = valorVacinasServicos;
            Session["ItensPVList"] = listItensPV;
        }

        public void CalculaValoresVacinasServicosPV()
        {
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            #region Carrega Dados do Pedido

            int idPedidoVenda = Convert.ToInt32(Session["idSelecionado"].ToString());
            decimal valorVacinasServicos = 0;
            string cliente = Session["selectedCustomer"].ToString();
            var codigoVendedorApolo = "0" + Session["vendedorPV"].ToString();
            if (Session["vendedorPV"].ToString().Length == 7) codigoVendedorApolo = Session["vendedorPV"].ToString();
            var vendedor = apoloStatic.VU_Vendedores.Where(w => w.VendCod == codigoVendedorApolo).FirstOrDefault();
            string empresa = "";
            //string empresa = Session["empresa"].ToString().Substring(0, 2);
            if (vendedor != null) empresa = vendedor.CodigoCHIC;
            string condPag = "";
            if (Session["condicaoPagamentoPV"].ToString().Equals("PAGTO ANTECIPADO"))
                condPag = Session["condicaoPagamentoPV"].ToString();
            else
                condPag = "Faturamento";

            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            DateTime dataInicial = DateTime.Today;
            DateTime dataFinal = DateTime.Today;

            if (listItensPV.Count > 0)
            {
                dataInicial = listItensPV.Min(m => m.DataEntregaInicial);
                dataFinal = listItensPV.Max(m => m.DataEntregaFinal);
            }

            #endregion

            Session["precoVacinaPrimaria"] = 0;

            if (!Convert.ToBoolean(Session["bonificaVacPrimPV"]) 
                && !Convert.ToBoolean(Session["clienteVacPrimPV"]))
            {
                #region Verifica se a Vacina Primária não foi alterada para pegar o valor da tabela

                string vacinaPrimaria = "";
                if (Session["vacinaPrimariaPV"] != null) vacinaPrimaria = Session["vacinaPrimariaPV"].ToString();
                decimal precoVacinaPrimaria = 0;

                //Vacinas_Primaria_Pedido_Venda vacPrimObj = hlbappSession.Vacinas_Primaria_Pedido_Venda
                //    .Where(w => w.IDPedidoVenda == idPedidoVenda).FirstOrDefault();

                //if (vacPrimObj != null)
                //{
                //    if (vacPrimObj.ProdCodEstr == vacinaPrimaria)
                //        if (vacPrimObj.PrecoUnitario != null)
                //            precoVacinaPrimaria = Convert.ToDecimal(vacPrimObj.PrecoUnitario);
                //}

                #endregion

                #region Caso seja diferente, pegar o valor da vacina primária pela tabela de preço

                if (precoVacinaPrimaria == 0 && !Convert.ToBoolean(Session["bonificaVacPrimPV"]))
                {
                    PRODUTO vacinaPrimariaObject = apoloStatic.PRODUTO
                            .Where(w => w.ProdCodEstr == vacinaPrimaria)
                            .FirstOrDefault();

                    if (vacinaPrimariaObject == null)
                        vacinaPrimariaObject = new PRODUTO();

                    string codigoCliente = Session["selectedCustomer"].ToString();

                    precoVacinaPrimaria = CalculaValoresVacinasServicosNovoPV(vacinaPrimariaObject.ProdNomeAlt2,
                        dataInicial, dataFinal, empresa, "Vacina", codigoCliente);
                }

                #endregion

                valorVacinasServicos = precoVacinaPrimaria;
                Session["precoVacinaPrimaria"] = precoVacinaPrimaria;
            }

            #region Soma valores das vacinas secundárias

            var listaVacSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

            foreach (var itemVacSec in listaVacSec)
            {
                PRODUTO vacinaSecObject = apoloStatic.PRODUTO
                            .Where(w => w.ProdCodEstr == itemVacSec.ProdCodEstr)
                            .FirstOrDefault();

                if (itemVacSec.Bonificada == null) itemVacSec.Bonificada = 0;

                if (itemVacSec.Bonificada == 0)
                {
                    string codigoCliente = Session["selectedCustomer"].ToString();

                    decimal valorVacinaSecCalc = CalculaValoresVacinasServicosNovoPV(vacinaSecObject.ProdNomeAlt2,
                         dataInicial, dataFinal, empresa, "Vacina", codigoCliente);

                    valorVacinasServicos = valorVacinasServicos + valorVacinaSecCalc;
                    itemVacSec.PrecoUnitario = valorVacinaSecCalc;
                }
                else
                {
                    itemVacSec.PrecoUnitario = 0;
                }

                //if (itemVacSec.PrecoUnitario != null && itemVacSec.PrecoUnitario > 0)
                //{
                //    valorVacinasServicos = valorVacinasServicos + Convert.ToDecimal(itemVacSec.PrecoUnitario);
                //}
                //else
                //{
                //    if (itemVacSec.Bonificada == 0 || itemVacSec.Bonificada == null)
                //    {
                //        PRODUTO vacinaSecObject = apoloStatic.PRODUTO
                //            .Where(w => w.ProdCodEstr == itemVacSec.ProdCodEstr)
                //            .FirstOrDefault();

                //        decimal valorVacinaSecCalc = CalculaValoresVacinasServicosNovoPV(vacinaSecObject.ProdNomeAlt2,
                //             dataInicial, dataFinal, empresa, "Vacina");

                //        valorVacinasServicos = valorVacinasServicos + valorVacinaSecCalc;
                //        itemVacSec.PrecoUnitario = valorVacinaSecCalc;
                //        if (itemVacSec.Bonificada == null) itemVacSec.Bonificada = 0;
                //    }
                //}
            }

            #endregion

            #region Calcula Valor Serviço caso tenha

            if (!Convert.ToBoolean(Session["bonificaServicoPV"]))
            {
                Servicos_Pedido_Venda servObj = hlbappSession.Servicos_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == idPedidoVenda).FirstOrDefault();

                string codigoCliente = Session["selectedCustomer"].ToString();

                if (servObj != null)
                {
                    //if (servObj.PrecoUnitario != null
                    //    && ((servObj.PrecoUnitario > 0 && servObj.Bonificada == 0)
                    //        ||
                    //        (servObj.PrecoUnitario == 0 && servObj.Bonificada != 0)))
                    //{

                    Session["valorServicoPV"] = CalculaValoresVacinasServicosNovoPV("Tratamento Infravermelho",
                            dataInicial, dataFinal, empresa, "Serviço", codigoCliente);
                    if (servObj.Bonificada == null) servObj.Bonificada = 0;
                    
                    if (Convert.ToBoolean(Session["bonificaServicoPV"])) servObj.Bonificada = 1;

                    if (servObj.Bonificada != 0)
                    {
                        Session["valorServicoPV"] = 0;
                    }
                }
                else
                {
                    if (Convert.ToBoolean(Session["tratamentoInfravermelhoPV"]) && !Convert.ToBoolean(Session["bonificaServicoPV"]))
                        Session["valorServicoPV"] = CalculaValoresVacinasServicosNovoPV("Tratamento Infravermelho",
                            dataInicial, dataFinal, empresa, "Serviço", codigoCliente);
                    else
                        Session["valorServicoPV"] = 0;
                }
            }
            else
                Session["valorServicoPV"] = 0;

            if (Convert.ToBoolean(Session["ovosBrasilPV"]))
                valorVacinasServicos = valorVacinasServicos + 0.01m;

            #endregion

            Session["valorVacinaAntigo"] = valorVacinasServicos;
        }

        public void AtualizaValorTotalItens()
        {
            List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];

            decimal valorVacinas = Convert.ToDecimal(Session["valorVacinaAntigo"].ToString());
            decimal valorServico = Convert.ToDecimal(Session["valorServicoPV"].ToString());
            if (Session["qtdTratamentoInfravermelhoPV"].ToString() == "") 
                Session["qtdTratamentoInfravermelhoPV"] = 0;
            decimal percServico = Convert.ToDecimal(Session["qtdTratamentoInfravermelhoPV"].ToString());

            string codigoCliente = Session["selectedCustomer"].ToString();
            string condPag = "";
            if (Session["condicaoPagamentoPV"] != null) 
                condPag = Session["condicaoPagamentoPV"].ToString();
            string empresa = "";
            if (Session["login"].ToString().Contains("@"))
                empresa = Session["empresa"].ToString();
            else
                empresa = Session["empresa"].ToString().Substring(0, 2);

            foreach (var item in listItensPV)
            {
                #region Carrega Qtde Mesma Data

                int qtdTotalMesmaData = 0;
                if (listItensPV.Count > 0)
                {
                    Item_Pedido_Venda itemPV = listItensPV
                         .Where(w => w.DataEntregaInicial == item.DataEntregaInicial).FirstOrDefault();

                    if (itemPV != null)
                    {
                        qtdTotalMesmaData = qtdTotalMesmaData + itemPV.QtdeLiquida;
                    }
                }

                #endregion

                if (item.PrecoPinto == null || item.PrecoPinto == 0)
                    item.PrecoPinto = CalculaValorLinhagemTabelaPrecoNovoPedido(codigoCliente, item.ProdCodEstr,
                        item.DataEntregaInicial, item.DataEntregaFinal, condPag, listItensPV, empresa,
                        qtdTotalMesmaData);

                if (item.PrecoPinto != null)
                    if (item.PrecoPinto > 0)
                    {
                        //decimal valorServicoRateio = valorServico * (percServico / 100.0000m);
                        //item.PrecoUnitario = item.PrecoPinto + valorVacinas + valorServicoRateio;
                        int qtdeReposicao = 0;
                        if (item.TipoReposicao == "Acerto Comercial")
                            qtdeReposicao = Convert.ToInt32(item.QtdeReposicao);

                        item.ValorTotal = (item.QtdeLiquida * item.PrecoPinto)
                            + ((item.QtdeLiquida + item.QtdeBonificada + qtdeReposicao) * valorVacinas)
                            + (Math.Round(Convert.ToDecimal((item.QtdeLiquida + item.QtdeBonificada
                                + qtdeReposicao) 
                                * (percServico / 100.00m)),0) * valorServico);

                        int qtdeCalculoValorTotal = 1;
                        if (item.QtdeLiquida > 0)
                            qtdeCalculoValorTotal = item.QtdeLiquida;
                        else if (item.QtdeReposicao > 0)
                            qtdeCalculoValorTotal = Convert.ToInt32(item.QtdeReposicao);
                        item.PrecoUnitario = item.ValorTotal / qtdeCalculoValorTotal;
                    }

                item.Alterado = 1;
            }

            Session["ItensPVList"] = listItensPV;
        }

        public ActionResult AtualizaValores()
        {
            bool viewAll = (MvcAppHyLinedoBrasil.Controllers.AccountController
                        .GetGroup("HLBAPPM-PedidoVendaVisualizarTodosPedidos",
                        (System.Collections.ArrayList)Session["Direitos"]));

            if (!MvcAppHyLinedoBrasil.Controllers.AccountController
                .GetGroup("HLBAPPM-PedidoVendaDadosExportacao",
                (System.Collections.ArrayList)Session["Direitos"])
                || viewAll)
            {
                //CalculaValoresPV();
                CalculaValoresVacinasServicosPV();
                AtualizaValorTotalItens();
            }

            ViewBag.Mensagem = "Valores Atualizados!";

            return View("ValoresAtualizados");
        }

        public string VerificaCadastroEntidade(string entidadeSelecionada)
        {
            string retorno = "";

            bdApoloEntities apolo = new bdApoloEntities();

            ENTIDADE clienteSelecionado = apolo.ENTIDADE
                    .Where(w => w.EntCod == entidadeSelecionada).FirstOrDefault();

            Session["statusClienteSelecionado"] = clienteSelecionado.StatEntCod;

            if (clienteSelecionado.StatEntCod == "02")
            {
                return retorno = "*** NÃO É POSSÍVEL SALVAR O PEDIDO!"
                    + " CLIENTE COM PROGRAMAÇÃO BLOQUEADA... PROCURAR PROGRAMAÇÃO OU DEPTO. FINANCEIRO!";
            }

            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apolo.CIDADE
                .Where(w => w.CidCod == clienteSelecionado.CidCod).FirstOrDefault();

            string entTipoFJ = (clienteSelecionado.EntTipoFJ == null ? "" : clienteSelecionado.EntTipoFJ);
            string entRgIe = (clienteSelecionado.EntRgIe == null ? "" : clienteSelecionado.EntRgIe);
            string entAgrop = (clienteSelecionado.EntAgrop == null ? "" : clienteSelecionado.EntAgrop);
            string entAgropInsc = (clienteSelecionado.EntAgropInsc == null ? "" : clienteSelecionado.EntAgropInsc);

            if (cidade.PaisSigla.Equals("BRA"))
            {
                if (entTipoFJ.Equals("Jurídica")
                    && (entRgIe.Equals("") || entRgIe.Equals("ISENTO")
                        || entRgIe.Equals("ISENTA")))
                {
                    return retorno = "CLIENTE COM PENDÊNCIAS EM SEU CADASTRO. "
                        + "FAVOR ENTRAR EM CONTATO COM O DEPARTAMENTO COMERCIAL! VERIFICAR INSCRIÇÃO ESTADUAL!";
                }

                if (entTipoFJ.Equals("Física"))
                {
                    if (entAgrop.Equals("Não"))
                    {
                        retorno = "CLIENTE COM PENDÊNCIAS EM SEU CADASTRO. "
                            + "FAVOR ENTRAR EM CONTATO COM O DEPARTAMENTO COMERCIAL! VERIFICAR INSCRIÇÃO ESTADUAL!";
                    }
                    else if (entAgropInsc.Equals("INSENTO")
                        || entAgropInsc.Equals("INSENTA")
                        || entAgropInsc.Equals(""))
                    {
                        return retorno = "CLIENTE COM PENDÊNCIAS EM SEU CADASTRO. "
                            + "FAVOR ENTRAR EM CONTATO COM O DEPARTAMENTO COMERCIAL! VERIFICAR INSCRIÇÃO ESTADUAL!";
                    }
                }
            }

            return retorno;
        }

        public DateTime MenorDataItens(int idPedido)
        {
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            return hlbappSession.Item_Pedido_Venda
                .Where(w => w.IDPedidoVenda == idPedido
                    && w.OrderNoCHIC != "Cancelado").Min(m => m.DataEntregaInicial);
        }

        public DateTime MaiorDataItens(int idPedido)
        {
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            return hlbappSession.Item_Pedido_Venda
                .Where(w => w.IDPedidoVenda == idPedido
                    && w.OrderNoCHIC != "Cancelado").Max(m => m.DataEntregaInicial);
        }

        public decimal CalculaValorLinhagemTabelaPreco(int idPedido, string linhagem)
        {
            decimal valor = 0;

            bdApoloEntities apoloStatic = new bdApoloEntities();
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            Pedido_Venda pedVenda = hlbappSession.Pedido_Venda.Where(w => w.ID == idPedido).FirstOrDefault();

            string condPag = "";
            if (pedVenda.CondicaoPagamento.Equals("PAGTO ANTECIPADO"))
                condPag = pedVenda.CondicaoPagamento;
            else
                condPag = "Faturamento";

            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE
                .Where(w => apoloStatic.ENTIDADE.Any(a => a.CidCod == w.CidCod
                    && a.EntCod == pedVenda.CodigoCliente)).FirstOrDefault();

            UNID_FEDERACAO uf = apoloStatic
                .UNID_FEDERACAO.Where(w => w.UfSigla == cidade.UfSigla
                    && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();

            Item_Pedido_Venda item = hlbappSession.Item_Pedido_Venda
                .Where(w => w.IDPedidoVenda == idPedido && w.ProdCodEstr == linhagem)
                .FirstOrDefault();

            // Verifica por Estado
            Tabela_Precos precoLinhagem = hlbappSession
                .Tabela_Precos.Where(w => w.Tipo == pedVenda.CondicaoPagamento
                    && w.Produto == linhagem
                    && w.Regiao == uf.UfSigla && w.Empresa == pedVenda.Empresa
                    && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                .FirstOrDefault();

            // Verifica por Região
            if (precoLinhagem == null)
            {
                precoLinhagem =
                    hlbappSession.Tabela_Precos.Where(w => w.Tipo == condPag && w.Produto == item.ProdCodEstr
                        && w.Regiao == uf.UfRegGeog && w.Empresa == pedVenda.Empresa
                        && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                .FirstOrDefault();
            }

            // Verifica por Ovos / Machos
            if (precoLinhagem == null)
            {
                precoLinhagem =
                    hlbappSession.Tabela_Precos.Where(w => w.Tipo == condPag && 
                        w.Produto == item.ProdCodEstr 
                        && (w.Produto.Contains("Ovos") || w.Produto.Contains("Machos"))
                        && w.Regiao == "Todas" && w.Empresa == pedVenda.Empresa
                        && item.DataEntregaInicial >= w.DataInicial && item.DataEntregaFinal <= w.DataFinal)
                .FirstOrDefault();
            }

            if (precoLinhagem != null)
            {
                List<Item_Pedido_Venda> itensPVList = hlbappSession.Item_Pedido_Venda
                    .Where(w => w.IDPedidoVenda == idPedido && w.DataEntregaInicial == item.DataEntregaInicial)
                    .ToList();

                int qtdTotalMesmaData = itensPVList
                    .Where(w => w.DataEntregaInicial == item.DataEntregaInicial).FirstOrDefault().QtdeLiquida;

                if (qtdTotalMesmaData < 5000)
                    valor = Convert.ToDecimal(precoLinhagem.ValorMenor5000Aves);
                else
                    valor = Convert.ToDecimal(precoLinhagem.ValorNormal);
            }

            return valor;
        }

        public decimal CalculaValorLinhagemTabelaPrecoNovoPedido(string codigoCliente, string linhagem,
            DateTime dataInicial, DateTime dataFinal, string condPag, List<Item_Pedido_Venda> listaItens,
            string empresa, int qtde)
        {
            bdApoloEntities apoloStatic = new bdApoloEntities();
            HLBAPPEntities hlbappStatic = new HLBAPPEntities();

            decimal valor = 0;

            if (!condPag.Equals("PAGTO ANTECIPADO")) condPag = "Faturamento";

            #region Carrega Valor da Configuração do Cliente

            var listaConfigCliente = hlbappStatic.Config_Clientes_AniPlan_Item
                .Where(w => hlbappStatic.Config_Clientes_AniPlan.Any(a => a.ID == w.IDConfigClientesAniPlan
                                                                        && a.CodigoCliente == codigoCliente)
                    && w.Codigo == linhagem
                    && w.Tipo == "Produto"
                    && w.Empresa == empresa)
                .FirstOrDefault();

            if (listaConfigCliente != null)
                return listaConfigCliente.PrecoUnitario;

            #endregion

            MvcAppHylinedoBrasilMobile.Models.bdApolo.CIDADE cidade = apoloStatic.CIDADE
                .Where(w => apoloStatic.ENTIDADE.Any(a => a.CidCod == w.CidCod
                    && a.EntCod == codigoCliente)).FirstOrDefault();

            UNID_FEDERACAO uf = apoloStatic
                .UNID_FEDERACAO.Where(w => w.UfSigla == cidade.UfSigla
                    && w.PaisSigla == cidade.PaisSigla).FirstOrDefault();

            // Verifica por Estado
            Tabela_Precos precoLinhagem = hlbappStatic
                .Tabela_Precos.Where(w => w.Tipo == condPag
                    && w.Produto == linhagem
                    && w.Regiao == uf.UfSigla && w.Empresa == empresa
                    && dataInicial >= w.DataInicial && dataFinal <= w.DataFinal)
                .FirstOrDefault();

            // Verifica por Região
            if (precoLinhagem == null)
            {
                precoLinhagem =
                    hlbappStatic.Tabela_Precos.Where(w => w.Tipo == condPag && w.Produto == linhagem
                        && w.Regiao == uf.UfRegGeog && w.Empresa == empresa
                        && dataInicial >= w.DataInicial && dataFinal <= w.DataFinal)
                .FirstOrDefault();
            }

            // Verifica Ovos
            if (precoLinhagem == null)
            {
                precoLinhagem =
                    hlbappStatic.Tabela_Precos.Where(w => w.Tipo == condPag 
                        && w.Produto == linhagem
                        && (w.Produto.Contains("Ovos") || w.Produto.Contains("Machos"))
                        && w.Regiao == "Todas" && w.Empresa == empresa
                        && dataInicial >= w.DataInicial && dataFinal <= w.DataFinal)
                .FirstOrDefault();
            }

            if (precoLinhagem != null)
            {
                //int qtdTotalMesmaData = 0;
                //if (listaItens.Count > 0)
                //    qtdTotalMesmaData = listaItens
                //         .Where(w => w.DataEntregaInicial == dataInicial).FirstOrDefault().QtdeLiquida;

                if (qtde < 5000)
                    valor = Convert.ToDecimal(precoLinhagem.ValorMenor5000Aves);
                else
                    valor = Convert.ToDecimal(precoLinhagem.ValorNormal);
            }

            return valor;
        }

        public static decimal CalculaValoresVacinasServicosNovoPV(string vacinaServico, DateTime dataInicial, 
            DateTime dataFinal, string empresa, string tipo, string codigoCliente)
        {
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloSession = new bdApoloEntities();

            decimal valorVacinasServicos = 0;

            #region Carrega Valor da Configuração do Cliente

            var codigoVacinaServico = apoloSession.PRODUTO
                .Where(w => w.ProdNomeAlt1 == vacinaServico || w.ProdNomeAlt2 == vacinaServico)
                .FirstOrDefault();

            if (codigoVacinaServico != null)
            {
                var listaConfigCliente = hlbappSession.Config_Clientes_AniPlan_Item
                    .Where(w => hlbappSession.Config_Clientes_AniPlan.Any(a => a.ID == w.IDConfigClientesAniPlan
                                                                            && a.CodigoCliente == codigoCliente)
                        && w.Codigo == codigoVacinaServico.ProdCodEstr
                        && (w.Tipo == "Vacina" || w.Tipo == "Serviço")
                        && (w.Empresa == empresa || w.Empresa == "Todas"))
                    .OrderByDescending(o => o.Empresa)
                    .FirstOrDefault();

                if (listaConfigCliente != null)
                    return listaConfigCliente.PrecoUnitario;
            }

            #endregion

            Tabela_Precos tabelaPreco = hlbappSession.Tabela_Precos
                .Where(w => w.Tipo == tipo && w.Produto == vacinaServico
                    && w.Regiao == "Todas" && w.Empresa == empresa
                    && dataInicial >= w.DataInicial && dataFinal <= w.DataFinal)
                .FirstOrDefault();

            if (tabelaPreco != null)
            {
                valorVacinasServicos = Convert.ToDecimal(tabelaPreco.ValorNormal);
            }

            return valorVacinasServicos;
        }

        public static bool eSelecionadaVacinasServicosNovoPV(string vacinaServico, string empresa, string tipo, string codigoCliente)
        {
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloSession = new bdApoloEntities();

            bool eSelecionada = false;

            var codigoVacinaServico = apoloSession.PRODUTO
                .Where(w => w.ProdNomeAlt1 == vacinaServico || w.ProdNomeAlt2 == vacinaServico)
                .FirstOrDefault();

            if (codigoVacinaServico != null)
            {
                var listaConfigCliente = hlbappSession.Config_Clientes_AniPlan_Item
                    .Where(w => hlbappSession.Config_Clientes_AniPlan.Any(a => a.ID == w.IDConfigClientesAniPlan
                                                                            && a.CodigoCliente == codigoCliente)
                        && w.Codigo == codigoVacinaServico.ProdCodEstr
                        && (w.Tipo == "Vacina" || w.Tipo == "Serviço")
                        && (w.Empresa == empresa || w.Empresa == "Todas"))
                    .OrderByDescending(o => o.Empresa)
                    .FirstOrDefault();

                if (listaConfigCliente != null)
                    if (listaConfigCliente.SelecionadoPedido == "Sim")
                        eSelecionada = true;
            }

            return eSelecionada;
        }

        public string VerificaVacinas(string empresa, string vacinaPrimaria, 
            List<Vacinas_Secundaria_Pedido_Venda> listaVacSecundaria, bool removeVacinaIncorreta)
        {
            string retorno = "";

            bdApoloEntities apoloStatic = new bdApoloEntities();

            List<string> listaVacinasIncorretas = new List<string>();

            var listaSecundaria = apoloStatic.PRODUTO
                .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                    && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                        && n.GrpProdCod == "041" && n.SubGrpProdCod == "042")
                    && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(g => g.ProdCodEstr == w.ProdCodEstr
                        && g.GrpProdCod == "042" && g.SubGrpProdCod == empresa)
                        && a.ProdCodEstr == vacinaPrimaria))
                .ToList();

            foreach (var item in listaSecundaria)
            {
                var listaFilhosVacSec = apoloStatic.PRODUTO
                    .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.FicTecProdCodEstr == w.ProdCodEstr
                        && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                            && n.GrpProdCod == "041" && n.SubGrpProdCod == "043")
                            && a.ProdCodEstr == item.ProdCodEstr))
                    .ToList();

                var listaPaiVacSec = apoloStatic.PRODUTO
                    .Where(w => apoloStatic.FIC_TEC_PROD.Any(a => a.ProdCodEstr == w.ProdCodEstr
                        && apoloStatic.PROD_GRUPO_SUBGRUPO.Any(n => n.ProdCodEstr == a.ProdCodEstr
                            && n.GrpProdCod == "041" && n.SubGrpProdCod == "043")
                            && a.FicTecProdCodEstr == item.ProdCodEstr))
                    .ToList();

                if (listaFilhosVacSec.Count > 0)
                {
                    foreach (var itemFilho in listaFilhosVacSec)
                    {
                        if (listaVacSecundaria.Where(w => w.ProdCodEstr == itemFilho.ProdCodEstr).Count() > 0
                            && listaVacSecundaria.Where(w => w.ProdCodEstr == item.ProdCodEstr).Count() > 0)
                        {
                            listaVacinasIncorretas.Add(itemFilho.ProdCodEstr);
                        }
                    }
                }

                if (listaPaiVacSec.Count > 0)
                {
                    foreach (var itemPai in listaPaiVacSec)
                    {
                        if (listaVacSecundaria.Where(w => w.ProdCodEstr == itemPai.ProdCodEstr).Count() > 0
                            && listaVacSecundaria.Where(w => w.ProdCodEstr == item.ProdCodEstr).Count() > 0)
                        {
                            listaVacinasIncorretas.Add(itemPai.ProdCodEstr);
                        }
                    }
                }
            }

            if (listaVacinasIncorretas.Count > 0)
                retorno = "As combinações das seguintes vacinas " 
                    + " estão incorretas: "
                    + (char)13 + (char)10 + (char)13 + (char)10;

            var itensVacSecRemove = (List<MvcAppHylinedoBrasilMobile.Models.Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

            foreach (var item in listaVacinasIncorretas)
            {
                PRODUTO produto = apoloStatic.PRODUTO
                    .Where(w => w.ProdCodEstr == item).FirstOrDefault();

                if (produto != null) retorno = retorno + "*" + produto.ProdNomeAlt1;

                if ((listaVacinasIncorretas.IndexOf(item) + 1) != listaVacinasIncorretas.Count)
                    retorno = retorno + (char)13 + (char)10;

                if (removeVacinaIncorreta)
                {
                    MvcAppHylinedoBrasilMobile.Models.Vacinas_Secundaria_Pedido_Venda vacSecRemove =
                        itensVacSecRemove.Where(w => w.ProdCodEstr == item).FirstOrDefault();
                    if (vacSecRemove != null)
                        itensVacSecRemove.Remove(vacSecRemove);
                }
            }

            return retorno;
        }

        public string CarregaDescricaoVacinaPrimaria(string empresa, int idPV)
        {
            string descricao = "SEM VACINAÇÃO";

            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            Vacinas_Primaria_Pedido_Venda vp = hlbappSession.Vacinas_Primaria_Pedido_Venda
                .Where(w => w.IDPedidoVenda == idPV).FirstOrDefault();

            if (vp != null)
            {
                if (vp.ProdCodEstr != "")
                {
                    PRODUTO vacinaPrimaria = apoloStatic
                        .PRODUTO.Where(w => w.ProdCodEstr == vp.ProdCodEstr).FirstOrDefault();

                    descricao = vacinaPrimaria.ProdNomeAlt1;
                    if (vp.PrecoUnitario != null && vp.PrecoUnitario > 0)
                        descricao = descricao + " - R$ " + String.Format("{0:N2}", vp.PrecoUnitario);

                    if (vp.Bonificada == 1) descricao = descricao + " - VACINA PRIMÁRIA BONIFICADA ";
                    else if (vp.Bonificada == 2) descricao = descricao + " - VACINA PRIMÁRIA ENVIADA PELO CLIENTE ";
                }
            }

            return descricao;
        }

        public string CarregaDescricaoTratamentoInfravermelho(string empresa, int idPV)
        {
            string descricao = "SEM TRATAMENTO";

            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            Servicos_Pedido_Venda s = hlbappSession.Servicos_Pedido_Venda
                .Where(w => w.IDPedidoVenda == idPV).FirstOrDefault();

            if (s != null)
            {
                if (s.PrecoUnitario != null && s.PrecoUnitario > 0)
                    descricao = "R$ " + String.Format("{0:N2}", s.PrecoUnitario);
                else
                    descricao = "R$ 0,00";

                if (s.PercAplicacaoServico != null && s.PercAplicacaoServico > 0)
                    descricao = descricao + " - " + String.Format("{0:N2}", s.PercAplicacaoServico) + "%";

                if (s.Bonificada == 1) descricao = descricao + " - BONIFICADO";
            }

            return descricao;
        }

        #endregion

        #region Other Methods

        public static string GetColorStatus(string status)
        {
            string result = "";
            
            HLBAPPEntities hlbappStatic = new HLBAPPEntities();

            Status_Ped_Venda obj = hlbappStatic.Status_Ped_Venda
                .Where(w => w.Status == status)
                .FirstOrDefault();

            if (obj != null)
                result = obj.Color;

            return result;
        }

        public bool VerificaSessao()
        {
            if (Session["usuario"] == null)
            {
                return true;
            }
            else
            {
                if (Session["usuario"].ToString() == "0")
                {
                    return true;
                }
            }

            return false;
        }        

        public string GeraSolicitacaoVendaPDF(int ID)
        {
            string caminho = @"\\srv-riosoft-01\W\SolicitacaoVenda\SolicitacaoVenda_ID_" + ID.ToString() + ".pdf";

            CrystalDecisions.CrystalReports.Engine.ReportDocument MyReport =
                new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            MyReport.Load(Server.MapPath("~/Reports/SolicitacaoVenda.rpt"));

            //MyReport.SetDataSource(lista);
            MyReport.ParameterFields["IDPedidoVenda"].CurrentValues.AddValue(ID);

            //MyReport.ParameterFields["IDPedidoVenda"].CurrentValues.AddValue(ID);

            //MyReport.Refresh();

            MyReport.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, caminho);
            //MyReport.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.HTML32, response, false, "DEO_" + dataFiltro.ToShortDateString());

            //EnviarEmailImpressora(caminho);
            //File(caminho, "application/pdf", "DiarioExpedicao.pdf");
            //if (download)
            //{
            //    Stream stream = MyReport.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
            //    return File(stream, "application/pdf", "DiarioExpedicao.pdf");
            //}
            //else
            //{
            //    var response = System.Web.HttpContext.Current.Response;
            //    MyReport.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, response, false, "DEO_" + dataFiltro.ToShortDateString());
            //    return new EmptyResult();
            //}

            MyReport.Close();
            MyReport.Dispose();

            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();

            return caminho;
        }

        public void LimpaVariaveisSessao()
        {
            #region Variáveis de Sessão

            Session["VariosPedidos"] = false;
            Session["filtroClientePV"] = "";
            Session["viewEdit"] = "";
            Session["origemPVForm"] = "";
            Session["CustomerList"] = new List<ENTIDADE>();
            Session["selectedCustomer"] = "";
            Session["selectedTypeAddress"] = "Faturamento";
            Session["selectedShipAddress"] = 0;
            Session["ListaLotesItemPV"] = new List<Lote_Item_Pedido_Venda>();
            Session["ListaLotesItemViewPV"] = new List<Lote_Item_Pedido_Venda>();
            Session["ItensPVList"] = new List<Item_Pedido_Venda>();
            Session["ItensPVListMVD"] = new List<Item_Pedido_Venda>();
            Session["proximaSequenciaItem"] = 0;
            Session["VacinasSecundariaPVList"] = new List<Vacinas_Secundaria_Pedido_Venda>();
            Session["VacinasSecundariaItemPVListExibe"] = new List<Vacinas_Secundaria_Pedido_Venda>();
            Session["tratamentoInfravermelhoPV"] = false;
            Session["qtdTratamentoInfravermelhoPV"] = "";
            Session["ovosBrasilPV"] = false;
            Session["observacaoPV"] = "";
            Session["vendedorPV"] = "";
            Session["ItensPVListDelete"] = null;
            Session["ItensSecVacListDelete"] = null;
            Session["deletaPV"] = false;
            Session["visualizaPV"] = false;
            Session["solicitaCancelarPV"] = false;
            Session["motivoAlteracaoPV"] = "";
            Session["origemPV"] = "";
            Session["origemItemPV"] = "";
            Session["LogPV"] = false;
            Session["vacinaPrimariaPV"] = "(Sem Vacinação)";
            //Session["ListaVendedoresPV"] = new List<SelectListItem>();
            Session["motivoAlteracaoPV"] = "";
            Session["ListaCondicaoPagamento"] = CarregaListaCondPag();
            Session["filtroCondPagPV"] = "";
            Session["tipoAlteracaoPV"] = "";
            Session["alteracaoPrecoBonificacaoPV"] = false;
            Session["VacinasPrimariaItemPVList"] = new List<Vacinas_Primaria_Pedido_Venda>();
            Session["VacinasSecundariaItemPVList"] = new List<Vacinas_Secundaria_Pedido_Venda>();
            Session["alteracaoVacinasItemPV"] = false;
            Session["vacinasItens"] = false;
            Session["origemVacinaItenm"] = "";
            Session["condicaoPagamentoPV"] = "";
            Session["vacinaPrimariaItemPV"] = "";
            Session["idSelecionado"] = 0;
            Session["valorVacinaAntigo"] = 0;
            Session["clienteParticipaBolsao"] = "Não";
            Session["valorServicoPV"] = 0;

            Session["bonificaBoubaAviaria"] = "Não";
            Session["bonificaBoubaZoetis"] = "Não";
            Session["bonificaServicoPV"] = false;
            Session["projecaoSearch"] = "";

            #region Docs. Exportação

            if (Session["dataPedidoVenda"] == null)
                Session["dataPedidoVenda"] = DateTime.Today.ToShortDateString();
            if (Session["dataEnvio"] == null)
                Session["dataEnvio"] = DateTime.Today.ToShortDateString();
            if (Session["dataSaidaIncubatorio"] == null)
                Session["dataSaidaIncubatorio"] = DateTime.Today.ToShortDateString();

            Session["ListViaDeEnvio"] = CarregaListaEnvio();
            if (Session["viaDeEnvioSelecionada"] != null)
                AtualizaDDL(Session["viaDeEnvioSelecionada"].ToString(),
                    (List<SelectListItem>)Session["ListViaDeEnvio"]);
            else
                Session["viaDeEnvioSelecionada"] = "";

            //Session["ListAeroportoOrigem"] = CarregaListaAeroporto(false);
            //if (Session["aeroportoOrigemSelecionado"] != null)
            //    AtualizaDDL(Session["aeroportoOrigemSelecionado"].ToString(),
            //        (List<SelectListItem>)Session["ListAeroportoOrigem"]);
            //else
            //    Session["aeroportoOrigemSelecionado"] = "";
            Session["ListAeroportoOrigem"] = new List<SelectListItem>();

            //Session["ListAeroportoDestino"] = CarregaListaAeroporto(true);
            //if (Session["aeroportoDestinoSelecionado"] != null)
            //    AtualizaDDL(Session["aeroportoDestinoSelecionado"].ToString(),
            //        (List<SelectListItem>)Session["ListAeroportoDestino"]);
            //else
            //    Session["aeroportoDestinoSelecionado"] = "";
            Session["ListAeroportoDestino"] = new List<SelectListItem>();

            Session["ListaTipoVenda"] = CarregaListaTipoVenda();
            if (Session["tipoVendaSelecionado"] != null)
                AtualizaDDL(Session["tipoVendaSelecionado"].ToString(),
                    (List<SelectListItem>)Session["ListaTipoVenda"]);
            else
                Session["tipoVendaSelecionado"] = "";

            if (Session["condPagPV"] == null)
                Session["condPagPV"] = "";

            if (Session["valorDocumentacaoDE"] == null)
                Session["valorDocumentacaoDE"] = 0;

            if (Session["valorFreteDE"] == null)
                Session["valorFreteDE"] = 0;

            if (Session["numCaixasDE"] == null)
                Session["numCaixasDE"] = 0;

            if (Session["numPaletesDE"] == null)
                Session["numPaletesDE"] = 0;

            if (Session["numeroVooPV"] == null)
                Session["numeroVooPV"] = "";

            if (Session["ciaAereaPV"] == null)
                Session["ciaAereaPV"] = "";

            if (Session["awbPV"] == null)
                Session["awbPV"] = "";

            if (Session["ncmPV"] == null)
                Session["ncmPV"] = "";

            if (Session["horaEntregaPV"] == null)
                Session["horaEntregaPV"] = "";

            if (Session["horaSaidaIncubatorioPV"] == null)
                Session["horaSaidaIncubatorioPV"] = "";

            if (Session["horaEnvioPV"] == null)
                Session["horaEnvioPV"] = "";

            if (Session["numFaturaDE"] == null)
                Session["numFaturaDE"] = "";

            CarregaListaVeterinarioResponsavel();
            if (Session["veterinarioSelecionado"] != null)
                AtualizaDDL(Session["veterinarioSelecionado"].ToString(),
                    (List<SelectListItem>)Session["ListVeterinarioResponsavel"]);
            else
                Session["veterinarioSelecionado"] = "";

            #endregion

            #endregion
        }

        public string ProximoOrderNOCHIC()
        {
            //ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();
            //string orderNO = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
            
            HLBAPPEntities hlbapp = new HLBAPPEntities();
            CHIC_Ultimo_Numero chic = hlbapp.CHIC_Ultimo_Numero.FirstOrDefault();
            int ultimoOrderNOCHIC = 0;
            ultimoOrderNOCHIC = (Convert.ToInt32(chic.UltimoOrderNOCHIC) + 1);
            //chic.UltimoOrderNOCHIC = ultimoOrderNOCHIC;
            //hlbapp.SaveChanges();
            
            return ultimoOrderNOCHIC.ToString();
        }

        public string NextCodeCHIC(string tableName)
        {
            tablesMobileTableAdapter tables = new tablesMobileTableAdapter();
            CHICMobileDataSet.tablesMobileDataTable tablesDT = new CHICMobileDataSet.tablesMobileDataTable();
            string code = "";

            tables.FillByName(tablesDT, tableName);
            code = (Convert.ToInt32(tablesDT[0].lastno) + 1).ToString();
            tables.UpdateQuery(Convert.ToDecimal(code), tableName);

            return code;
        }

        public int SaldoUtilizadoPinto(string codigoCliente, string linhagem, int ano, int mes)
        {
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            //int dias = DiasDescontaDataEntregaParaCalcularDataNascimento(codigoCliente);

            linhagem = linhagem.Replace(" - Ovos", "");

            int saldoUtilizado = 0;

            var listaSaldoUtilizado = hlbappSession.Pedido_Venda
                        .Where(p => !p.Status.Contains("Cancelado")
                            && (p.Projecao == null || p.Projecao == "Não"))
                        .Join(
                            hlbappSession.Item_Pedido_Venda
                                .Where(ip => ip.ProdCodEstr.Replace(" - Ovos","") == linhagem
                                    && (!ip.OrderNoCHIC.Contains("Cancelado") || ip.OrderNoCHIC == null)
                                    && (!ip.OrderNoCHICReposicao.Contains("Cancelado") 
                                            || ip.OrderNoCHICReposicao == null)),
                                    //&& Convert.ToDateTime(EntityFunctions.AddDays(ip.DataEntregaInicial, dias)).Year == ano
                                    //&& Convert.ToDateTime(EntityFunctions.AddDays(ip.DataEntregaInicial, dias)).Month == mes),
                                    //&& ip.DataEntregaInicial.AddDays(dias).Year == ano
                                    //&& ip.DataEntregaInicial.AddDays(dias).Month == mes),
                //.Where(ip => hlbappSession.LINHAGEM_GRUPO
                //    .Any(lg => lg.LinhagemComercial == ip.ProdCodEstr.Replace(" - Ovos", ""))),
                            p => p.ID, ip => ip.IDPedidoVenda,
                            (p, ip) => new { Pedido_Venda = p, Item_Pedido_Venda = ip })
                        .ToList()
                        //.Where(w => w.Item_Pedido_Venda.DataEntregaInicial.AddDays(dias).Year == ano
                        //    && w.Item_Pedido_Venda.DataEntregaInicial.AddDays(dias).Month == mes)
                        .Where(w => Convert.ToDateTime(w.Item_Pedido_Venda.DataNascimento).Year == ano
                            && Convert.ToDateTime(w.Item_Pedido_Venda.DataNascimento).Month == mes)
                        .GroupBy(g => new
                        {
                            Linhagem = g.Item_Pedido_Venda.ProdCodEstr,
                            Ano = Convert.ToDateTime(g.Item_Pedido_Venda.DataNascimento).Year,
                            Mes = Convert.ToDateTime(g.Item_Pedido_Venda.DataNascimento).Month
                            //Ano = EntityFunctions.AddDays(g.Item_Pedido_Venda.DataEntregaInicial, dias),
                            //Mes = EntityFunctions.AddDays(g.Item_Pedido_Venda.DataEntregaInicial, dias)
                        })
                        .Select(s => new
                        {
                            s.Key.Linhagem,
                            s.Key.Ano,
                            s.Key.Mes,
                            QtdeTotal = s.Sum(m =>
                                (m.Item_Pedido_Venda.QtdeLiquida == null ? 0 : m.Item_Pedido_Venda.QtdeLiquida)
                                +
                                (m.Item_Pedido_Venda.QtdeBonificada == null ? 0 : m.Item_Pedido_Venda.QtdeBonificada)
                                +
                                (m.Item_Pedido_Venda.QtdeReposicao == null ? 0 : m.Item_Pedido_Venda.QtdeReposicao))
                        })
                        .ToList();

            foreach (var item in listaSaldoUtilizado)
            {
                if (item.Linhagem.Contains("Ovos"))
                    saldoUtilizado = saldoUtilizado + Convert.ToInt32(item.QtdeTotal * 0.37m);
                else
                    saldoUtilizado = saldoUtilizado + Convert.ToInt32(item.QtdeTotal);
            }

            //if (listaSaldoUtilizado.Count > 0)
            //{
            //    if (linhagem.Contains("Ovos"))
            //        saldoUtilizado = Convert.ToInt32(listaSaldoUtilizado.FirstOrDefault().QtdeTotal * 0.37m);
            //    else
            //        saldoUtilizado = Convert.ToInt32(listaSaldoUtilizado.FirstOrDefault().QtdeTotal);
            //}

            return saldoUtilizado;
        }

        public bool ExisteConfiguracaoSaldoPinto(string linhagem, int anoPedido, int mesPedido)
        {
            bool existeSaldoConfigurado = false;

            linhagem = linhagem.Replace(" - Ovos", "");

            fluigEntities bdFluig = new fluigEntities();

            var listaSaldoConfigurado = bdFluig.FF40F29A5F_77708420
                .Where(w => w.LINHAGEM_SEL_1 == linhagem
                    && w.DELETED == false)
                .OrderBy(o => o.PRIMEIRO_DIA_DO_DT_1)
                .ToList();

            foreach (var itemSaldoConfigurado in listaSaldoConfigurado)
            {
                int ano = Convert.ToDateTime(itemSaldoConfigurado.PRIMEIRO_DIA_DO_DT_1).Year;
                int mes = Convert.ToDateTime(itemSaldoConfigurado.PRIMEIRO_DIA_DO_DT_1).Month;

                if (ano == anoPedido && mes == mesPedido)
                {
                    existeSaldoConfigurado = true;
                }
            }

            return existeSaldoConfigurado;
        }

        public int SaldoConfiguradoPinto(string linhagem, int anoPedido, int mesPedido)
        {
            int saldoConfigurado = 0;

            linhagem = linhagem.Replace(" - Ovos", "");

            fluigEntities bdFluig = new fluigEntities();

            var listaSaldoConfigurado = bdFluig.FF40F29A5F_77708420
                .Where(w => w.LINHAGEM_SEL_1 == linhagem
                    && w.DELETED == false)
                .OrderBy(o => o.PRIMEIRO_DIA_DO_DT_1)
                .ToList();

            foreach (var itemSaldoConfigurado in listaSaldoConfigurado)
            {
                int ano = Convert.ToDateTime(itemSaldoConfigurado.PRIMEIRO_DIA_DO_DT_1).Year;
                int mes = Convert.ToDateTime(itemSaldoConfigurado.PRIMEIRO_DIA_DO_DT_1).Month;

                if (ano == anoPedido && mes == mesPedido)
                {
                    saldoConfigurado = Convert.ToInt32(itemSaldoConfigurado.SALDO_DE_PINTOS_NR_1);
                }
            }

            return saldoConfigurado;
        }

        public DateTime CalculaDataNascimento(string entCod, DateTime dataEntrega, string linhagem)
        {
            DateTime dataNascimento = dataEntrega;

            bdApoloEntities apoloStatic = new bdApoloEntities();

            var uf = apoloStatic.UNID_FEDERACAO
                .Where(w => apoloStatic.CIDADE
                    .Any(c => w.UfSigla == c.UfSigla && w.PaisSigla == c.PaisSigla
                        && apoloStatic.ENTIDADE
                            .Any(e => e.CidCod == c.CidCod
                                && e.EntCod == entCod)))
                .FirstOrDefault();

            if (uf.UfRegGeog == "Norte" || uf.UfRegGeog == "Nordeste")
                dataNascimento = dataEntrega.AddDays(-2);
            else
                dataNascimento = dataEntrega.AddDays(-1);

            if (linhagem.Contains(" - Ovos"))
                //dataNascimento = dataNascimento.AddDays(21);
                dataNascimento = dataEntrega;

            return dataNascimento;
        }

        public int DiasDescontaDataEntregaParaCalcularDataNascimento(string entCod)
        {
            int dias = 0;

            bdApoloEntities apoloStatic = new bdApoloEntities();

            var uf = apoloStatic.UNID_FEDERACAO
                .Where(w => apoloStatic.CIDADE
                    .Any(c => w.UfSigla == c.UfSigla && w.PaisSigla == c.PaisSigla
                        && apoloStatic.ENTIDADE
                            .Any(e => e.CidCod == c.CidCod
                                && e.EntCod == entCod)))
                .FirstOrDefault();

            if (uf.UfRegGeog == "Norte" || uf.UfRegGeog == "Nordeste")
                dias = -2;
            else
                dias = -1;

            return dias;
        }

        #endregion

        #region Import CHIC to HLB and Adjustment Methods

        public ActionResult ImportaDadosAntigos()
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            string orderNoTeste = "";

            try
            {
                DateTime dataInicial = Convert.ToDateTime("18/01/2016");
                DateTime dataFinal = Convert.ToDateTime("31/12/2017");

                bookedFilterMobileTableAdapter bookedTA = new bookedFilterMobileTableAdapter();
                CHICMobileDataSet.bookedFilterMobileDataTable bDT =
                    new CHICMobileDataSet.bookedFilterMobileDataTable();
                bookedTA.FillByHatchDate(bDT, dataInicial, dataFinal);

                var lista = bDT
                    .OrderBy(o => o.cal_date)
                    .ThenBy(t => t.orderno)
                    .ThenBy(t => t.item_ord)
                    .ThenByDescending(t => t.price)
                    .ThenByDescending(t => t.quantity)
                    .ToList();

                //var listaFiltro = lista.Where(w => w.orderno == "55577");
                var listaFiltro = lista;

                Pedido_Venda pedVenda = new Pedido_Venda();
                Item_Pedido_Venda itemPV = new Item_Pedido_Venda();
                Vacinas_Primaria_Pedido_Venda vacPrim = new Vacinas_Primaria_Pedido_Venda();
                int seqVacSec = 0;
                int seqItem = 0;
                int doisItemsMesmaLinhagem = 0;
                List<Vacinas_Secundaria_Pedido_Venda> listVacSecAguardoVacPrim =
                    new List<Vacinas_Secundaria_Pedido_Venda>();
                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                bool temVaxxitek = false;

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                string orderNoAnterior = "";
                foreach (var item in listaFiltro)
                {
                    int existeNoWeb = 0;
                    int existeNoWebSemAlteracao = 0;
                    Item_Pedido_Venda existeNoWebSemAlteracaoObj = null;

                    if (item.orderno.Trim() != orderNoAnterior)
                    {
                        #region Verifica se existe não existe no WEB ou se tem mais sem nenhuma alteração para atualizar

                        existeNoWeb = hlbappSession.Item_Pedido_Venda
                            .Where(w => (w.OrderNoCHIC == item.orderno.Trim())
                                || (w.OrderNoCHICReposicao == item.orderno.Trim()))
                            .Count();

                        existeNoWebSemAlteracao = 0;

                        existeNoWebSemAlteracaoObj = hlbappSession.Item_Pedido_Venda
                            .Where(w => (w.OrderNoCHIC == item.orderno.Trim())
                                || (w.OrderNoCHICReposicao == item.orderno.Trim()))
                            .FirstOrDefault();

                        if (existeNoWebSemAlteracaoObj != null)
                        {
                            existeNoWebSemAlteracao = hlbappSession.LOG_Pedido_Venda
                                .Where(w => w.IDPedidoVenda == existeNoWebSemAlteracaoObj.IDPedidoVenda)
                                .Count();
                        }

                        #endregion
                    }

                    orderNoTeste = item.orderno.Trim();

                    if (item.orderno.Trim().Equals("59376"))
                        orderNoTeste = item.orderno.Trim();

                    if (existeNoWeb == 0 || existeNoWebSemAlteracao == 1)
                    {
                        if (item.orderno.Trim() != orderNoAnterior)
                        {
                            if (existeNoWebSemAlteracao == 1)
                            {
                                int idPedidoVenda = existeNoWebSemAlteracaoObj.IDPedidoVenda;

                                #region Deleta LOGS

                                List<LOG_Servicos_Pedido_Venda> listLOGServDel = hlbappSession.LOG_Servicos_Pedido_Venda
                                    .Where(w => w.IDPedidoVenda == idPedidoVenda).ToList();

                                foreach (var itemDel in listLOGServDel)
                                {
                                    hlbappSession.LOG_Servicos_Pedido_Venda.DeleteObject(itemDel);
                                }

                                List<LOG_Vacinas_Secundaria_Pedido_Venda> listLOGVacSecDel = hlbappSession
                                    .LOG_Vacinas_Secundaria_Pedido_Venda
                                    .Where(w => hlbappSession.LOG_Vacinas_Primaria_Pedido_Venda
                                        .Any(a => a.ID == w.IDVacPrimLogPedidoVenda
                                            && a.IDPedidoVenda == idPedidoVenda))
                                    .ToList();

                                foreach (var itemDel in listLOGVacSecDel)
                                {
                                    hlbappSession.LOG_Vacinas_Secundaria_Pedido_Venda.DeleteObject(itemDel);
                                }

                                List<LOG_Vacinas_Primaria_Pedido_Venda> listLOGVacPrimDel = hlbappSession
                                    .LOG_Vacinas_Primaria_Pedido_Venda
                                    .Where(w => w.IDPedidoVenda == idPedidoVenda).ToList();

                                foreach (var itemDel in listLOGVacPrimDel)
                                {
                                    hlbappSession.LOG_Vacinas_Primaria_Pedido_Venda.DeleteObject(itemDel);
                                }

                                List<LOG_Item_Pedido_Venda> listLOGItemPedidoVendaDel = hlbappSession.LOG_Item_Pedido_Venda
                                    .Where(w => w.IDPedidoVenda == idPedidoVenda).ToList();

                                foreach (var itemDel in listLOGItemPedidoVendaDel)
                                {
                                    hlbappSession.LOG_Item_Pedido_Venda.DeleteObject(itemDel);
                                }

                                List<LOG_Pedido_Venda> listLOGPedidoVendaDel = hlbappSession.LOG_Pedido_Venda
                                    .Where(w => w.IDPedidoVenda == idPedidoVenda).ToList();

                                foreach (var itemDel in listLOGPedidoVendaDel)
                                {
                                    hlbappSession.LOG_Pedido_Venda.DeleteObject(itemDel);
                                }

                                #endregion

                                #region Deleta Pedidos e filhos

                                List<Servicos_Pedido_Venda> listServDel = hlbappSession.Servicos_Pedido_Venda
                                    .Where(w => w.IDPedidoVenda == idPedidoVenda).ToList();

                                foreach (var itemDel in listServDel)
                                {
                                    hlbappSession.Servicos_Pedido_Venda.DeleteObject(itemDel);
                                }

                                List<Vacinas_Secundaria_Pedido_Venda> listVacSecDel = hlbappSession
                                    .Vacinas_Secundaria_Pedido_Venda
                                    .Where(w => hlbappSession.Vacinas_Primaria_Pedido_Venda
                                        .Any(a => a.ID == w.IDVacPrimPedVenda
                                            && a.IDPedidoVenda == idPedidoVenda))
                                    .ToList();

                                foreach (var itemDel in listVacSecDel)
                                {
                                    hlbappSession.Vacinas_Secundaria_Pedido_Venda.DeleteObject(itemDel);
                                }

                                List<Vacinas_Primaria_Pedido_Venda> listVacPrimDel = hlbappSession
                                    .Vacinas_Primaria_Pedido_Venda
                                    .Where(w => w.IDPedidoVenda == idPedidoVenda).ToList();

                                foreach (var itemDel in listVacPrimDel)
                                {
                                    hlbappSession.Vacinas_Primaria_Pedido_Venda.DeleteObject(itemDel);
                                }

                                List<Item_Pedido_Venda> listItemPedidoVendaDel = hlbappSession.Item_Pedido_Venda
                                    .Where(w => w.IDPedidoVenda == idPedidoVenda).ToList();

                                foreach (var itemDel in listItemPedidoVendaDel)
                                {
                                    hlbappSession.Item_Pedido_Venda.DeleteObject(itemDel);
                                }

                                List<Pedido_Venda> listPedidoVendaDel = hlbappSession.Pedido_Venda
                                    .Where(w => w.ID == idPedidoVenda).ToList();

                                foreach (var itemDel in listPedidoVendaDel)
                                {
                                    hlbappSession.Pedido_Venda.DeleteObject(itemDel);
                                }

                                #endregion

                                hlbappSession.SaveChanges();
                            }
                        }

                        #region Cabeçalho

                        if (item.orderno.Trim() != orderNoAnterior)
                        {
                            doisItemsMesmaLinhagem = 0;
                            seqVacSec = 0;
                            seqItem = 0;
                            pedVenda = new Pedido_Venda();
                            pedVenda.CodigoCliente = item.cust_no.Trim();
                            pedVenda.DataPedido = item.order_date;
                            pedVenda.DataHora = DateTime.Now;
                            pedVenda.Usuario = "Importação Inicial - Sistema";
                            if (!item.com1.Trim().Equals(""))
                                pedVenda.Observacoes = item.com1.Trim();
                            if (!item.com2.Trim().Equals(""))
                                pedVenda.Observacoes = pedVenda.Observacoes + (char)10 + item.com2.Trim();
                            if (!item.com3.Trim().Equals(""))
                                pedVenda.Observacoes = pedVenda.Observacoes + (char)10 + item.com3.Trim();

                            #region Ovos Brasil

                            int_commMTableAdapter iTA = new int_commMTableAdapter();
                            CHICMobileDataSet.int_commMDataTable iDT = new CHICMobileDataSet.int_commMDataTable();
                            iTA.FillByOrderNo(iDT, item.orderno.Trim());

                            if (iDT.Count > 0)
                            {
                                if (iDT[0].invmess1)
                                    pedVenda.OvosBrasil = 1;
                                else
                                    pedVenda.OvosBrasil = 0;

                                pedVenda.Observacoes = pedVenda.Observacoes + (char)10 + (char)13
                                    + iDT[0].comments.Trim();
                            }
                            else
                            {
                                pedVenda.OvosBrasil = 0;
                                //pedVenda.Observacoes = "";
                            }

                            #endregion

                            pedVenda.CondicaoPagamento = item.delivery.Trim();
                            pedVenda.Vendedor = item.salesrep.Trim();
                            pedVenda.Status = "Importado Total";

                            ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == pedVenda.CodigoCliente)
                                .FirstOrDefault();

                            pedVenda.NomeCliente = entidade.EntNome;

                            salesmanTableAdapter slTA = new salesmanTableAdapter();
                            CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                            slTA.FillByCode(slDT, pedVenda.Vendedor);

                            pedVenda.Empresa = slDT[0].inv_comp.Trim();

                            hlbappSession.Pedido_Venda.AddObject(pedVenda);
                            hlbappSession.SaveChanges();

                            #region Insere LOG - Pedido_Venda

                            logPV = new LOG_Pedido_Venda();
                            logPV.DataPedido = pedVenda.DataPedido;
                            logPV.Usuario = Session["usuario"].ToString();
                            logPV.DataHora = DateTime.Now;
                            logPV.CodigoCliente = pedVenda.CodigoCliente;
                            logPV.OvosBrasil = pedVenda.OvosBrasil;
                            logPV.CondicaoPagamento = pedVenda.CondicaoPagamento;
                            logPV.Observacoes = pedVenda.Observacoes;
                            logPV.Vendedor = pedVenda.Vendedor;
                            logPV.Status = pedVenda.Status;
                            logPV.Operacao = pedVenda.Status;
                            logPV.IDPedidoVenda = pedVenda.ID;
                            logPV.Motivo = "Importação Inicial do CHIC p/ o Sistema WEB para poder permitir "
                                + "acompanhar e realizar alterações e cancelamentos.";
                            logPV.Projecao = pedVenda.Projecao;

                            hlbppLOG.LOG_Pedido_Venda.AddObject(logPV);
                            hlbppLOG.SaveChanges();

                            #endregion

                            temVaxxitek = false;
                        }

                        #endregion

                        #region Linhagem

                        #region Pintos

                        if (item.form.Substring(0, 1).Equals("D"))
                        {
                            if (item.alt_desc.Trim().Equals(""))
                            {
                                if (doisItemsMesmaLinhagem == 0)
                                {
                                    vartablMobileTableAdapter vartbTA = new vartablMobileTableAdapter();
                                    CHICMobileDataSet.vartablMobileDataTable varDT =
                                        new CHICMobileDataSet.vartablMobileDataTable();

                                    vartbTA.FillByVariety(varDT, item.variety.Trim());

                                    seqItem = seqItem + 1;
                                    doisItemsMesmaLinhagem = doisItemsMesmaLinhagem + 1;

                                    itemPV.IDPedidoVenda = pedVenda.ID;
                                    itemPV.ProdCodEstr = varDT[0].desc.Trim();
                                    itemPV.DataEntregaInicial = item.cal_date.AddDays(22);
                                    itemPV.DataEntregaFinal = item.cal_date.AddDays(22);
                                    itemPV.QtdeLiquida = Convert.ToInt32(item.quantity);
                                    itemPV.QtdeReposicao = 0;
                                    itemPV.PrecoUnitario = item.price;
                                    itemPV.Sequencia = seqItem;
                                    itemPV.OrderNoCHIC = item.orderno.Trim();
                                    itemPV.Alterado = 0;
                                    itemPV.Importar = 0;

                                    if (item.item_desc.Contains("VAX"))
                                    {
                                        temVaxxitek = true;

                                        PRODUTO1 produtoApolo1 = apoloStatic.PRODUTO1
                                            .Where(w => w.USERCodigoCHIC == "161")
                                            .FirstOrDefault();

                                        PRODUTO produtoApolo = apoloStatic.PRODUTO
                                            .Where(w => w.ProdCodEstr == produtoApolo1.ProdCodEstr)
                                            .FirstOrDefault();

                                        vacPrim = new Vacinas_Primaria_Pedido_Venda();

                                        vacPrim.IDPedidoVenda = pedVenda.ID;
                                        vacPrim.ProdCodEstr = produtoApolo.ProdCodEstr;
                                        vacPrim.SeqItemPedVenda = 0;
                                        hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacPrim);
                                        hlbappSession.SaveChanges();

                                        #region Insere LOG - Vacina Primária

                                        logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                                        if (vacPrim != null)
                                        {
                                            logVacPrim.IDPedidoVenda = vacPrim.IDPedidoVenda;
                                            logVacPrim.ProdCodEstr = vacPrim.ProdCodEstr;
                                            logVacPrim.DataHora = DateTime.Now;
                                            logVacPrim.Operacao = pedVenda.Status;
                                            logVacPrim.IDVacPrimPedVenda = vacPrim.ID;
                                            logVacPrim.IDLogPedidoVenda = logPV.ID;

                                            hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                                            hlbppLOG.SaveChanges();
                                        }

                                        #endregion
                                    }
                                    else
                                        temVaxxitek = false;
                                }
                                else
                                {
                                    itemPV.QtdeLiquida = itemPV.QtdeLiquida + Convert.ToInt32(item.quantity);
                                    doisItemsMesmaLinhagem = doisItemsMesmaLinhagem + 1;
                                }

                                int existeBonificacao =
                                    lista.Where(w => w.orderno == item.orderno
                                        && w.variety == item.variety && w.alt_desc.Contains("Extra")).Count();

                                if (existeBonificacao == 0)
                                {
                                    hlbappSession.Item_Pedido_Venda.AddObject(itemPV);
                                    hlbappSession.SaveChanges();

                                    #region Insere LOG - Item_Ped_Venda

                                    LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                                    logItemPV.IDPedidoVenda = itemPV.IDPedidoVenda;
                                    logItemPV.Sequencia = itemPV.Sequencia;
                                    logItemPV.ProdCodEstr = itemPV.ProdCodEstr;
                                    logItemPV.DataEntregaInicial = itemPV.DataEntregaInicial;
                                    logItemPV.DataEntregaFinal = itemPV.DataEntregaFinal;
                                    logItemPV.QtdeLiquida = itemPV.QtdeLiquida;
                                    logItemPV.PercBonificacao = itemPV.PercBonificacao;
                                    logItemPV.QtdeBonificada = itemPV.QtdeBonificada;
                                    logItemPV.QtdeReposicao = itemPV.QtdeReposicao;
                                    logItemPV.PrecoUnitario = itemPV.PrecoUnitario;
                                    logItemPV.DataHora = DateTime.Now;
                                    logItemPV.Operacao = pedVenda.Status;
                                    logItemPV.OrderNoCHIC = itemPV.OrderNoCHIC;
                                    logItemPV.IDItPedVenda = itemPV.ID;
                                    logItemPV.IDLogPedidoVenda = logPV.ID;
                                    logItemPV.OrderNoCHIC = itemPV.OrderNoCHIC;
                                    logItemPV.OrderNoCHICReposicao = itemPV.OrderNoCHICReposicao;

                                    hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);
                                    hlbppLOG.SaveChanges();

                                    #endregion

                                    doisItemsMesmaLinhagem = 0;
                                    itemPV = new Item_Pedido_Venda();
                                }
                            }
                            else
                            {
                                itemPV.QtdeBonificada = Convert.ToInt32(item.quantity);
                                itemPV.PercBonificacao = (item.quantity / itemPV.QtdeLiquida) * 100.00m;

                                hlbappSession.Item_Pedido_Venda.AddObject(itemPV);
                                hlbappSession.SaveChanges();

                                #region Insere LOG - Item_Ped_Venda

                                LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                                logItemPV.IDPedidoVenda = itemPV.IDPedidoVenda;
                                logItemPV.Sequencia = itemPV.Sequencia;
                                logItemPV.ProdCodEstr = itemPV.ProdCodEstr;
                                logItemPV.DataEntregaInicial = itemPV.DataEntregaInicial;
                                logItemPV.DataEntregaFinal = itemPV.DataEntregaFinal;
                                logItemPV.QtdeLiquida = itemPV.QtdeLiquida;
                                logItemPV.PercBonificacao = itemPV.PercBonificacao;
                                logItemPV.QtdeBonificada = itemPV.QtdeBonificada;
                                logItemPV.QtdeReposicao = itemPV.QtdeReposicao;
                                logItemPV.PrecoUnitario = itemPV.PrecoUnitario;
                                logItemPV.DataHora = DateTime.Now;
                                logItemPV.Operacao = pedVenda.Status;
                                logItemPV.OrderNoCHIC = itemPV.OrderNoCHIC;
                                logItemPV.IDItPedVenda = itemPV.ID;
                                logItemPV.IDLogPedidoVenda = logPV.ID;
                                logItemPV.OrderNoCHIC = itemPV.OrderNoCHIC;
                                logItemPV.OrderNoCHICReposicao = itemPV.OrderNoCHICReposicao;

                                hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);
                                hlbppLOG.SaveChanges();

                                #endregion

                                doisItemsMesmaLinhagem = 0;
                                itemPV = new Item_Pedido_Venda();
                            }
                        }

                        #endregion

                        #region Ovos

                        if (item.form.Substring(0, 1).Equals("H"))
                        {
                            vartablMobileTableAdapter vartbTA = new vartablMobileTableAdapter();
                            CHICMobileDataSet.vartablMobileDataTable varDT =
                                new CHICMobileDataSet.vartablMobileDataTable();

                            vartbTA.FillByVariety(varDT, item.variety.Trim());

                            seqItem = seqItem + 1;
                            doisItemsMesmaLinhagem = doisItemsMesmaLinhagem + 1;

                            itemPV.IDPedidoVenda = pedVenda.ID;
                            itemPV.ProdCodEstr = varDT[0].desc.Trim() + " - Ovos";
                            itemPV.DataEntregaInicial = item.cal_date.AddDays(22);
                            itemPV.DataEntregaFinal = item.cal_date.AddDays(22);
                            itemPV.QtdeLiquida = Convert.ToInt32(item.quantity);
                            itemPV.QtdeReposicao = 0;
                            itemPV.PrecoUnitario = item.price;
                            itemPV.Sequencia = seqItem;
                            itemPV.OrderNoCHIC = item.orderno.Trim();
                            itemPV.Alterado = 0;
                            itemPV.Importar = 0;
                            itemPV.QtdeBonificada = 0;
                            itemPV.PercBonificacao = 0;
                            hlbappSession.Item_Pedido_Venda.AddObject(itemPV);
                            hlbappSession.SaveChanges();

                            #region Insere LOG - Item_Ped_Venda

                            LOG_Item_Pedido_Venda logItemPV = new LOG_Item_Pedido_Venda();
                            logItemPV.IDPedidoVenda = itemPV.IDPedidoVenda;
                            logItemPV.Sequencia = itemPV.Sequencia;
                            logItemPV.ProdCodEstr = itemPV.ProdCodEstr;
                            logItemPV.DataEntregaInicial = itemPV.DataEntregaInicial;
                            logItemPV.DataEntregaFinal = itemPV.DataEntregaFinal;
                            logItemPV.QtdeLiquida = itemPV.QtdeLiquida;
                            logItemPV.PercBonificacao = itemPV.PercBonificacao;
                            logItemPV.QtdeBonificada = itemPV.QtdeBonificada;
                            logItemPV.QtdeReposicao = itemPV.QtdeReposicao;
                            logItemPV.PrecoUnitario = itemPV.PrecoUnitario;
                            logItemPV.DataHora = DateTime.Now;
                            logItemPV.Operacao = pedVenda.Status;
                            logItemPV.OrderNoCHIC = itemPV.OrderNoCHIC;
                            logItemPV.IDItPedVenda = itemPV.ID;
                            logItemPV.IDLogPedidoVenda = logPV.ID;
                            logItemPV.OrderNoCHIC = itemPV.OrderNoCHIC;
                            logItemPV.OrderNoCHICReposicao = itemPV.OrderNoCHICReposicao;

                            hlbppLOG.LOG_Item_Pedido_Venda.AddObject(logItemPV);
                            hlbppLOG.SaveChanges();

                            #endregion

                            itemPV = new Item_Pedido_Venda();
                        }

                        #endregion

                        #endregion

                        #region Vacinas

                        if (item.form.Trim().Equals("VC"))
                        {
                            string codigoCHIC = item.item.Trim();

                            PRODUTO1 produtoApolo1 = apoloStatic.PRODUTO1
                                .Where(w => w.USERCodigoCHIC == codigoCHIC)
                                .FirstOrDefault();

                            PRODUTO produtoApolo = apoloStatic.PRODUTO
                                .Where(w => w.ProdCodEstr == produtoApolo1.ProdCodEstr)
                                .FirstOrDefault();

                            int existe = 0;

                            if (produtoApolo != null)
                            {
                                if (!temVaxxitek)
                                {
                                    existe = apoloStatic.PROD_GRUPO_SUBGRUPO
                                        .Where(w => w.GrpProdCod == "041"
                                            && w.SubGrpProdCod == "042"
                                            && w.ProdCodEstr == produtoApolo.ProdCodEstr)
                                        .Count();

                                    if (existe > 0)
                                    {
                                        if (pedVenda != null)
                                        {
                                            vacPrim = new Vacinas_Primaria_Pedido_Venda();

                                            vacPrim.IDPedidoVenda = pedVenda.ID;
                                            vacPrim.ProdCodEstr = produtoApolo.ProdCodEstr;
                                            vacPrim.SeqItemPedVenda = 0;
                                            hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacPrim);
                                            hlbappSession.SaveChanges();

                                            #region Insere LOG - Vacina Primária

                                            logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                                            if (vacPrim != null)
                                            {
                                                logVacPrim.IDPedidoVenda = vacPrim.IDPedidoVenda;
                                                logVacPrim.ProdCodEstr = vacPrim.ProdCodEstr;
                                                logVacPrim.DataHora = DateTime.Now;
                                                logVacPrim.Operacao = pedVenda.Status;
                                                logVacPrim.IDVacPrimPedVenda = vacPrim.ID;
                                                logVacPrim.IDLogPedidoVenda = logPV.ID;
                                                logVacPrim.SeqItemPedVenda = vacPrim.SeqItemPedVenda;

                                                hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                                                hlbppLOG.SaveChanges();
                                            }

                                            #endregion
                                        }
                                    }
                                }

                                existe = 0;
                                existe = apoloStatic.PROD_GRUPO_SUBGRUPO
                                    .Where(w => w.GrpProdCod == "041"
                                        && w.SubGrpProdCod == "043"
                                        && w.ProdCodEstr == produtoApolo.ProdCodEstr)
                                    .Count();

                                if (existe > 0)
                                {
                                    if (pedVenda != null)
                                    {
                                        Vacinas_Secundaria_Pedido_Venda vacSec =
                                            new Vacinas_Secundaria_Pedido_Venda();

                                        seqVacSec = seqVacSec + 1;
                                        vacSec.ProdCodEstr = produtoApolo.ProdCodEstr;
                                        vacSec.Sequencia = seqVacSec;
                                        vacSec.SeqItemPedVenda = 0;

                                        int existeVacPrimCadastrada = hlbappSession.Vacinas_Primaria_Pedido_Venda
                                            .Where(w => w.IDPedidoVenda == pedVenda.ID).Count();

                                        if (existeVacPrimCadastrada > 0)
                                        {
                                            vacSec.IDVacPrimPedVenda = vacPrim.ID;
                                            hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);

                                            #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                            LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                            logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                                            logVacSec.Sequencia = vacSec.Sequencia;
                                            logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                                            logVacSec.DataHora = DateTime.Now;
                                            logVacSec.Operacao = pedVenda.Status;
                                            logVacSec.IDVacSecPedVenda = vacSec.ID;
                                            logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                            logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                                            hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                            #endregion

                                            foreach (var itemVacSec in listVacSecAguardoVacPrim)
                                            {
                                                itemVacSec.IDVacPrimPedVenda = vacPrim.ID;
                                                hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(itemVacSec);

                                                #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                                logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                                logVacSec.IDVacPrimPedVenda = itemVacSec.IDVacPrimPedVenda;
                                                logVacSec.Sequencia = itemVacSec.Sequencia;
                                                logVacSec.ProdCodEstr = itemVacSec.ProdCodEstr;
                                                logVacSec.DataHora = DateTime.Now;
                                                logVacSec.Operacao = pedVenda.Status;
                                                logVacSec.IDVacSecPedVenda = itemVacSec.ID;
                                                logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                                logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                                                hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                                #endregion
                                            }

                                            hlbappSession.SaveChanges();

                                            listVacSecAguardoVacPrim = new List<Vacinas_Secundaria_Pedido_Venda>();
                                        }
                                        else
                                        {
                                            listVacSecAguardoVacPrim.Add(vacSec);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (pedVenda != null)
                                {
                                    if (item.item_desc.Contains("HVT/RISP"))
                                    {
                                        vacPrim = new Vacinas_Primaria_Pedido_Venda();

                                        vacPrim.IDPedidoVenda = pedVenda.ID;
                                        vacPrim.ProdCodEstr = "003.006.057";
                                        vacPrim.SeqItemPedVenda = 0;
                                        hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacPrim);
                                        hlbappSession.SaveChanges();

                                        #region Insere LOG - Vacina Primária

                                        logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                                        if (vacPrim != null)
                                        {
                                            logVacPrim.IDPedidoVenda = vacPrim.IDPedidoVenda;
                                            logVacPrim.ProdCodEstr = vacPrim.ProdCodEstr;
                                            logVacPrim.DataHora = DateTime.Now;
                                            logVacPrim.Operacao = pedVenda.Status;
                                            logVacPrim.IDVacPrimPedVenda = vacPrim.ID;
                                            logVacPrim.IDLogPedidoVenda = logPV.ID;
                                            logVacPrim.SeqItemPedVenda = vacPrim.SeqItemPedVenda;

                                            hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                                            hlbppLOG.SaveChanges();
                                        }

                                        #endregion
                                    }

                                    if (item.item_desc.Contains("RISP") && !item.item_desc.Contains("HVT") && !temVaxxitek)
                                    {
                                        vacPrim = new Vacinas_Primaria_Pedido_Venda();

                                        vacPrim.IDPedidoVenda = pedVenda.ID;
                                        vacPrim.ProdCodEstr = "003.006.096";
                                        vacPrim.SeqItemPedVenda = 0;
                                        hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacPrim);
                                        hlbappSession.SaveChanges();

                                        #region Insere LOG - Vacina Primária

                                        logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                                        if (vacPrim != null)
                                        {
                                            logVacPrim.IDPedidoVenda = vacPrim.IDPedidoVenda;
                                            logVacPrim.ProdCodEstr = vacPrim.ProdCodEstr;
                                            logVacPrim.DataHora = DateTime.Now;
                                            logVacPrim.Operacao = pedVenda.Status;
                                            logVacPrim.IDVacPrimPedVenda = vacPrim.ID;
                                            logVacPrim.IDLogPedidoVenda = logPV.ID;
                                            logVacPrim.SeqItemPedVenda = vacPrim.SeqItemPedVenda;

                                            hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                                            hlbppLOG.SaveChanges();
                                        }

                                        #endregion
                                    }

                                    if (item.item_desc.Contains("BOU"))
                                    {
                                        Vacinas_Secundaria_Pedido_Venda vacSec =
                                            new Vacinas_Secundaria_Pedido_Venda();

                                        seqVacSec = seqVacSec + 1;
                                        vacSec.ProdCodEstr = "003.006.074";
                                        vacSec.Sequencia = seqVacSec;
                                        vacSec.IDVacPrimPedVenda = vacPrim.ID;
                                        vacSec.SeqItemPedVenda = 0;

                                        hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);
                                        hlbappSession.SaveChanges();

                                        #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                        LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                        logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                                        logVacSec.Sequencia = vacSec.Sequencia;
                                        logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                                        logVacSec.DataHora = DateTime.Now;
                                        logVacSec.Operacao = pedVenda.Status;
                                        logVacSec.IDVacSecPedVenda = vacSec.ID;
                                        logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                        logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                                        hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                        #endregion
                                    }

                                    if (item.item_desc.Contains("GUMB"))
                                    {
                                        Vacinas_Secundaria_Pedido_Venda vacSec =
                                            new Vacinas_Secundaria_Pedido_Venda();

                                        seqVacSec = seqVacSec + 1;
                                        vacSec.ProdCodEstr = "003.006.004";
                                        vacSec.Sequencia = seqVacSec;
                                        vacSec.IDVacPrimPedVenda = vacPrim.ID;
                                        vacSec.SeqItemPedVenda = 0;

                                        hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);
                                        hlbappSession.SaveChanges();

                                        #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                        LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                        logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                                        logVacSec.Sequencia = vacSec.Sequencia;
                                        logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                                        logVacSec.DataHora = DateTime.Now;
                                        logVacSec.Operacao = pedVenda.Status;
                                        logVacSec.IDVacSecPedVenda = vacSec.ID;
                                        logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                        logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                                        hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                        #endregion
                                    }
                                }
                            }
                        }

                        #endregion

                        #region Serviço

                        if (item.item.Trim().Equals("169"))
                        {
                            string codCHIC = item.item.Trim();

                            PRODUTO1 produtoApolo1 = apoloStatic.PRODUTO1
                                .Where(w => w.USERCodigoCHIC == codCHIC)
                                .FirstOrDefault();

                            PRODUTO produtoApolo = apoloStatic.PRODUTO
                                .Where(w => w.ProdCodEstr == produtoApolo1.ProdCodEstr)
                                .FirstOrDefault();

                            Servicos_Pedido_Venda serv = new Servicos_Pedido_Venda();
                            serv.IDPedidoVenda = pedVenda.ID;
                            serv.ProdCodEstr = produtoApolo.ProdCodEstr;
                            serv.PercAplicacaoServico = 100;
                            hlbappSession.Servicos_Pedido_Venda.AddObject(serv);
                            hlbappSession.SaveChanges();

                            #region Insere LOG - Servico_Pedido_Venda

                            LOG_Servicos_Pedido_Venda logServ = new LOG_Servicos_Pedido_Venda();
                            logServ.IDPedidoVenda = serv.IDPedidoVenda;
                            logServ.ProdCodEstr = serv.ProdCodEstr;
                            logServ.PercAplicacaoServico = serv.PercAplicacaoServico;
                            logServ.DataHora = DateTime.Now;
                            logServ.Operacao = pedVenda.Status;
                            logServ.IDServPedVenda = serv.ID;
                            logServ.IDLogPedidoVenda = logPV.ID;

                            hlbppLOG.LOG_Servicos_Pedido_Venda.AddObject(logServ);
                            hlbppLOG.SaveChanges();

                            #endregion
                        }

                        #endregion

                        orderNoAnterior = item.orderno.Trim();
                    }
                }
            }
            catch (Exception)
            {

            }

            var listaRet = hlbappSession.Pedido_Venda.ToList();

            return View("Index", listaRet);
        }

        public ActionResult ImportaDadosAntigosVacinas()
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            string orderNoTeste = "";

            try
            {
                DateTime dataInicial = Convert.ToDateTime("08/02/2016");
                DateTime dataFinal = Convert.ToDateTime("31/12/2017");

                bookedFilterMobileTableAdapter bookedTA = new bookedFilterMobileTableAdapter();
                CHICMobileDataSet.bookedFilterMobileDataTable bDT =
                    new CHICMobileDataSet.bookedFilterMobileDataTable();
                bookedTA.FillByHatchDate(bDT, dataInicial, dataFinal);

                var lista = bDT
                    .OrderBy(o => o.cal_date)
                    .ThenBy(t => t.orderno)
                    .ThenBy(t => t.item_ord)
                    .ThenByDescending(t => t.price)
                    .ThenByDescending(t => t.quantity)
                    .ToList();

                //var listaFiltro = lista.Where(w => w.orderno == "59025");
                var listaFiltro = lista;

                Pedido_Venda pedVenda = new Pedido_Venda();
                Vacinas_Primaria_Pedido_Venda vacPrim = new Vacinas_Primaria_Pedido_Venda();
                int seqVacSec = 0;
                int seqItem = 0;
                int doisItemsMesmaLinhagem = 0;
                List<Vacinas_Secundaria_Pedido_Venda> listVacSecAguardoVacPrim =
                    new List<Vacinas_Secundaria_Pedido_Venda>();
                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                bool temVaxxitek = false;

                HLBAPPEntities hlbppLOG = new HLBAPPEntities();

                string orderNoAnterior = "";
                foreach (var item in listaFiltro)
                {
                    orderNoTeste = item.orderno.Trim();

                    if (item.orderno.Trim().Equals("59376"))
                        orderNoTeste = item.orderno.Trim();

                    #region Cabeçalho

                    if (item.orderno.Trim() != orderNoAnterior)
                    {
                        temVaxxitek = false;

                        doisItemsMesmaLinhagem = 0;
                        seqVacSec = 0;
                        seqItem = 0;
                        string orderno = item.orderno.Trim();
                        pedVenda = hlbappSession.Pedido_Venda
                            .Where(w => hlbappSession.Item_Pedido_Venda
                                .Any(a => w.ID == a.IDPedidoVenda && a.OrderNoCHIC == orderno)
                                && w.Status == "Importado Total").FirstOrDefault();

                        if (pedVenda != null)
                        {
                            ENTIDADE entidade = apoloStatic.ENTIDADE.Where(w => w.EntCod == pedVenda.CodigoCliente)
                                .FirstOrDefault();

                            salesmanTableAdapter slTA = new salesmanTableAdapter();
                            CHICMobileDataSet.salesmanDataTable slDT = new CHICMobileDataSet.salesmanDataTable();
                            slTA.FillByCode(slDT, pedVenda.Vendedor);

                            List<Vacinas_Primaria_Pedido_Venda> listaVacPrimAntigas = hlbappSession
                                .Vacinas_Primaria_Pedido_Venda.Where(w => w.IDPedidoVenda == pedVenda.ID).ToList();

                            foreach (var vacPrimAntiga in listaVacPrimAntigas)
                            {
                                hlbappSession.Vacinas_Primaria_Pedido_Venda.DeleteObject(vacPrimAntiga);
                            }

                            List<Vacinas_Secundaria_Pedido_Venda> listaVacSecAntigas = hlbappSession
                                .Vacinas_Secundaria_Pedido_Venda
                                .Where(w => hlbappSession.Vacinas_Primaria_Pedido_Venda
                                    .Any(a => a.ID == w.IDVacPrimPedVenda && a.IDPedidoVenda == pedVenda.ID)).ToList();

                            foreach (var vacSecAntiga in listaVacSecAntigas)
                            {
                                hlbappSession.Vacinas_Secundaria_Pedido_Venda.DeleteObject(vacSecAntiga);
                            }

                            hlbappSession.SaveChanges();
                        }
                    }

                    #endregion

                    #region Linhagem

                    #region Pintos

                    if (item.form.Substring(0, 1).Equals("D"))
                    {
                        if (item.alt_desc.Trim().Equals(""))
                        {
                            if (doisItemsMesmaLinhagem == 0)
                            {
                                vartablMobileTableAdapter vartbTA = new vartablMobileTableAdapter();
                                CHICMobileDataSet.vartablMobileDataTable varDT =
                                    new CHICMobileDataSet.vartablMobileDataTable();

                                vartbTA.FillByVariety(varDT, item.variety.Trim());

                                seqItem = seqItem + 1;
                                doisItemsMesmaLinhagem = doisItemsMesmaLinhagem + 1;

                                if (item.item_desc.Contains("VAX"))
                                {
                                    temVaxxitek = true;

                                    PRODUTO1 produtoApolo1 = apoloStatic.PRODUTO1
                                        .Where(w => w.USERCodigoCHIC == "161")
                                        .FirstOrDefault();

                                    PRODUTO produtoApolo = apoloStatic.PRODUTO
                                        .Where(w => w.ProdCodEstr == produtoApolo1.ProdCodEstr)
                                        .FirstOrDefault();

                                    if (pedVenda != null)
                                    {
                                        vacPrim = new Vacinas_Primaria_Pedido_Venda();

                                        vacPrim.IDPedidoVenda = pedVenda.ID;
                                        vacPrim.ProdCodEstr = produtoApolo.ProdCodEstr;
                                        vacPrim.SeqItemPedVenda = 0;
                                        hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacPrim);
                                        hlbappSession.SaveChanges();

                                        #region Insere LOG - Vacina Primária

                                        logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                                        if (vacPrim != null)
                                        {
                                            logVacPrim.IDPedidoVenda = vacPrim.IDPedidoVenda;
                                            logVacPrim.ProdCodEstr = vacPrim.ProdCodEstr;
                                            logVacPrim.DataHora = DateTime.Now;
                                            logVacPrim.Operacao = pedVenda.Status;
                                            logVacPrim.IDVacPrimPedVenda = vacPrim.ID;
                                            logVacPrim.IDLogPedidoVenda = logPV.ID;
                                            logVacPrim.SeqItemPedVenda = vacPrim.SeqItemPedVenda;

                                            hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                                            hlbppLOG.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                                else
                                    temVaxxitek = false;
                            }
                            else
                            {
                                doisItemsMesmaLinhagem = doisItemsMesmaLinhagem + 1;
                            }

                            int existeBonificacao =
                                lista.Where(w => w.orderno == item.orderno
                                    && w.variety == item.variety && w.alt_desc.Contains("Extra")).Count();

                            if (existeBonificacao == 0)
                            {
                                doisItemsMesmaLinhagem = 0;
                            }
                        }
                        else
                        {
                            doisItemsMesmaLinhagem = 0;
                        }
                    }

                    #endregion

                    #region Ovos

                    if (item.form.Substring(0, 1).Equals("H"))
                    {
                        vartablMobileTableAdapter vartbTA = new vartablMobileTableAdapter();
                        CHICMobileDataSet.vartablMobileDataTable varDT =
                            new CHICMobileDataSet.vartablMobileDataTable();

                        vartbTA.FillByVariety(varDT, item.variety.Trim());

                        seqItem = seqItem + 1;
                        doisItemsMesmaLinhagem = doisItemsMesmaLinhagem + 1;
                    }

                    #endregion

                    #endregion

                    #region Vacinas

                    if (item.form.Trim().Equals("VC"))
                    {
                        string codigoCHIC = item.item.Trim();

                        PRODUTO1 produtoApolo1 = apoloStatic.PRODUTO1
                            .Where(w => w.USERCodigoCHIC == codigoCHIC)
                            .FirstOrDefault();

                        PRODUTO produtoApolo = apoloStatic.PRODUTO
                            .Where(w => w.ProdCodEstr == produtoApolo1.ProdCodEstr)
                            .FirstOrDefault();

                        int existe = 0;

                        if (produtoApolo != null)
                        {
                            if (!temVaxxitek)
                            {
                                existe = apoloStatic.PROD_GRUPO_SUBGRUPO
                                    .Where(w => w.GrpProdCod == "041"
                                        && w.SubGrpProdCod == "042"
                                        && w.ProdCodEstr == produtoApolo.ProdCodEstr)
                                    .Count();

                                if (existe > 0)
                                {
                                    if (pedVenda != null)
                                    {
                                        vacPrim = new Vacinas_Primaria_Pedido_Venda();

                                        vacPrim.IDPedidoVenda = pedVenda.ID;
                                        vacPrim.ProdCodEstr = produtoApolo.ProdCodEstr;
                                        vacPrim.SeqItemPedVenda = 0;
                                        hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacPrim);
                                        hlbappSession.SaveChanges();

                                        #region Insere LOG - Vacina Primária

                                        logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                                        if (vacPrim != null)
                                        {
                                            logVacPrim.IDPedidoVenda = vacPrim.IDPedidoVenda;
                                            logVacPrim.ProdCodEstr = vacPrim.ProdCodEstr;
                                            logVacPrim.DataHora = DateTime.Now;
                                            logVacPrim.Operacao = pedVenda.Status;
                                            logVacPrim.IDVacPrimPedVenda = vacPrim.ID;
                                            logVacPrim.IDLogPedidoVenda = logPV.ID;
                                            logVacPrim.SeqItemPedVenda = vacPrim.SeqItemPedVenda;

                                            hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                                            hlbppLOG.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                            }

                            existe = 0;
                            existe = apoloStatic.PROD_GRUPO_SUBGRUPO
                                .Where(w => w.GrpProdCod == "041"
                                    && w.SubGrpProdCod == "043"
                                    && w.ProdCodEstr == produtoApolo.ProdCodEstr)
                                .Count();

                            if (existe > 0)
                            {
                                if (pedVenda != null)
                                {
                                    Vacinas_Secundaria_Pedido_Venda vacSec =
                                        new Vacinas_Secundaria_Pedido_Venda();

                                    seqVacSec = seqVacSec + 1;
                                    vacSec.ProdCodEstr = produtoApolo.ProdCodEstr;
                                    vacSec.Sequencia = seqVacSec;
                                    vacSec.SeqItemPedVenda = 0;

                                    int existeVacPrimCadastrada = hlbappSession.Vacinas_Primaria_Pedido_Venda
                                        .Where(w => w.IDPedidoVenda == pedVenda.ID).Count();

                                    if (existeVacPrimCadastrada > 0)
                                    {
                                        vacSec.IDVacPrimPedVenda = vacPrim.ID;
                                        hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);

                                        #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                        LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                        logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                                        logVacSec.Sequencia = vacSec.Sequencia;
                                        logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                                        logVacSec.DataHora = DateTime.Now;
                                        logVacSec.Operacao = pedVenda.Status;
                                        logVacSec.IDVacSecPedVenda = vacSec.ID;
                                        logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                        logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                                        hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                        #endregion

                                        foreach (var itemVacSec in listVacSecAguardoVacPrim)
                                        {
                                            itemVacSec.IDVacPrimPedVenda = vacPrim.ID;
                                            hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(itemVacSec);

                                            #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                            logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                            logVacSec.IDVacPrimPedVenda = itemVacSec.IDVacPrimPedVenda;
                                            logVacSec.Sequencia = itemVacSec.Sequencia;
                                            logVacSec.ProdCodEstr = itemVacSec.ProdCodEstr;
                                            logVacSec.DataHora = DateTime.Now;
                                            logVacSec.Operacao = pedVenda.Status;
                                            logVacSec.IDVacSecPedVenda = itemVacSec.ID;
                                            logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                            logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                                            hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                            #endregion
                                        }

                                        hlbappSession.SaveChanges();

                                        listVacSecAguardoVacPrim = new List<Vacinas_Secundaria_Pedido_Venda>();
                                    }
                                    else
                                    {
                                        listVacSecAguardoVacPrim.Add(vacSec);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (pedVenda != null)
                            {
                                if (item.item_desc.Contains("HVT/RISP"))
                                {
                                    vacPrim = new Vacinas_Primaria_Pedido_Venda();

                                    vacPrim.IDPedidoVenda = pedVenda.ID;
                                    vacPrim.ProdCodEstr = "003.006.057";
                                    vacPrim.SeqItemPedVenda = 0;
                                    hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacPrim);
                                    hlbappSession.SaveChanges();

                                    #region Insere LOG - Vacina Primária

                                    logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                                    if (vacPrim != null)
                                    {
                                        logVacPrim.IDPedidoVenda = vacPrim.IDPedidoVenda;
                                        logVacPrim.ProdCodEstr = vacPrim.ProdCodEstr;
                                        logVacPrim.DataHora = DateTime.Now;
                                        logVacPrim.Operacao = pedVenda.Status;
                                        logVacPrim.IDVacPrimPedVenda = vacPrim.ID;
                                        logVacPrim.IDLogPedidoVenda = logPV.ID;
                                        logVacPrim.SeqItemPedVenda = vacPrim.SeqItemPedVenda;

                                        hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                                        hlbppLOG.SaveChanges();
                                    }

                                    #endregion
                                }

                                if (item.item_desc.Contains("RISP") && !item.item_desc.Contains("HVT") && !temVaxxitek)
                                {
                                    vacPrim = new Vacinas_Primaria_Pedido_Venda();

                                    vacPrim.IDPedidoVenda = pedVenda.ID;
                                    vacPrim.ProdCodEstr = "003.006.096";
                                    vacPrim.SeqItemPedVenda = 0;
                                    hlbappSession.Vacinas_Primaria_Pedido_Venda.AddObject(vacPrim);
                                    hlbappSession.SaveChanges();

                                    #region Insere LOG - Vacina Primária

                                    logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                                    if (vacPrim != null)
                                    {
                                        logVacPrim.IDPedidoVenda = vacPrim.IDPedidoVenda;
                                        logVacPrim.ProdCodEstr = vacPrim.ProdCodEstr;
                                        logVacPrim.DataHora = DateTime.Now;
                                        logVacPrim.Operacao = pedVenda.Status;
                                        logVacPrim.IDVacPrimPedVenda = vacPrim.ID;
                                        logVacPrim.IDLogPedidoVenda = logPV.ID;
                                        logVacPrim.SeqItemPedVenda = vacPrim.SeqItemPedVenda;

                                        hlbppLOG.LOG_Vacinas_Primaria_Pedido_Venda.AddObject(logVacPrim);
                                        hlbppLOG.SaveChanges();
                                    }

                                    #endregion
                                }

                                if (item.item_desc.Contains("BOU"))
                                {
                                    Vacinas_Secundaria_Pedido_Venda vacSec =
                                        new Vacinas_Secundaria_Pedido_Venda();

                                    seqVacSec = seqVacSec + 1;
                                    vacSec.ProdCodEstr = "003.006.074";
                                    vacSec.Sequencia = seqVacSec;
                                    vacSec.IDVacPrimPedVenda = vacPrim.ID;
                                    vacSec.SeqItemPedVenda = 0;

                                    hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);
                                    hlbappSession.SaveChanges();

                                    #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                    LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                    logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                                    logVacSec.Sequencia = vacSec.Sequencia;
                                    logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                                    logVacSec.DataHora = DateTime.Now;
                                    logVacSec.Operacao = pedVenda.Status;
                                    logVacSec.IDVacSecPedVenda = vacSec.ID;
                                    logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                    logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                                    hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                    #endregion
                                }

                                if (item.item_desc.Contains("GUMB"))
                                {
                                    Vacinas_Secundaria_Pedido_Venda vacSec =
                                        new Vacinas_Secundaria_Pedido_Venda();

                                    seqVacSec = seqVacSec + 1;
                                    vacSec.ProdCodEstr = "003.006.004";
                                    vacSec.Sequencia = seqVacSec;
                                    vacSec.IDVacPrimPedVenda = vacPrim.ID;
                                    vacSec.SeqItemPedVenda = 0;

                                    hlbappSession.Vacinas_Secundaria_Pedido_Venda.AddObject(vacSec);
                                    hlbappSession.SaveChanges();

                                    #region Insere LOG - Vacina_Secundaria_Pedido_Venda

                                    LOG_Vacinas_Secundaria_Pedido_Venda logVacSec = new LOG_Vacinas_Secundaria_Pedido_Venda();
                                    logVacSec.IDVacPrimPedVenda = vacSec.IDVacPrimPedVenda;
                                    logVacSec.Sequencia = vacSec.Sequencia;
                                    logVacSec.ProdCodEstr = vacSec.ProdCodEstr;
                                    logVacSec.DataHora = DateTime.Now;
                                    logVacSec.Operacao = pedVenda.Status;
                                    logVacSec.IDVacSecPedVenda = vacSec.ID;
                                    logVacSec.IDVacPrimLogPedidoVenda = logVacPrim.ID;
                                    logVacSec.SeqItemPedVenda = vacSec.SeqItemPedVenda;

                                    hlbppLOG.LOG_Vacinas_Secundaria_Pedido_Venda.AddObject(logVacSec);

                                    #endregion
                                }
                            }
                        }
                    }

                    #endregion

                    #region Serviço

                    if (item.item.Trim().Equals("169"))
                    {
                        string codCHIC = item.item.Trim();

                        PRODUTO1 produtoApolo1 = apoloStatic.PRODUTO1
                            .Where(w => w.USERCodigoCHIC == codCHIC)
                            .FirstOrDefault();

                        PRODUTO produtoApolo = apoloStatic.PRODUTO
                            .Where(w => w.ProdCodEstr == produtoApolo1.ProdCodEstr)
                            .FirstOrDefault();

                    }

                    #endregion

                    orderNoAnterior = item.orderno.Trim();
                }
            }
            catch (Exception)
            {

            }

            var listaRet = hlbappSession.Pedido_Venda.ToList();

            return View("Index", listaRet);
        }

        public ActionResult InsereRispensTodaVaxxitek()
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            string orderNoTeste = "";

            try
            {
                DateTime dataInicial = Convert.ToDateTime("17/02/2016");
                DateTime dataFinal = Convert.ToDateTime("31/12/2017");

                bookedFilterMobileTableAdapter bookedTA = new bookedFilterMobileTableAdapter();
                CHICMobileDataSet.bookedFilterMobileDataTable bDT =
                    new CHICMobileDataSet.bookedFilterMobileDataTable();
                bookedTA.FillByHatchDate(bDT, dataInicial, dataFinal);

                var lista = bDT
                    .OrderBy(o => o.cal_date)
                    .ThenBy(t => t.orderno)
                    .ThenBy(t => t.item_ord)
                    .ThenByDescending(t => t.price)
                    .ThenByDescending(t => t.quantity)
                    .ToList();

                //var listaFiltro = lista.Where(w => w.orderno == "59450");
                var listaFiltro = lista;

                Pedido_Venda pedVenda = new Pedido_Venda();
                Vacinas_Primaria_Pedido_Venda vacPrim = new Vacinas_Primaria_Pedido_Venda();
                //int seqVacSec = 0;
                int seqItem = 0;
                int doisItemsMesmaLinhagem = 0;
                List<Vacinas_Secundaria_Pedido_Venda> listVacSecAguardoVacPrim =
                    new List<Vacinas_Secundaria_Pedido_Venda>();
                LOG_Pedido_Venda logPV = new LOG_Pedido_Venda();
                LOG_Vacinas_Primaria_Pedido_Venda logVacPrim = new LOG_Vacinas_Primaria_Pedido_Venda();

                //bool temVaxxitek = false;

                string orderNoAnterior = "";
                foreach (var item in listaFiltro)
                {
                    orderNoTeste = item.orderno.Trim();

                    if (item.orderno.Trim().Equals("59376"))
                        orderNoTeste = item.orderno.Trim();

                    #region Cabeçalho

                    if (item.orderno.Trim() != orderNoAnterior)
                    {
                        //temVaxxitek = false;

                        doisItemsMesmaLinhagem = 0;
                        //seqVacSec = 0;
                        seqItem = 0;
                        string orderno = item.orderno.Trim();
                        pedVenda = hlbappSession.Pedido_Venda
                            .Where(w => hlbappSession.Item_Pedido_Venda
                                .Any(a => w.ID == a.IDPedidoVenda && a.OrderNoCHIC == orderno)
                                && w.Status == "Importado Total").FirstOrDefault();
                    }

                    #endregion

                    #region Linhagem

                    #region Pintos

                    if (item.form.Substring(0, 1).Equals("D"))
                    {
                        if (item.alt_desc.Trim().Equals(""))
                        {
                            if (doisItemsMesmaLinhagem == 0)
                            {
                                vartablMobileTableAdapter vartbTA = new vartablMobileTableAdapter();
                                CHICMobileDataSet.vartablMobileDataTable varDT =
                                    new CHICMobileDataSet.vartablMobileDataTable();

                                vartbTA.FillByVariety(varDT, item.variety.Trim());

                                seqItem = seqItem + 1;
                                doisItemsMesmaLinhagem = doisItemsMesmaLinhagem + 1;

                                if (item.item_desc.Contains("VAX"))
                                {
                                    //temVaxxitek = true;

                                    PRODUTO1 produtoApolo1 = apoloStatic.PRODUTO1
                                        .Where(w => w.USERCodigoCHIC == "161")
                                        .FirstOrDefault();

                                    PRODUTO produtoApolo = apoloStatic.PRODUTO
                                        .Where(w => w.ProdCodEstr == produtoApolo1.ProdCodEstr)
                                        .FirstOrDefault();
                                }
                                //else
                                    //temVaxxitek = false;
                            }
                            else
                            {
                                doisItemsMesmaLinhagem = doisItemsMesmaLinhagem + 1;
                            }

                            int existeBonificacao =
                                lista.Where(w => w.orderno == item.orderno
                                    && w.variety == item.variety && w.alt_desc.Contains("Extra")).Count();

                            if (existeBonificacao == 0)
                            {
                                doisItemsMesmaLinhagem = 0;
                            }
                        }
                        else
                        {
                            doisItemsMesmaLinhagem = 0;
                        }
                    }

                    #endregion

                    #region Ovos

                    if (item.form.Substring(0, 1).Equals("H"))
                    {
                        vartablMobileTableAdapter vartbTA = new vartablMobileTableAdapter();
                        CHICMobileDataSet.vartablMobileDataTable varDT =
                            new CHICMobileDataSet.vartablMobileDataTable();

                        vartbTA.FillByVariety(varDT, item.variety.Trim());

                        seqItem = seqItem + 1;
                        doisItemsMesmaLinhagem = doisItemsMesmaLinhagem + 1;
                    }

                    #endregion

                    #endregion

                    #region Vacinas

                    if (item.form.Trim().Equals("VC"))
                    {
                        string codigoCHIC = item.item.Trim();

                        if (codigoCHIC.Equals("161"))
                        {
                            string item_ord = ("0" + (Convert.ToInt32(item.item_ord) + 1).ToString());

                            tablesMobileTableAdapter tables = new tablesMobileTableAdapter();
                            CHICMobileDataSet.tablesMobileDataTable tablesDT = new CHICMobileDataSet.tablesMobileDataTable();

                            //tables.FillByName(tablesDT, "booked");
                            //int booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            int booked_id = Convert.ToInt32(NextCodeCHIC("booked"));
                            string itemno = "165";

                            itemsMobileTableAdapter items = new itemsMobileTableAdapter();
                            CHICMobileDataSet.itemsMobileDataTable itemsDT = new CHICMobileDataSet.itemsMobileDataTable();

                            items.FillByItemNo(itemsDT, itemno);

                            bookedMobileTableAdapter bookedM = new bookedMobileTableAdapter();
                            DateTime cal_date = item.cal_date;
                            string custoNo = item.cust_no.Trim();
                            string orderNO = item.orderno.Trim();
                            string creatdby = item.creatdby;
                            DateTime datecrtd = item.datecrtd;

                            bookedM.Insert(booked_id, cal_date, custoNo, itemno,
                                0, 0, orderNO, "O", String.Empty, String.Empty, String.Empty, "CH",
                                "", String.Empty, item_ord, creatdby, datecrtd, creatdby, datecrtd,
                                cal_date, 0, String.Empty, 0);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");
                        }
                    }

                    #endregion

                    #region Serviço

                    if (item.item.Trim().Equals("169"))
                    {
                        string codCHIC = item.item.Trim();

                        PRODUTO1 produtoApolo1 = apoloStatic.PRODUTO1
                            .Where(w => w.USERCodigoCHIC == codCHIC)
                            .FirstOrDefault();

                        PRODUTO produtoApolo = apoloStatic.PRODUTO
                            .Where(w => w.ProdCodEstr == produtoApolo1.ProdCodEstr)
                            .FirstOrDefault();

                    }

                    #endregion

                    orderNoAnterior = item.orderno.Trim();
                }
            }
            catch (Exception)
            {

            }

            var listaRet = hlbappSession.Pedido_Venda.ToList();

            return View("Index", listaRet);
        }

        public ActionResult ImportaDadosCHICParent()
        {
            return View();
        }

        public ActionResult ImportaPlanalto()
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            bdApoloEntities apoloStatic = new bdApoloEntities();

            #region Deleta Pedidos Antigos
            /*
            ordersMobileTableAdapter orderTADel = new ordersMobileTableAdapter();
            int_commMTableAdapter intcommTADel = new int_commMTableAdapter();
            bookedMobileTableAdapter bookedMDel = new bookedMobileTableAdapter();

            CHICMobileDataSet.ordersMobileDataTable oDTDel = new CHICMobileDataSet.ordersMobileDataTable();
            //orderTADel.FillByInvComp(oDTDel, "PL");
            orderTADel.FillByDekalb(oDTDel);

            foreach (var item in oDTDel)
            {
                intcommTADel.DeleteQuery(item.orderno);
                bookedMDel.DeleteQuery(item.orderno);
                orderTADel.DeleteQuery(item.orderno);
            }
             */

            #endregion

            DateTime data = Convert.ToDateTime("2016-09-27 00:00:00.000");
            DateTime dataNascimento = Convert.ToDateTime("2016-09-28 00:00:00.000");
            //DateTime dataNascimento = Convert.ToDateTime("2016-11-04 00:00:00.000");
            var listaPedidos = hlbappSession.CHIC_Programacoes
                //.Where(w => w.DATA == data && w.CODAPOLO == "0011043")
                .Where(w => w.Importacao == data 
                    && w.DATA >= dataNascimento
                    //&& w.DATA == dataNascimento
                    //&& w.CODAPOLO == "0020368"
                    )
                .GroupBy(g => new 
                {
                    g.DATA,
                    g.CODAPOLO,
                    g.EE,
                    g.COD_REP_APOLO,
                    g.COD_EMB,
                    g.QT_EMB,
                    g.DSCTO
                })
                .Select(s => new
                {
                    s.Key.DATA,
                    s.Key.CODAPOLO,
                    s.Key.EE,
                    s.Key.COD_REP_APOLO,
                    s.Key.COD_EMB,
                    s.Key.QT_EMB,
                    s.Key.DSCTO
                })
                .OrderBy(o => o.DATA).ThenBy(t => t.CODAPOLO).ToList();

            ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();
            tablesMobileTableAdapter tables = new tablesMobileTableAdapter();
            CHICMobileDataSet.tablesMobileDataTable tablesDT = new CHICMobileDataSet.tablesMobileDataTable();
            bookedMobileTableAdapter bookedM = new bookedMobileTableAdapter();

            foreach (var pedido in listaPedidos)
            {
                //int entrou = 0;

                //DateTime data1 = Convert.ToDateTime("08/12/2016");
                //if (pedido.DATA.Equals(data1) && pedido.CODAPOLO.Equals("0021441"))
                    //entrou = 1;

                DateTime cal_date = Convert.ToDateTime(pedido.DATA).AddDays(-21);
                CHICMobileDataSet.bookedMobileDataTable bDT = new CHICMobileDataSet.bookedMobileDataTable();
                bookedM.FillByCalDateAndCustNo(bDT, cal_date, pedido.CODAPOLO);

                salesmanTableAdapter sTA = new salesmanTableAdapter();
                CHICMobileDataSet.salesmanDataTable sDT = new CHICMobileDataSet.salesmanDataTable();
                sTA.Fill(sDT);

                string embalagem = "";
                if (pedido.COD_EMB.Equals("PL"))
                    embalagem = "601";
                else
                    embalagem = "602";

                int qtdEmbalagem = Convert.ToInt32(pedido.QT_EMB);

                int existe = bDT.Where(w => sDT.Any(a => a.sl_code == w.salesrep
                        && a.inv_comp.Equals("PL"))
                    && w.item == embalagem && w.quantity == qtdEmbalagem).Count();

                //int existe = bDT.Where(w => (w.item == "955" || w.item == "957")).Count();

                int itemCod = 0;
                int booked_id = 0;
                string item_ord = "";
                string log = "";
                bool existiaPedidoCHICNaoAlterado = false;

                if (existe > 0)
                {
                    ordersMobileTableAdapter orderTADel = new ordersMobileTableAdapter();
                    int_commMTableAdapter intcommTADel = new int_commMTableAdapter();
                    bookedMobileTableAdapter bookedMDel = new bookedMobileTableAdapter();

                    //var pedidos = bDT.Where(w => w.item == embalagem && w.quantity == qtdEmbalagem).ToList();
                    var pedidos = bDT.Where(w => w.item == embalagem && w.quantity == qtdEmbalagem).ToList();

                    foreach (var item in pedidos)
                    {
                        int existeNaoAlterado = bDT.Where(w => !w.modifdby.Equals("Importaç")
                            && w.orderno == item.orderno).Count();
                        if (existeNaoAlterado == 0)
                        {
                            intcommTADel.DeleteQuery(item.orderno);
                            bookedMDel.DeleteQuery(item.orderno);
                            orderTADel.DeleteQuery(item.orderno);

                            existiaPedidoCHICNaoAlterado = true;
                        }
                        else
                        {
                            #region Insere Desconto

                            existe = 0;
                            existe = bDT.Where(w => w.item == "500").Count();

                            if (pedido.DSCTO > 0 && existe == 0)
                            {
                                //tables.FillByName(tablesDT, "booked");
                                //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                                booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                                itemCod = itemCod + 1;
                                item_ord = "0" + itemCod.ToString();

                                decimal desconto = Convert.ToDecimal(pedido.DSCTO);

                                bookedM.Insert(booked_id, cal_date, pedido.CODAPOLO, "500", 0,
                                    desconto, item.orderno, "O",
                                    String.Empty, String.Empty, String.Empty, "NM", String.Empty, String.Empty, item_ord,
                                    "Importação", DateTime.Now, "Importação", DateTime.Now, cal_date, 0,
                                    pedido.COD_REP_APOLO, 0);

                                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                                log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                    Session["login"].ToString() + "|" +
                                    "Desconto" + "|" +
                                    booked_id.ToString() + "|" +
                                    cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                    embalagem + "|" +
                                    pedido.COD_EMB + "|" +
                                    "" + "\r\n";
                            }

                            #endregion
                        }
                    }

                    //existe = 0;
                }

                //if (existe == 0)
                if (existiaPedidoCHICNaoAlterado)
                {
                    #region Insere Cabeçalho do Pedido

                    CHIC_Programacoes chicProgramacoes = hlbappSession.CHIC_Programacoes.Where(w => w.CODAPOLO == pedido.CODAPOLO
                        && w.DATA == pedido.DATA && w.COND_TXT != "").FirstOrDefault();

                    string delivery = "";
                    if (chicProgramacoes != null)
                        delivery = chicProgramacoes.COND_TXT;

                    //string orderNO = (Convert.ToInt32(orderTA.MaxOrderNo()) + 1).ToString();
                    //tables.FillByName(tablesDT, "orders");
                    //string orderNO = (Convert.ToInt32(tablesDT[0].lastno) + 1).ToString();
                    string orderNO = NextCodeCHIC("orders");

                    orderTA.Insert(orderNO, 0, Convert.ToDateTime("01/01/1988"), Convert.ToDateTime(pedido.DATA),
                        pedido.CODAPOLO, "Y",
                        "Import.Planalto", 0, Convert.ToDateTime(pedido.DATA), delivery,
                        String.Empty, String.Empty, String.Empty, String.Empty, String.Empty, 0, pedido.COD_REP_APOLO,
                        String.Empty, String.Empty);

                    //tables.UpdateQuery(Convert.ToDecimal(orderNO), "orders");

                    log = "\r\n\r\n" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                        Session["login"].ToString() + "|" +
                        "Inclusão" + " Cabeçalho|" +
                        orderNO + "|" +
                        Convert.ToDateTime(pedido.DATA).ToShortDateString() + "|" +
                        pedido.CODAPOLO + "|" +
                        Convert.ToDateTime(pedido.DATA).ToShortDateString() + " " +
                        Convert.ToDateTime(pedido.DATA).ToShortDateString() + "|" +
                        delivery + "|" +
                        pedido.COD_REP_APOLO + "\n\r";

                    #endregion

                    #region Insere Produtos

                    var listaItens = hlbappSession.CHIC_Programacoes
                        .Where(w => w.CODAPOLO == pedido.CODAPOLO && w.DATA == pedido.DATA
                           && w.QT_EMB == pedido.QT_EMB
                           && w.Importacao == data)
                        .ToList();

                    foreach (var item in listaItens)
                    {
                        //tables.FillByName(tablesDT, "booked");
                        //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                        booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                        string produto = item.PRODUTO.ToString();
                        PRODUTO1 prodApolo1 = apoloStatic.PRODUTO1.Where(w => w.USERCodigoCHIC == produto)
                            .FirstOrDefault();
                        PRODUTO prodApolo = apoloStatic.PRODUTO
                                .Where(w => w.ProdCodEstr == prodApolo1.ProdCodEstr)
                            .FirstOrDefault();
                        string accountno = prodApolo.ProdCodEstr;

                        itemCod = itemCod + 1;
                        item_ord = "0" + itemCod.ToString();

                        bookedM.Insert(booked_id, cal_date, item.CODAPOLO, produto, Convert.ToInt32(item.VOLUME),
                            Convert.ToDecimal(item.PRECO), orderNO, "O",
                            String.Empty, String.Empty, String.Empty, "NM", accountno, String.Empty, item_ord,
                            "Importação", DateTime.Now, "Importação", DateTime.Now, Convert.ToDateTime(item.DATA), 0,
                            pedido.COD_REP_APOLO, 0);

                        //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                        log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                            Session["login"].ToString() + "|" +
                            "Importação" + " Produto" + "|" +
                            booked_id.ToString() + "|" +
                            cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                            produto + "|" +
                            prodApolo.ProdNome + "|" +
                            item.VOLUME.ToString() + "|" +
                            item.PRECO.ToString() + "|" +
                            accountno + "\r\n";
                    }

                    #endregion

                    #region Insere Vacinas

                    var listaVacinas = hlbappSession.CHIC_Programacoes
                        .Where(w => w.CODAPOLO == pedido.CODAPOLO && w.DATA == pedido.DATA
                            && w.QT_EMB == pedido.QT_EMB
                            && w.Importacao == data)
                        .GroupBy(g => new
                        {
                            g.CDVCNAV,
                            g.NMVCNAV,
                            g.CDVCNAV1,
                            g.NMVCNAV1,
                            g.CDVCNAV2,
                            g.NMVCNAV2,
                            g.CDVCNAV3,
                            g.NMVCNAV3
                        })
                        .Select(s => new
                        {
                            s.Key.CDVCNAV,
                            s.Key.NMVCNAV,
                            s.Key.CDVCNAV1,
                            s.Key.NMVCNAV1,
                            s.Key.CDVCNAV2,
                            s.Key.NMVCNAV2,
                            s.Key.CDVCNAV3,
                            s.Key.NMVCNAV3
                        }).ToList();

                    foreach (var vacina in listaVacinas)
                    {
                        #region Vacina 01

                        if (vacina.CDVCNAV != null && vacina.CDVCNAV != 0)
                        {
                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                            string produto = vacina.CDVCNAV.ToString();

                            itemCod = itemCod + 1;
                            item_ord = "0" + itemCod.ToString();

                            bookedM.Insert(booked_id, cal_date, pedido.CODAPOLO, produto, 0,
                                0, orderNO, "O",
                                String.Empty, String.Empty, String.Empty, "NM", String.Empty, String.Empty, item_ord,
                                "Importação", DateTime.Now, "Importação", DateTime.Now, cal_date, 0,
                                pedido.COD_REP_APOLO, 0);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Vacina" + "|" +
                                booked_id.ToString() + "|" +
                                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                produto + "|" +
                                vacina.NMVCNAV + "|" +
                                "" + "\r\n";
                        }

                        #endregion

                        #region Vacina 02

                        if (vacina.CDVCNAV1 != null && vacina.CDVCNAV1 != 0)
                        {
                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                            string produto = vacina.CDVCNAV1.ToString();

                            itemCod = itemCod + 1;
                            item_ord = "0" + itemCod.ToString();

                            bookedM.Insert(booked_id, cal_date, pedido.CODAPOLO, produto, 0,
                                0, orderNO, "O",
                                String.Empty, String.Empty, String.Empty, "NM", String.Empty, String.Empty, item_ord,
                                "Importação", DateTime.Now, "Importação", DateTime.Now, cal_date, 0,
                                pedido.COD_REP_APOLO, 0);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Vacina" + "|" +
                                booked_id.ToString() + "|" +
                                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                produto + "|" +
                                vacina.NMVCNAV1 + "|" +
                                "" + "\r\n";
                        }

                        #endregion

                        #region Vacina 03

                        if (vacina.CDVCNAV2 != null && vacina.CDVCNAV2 != 0)
                        {
                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                            string produto = vacina.CDVCNAV2.ToString();

                            itemCod = itemCod + 1;
                            item_ord = "0" + itemCod.ToString();

                            bookedM.Insert(booked_id, cal_date, pedido.CODAPOLO, produto, 0,
                                0, orderNO, "O",
                                String.Empty, String.Empty, String.Empty, "NM", String.Empty, String.Empty, item_ord,
                                "Importação", DateTime.Now, "Importação", DateTime.Now, cal_date, 0,
                                pedido.COD_REP_APOLO, 0);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Vacina" + "|" +
                                booked_id.ToString() + "|" +
                                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                produto + "|" +
                                vacina.NMVCNAV2 + "|" +
                                "" + "\r\n";
                        }

                        #endregion

                        #region Vacina 04

                        if (vacina.CDVCNAV3 != null && vacina.CDVCNAV3 != "")
                        {
                            //tables.FillByName(tablesDT, "booked");
                            //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                            booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                            string produto = vacina.CDVCNAV3.ToString();

                            itemCod = itemCod + 1;
                            item_ord = "0" + itemCod.ToString();

                            bookedM.Insert(booked_id, cal_date, pedido.CODAPOLO, produto, 0,
                                0, orderNO, "O",
                                String.Empty, String.Empty, String.Empty, "NM", String.Empty, String.Empty, item_ord,
                                "Importação", DateTime.Now, "Importação", DateTime.Now, cal_date, 0,
                                pedido.COD_REP_APOLO, 0);

                            //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                            log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                                Session["login"].ToString() + "|" +
                                "Vacina" + "|" +
                                booked_id.ToString() + "|" +
                                cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                                produto + "|" +
                                vacina.NMVCNAV3 + "|" +
                                "" + "\r\n";
                        }

                        #endregion
                    }

                    #endregion

                    #region Insere Embalagem

                    //tables.FillByName(tablesDT, "booked");
                    //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                    booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                    itemCod = itemCod + 1;
                    item_ord = "0" + itemCod.ToString();

                    bookedM.Insert(booked_id, cal_date, pedido.CODAPOLO, embalagem, qtdEmbalagem,
                        0, orderNO, "O",
                        String.Empty, String.Empty, String.Empty, "NM", String.Empty, String.Empty, item_ord,
                        "Importação", DateTime.Now, "Importação", DateTime.Now, cal_date, 0,
                        pedido.COD_REP_APOLO, 0);

                    //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                    log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                        Session["login"].ToString() + "|" +
                        "Embalagem" + "|" +
                        booked_id.ToString() + "|" +
                        cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                        embalagem + "|" +
                        pedido.COD_EMB + "|" +
                        "" + "\r\n";

                    #endregion

                    #region Insere Desconto

                    if (pedido.DSCTO > 0)
                    {
                        //tables.FillByName(tablesDT, "booked");
                        //booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                        booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                        itemCod = itemCod + 1;
                        item_ord = "0" + itemCod.ToString();

                        decimal desconto = Convert.ToDecimal(pedido.DSCTO);

                        bookedM.Insert(booked_id, cal_date, pedido.CODAPOLO, "500", 0,
                            desconto, orderNO, "O",
                            String.Empty, String.Empty, String.Empty, "NM", String.Empty, String.Empty, item_ord,
                            "Importação", DateTime.Now, "Importação", DateTime.Now, cal_date, 0,
                            pedido.COD_REP_APOLO, 0);

                        //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");

                        log = log + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "|" +
                            Session["login"].ToString() + "|" +
                            "Desconto" + "|" +
                            booked_id.ToString() + "|" +
                            cal_date.ToShortDateString() + " " + cal_date.ToShortTimeString() + "|" +
                            embalagem + "|" +
                            pedido.COD_EMB + "|" +
                            "" + "\r\n";

                    }

                    #endregion

                    #region Comentarios Pedido

                    int_commMTableAdapter int_commM = new int_commMTableAdapter();
                    int_commM.InsertQuery(orderNO, "Importação de Dados da Planalto do Sistema AS400.", log, false,
                                            String.Empty, false,
                                            false, false, true, "", false, 0, false, "Outras", "", false);

                    #endregion
                }
                else
                {
                    #region Vincula Endereço de Entrega

                    //CHICMobileDataSet.bookedMobileRow booked = bDT.Where(w => sDT.Any(a => a.sl_code == w.salesrep 
                    //    && a.inv_comp.Equals("PL"))
                    //    && w.item == embalagem && w.quantity == qtdEmbalagem).FirstOrDefault();

                    //shippingTableAdapter shTA = new shippingTableAdapter();
                    //CHICMobileDataSet.shippingDataTable shDT = new CHICMobileDataSet.shippingDataTable();

                    //shTA.FillByOrderNo(shDT, booked.customer);

                    //CHICMobileDataSet.shippingRow shRow = shDT
                    //    .Where(w => w.address1.Trim() == pedido.EE).FirstOrDefault();

                    //if (shRow != null)
                    //{
                    //    orderTA.UpdateContactNo(shRow.contact_no, booked.orderno);
                    //}

                    //CHICMobileDataSet.bookedMobileRow bRow = 
                    //    bDT.Where(w => (w.item == "955" || w.item == "957")).FirstOrDefault();

                    //orderTA.UpdateSalesrep(pedido.COD_REP_APOLO, bRow.orderno);

                    #endregion
                }
            }

            return View("Index", (List<Pedido_Venda>)Session["listaIndexPV"]);
        }

        public ActionResult AtualizaPedidosLTZtoNM()
        {
            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            try
            {
                DateTime dataInicial = Convert.ToDateTime("02/07/2017");
                DateTime dataFinal = Convert.ToDateTime("31/12/2999");

                bookedFilterMobileTableAdapter bookedTA = new bookedFilterMobileTableAdapter();
                CHICMobileDataSet.bookedFilterMobileDataTable bDT =
                    new CHICMobileDataSet.bookedFilterMobileDataTable();
                bookedTA.FillByHatchDate(bDT, dataInicial, dataFinal);

                salesmanTableAdapter salesmanTA = new salesmanTableAdapter();
                CHICMobileDataSet.salesmanDataTable salesmanDT = new CHICMobileDataSet.salesmanDataTable();
                salesmanTA.Fill(salesmanDT);

                var lista = bDT
                    .Where(w => salesmanDT.Any(a => a.sl_code == w.salesrep && a.inv_comp.Equals("LB"))
                        && !w.location.Trim().Equals("NM"))
                    .OrderBy(o => o.cal_date)
                    .ThenBy(t => t.orderno)
                    .ThenBy(t => t.item_ord)
                    .ThenByDescending(t => t.price)
                    .ThenByDescending(t => t.quantity)
                    .ToList();

                bookedMobileTableAdapter bookedTAUPD = new bookedMobileTableAdapter();

                foreach (var item in lista)
                {
                    bookedTAUPD.UpdateLocation("NM", item.book_id);
                }
            }
            catch (Exception)
            {

            }

            var listaRet = FilterListaPV();

            return View("Index", listaRet);
        }

        #endregion

        #region Methods not Used

        public ActionResult AlteraVacinaItem(int sequencia, string origem)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            bdApoloEntities apoloStatic = new bdApoloEntities();

            Session["origemVacinaItenm"] = origem;

            Session["vacinasItens"] = true;

            var listaVacinasApolo = apoloStatic.PRODUTO
                .Where(w => apoloStatic.PROD_GRUPO_SUBGRUPO.Any(a => a.ProdCodEstr == w.ProdCodEstr
                    && a.GrpProdCod == "041" && a.SubGrpProdCod == "042"))
                .OrderBy(o => o.ProdNomeAlt1)
                .ToList();

            List<SelectListItem> ddlVacinas = new List<SelectListItem>();

            foreach (var item in listaVacinasApolo)
            {
                if (listaVacinasApolo.IndexOf(item) == 0)
                    if ((Session["vacinaPrimariaPV"] == null) || (Session["vacinaPrimariaPV"].ToString() == ""))
                        Session["vacinaPrimariaPV"] = item.ProdCodEstr;

                ddlVacinas.Add(new SelectListItem
                {
                    Text = item.ProdNomeAlt1,
                    Value = item.ProdCodEstr,
                    Selected = false
                });
            }

            Session["ListaVacinasPrimarias"] = ddlVacinas;

            Session["idItemSelecionado"] = sequencia;

            var listaVacPrim = (List<Vacinas_Primaria_Pedido_Venda>)Session["VacinasPrimariaItemPVList"];

            Vacinas_Primaria_Pedido_Venda vacPrimObj = listaVacPrim
                .Where(w => w.SeqItemPedVenda == sequencia).FirstOrDefault();

            if (vacPrimObj != null)
            {
                Session["vacinaPrimariaItemPV"] = vacPrimObj.ProdCodEstr;

                var listVacSecItemPV = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVList"];

                var listVacSecItemPVExibe = listVacSecItemPV
                    .Where(w => w.SeqItemPedVenda == vacPrimObj.SeqItemPedVenda).ToList();

                Session["VacinasSecundariaItemPVListExibe"] = listVacSecItemPVExibe;
            }
            else
            {
                Session["vacinaPrimariaItemPV"] = Session["vacinaPrimariaPV"].ToString();

                List<Vacinas_Secundaria_Pedido_Venda> listaVacSecSession =
                    (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaPVList"];

                List<Vacinas_Secundaria_Pedido_Venda> listaVacSec = new List<Vacinas_Secundaria_Pedido_Venda>();

                foreach (var item in listaVacSecSession)
                {
                    listaVacSec.Add(item);
                }

                Session["VacinasSecundariaItemPVListExibe"] = listaVacSec;
            }

            return View("ListSecVacinas");
        }

        public ActionResult SaveAlteraVacinaItem(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            if (model["SaveAlteraVacinaItem"] != null)
            {
                int sequencia = Convert.ToInt32(Session["idItemSelecionado"]);
                string produto = Session["vacinaPrimariaItemPV"].ToString();

                var listaVacPrim = (List<Vacinas_Primaria_Pedido_Venda>)Session["VacinasPrimariaItemPVList"];
                var listVacSecItemPV = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVList"];
                var listVacSecItemPVExibe = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVListExibe"];

                if (listaVacPrim.Count > 0)
                {
                    foreach (var primaria in listaVacPrim)
                    {
                        if (primaria.SeqItemPedVenda == sequencia)
                        {
                            primaria.ProdCodEstr = produto;
                        }
                    }

                    foreach (var secundaria in listVacSecItemPV)
                    {
                        if (secundaria.SeqItemPedVenda == sequencia)
                        {
                            foreach (var item in listVacSecItemPVExibe)
                            {
                                if (secundaria.Sequencia == item.Sequencia)
                                {
                                    secundaria.ProdCodEstr = item.ProdCodEstr;
                                }
                            }
                        }
                    }

                    foreach (var secundaria in listVacSecItemPVExibe)
                    {
                        int existe = listVacSecItemPV
                            .Where(w => w.ProdCodEstr == secundaria.ProdCodEstr
                                && w.SeqItemPedVenda == sequencia).Count();

                        if (existe == 0)
                        {
                            Vacinas_Secundaria_Pedido_Venda vacSec = new Vacinas_Secundaria_Pedido_Venda();
                            vacSec.ProdCodEstr = secundaria.ProdCodEstr;
                            vacSec.Sequencia = secundaria.Sequencia;
                            vacSec.SeqItemPedVenda = sequencia;
                            listVacSecItemPV.Add(vacSec);
                        }
                    }
                }
                else
                {
                    Vacinas_Primaria_Pedido_Venda vacPrim = new Vacinas_Primaria_Pedido_Venda();
                    vacPrim.ProdCodEstr = produto;
                    vacPrim.SeqItemPedVenda = sequencia;
                    listaVacPrim.Add(vacPrim);

                    foreach (var item in listVacSecItemPVExibe)
                    {
                        Vacinas_Secundaria_Pedido_Venda vacSec = new Vacinas_Secundaria_Pedido_Venda();
                        vacSec.ProdCodEstr = item.ProdCodEstr;
                        vacSec.Sequencia = item.Sequencia;
                        vacSec.SeqItemPedVenda = sequencia;
                        listVacSecItemPV.Add(vacSec);
                    }
                }

                List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                Item_Pedido_Venda ipv = listItensPV.Where(w => w.Sequencia == sequencia).FirstOrDefault();
                ipv.Vacina = "Item";
                ipv.Alterado = 1;
                Session["ItensPVList"] = listItensPV;

                Session["VacinasPrimariaItemPVList"] = listaVacPrim;
                Session["VacinasSecundariaItemPVList"] = listVacSecItemPV;
            }

            Session["alteracaoVacinasItemPV"] = true;
            Session["vacinasItens"] = false;

            return View("FinalizaPV");
        }

        public ActionResult DeletaVacinasItens(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            if (model["DeletaVacinasItens"] != null)
            {
                int sequencia = Convert.ToInt32(Session["idItemSelecionado"]);

                if (model["manterVacinaPedido"] != null)
                {
                    bool manterVacinaPedido = Convert.ToBoolean(model["manterVacinaPedido"]
                        .ToString().Replace("false,", ""));

                    List<Item_Pedido_Venda> listItensPV = (List<Item_Pedido_Venda>)Session["ItensPVList"];
                    Item_Pedido_Venda ipv = listItensPV.Where(w => w.Sequencia == sequencia).FirstOrDefault();

                    if (manterVacinaPedido)
                    {
                        ipv.Vacina = "Pedido";
                    }
                    else
                    {
                        ipv.Vacina = "Nenhuma";
                    }

                    Session["ItensPVList"] = listItensPV;
                }

                var listaVacPrim = (List<Vacinas_Primaria_Pedido_Venda>)Session["VacinasPrimariaItemPVList"];
                var listaVacPrimExibe = (List<Vacinas_Primaria_Pedido_Venda>)Session["VacinasPrimariaItemPVList"];
                var listVacSecItemPV = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVList"];
                var listVacSecItemPVExibe = (List<Vacinas_Secundaria_Pedido_Venda>)Session["VacinasSecundariaItemPVList"];

                List<Vacinas_Primaria_Pedido_Venda> listaDeletePrim = null;
                if (Session["ItensPrimVacItemPVListDelete"] != null)
                    listaDeletePrim = (List<Vacinas_Primaria_Pedido_Venda>)Session["ItensPrimVacItemPVListDelete"];
                else
                    listaDeletePrim = new List<Vacinas_Primaria_Pedido_Venda>();

                List<Vacinas_Secundaria_Pedido_Venda> listaDeleteSec = null;
                if (Session["ItensSecVacItemPVListDelete"] != null)
                    listaDeleteSec = (List<Vacinas_Secundaria_Pedido_Venda>)Session["ItensSecVacItemPVListDelete"];
                else
                    listaDeleteSec = new List<Vacinas_Secundaria_Pedido_Venda>();

                foreach (var primaria in listaVacPrimExibe)
                {
                    if (primaria.SeqItemPedVenda == sequencia)
                    {
                        listaDeletePrim.Add(primaria);
                    }
                }

                listaVacPrim.RemoveAll(w => w.SeqItemPedVenda == sequencia);

                foreach (var secundaria in listVacSecItemPV)
                {
                    if (secundaria.SeqItemPedVenda == sequencia)
                    {
                        listaDeleteSec.Add(secundaria);
                    }
                }

                listVacSecItemPV.RemoveAll(w => w.SeqItemPedVenda == sequencia);

                Session["VacinasPrimariaItemPVList"] = listaVacPrim;
                Session["VacinasSecundariaItemPVList"] = listVacSecItemPV;
            }

            Session["vacinasItens"] = false;

            return View("FinalizaPV");
        }

        public ActionResult LOGVacinaItem(int sequencia, int idLogPedVenda, string origem)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            //HLBAPPEntities hlbappSession = (HLBAPPEntities)Session["hlbappSession"];
            HLBAPPEntities hlbappSession = new HLBAPPEntities();

            Session["origemVacinaItenm"] = origem;
            Session["vacinasItens"] = true;
            Session["idItemSelecionado"] = sequencia;

            Session["vacinaPrimariaItemPV"] = "";

            LOG_Vacinas_Primaria_Pedido_Venda vacPrimObj = hlbappSession.LOG_Vacinas_Primaria_Pedido_Venda
                .Where(w => w.SeqItemPedVenda == sequencia && w.IDLogPedidoVenda == idLogPedVenda).FirstOrDefault();

            if (vacPrimObj != null)
            {
                Session["vacinaPrimariaItemPV"] = vacPrimObj.ProdCodEstr;

                var listVacSecItemPVExibe = hlbappSession.LOG_Vacinas_Secundaria_Pedido_Venda
                    .Where(w => w.SeqItemPedVenda == vacPrimObj.SeqItemPedVenda
                        && w.IDVacPrimLogPedidoVenda == vacPrimObj.ID).ToList();

                Session["VacinasSecundariaItemPVListExibe"] = listVacSecItemPVExibe;
            }

            return View("LOGListVacSec");
        }

        public void TesteSelect()
        {
            Apolo10Entities apolo2Static = new Apolo10Entities();

            var listaTecnicos = apolo2Static.USUARIO
                .Where(u => apolo2Static.FUNCIONARIO.Any(f => f.UsuCod == u.UsuCod
                        && f.ATIVIDADE_GRUPO.Any(g => g.AtivGrpCodAlt == "RS")
                        && apolo2Static.EMPRESA_FILIAL.Any(e => e.EmpCod == f.EmpCod
                            && e.USERCodigoCHIC == "HN")))
                .ToList();

            foreach (var item in listaTecnicos)
            {
                string email = item.UsuEmail;
            }
        }

        #endregion

        #region Varieties Transference between Companies

        #region Varieties Transference Lists

        public List<Transf_Ovos_Linha> CarregaTransferenciaLinhagens(DateTime dataInicial, DateTime dataFinal)
        {
            HLBAPPEntities bd = new HLBAPPEntities();
            DateTime dataHoraIni = Convert.ToDateTime(dataInicial.ToShortDateString() + " 00:00:00");
            DateTime dataHoraFim = Convert.ToDateTime(dataFinal.ToShortDateString() + " 23:59:59");

            var lista = bd.Transf_Ovos_Linha
                .Where(w => w.DataTransf >= dataHoraIni && w.DataTransf <= dataHoraFim)
                .OrderBy(o => o.DataTransf)
                .ToList();

            return lista;
        }

        public ActionResult FiltraListaTransferenciaLinhagens(DateTime dataInicial, DateTime dataFinal)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["dataInicial"] = dataInicial.ToShortDateString();
            Session["dataFinal"] = dataFinal.ToShortDateString();
            dataInicial = Convert.ToDateTime(dataInicial.ToShortDateString() + " 00:00:00");
            dataFinal = Convert.ToDateTime(dataFinal.ToShortDateString() + " 23:59:59");

            Session["ListaTransferenciaLinhagens"] = CarregaTransferenciaLinhagens(dataInicial, dataFinal);

            return View("ListaTransferenciaLinhagens");
        }

        public void RefreshListaTransferenciaLinhagens()
        {
            DateTime dataInicial;
            DateTime dataFinal;

            if (Session["dataInicial"] == null)
            {
                Session["dataInicial"] = DateTime.Today.ToShortDateString();
                Session["dataFinal"] = DateTime.Today.ToShortDateString();
                dataInicial = Convert.ToDateTime(DateTime.Today.ToShortDateString() + " 00:00:00");
                dataFinal = Convert.ToDateTime(DateTime.Today.ToShortDateString() + " 23:59:59");
            }
            else
            {
                dataInicial = Convert.ToDateTime(Session["dataInicial"].ToString() + " 00:00:00");
                dataFinal = Convert.ToDateTime(Session["dataFinal"].ToString() + " 23:59:59");
            }

            Session["ListaTransferenciaLinhagens"] = CarregaTransferenciaLinhagens(dataInicial, dataFinal);
        }

        public ActionResult ListaTransferenciaLinhagens()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            RefreshListaTransferenciaLinhagens();

            return View();
        }

        #endregion

        #region CRUD Varieties Transference between Companies

        public ActionResult CreateTransferenciaLinhagem()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["IDTransfOvosLinha"] = 0;
            Session["dataTransferencia"] = DateTime.Now;
            Session["ListaEmpresasOrigem"] = CarregaEmpresas(false);
            //Session["ListaEmpresasDestino"] = CarregaEmpresas(false);
            Session["ListaEmpresasDestino"] = new List<SelectListItem>();
            Session["ListaIncubatorios"] = CarregaListaIncubatorios(true);
            Session["ListaIncubatoriosDestino"] = CarregaListaIncubatorios(true);
            Session["motivo"] = "";
            Session["ListaTipoMatriz"] = CarregaListaTipoMatriz();
            Session["ListaLinhagemOrigem"] = new List<SelectListItem>();
            Session["ListaLinhagemDestino"] = new List<SelectListItem>();
            Session["ListaItensTransferenciaLinhagem"] = new List<Item_Transf_Ovos_Linha>();
            Session["ListaItensTransferenciaLinhagemDelete"] = new List<Item_Transf_Ovos_Linha>();

            return View("TransferenciaLinhagem");
        }

        public ActionResult EditTransferenciaLinhagem(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            HLBAPPEntities bd = new HLBAPPEntities();
            var transferencia = bd.Transf_Ovos_Linha.Where(w => w.ID == id).FirstOrDefault();
            var listItens = bd.Item_Transf_Ovos_Linha
                .Where(w => w.IDTransfOvosLinha == id)
                .ToList();

            Session["IDTransfOvosLinha"] = id;
            Session["dataTransferencia"] = transferencia.DataTransf;

            var listaEmpresasOrigem = CarregaEmpresas(false);
            List<SelectListItem> listaEmpresasOrigemAtualizada = new List<SelectListItem>();
            foreach (var item in listaEmpresasOrigem)
            {
                if (item.Value != transferencia.EmpresaDestino) listaEmpresasOrigemAtualizada.Add(item);
            }
            Session["ListaEmpresasOrigem"] = listaEmpresasOrigemAtualizada;
            AtualizaDDL(transferencia.EmpresaOrigem, (List<SelectListItem>)Session["ListaEmpresasOrigem"]);

            var listaEmpresasDestino = CarregaEmpresas(false);
            List<SelectListItem> listaEmpresasDestinoAtualizada = new List<SelectListItem>();
            foreach (var item in listaEmpresasDestino)
            {
                if (item.Value != transferencia.EmpresaOrigem) listaEmpresasDestinoAtualizada.Add(item);
            }
            Session["ListaEmpresasDestino"] = listaEmpresasDestinoAtualizada;
            AtualizaDDL(transferencia.EmpresaDestino, (List<SelectListItem>)Session["ListaEmpresasDestino"]);

            Session["ListaIncubatorios"] = CarregaListaIncubatorios(true);
            AtualizaDDL(transferencia.Incubatorio, (List<SelectListItem>)Session["ListaIncubatorios"]);
            Session["ListaIncubatoriosDestino"] = CarregaListaIncubatorios(true);
            AtualizaDDL(transferencia.Incubatorio, (List<SelectListItem>)Session["ListaIncubatoriosDestino"]);
            Session["motivo"] = transferencia.Motivo;
            Session["ListaTipoMatriz"] = CarregaListaTipoMatriz();
            Session["ListaLinhagemOrigem"] = CarregaLinhagens(transferencia.DataTransf, transferencia.EmpresaOrigem, true);
            Session["ListaLinhagemDestino"] = CarregaLinhagens(transferencia.DataTransf, transferencia.EmpresaDestino, true);
            Session["ListaItensTransferenciaLinhagem"] = listItens;
            Session["ListaItensTransferenciaLinhagemDelete"] = new List<Item_Transf_Ovos_Linha>();

            return View("TransferenciaLinhagem");
        }

        public ActionResult ReturnTransferenciaLinhagem(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            return View("TransferenciaLinhagem");
        }

        public ActionResult SaveTransferenciaLinhagem(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            DateTime dataTransferencia = DateTime.Now;
            if (model["saveTransfOvo"] != null)
            {
                HLBAPPEntities bd = new HLBAPPEntities();

                #region Carrega Variáveis

                int id = Convert.ToInt32(Session["IDTransfOvosLinha"]);
                if (Session["dataTransferencia"].ToString() == "")
                {
                    ViewBag.ClasseMsg = "msgWarning";
                    ViewBag.Erro = "Data de Transferência obrigatória!";
                    return View("TransferenciaLinhagem");
                }
                dataTransferencia = Convert.ToDateTime(Session["dataTransferencia"]);

                string empresaOrigem = ((List<SelectListItem>)Session["ListaEmpresasOrigem"])
                    .Where(w => w.Selected == true).FirstOrDefault().Value;
                if (empresaOrigem == "")
                {
                    ViewBag.ClasseMsg = "msgWarning";
                    ViewBag.Erro = "Empresa de Origem obrigatória!";
                    return View("TransferenciaLinhagem");
                }

                string empresaDestino = ((List<SelectListItem>)Session["ListaEmpresasDestino"])
                    .Where(w => w.Selected == true).FirstOrDefault().Value;
                if (empresaDestino == "")
                {
                    ViewBag.ClasseMsg = "msgWarning";
                    ViewBag.Erro = "Empresa de Destino obrigatória!";
                    return View("TransferenciaLinhagem");
                }

                string incubatorio = ((List<SelectListItem>)Session["ListaIncubatorios"])
                    .Where(w => w.Selected == true).FirstOrDefault().Value;
                if (incubatorio == "")
                {
                    ViewBag.ClasseMsg = "msgWarning";
                    ViewBag.Erro = "Incubatório de Origem obrigatório!";
                    return View("TransferenciaLinhagem");
                }

                string incubatorioDestino = ((List<SelectListItem>)Session["ListaIncubatoriosDestino"])
                    .Where(w => w.Selected == true).FirstOrDefault().Value;
                if (incubatorioDestino == "")
                {
                    ViewBag.ClasseMsg = "msgWarning";
                    ViewBag.Erro = "Incubatório de Destino obrigatório!";
                    return View("TransferenciaLinhagem");
                }

                if (Session["motivo"].ToString() == "")
                {
                    ViewBag.ClasseMsg = "msgWarning";
                    ViewBag.Erro = "Motivo obrigatório!";
                    return View("TransferenciaLinhagem");
                }
                string motivo = Session["motivo"].ToString();

                #endregion

                #region Verifica se existe item lançado

                var listaItens = (List<MvcAppHylinedoBrasilMobile.Models.Item_Transf_Ovos_Linha>)
                    Session["ListaItensTransferenciaLinhagem"];
                var listaItensDelete = (List<MvcAppHylinedoBrasilMobile.Models.Item_Transf_Ovos_Linha>)
                    Session["ListaItensTransferenciaLinhagemDelete"];

                if (listaItens.Count == 0)
                {
                    ViewBag.ClasseMsg = "msgWarning";
                    ViewBag.ErroItens = "Obrigatório inserir pelo menos um item!";
                    return View("TransferenciaLinhagem");
                }

                #endregion

                #region Transf_Ovos_Linha

                Transf_Ovos_Linha tr = new Transf_Ovos_Linha();
                if (id > 0)
                {
                    tr = bd.Transf_Ovos_Linha.Where(w => w.ID == id).FirstOrDefault();
                }

                tr.Usuario = Session["login"].ToString();
                tr.DataTransf = dataTransferencia;
                tr.EmpresaOrigem = empresaOrigem;
                tr.EmpresaDestino = empresaDestino;
                tr.Incubatorio = incubatorio;
                tr.IncubatorioDestino = incubatorioDestino;
                tr.Motivo = motivo;

                if (id == 0)
                {
                    bd.Transf_Ovos_Linha.AddObject(tr);
                    bd.SaveChanges();
                }

                #region Item_Transf_Ovos_Linha

                foreach (var item in listaItensDelete)
                {
                    if (item.ID > 0)
                    {
                        Item_Transf_Ovos_Linha tri = bd.Item_Transf_Ovos_Linha.Where(w => w.ID == item.ID).FirstOrDefault();
                        bd.Item_Transf_Ovos_Linha.DeleteObject(tri);
                    }
                }

                bd.SaveChanges();

                foreach (var item in listaItens)
                {
                    Item_Transf_Ovos_Linha tri = new Item_Transf_Ovos_Linha();
                    if (item.ID > 0)
                        tri = bd.Item_Transf_Ovos_Linha.Where(w => w.ID == item.ID).FirstOrDefault();
                    else
                        tri.IDTransfOvosLinha = tr.ID;

                    tri.Sequencia = item.Sequencia;
                    tri.TipoMatriz = item.TipoMatriz;
                    tri.LinhagemOrigem = item.LinhagemOrigem;
                    tri.LinhagemDestino = item.LinhagemDestino;
                    tri.Qtde = item.Qtde;

                    if (tri.ID == 0) bd.Item_Transf_Ovos_Linha.AddObject(tri);
                    bd.SaveChanges();
                }

                #endregion

                bd.SaveChanges();

                #endregion

                #region Integra CHIC

                ImportTransferCHIC(tr.ID);

                #endregion

                ViewBag.ClasseMsg = "msgSucesso";
                ViewBag.Erro = am.GetTextOnLanguage("Transferência de Ovos entre Empresas", Session["language"].ToString())
                    + " " + am.GetTextOnLanguage("salva com sucesso!", Session["language"].ToString());
                RefreshListaTransferenciaLinhagens();
                return View("ListaTransferenciaLinhagens");
            }

            RefreshListaTransferenciaLinhagens();
            return View("ListaTransferenciaLinhagens");
        }

        public ActionResult DeleteTransferenciaLinhagem(int id)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            Session["IDTransfOvosLinha"] = id;

            return View();
        }

        public ActionResult DeleteTransferenciaLinhagemConfirma()
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            int id = Convert.ToInt32(Session["IDTransfOvosLinha"]);

            #region Integra CHIC

            DeleteTransferCHIC(id);

            #endregion

            #region Exclui a transferência

            HLBAPPEntities bd = new HLBAPPEntities();

            Transf_Ovos_Linha tr = bd.Transf_Ovos_Linha.Where(w => w.ID == id).FirstOrDefault();

            var listaItens = bd.Item_Transf_Ovos_Linha.Where(w => w.IDTransfOvosLinha == id).ToList();

            foreach (var item in listaItens)
            {
                bd.Item_Transf_Ovos_Linha.DeleteObject(item);
            }

            bd.Transf_Ovos_Linha.DeleteObject(tr);
            bd.SaveChanges();

            #endregion

            ViewBag.ClasseMsg = "msgSucesso";
            ViewBag.Erro = am.GetTextOnLanguage("Transferência de Ovos entre Empresas", Session["language"].ToString())
                + " " + am.GetTextOnLanguage("excluída com sucesso!", Session["language"].ToString());

            RefreshListaTransferenciaLinhagens();
            return View("ListaTransferenciaLinhagens");
        }

        #region CRUD Varieties Transference between Companies Item

        [HttpPost]
        public ActionResult SaveTransferenciaLinhagemItem(FormCollection model)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            HLBAPPEntities hlbappSession = new HLBAPPEntities();
            int id = Convert.ToInt32(Session["IDTransfOvosLinha"]);
            
            string tipoMatriz = model["TipoMatriz"];
            string linhagemOrigem = model["LinhagemOrigem"];
            string linhagemDestino = model["LinhagemDestino"];
            int qtde = Convert.ToInt32(model["Qtde"]);

            var listaItens = (List<MvcAppHylinedoBrasilMobile.Models.Item_Transf_Ovos_Linha>)
                Session["ListaItensTransferenciaLinhagem"];

            // Verifica nos itens do pedido vigente
            int existeVerifica = listaItens
                .Where(w => w.TipoMatriz == tipoMatriz
                    && w.LinhagemOrigem == linhagemOrigem
                    && w.LinhagemDestino == linhagemDestino)
                .Count();

            if (existeVerifica > 0)
            {
                ViewBag.ClasseMsg = "msgWarning";
                ViewBag.ErroItens = "Tipo de Matriz <i><u>" + tipoMatriz + "</i></u>, Linhagem de Origem <i><u>" + linhagemOrigem
                    + "</i></u> e Linhagem de Destino <i><u>" + linhagemDestino
                    + "</i></u> já cadastrados nessa Transferência! Caso queira alterar a quantidade, excluir e lançar novamente!";
                return View("TransferenciaLinhagem");
            }

            // Adiciona na Lista de Itens
            int seq = 0;
            if (listaItens.Count > 0) seq = listaItens.Max(m => m.Sequencia);

            Item_Transf_Ovos_Linha item = new Item_Transf_Ovos_Linha();
            if (id > 0) item.IDTransfOvosLinha = id;
            item.Sequencia = Convert.ToInt32(seq + 1);
            item.TipoMatriz = tipoMatriz;
            item.LinhagemOrigem = linhagemOrigem;
            item.LinhagemDestino = linhagemDestino;
            item.Qtde = qtde;
            listaItens.Add(item);

            return View("TransferenciaLinhagem");
        }

        public ActionResult DeleteClassificacaoOvoItem(int sequencia)
        {
            if (VerificaSessao()) return RedirectToAction("Login", "AccountMobile");

            // Remove da Lista dos Itens
            var listaItens = (List<MvcAppHylinedoBrasilMobile.Models.Item_Transf_Ovos_Linha>)
                Session["ListaItensTransferenciaLinhagem"];
            var listaItensDelete = (List<MvcAppHylinedoBrasilMobile.Models.Item_Transf_Ovos_Linha>)
                Session["ListaItensTransferenciaLinhagemDelete"];
            Item_Transf_Ovos_Linha item = listaItens
                .Where(w => w.Sequencia == sequencia).FirstOrDefault();
            listaItens.Remove(item);
            listaItensDelete.Add(item);

            return View("TransferenciaLinhagem");
        }

        #endregion

        #endregion

        #region Import CHIC

        public string ImportTransferCHIC(int idTR)
        {
            string retorno = "";

            #region Carrega objetos dos BDs

            // SQL Server
            HLBAPPEntities bd = new HLBAPPEntities();

            // Fox Pro - Adapters
            ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();
            bookedMobileTableAdapter bookedM = new bookedMobileTableAdapter();
            int_commMTableAdapter int_commM = new int_commMTableAdapter();

            tablesMobileTableAdapter tables = new tablesMobileTableAdapter();
            itemsMobileTableAdapter items = new itemsMobileTableAdapter();
            vartablMobileTableAdapter vartabl = new vartablMobileTableAdapter();

            // Fox Pro - DataTables
            CHICMobileDataSet.tablesMobileDataTable tablesDT = new CHICMobileDataSet.tablesMobileDataTable();

            #endregion

            #region Carrega a Transferencia

            var tr = bd.Transf_Ovos_Linha.Where(w => w.ID == idTR).FirstOrDefault();
            var listaItensTR = bd.Item_Transf_Ovos_Linha.Where(w => w.IDTransfOvosLinha == idTR).ToList();

            #endregion

            #region Carrega Variáveis

            #region Variáveis da Origem

            var orderNoCHICOrigem = "";
            if (tr.OrderNoCHIC != null) orderNoCHICOrigem = tr.OrderNoCHIC;
            var custNoOrigem = "0000515";
            if (tr.EmpresaDestino == "LB") custNoOrigem = "0008201";
            else if (tr.EmpresaDestino == "HN") custNoOrigem = "0008730";
            else if (tr.EmpresaDestino == "PL") custNoOrigem = "0021364";

            #endregion

            #region Variáveis do Destino

            var orderNoCHICDestino = "";
            if (tr.OrderNoCHICDestino != null) orderNoCHICDestino = tr.OrderNoCHICDestino;
            var custNoDestino = "0000515";
            if (tr.EmpresaOrigem == "LB") custNoDestino = "0008201";
            else if (tr.EmpresaOrigem == "HN") custNoDestino = "0008730";
            else if (tr.EmpresaOrigem == "PL") custNoDestino = "0021364";

            #endregion

            #endregion

            #region Pedido de Origem

            #region Insere / Altera o cabeçalho do Pedido no CHIC

            var pedidoCHIC = orderTA.GetDataByOrderNo(orderNoCHICOrigem);
            if (pedidoCHIC.Count > 0)
            {
                orderTA.UpdateQuery(tr.DataTransf, custNoOrigem, tr.DataTransf, tr.Motivo, String.Empty, String.Empty, String.Empty, String.Empty, 0,
                    orderNoCHICOrigem);
            }
            else 
            {
                //tables.FillByName(tablesDT, "orders");
                //orderNoCHICOrigem = (Convert.ToInt32(tablesDT[0].lastno) + 1).ToString();

                orderNoCHICOrigem = NextCodeCHIC("orders");

                orderTA.Insert(orderNoCHICOrigem, 0, Convert.ToDateTime("01/01/1988"), tr.DataTransf, custNoOrigem, "Y", tr.ID.ToString(), 0, tr.DataTransf, tr.Motivo,
                    String.Empty, String.Empty, String.Empty, String.Empty, String.Empty, 0, String.Empty,
                    String.Empty, String.Empty);

                //tables.UpdateQuery(Convert.ToDecimal(orderNoCHICOrigem), "orders");
            }

            #endregion

            #region Deleta os Items para adicioná-los novamente

            bookedM.DeleteQuery(orderNoCHICOrigem);

            #endregion

            #region Insere os itens

            var itemCod = 0;

            foreach (var item in listaItensTR)
            {
                itemCod = itemCod + 1;
                var item_ord = "0" + itemCod.ToString();
                var quantity = Convert.ToInt32(item.Qtde);
                var price = 0.0000m;
                string creatdby = Session["login"].ToString();
                DateTime datecrtd = DateTime.Now;

                //tables.FillByName(tablesDT, "booked");
                //int booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                int booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                var vartablDT = vartabl.GetDataByDesc(item.LinhagemOrigem);
                string varietyShort = vartablDT[0].variety;
                string form = item.TipoMatriz == "Nova" ? "HN" : "HV";
                var listaItens = items.GetDataByVarietyAndForm(varietyShort, form);
                var itemno = listaItens[0].item_no;
                var accountno = listaItens[0].account_no;

                bookedM.Insert(booked_id, tr.DataTransf, custNoOrigem, itemno, quantity, price, orderNoCHICOrigem, "TO",
                    String.Empty, String.Empty, String.Empty, tr.Incubatorio, accountno, String.Empty, item_ord,
                    creatdby, datecrtd, creatdby, datecrtd, tr.DataTransf, 0, String.Empty, booked_id);

                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");
            }

            #endregion

            #endregion

            #region Pedido de Destino

            #region Insere / Altera o cabeçalho do Pedido no CHIC

            pedidoCHIC = orderTA.GetDataByOrderNo(orderNoCHICDestino);
            if (pedidoCHIC.Count > 0)
            {
                orderTA.UpdateQuery(tr.DataTransf, custNoDestino, tr.DataTransf, tr.Motivo, String.Empty, String.Empty, String.Empty, String.Empty, 0,
                    orderNoCHICDestino);
            }
            else
            {
                //tables.FillByName(tablesDT, "orders");
                //orderNoCHICDestino = (Convert.ToInt32(tablesDT[0].lastno) + 1).ToString();
                orderNoCHICDestino = NextCodeCHIC("orders");

                orderTA.Insert(orderNoCHICDestino, 0, Convert.ToDateTime("01/01/1988"), tr.DataTransf, custNoDestino, "Y", tr.ID.ToString(), 0, tr.DataTransf, tr.Motivo,
                    String.Empty, String.Empty, String.Empty, String.Empty, String.Empty, 0, String.Empty,
                    String.Empty, String.Empty);

                tables.UpdateQuery(Convert.ToDecimal(orderNoCHICDestino), "orders");
            }

            #endregion

            #region Deleta os Items para adicioná-los novamente

            bookedM.DeleteQuery(orderNoCHICDestino);

            #endregion

            #region Insere os itens

            itemCod = 0;

            foreach (var item in listaItensTR)
            {
                itemCod = itemCod + 1;
                var item_ord = "0" + itemCod.ToString();
                var quantity = Convert.ToInt32(item.Qtde);
                var price = 0.0000m;
                string creatdby = Session["login"].ToString();
                DateTime datecrtd = DateTime.Now;

                //tables.FillByName(tablesDT, "booked");
                //int booked_id = Convert.ToInt32(tablesDT[0].lastno) + 1;
                int booked_id = Convert.ToInt32(NextCodeCHIC("booked"));

                var vartablDT = vartabl.GetDataByDesc(item.LinhagemDestino);
                string varietyShort = vartablDT[0].variety;
                string form = item.TipoMatriz == "Nova" ? "HN" : "HV";
                var listaItens = items.GetDataByVarietyAndForm(varietyShort, form);
                var itemno = listaItens[0].item_no;
                var accountno = listaItens[0].account_no;

                bookedM.Insert(booked_id, tr.DataTransf, custNoDestino, itemno, quantity, price, orderNoCHICDestino, "TI",
                    String.Empty, String.Empty, String.Empty, tr.IncubatorioDestino, accountno, String.Empty, item_ord,
                    creatdby, datecrtd, creatdby, datecrtd, tr.DataTransf, 0, String.Empty, booked_id);

                //tables.UpdateQuery(Convert.ToDecimal(booked_id), "booked");
            }

            #endregion

            tr.OrderNoCHIC = orderNoCHICOrigem;
            tr.OrderNoCHICDestino = orderNoCHICDestino;
            bd.SaveChanges();

            #endregion

            return retorno;
        }

        public string DeleteTransferCHIC(int idTR)
        {
            string retorno = "";

            #region Carrega objetos dos BDs

            // SQL Server
            HLBAPPEntities bd = new HLBAPPEntities();

            // Fox Pro - Adapters
            ordersMobileTableAdapter orderTA = new ordersMobileTableAdapter();
            bookedMobileTableAdapter bookedM = new bookedMobileTableAdapter();
            
            #endregion

            #region Carrega a Transferencia

            var tr = bd.Transf_Ovos_Linha.Where(w => w.ID == idTR).FirstOrDefault();
            var listaItensTR = bd.Item_Transf_Ovos_Linha.Where(w => w.IDTransfOvosLinha == idTR).ToList();

            var orderNoCHICOrigem = "";
            if (tr.OrderNoCHIC != null) orderNoCHICOrigem = tr.OrderNoCHIC;
            var orderNoCHICDestino = "";
            if (tr.OrderNoCHICDestino != null) orderNoCHICDestino = tr.OrderNoCHICDestino;

            #endregion

            #region Deleta os Items para adicioná-los novamente

            bookedM.DeleteQuery(orderNoCHICOrigem);
            bookedM.DeleteQuery(orderNoCHICDestino);

            #endregion

            #region Deleta os cabeçalhos

            orderTA.DeleteQuery(orderNoCHICOrigem);
            orderTA.DeleteQuery(orderNoCHICDestino);

            #endregion

            return retorno;
        }

        #endregion

        #endregion

        public ActionResult ExportPdf()
        {
            return View();
        }

        //public ActionResult ViewerEvent()
        //{
        //    return StiMvcViewer.ViewerEventResult();
        //}
    }
}