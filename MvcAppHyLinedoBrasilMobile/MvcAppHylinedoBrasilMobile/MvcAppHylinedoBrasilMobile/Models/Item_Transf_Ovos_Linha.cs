//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Transf_Ovos_Linha))]
    public partial class Item_Transf_Ovos_Linha: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<int> IDTransfOvosLinha
        {
            get { return _iDTransfOvosLinha; }
            set
            {
                if (_iDTransfOvosLinha != value)
                {
                    ChangeTracker.RecordOriginalValue("IDTransfOvosLinha", _iDTransfOvosLinha);
                    if (!IsDeserializing)
                    {
                        if (Transf_Ovos_Linha != null && Transf_Ovos_Linha.ID != value)
                        {
                            Transf_Ovos_Linha = null;
                        }
                    }
                    _iDTransfOvosLinha = value;
                    OnPropertyChanged("IDTransfOvosLinha");
                }
            }
        }
        private Nullable<int> _iDTransfOvosLinha;
    
        [DataMember]
        public string TipoMatriz
        {
            get { return _tipoMatriz; }
            set
            {
                if (_tipoMatriz != value)
                {
                    _tipoMatriz = value;
                    OnPropertyChanged("TipoMatriz");
                }
            }
        }
        private string _tipoMatriz;
    
        [DataMember]
        public string LinhagemOrigem
        {
            get { return _linhagemOrigem; }
            set
            {
                if (_linhagemOrigem != value)
                {
                    _linhagemOrigem = value;
                    OnPropertyChanged("LinhagemOrigem");
                }
            }
        }
        private string _linhagemOrigem;
    
        [DataMember]
        public string LinhagemDestino
        {
            get { return _linhagemDestino; }
            set
            {
                if (_linhagemDestino != value)
                {
                    _linhagemDestino = value;
                    OnPropertyChanged("LinhagemDestino");
                }
            }
        }
        private string _linhagemDestino;
    
        [DataMember]
        public int Qtde
        {
            get { return _qtde; }
            set
            {
                if (_qtde != value)
                {
                    _qtde = value;
                    OnPropertyChanged("Qtde");
                }
            }
        }
        private int _qtde;
    
        [DataMember]
        public int Sequencia
        {
            get { return _sequencia; }
            set
            {
                if (_sequencia != value)
                {
                    _sequencia = value;
                    OnPropertyChanged("Sequencia");
                }
            }
        }
        private int _sequencia;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Transf_Ovos_Linha Transf_Ovos_Linha
        {
            get { return _transf_Ovos_Linha; }
            set
            {
                if (!ReferenceEquals(_transf_Ovos_Linha, value))
                {
                    var previousValue = _transf_Ovos_Linha;
                    _transf_Ovos_Linha = value;
                    FixupTransf_Ovos_Linha(previousValue);
                    OnNavigationPropertyChanged("Transf_Ovos_Linha");
                }
            }
        }
        private Transf_Ovos_Linha _transf_Ovos_Linha;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Transf_Ovos_Linha = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTransf_Ovos_Linha(Transf_Ovos_Linha previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Item_Transf_Ovos_Linha.Contains(this))
            {
                previousValue.Item_Transf_Ovos_Linha.Remove(this);
            }
    
            if (Transf_Ovos_Linha != null)
            {
                if (!Transf_Ovos_Linha.Item_Transf_Ovos_Linha.Contains(this))
                {
                    Transf_Ovos_Linha.Item_Transf_Ovos_Linha.Add(this);
                }
    
                IDTransfOvosLinha = Transf_Ovos_Linha.ID;
            }
            else if (!skipKeys)
            {
                IDTransfOvosLinha = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Transf_Ovos_Linha")
                    && (ChangeTracker.OriginalValues["Transf_Ovos_Linha"] == Transf_Ovos_Linha))
                {
                    ChangeTracker.OriginalValues.Remove("Transf_Ovos_Linha");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Transf_Ovos_Linha", previousValue);
                }
                if (Transf_Ovos_Linha != null && !Transf_Ovos_Linha.ChangeTracker.ChangeTrackingEnabled)
                {
                    Transf_Ovos_Linha.StartTracking();
                }
            }
        }

        #endregion

    }
}
