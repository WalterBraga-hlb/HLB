//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(GEP_Pilar))]
    public partial class GEP_Objetivo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public int IDPilar
        {
            get { return _iDPilar; }
            set
            {
                if (_iDPilar != value)
                {
                    ChangeTracker.RecordOriginalValue("IDPilar", _iDPilar);
                    if (!IsDeserializing)
                    {
                        if (GEP_Pilar != null && GEP_Pilar.ID != value)
                        {
                            GEP_Pilar = null;
                        }
                    }
                    _iDPilar = value;
                    OnPropertyChanged("IDPilar");
                }
            }
        }
        private int _iDPilar;
    
        [DataMember]
        public string Descricao
        {
            get { return _descricao; }
            set
            {
                if (_descricao != value)
                {
                    _descricao = value;
                    OnPropertyChanged("Descricao");
                }
            }
        }
        private string _descricao;
    
        [DataMember]
        public string Usuario
        {
            get { return _usuario; }
            set
            {
                if (_usuario != value)
                {
                    _usuario = value;
                    OnPropertyChanged("Usuario");
                }
            }
        }
        private string _usuario;
    
        [DataMember]
        public System.DateTime DataHoraCadastro
        {
            get { return _dataHoraCadastro; }
            set
            {
                if (_dataHoraCadastro != value)
                {
                    _dataHoraCadastro = value;
                    OnPropertyChanged("DataHoraCadastro");
                }
            }
        }
        private System.DateTime _dataHoraCadastro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public GEP_Pilar GEP_Pilar
        {
            get { return _gEP_Pilar; }
            set
            {
                if (!ReferenceEquals(_gEP_Pilar, value))
                {
                    var previousValue = _gEP_Pilar;
                    _gEP_Pilar = value;
                    FixupGEP_Pilar(previousValue);
                    OnNavigationPropertyChanged("GEP_Pilar");
                }
            }
        }
        private GEP_Pilar _gEP_Pilar;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            GEP_Pilar = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupGEP_Pilar(GEP_Pilar previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.GEP_Objetivo.Contains(this))
            {
                previousValue.GEP_Objetivo.Remove(this);
            }
    
            if (GEP_Pilar != null)
            {
                if (!GEP_Pilar.GEP_Objetivo.Contains(this))
                {
                    GEP_Pilar.GEP_Objetivo.Add(this);
                }
    
                IDPilar = GEP_Pilar.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("GEP_Pilar")
                    && (ChangeTracker.OriginalValues["GEP_Pilar"] == GEP_Pilar))
                {
                    ChangeTracker.OriginalValues.Remove("GEP_Pilar");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("GEP_Pilar", previousValue);
                }
                if (GEP_Pilar != null && !GEP_Pilar.ChangeTracker.ChangeTrackingEnabled)
                {
                    GEP_Pilar.StartTracking();
                }
            }
        }

        #endregion

    }
}
