//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models
{
    [DataContract(IsReference = true)]
    public partial class FLOCK_DATA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Farm_ID
        {
            get { return _farm_ID; }
            set
            {
                if (_farm_ID != value)
                {
                    _farm_ID = value;
                    OnPropertyChanged("Farm_ID");
                }
            }
        }
        private string _farm_ID;
    
        [DataMember]
        public string Flock_ID
        {
            get { return _flock_ID; }
            set
            {
                if (_flock_ID != value)
                {
                    _flock_ID = value;
                    OnPropertyChanged("Flock_ID");
                }
            }
        }
        private string _flock_ID;
    
        [DataMember]
        public string NumLote
        {
            get { return _numLote; }
            set
            {
                if (_numLote != value)
                {
                    _numLote = value;
                    OnPropertyChanged("NumLote");
                }
            }
        }
        private string _numLote;
    
        [DataMember]
        public string Variety
        {
            get { return _variety; }
            set
            {
                if (_variety != value)
                {
                    _variety = value;
                    OnPropertyChanged("Variety");
                }
            }
        }
        private string _variety;
    
        [DataMember]
        public Nullable<int> Active
        {
            get { return _active; }
            set
            {
                if (_active != value)
                {
                    _active = value;
                    OnPropertyChanged("Active");
                }
            }
        }
        private Nullable<int> _active;
    
        [DataMember]
        public Nullable<int> Age
        {
            get { return _age; }
            set
            {
                if (_age != value)
                {
                    _age = value;
                    OnPropertyChanged("Age");
                }
            }
        }
        private Nullable<int> _age;
    
        [DataMember]
        public Nullable<System.DateTime> Trx_Date
        {
            get { return _trx_Date; }
            set
            {
                if (_trx_Date != value)
                {
                    _trx_Date = value;
                    OnPropertyChanged("Trx_Date");
                }
            }
        }
        private Nullable<System.DateTime> _trx_Date;
    
        [DataMember]
        public Nullable<int> Hen_Mort
        {
            get { return _hen_Mort; }
            set
            {
                if (_hen_Mort != value)
                {
                    _hen_Mort = value;
                    OnPropertyChanged("Hen_Mort");
                }
            }
        }
        private Nullable<int> _hen_Mort;
    
        [DataMember]
        public Nullable<decimal> Hen_Wt
        {
            get { return _hen_Wt; }
            set
            {
                if (_hen_Wt != value)
                {
                    _hen_Wt = value;
                    OnPropertyChanged("Hen_Wt");
                }
            }
        }
        private Nullable<decimal> _hen_Wt;
    
        [DataMember]
        public Nullable<int> Male_Mort
        {
            get { return _male_Mort; }
            set
            {
                if (_male_Mort != value)
                {
                    _male_Mort = value;
                    OnPropertyChanged("Male_Mort");
                }
            }
        }
        private Nullable<int> _male_Mort;
    
        [DataMember]
        public Nullable<decimal> Hen_Feed_Del
        {
            get { return _hen_Feed_Del; }
            set
            {
                if (_hen_Feed_Del != value)
                {
                    _hen_Feed_Del = value;
                    OnPropertyChanged("Hen_Feed_Del");
                }
            }
        }
        private Nullable<decimal> _hen_Feed_Del;
    
        [DataMember]
        public Nullable<int> Total_Eggs_Prod
        {
            get { return _total_Eggs_Prod; }
            set
            {
                if (_total_Eggs_Prod != value)
                {
                    _total_Eggs_Prod = value;
                    OnPropertyChanged("Total_Eggs_Prod");
                }
            }
        }
        private Nullable<int> _total_Eggs_Prod;
    
        [DataMember]
        public Nullable<decimal> Egg_Wt
        {
            get { return _egg_Wt; }
            set
            {
                if (_egg_Wt != value)
                {
                    _egg_Wt = value;
                    OnPropertyChanged("Egg_Wt");
                }
            }
        }
        private Nullable<decimal> _egg_Wt;
    
        [DataMember]
        public Nullable<int> Hatch_Eggs
        {
            get { return _hatch_Eggs; }
            set
            {
                if (_hatch_Eggs != value)
                {
                    _hatch_Eggs = value;
                    OnPropertyChanged("Hatch_Eggs");
                }
            }
        }
        private Nullable<int> _hatch_Eggs;
    
        [DataMember]
        public string Comentarios
        {
            get { return _comentarios; }
            set
            {
                if (_comentarios != value)
                {
                    _comentarios = value;
                    OnPropertyChanged("Comentarios");
                }
            }
        }
        private string _comentarios;
    
        [DataMember]
        public string farm_name
        {
            get { return _farm_name; }
            set
            {
                if (_farm_name != value)
                {
                    _farm_name = value;
                    OnPropertyChanged("farm_name");
                }
            }
        }
        private string _farm_name;
    
        [DataMember]
        public Nullable<int> count_females
        {
            get { return _count_females; }
            set
            {
                if (_count_females != value)
                {
                    _count_females = value;
                    OnPropertyChanged("count_females");
                }
            }
        }
        private Nullable<int> _count_females;
    
        [DataMember]
        public Nullable<int> count_males
        {
            get { return _count_males; }
            set
            {
                if (_count_males != value)
                {
                    _count_males = value;
                    OnPropertyChanged("count_males");
                }
            }
        }
        private Nullable<int> _count_males;
    
        [DataMember]
        public Nullable<int> broken
        {
            get { return _broken; }
            set
            {
                if (_broken != value)
                {
                    _broken = value;
                    OnPropertyChanged("broken");
                }
            }
        }
        private Nullable<int> _broken;
    
        [DataMember]
        public Nullable<int> dirty
        {
            get { return _dirty; }
            set
            {
                if (_dirty != value)
                {
                    _dirty = value;
                    OnPropertyChanged("dirty");
                }
            }
        }
        private Nullable<int> _dirty;
    
        [DataMember]
        public Nullable<int> consume
        {
            get { return _consume; }
            set
            {
                if (_consume != value)
                {
                    _consume = value;
                    OnPropertyChanged("consume");
                }
            }
        }
        private Nullable<int> _consume;
    
        [DataMember]
        public Nullable<int> floor
        {
            get { return _floor; }
            set
            {
                if (_floor != value)
                {
                    _floor = value;
                    OnPropertyChanged("floor");
                }
            }
        }
        private Nullable<int> _floor;
    
        [DataMember]
        public Nullable<int> destroyed
        {
            get { return _destroyed; }
            set
            {
                if (_destroyed != value)
                {
                    _destroyed = value;
                    OnPropertyChanged("destroyed");
                }
            }
        }
        private Nullable<int> _destroyed;
    
        [DataMember]
        public Nullable<decimal> uniformity
        {
            get { return _uniformity; }
            set
            {
                if (_uniformity != value)
                {
                    _uniformity = value;
                    OnPropertyChanged("uniformity");
                }
            }
        }
        private Nullable<decimal> _uniformity;
    
        [DataMember]
        public Nullable<decimal> water_consumption
        {
            get { return _water_consumption; }
            set
            {
                if (_water_consumption != value)
                {
                    _water_consumption = value;
                    OnPropertyChanged("water_consumption");
                }
            }
        }
        private Nullable<decimal> _water_consumption;
    
        [DataMember]
        public Nullable<int> num_galpao
        {
            get { return _num_galpao; }
            set
            {
                if (_num_galpao != value)
                {
                    _num_galpao = value;
                    OnPropertyChanged("num_galpao");
                }
            }
        }
        private Nullable<int> _num_galpao;
    
        [DataMember]
        public string Company
        {
            get { return _company; }
            set
            {
                if (_company != value)
                {
                    _company = value;
                    OnPropertyChanged("Company");
                }
            }
        }
        private string _company;
    
        [DataMember]
        public string Region
        {
            get { return _region; }
            set
            {
                if (_region != value)
                {
                    _region = value;
                    OnPropertyChanged("Region");
                }
            }
        }
        private string _region;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
