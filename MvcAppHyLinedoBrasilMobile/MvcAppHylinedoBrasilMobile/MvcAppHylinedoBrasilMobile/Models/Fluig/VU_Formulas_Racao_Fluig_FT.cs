//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.Fluig
{
    [DataContract(IsReference = true)]
    public partial class VU_Formulas_Racao_Fluig_FT: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int NUM_PROCES
        {
            get { return _nUM_PROCES; }
            set
            {
                if (_nUM_PROCES != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NUM_PROCES' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nUM_PROCES = value;
                    OnPropertyChanged("NUM_PROCES");
                }
            }
        }
        private int _nUM_PROCES;
    
        [DataMember]
        public Nullable<int> STATUS
        {
            get { return _sTATUS; }
            set
            {
                if (_sTATUS != value)
                {
                    _sTATUS = value;
                    OnPropertyChanged("STATUS");
                }
            }
        }
        private Nullable<int> _sTATUS;
    
        [DataMember]
        public string Atividade
        {
            get { return _atividade; }
            set
            {
                if (_atividade != value)
                {
                    _atividade = value;
                    OnPropertyChanged("Atividade");
                }
            }
        }
        private string _atividade;
    
        [DataMember]
        public string codigo_formula
        {
            get { return _codigo_formula; }
            set
            {
                if (_codigo_formula != value)
                {
                    _codigo_formula = value;
                    OnPropertyChanged("codigo_formula");
                }
            }
        }
        private string _codigo_formula;
    
        [DataMember]
        public string codEstr_formula
        {
            get { return _codEstr_formula; }
            set
            {
                if (_codEstr_formula != value)
                {
                    _codEstr_formula = value;
                    OnPropertyChanged("codEstr_formula");
                }
            }
        }
        private string _codEstr_formula;
    
        [DataMember]
        public string descricao_formula
        {
            get { return _descricao_formula; }
            set
            {
                if (_descricao_formula != value)
                {
                    _descricao_formula = value;
                    OnPropertyChanged("descricao_formula");
                }
            }
        }
        private string _descricao_formula;
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<int> companyid
        {
            get { return _companyid; }
            set
            {
                if (_companyid != value)
                {
                    _companyid = value;
                    OnPropertyChanged("companyid");
                }
            }
        }
        private Nullable<int> _companyid;
    
        [DataMember]
        public Nullable<int> cardid
        {
            get { return _cardid; }
            set
            {
                if (_cardid != value)
                {
                    _cardid = value;
                    OnPropertyChanged("cardid");
                }
            }
        }
        private Nullable<int> _cardid;
    
        [DataMember]
        public Nullable<int> documentid
        {
            get { return _documentid; }
            set
            {
                if (_documentid != value)
                {
                    _documentid = value;
                    OnPropertyChanged("documentid");
                }
            }
        }
        private Nullable<int> _documentid;
    
        [DataMember]
        public Nullable<int> version
        {
            get { return _version; }
            set
            {
                if (_version != value)
                {
                    _version = value;
                    OnPropertyChanged("version");
                }
            }
        }
        private Nullable<int> _version;
    
        [DataMember]
        public string tableid
        {
            get { return _tableid; }
            set
            {
                if (_tableid != value)
                {
                    _tableid = value;
                    OnPropertyChanged("tableid");
                }
            }
        }
        private string _tableid;
    
        [DataMember]
        public Nullable<System.DateTime> ANONYMIZATION_DATE
        {
            get { return _aNONYMIZATION_DATE; }
            set
            {
                if (_aNONYMIZATION_DATE != value)
                {
                    _aNONYMIZATION_DATE = value;
                    OnPropertyChanged("ANONYMIZATION_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _aNONYMIZATION_DATE;
    
        [DataMember]
        public string ANONYMIZATION_USER_ID
        {
            get { return _aNONYMIZATION_USER_ID; }
            set
            {
                if (_aNONYMIZATION_USER_ID != value)
                {
                    _aNONYMIZATION_USER_ID = value;
                    OnPropertyChanged("ANONYMIZATION_USER_ID");
                }
            }
        }
        private string _aNONYMIZATION_USER_ID;
    
        [DataMember]
        public string codigo_ft
        {
            get { return _codigo_ft; }
            set
            {
                if (_codigo_ft != value)
                {
                    _codigo_ft = value;
                    OnPropertyChanged("codigo_ft");
                }
            }
        }
        private string _codigo_ft;
    
        [DataMember]
        public string descricao_ft
        {
            get { return _descricao_ft; }
            set
            {
                if (_descricao_ft != value)
                {
                    _descricao_ft = value;
                    OnPropertyChanged("descricao_ft");
                }
            }
        }
        private string _descricao_ft;
    
        [DataMember]
        public string qtde_ft
        {
            get { return _qtde_ft; }
            set
            {
                if (_qtde_ft != value)
                {
                    _qtde_ft = value;
                    OnPropertyChanged("qtde_ft");
                }
            }
        }
        private string _qtde_ft;
    
        [DataMember]
        public string quebra_ft
        {
            get { return _quebra_ft; }
            set
            {
                if (_quebra_ft != value)
                {
                    _quebra_ft = value;
                    OnPropertyChanged("quebra_ft");
                }
            }
        }
        private string _quebra_ft;
    
        [DataMember]
        public Nullable<int> masterid
        {
            get { return _masterid; }
            set
            {
                if (_masterid != value)
                {
                    _masterid = value;
                    OnPropertyChanged("masterid");
                }
            }
        }
        private Nullable<int> _masterid;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
