//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.Fluig
{
    [DataContract(IsReference = true)]
    public partial class FF40F29A5F_77708420: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private string _iD;
    
        [DataMember]
        public string RECORD_CODE
        {
            get { return _rECORD_CODE; }
            set
            {
                if (_rECORD_CODE != value)
                {
                    _rECORD_CODE = value;
                    OnPropertyChanged("RECORD_CODE");
                }
            }
        }
        private string _rECORD_CODE;
    
        [DataMember]
        public int VERSION
        {
            get { return _vERSION; }
            set
            {
                if (_vERSION != value)
                {
                    _vERSION = value;
                    OnPropertyChanged("VERSION");
                }
            }
        }
        private int _vERSION;
    
        [DataMember]
        public bool DELETED
        {
            get { return _dELETED; }
            set
            {
                if (_dELETED != value)
                {
                    _dELETED = value;
                    OnPropertyChanged("DELETED");
                }
            }
        }
        private bool _dELETED;
    
        [DataMember]
        public int PARENT_FORM_VERSION
        {
            get { return _pARENT_FORM_VERSION; }
            set
            {
                if (_pARENT_FORM_VERSION != value)
                {
                    _pARENT_FORM_VERSION = value;
                    OnPropertyChanged("PARENT_FORM_VERSION");
                }
            }
        }
        private int _pARENT_FORM_VERSION;
    
        [DataMember]
        public string CREATED_BY
        {
            get { return _cREATED_BY; }
            set
            {
                if (_cREATED_BY != value)
                {
                    _cREATED_BY = value;
                    OnPropertyChanged("CREATED_BY");
                }
            }
        }
        private string _cREATED_BY;
    
        [DataMember]
        public System.DateTime CREATED_DATE
        {
            get { return _cREATED_DATE; }
            set
            {
                if (_cREATED_DATE != value)
                {
                    _cREATED_DATE = value;
                    OnPropertyChanged("CREATED_DATE");
                }
            }
        }
        private System.DateTime _cREATED_DATE;
    
        [DataMember]
        public string UPDATED_BY
        {
            get { return _uPDATED_BY; }
            set
            {
                if (_uPDATED_BY != value)
                {
                    _uPDATED_BY = value;
                    OnPropertyChanged("UPDATED_BY");
                }
            }
        }
        private string _uPDATED_BY;
    
        [DataMember]
        public Nullable<System.DateTime> UPDATED_DATE
        {
            get { return _uPDATED_DATE; }
            set
            {
                if (_uPDATED_DATE != value)
                {
                    _uPDATED_DATE = value;
                    OnPropertyChanged("UPDATED_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _uPDATED_DATE;
    
        [DataMember]
        public string LINHAGEM_SEL_1
        {
            get { return _lINHAGEM_SEL_1; }
            set
            {
                if (_lINHAGEM_SEL_1 != value)
                {
                    _lINHAGEM_SEL_1 = value;
                    OnPropertyChanged("LINHAGEM_SEL_1");
                }
            }
        }
        private string _lINHAGEM_SEL_1;
    
        [DataMember]
        public Nullable<System.DateTime> PRIMEIRO_DIA_DO_DT_1
        {
            get { return _pRIMEIRO_DIA_DO_DT_1; }
            set
            {
                if (_pRIMEIRO_DIA_DO_DT_1 != value)
                {
                    _pRIMEIRO_DIA_DO_DT_1 = value;
                    OnPropertyChanged("PRIMEIRO_DIA_DO_DT_1");
                }
            }
        }
        private Nullable<System.DateTime> _pRIMEIRO_DIA_DO_DT_1;
    
        [DataMember]
        public Nullable<decimal> SALDO_DE_PINTOS_NR_1
        {
            get { return _sALDO_DE_PINTOS_NR_1; }
            set
            {
                if (_sALDO_DE_PINTOS_NR_1 != value)
                {
                    _sALDO_DE_PINTOS_NR_1 = value;
                    OnPropertyChanged("SALDO_DE_PINTOS_NR_1");
                }
            }
        }
        private Nullable<decimal> _sALDO_DE_PINTOS_NR_1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
