//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo2
{
    [DataContract(IsReference = true)]
    public partial class TIPO_DESPESA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string TipoDespCod
        {
            get { return _tipoDespCod; }
            set
            {
                if (_tipoDespCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TipoDespCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tipoDespCod = value;
                    OnPropertyChanged("TipoDespCod");
                }
            }
        }
        private string _tipoDespCod;
    
        [DataMember]
        public string TipoDespNome
        {
            get { return _tipoDespNome; }
            set
            {
                if (_tipoDespNome != value)
                {
                    _tipoDespNome = value;
                    OnPropertyChanged("TipoDespNome");
                }
            }
        }
        private string _tipoDespNome;
    
        [DataMember]
        public Nullable<decimal> TipoDespValUnit
        {
            get { return _tipoDespValUnit; }
            set
            {
                if (_tipoDespValUnit != value)
                {
                    _tipoDespValUnit = value;
                    OnPropertyChanged("TipoDespValUnit");
                }
            }
        }
        private Nullable<decimal> _tipoDespValUnit;
    
        [DataMember]
        public Nullable<decimal> TipoDespValUnitMin
        {
            get { return _tipoDespValUnitMin; }
            set
            {
                if (_tipoDespValUnitMin != value)
                {
                    _tipoDespValUnitMin = value;
                    OnPropertyChanged("TipoDespValUnitMin");
                }
            }
        }
        private Nullable<decimal> _tipoDespValUnitMin;
    
        [DataMember]
        public Nullable<decimal> TipoDespValUnitMax
        {
            get { return _tipoDespValUnitMax; }
            set
            {
                if (_tipoDespValUnitMax != value)
                {
                    _tipoDespValUnitMax = value;
                    OnPropertyChanged("TipoDespValUnitMax");
                }
            }
        }
        private Nullable<decimal> _tipoDespValUnitMax;
    
        [DataMember]
        public string TipoDespAltValUnit
        {
            get { return _tipoDespAltValUnit; }
            set
            {
                if (_tipoDespAltValUnit != value)
                {
                    _tipoDespAltValUnit = value;
                    OnPropertyChanged("TipoDespAltValUnit");
                }
            }
        }
        private string _tipoDespAltValUnit;
    
        [DataMember]
        public Nullable<short> TipoDespCasaDecQtd
        {
            get { return _tipoDespCasaDecQtd; }
            set
            {
                if (_tipoDespCasaDecQtd != value)
                {
                    _tipoDespCasaDecQtd = value;
                    OnPropertyChanged("TipoDespCasaDecQtd");
                }
            }
        }
        private Nullable<short> _tipoDespCasaDecQtd;
    
        [DataMember]
        public string TipoDespClasseDespCodEstr
        {
            get { return _tipoDespClasseDespCodEstr; }
            set
            {
                if (_tipoDespClasseDespCodEstr != value)
                {
                    _tipoDespClasseDespCodEstr = value;
                    OnPropertyChanged("TipoDespClasseDespCodEstr");
                }
            }
        }
        private string _tipoDespClasseDespCodEstr;
    
        [DataMember]
        public string USERNaturezaDespesa
        {
            get { return _uSERNaturezaDespesa; }
            set
            {
                if (_uSERNaturezaDespesa != value)
                {
                    _uSERNaturezaDespesa = value;
                    OnPropertyChanged("USERNaturezaDespesa");
                }
            }
        }
        private string _uSERNaturezaDespesa;
    
        [DataMember]
        public Nullable<System.DateTime> TipoDespHorario
        {
            get { return _tipoDespHorario; }
            set
            {
                if (_tipoDespHorario != value)
                {
                    _tipoDespHorario = value;
                    OnPropertyChanged("TipoDespHorario");
                }
            }
        }
        private Nullable<System.DateTime> _tipoDespHorario;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
