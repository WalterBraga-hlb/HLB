//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo2
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AEROPORTO))]
    [KnownType(typeof(IND_ECONOMICO))]
    [KnownType(typeof(ITEM_PED_COMP))]
    [KnownType(typeof(PED_COMP))]
    [KnownType(typeof(NOTA_FISCAL))]
    public partial class IND_ECONOMICO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string IndEconCod
        {
            get { return _indEconCod; }
            set
            {
                if (_indEconCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IndEconCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _indEconCod = value;
                    OnPropertyChanged("IndEconCod");
                }
            }
        }
        private string _indEconCod;
    
        [DataMember]
        public string IndEconNome
        {
            get { return _indEconNome; }
            set
            {
                if (_indEconNome != value)
                {
                    _indEconNome = value;
                    OnPropertyChanged("IndEconNome");
                }
            }
        }
        private string _indEconNome;
    
        [DataMember]
        public string IndEconPer
        {
            get { return _indEconPer; }
            set
            {
                if (_indEconPer != value)
                {
                    _indEconPer = value;
                    OnPropertyChanged("IndEconPer");
                }
            }
        }
        private string _indEconPer;
    
        [DataMember]
        public string IndEconSimb
        {
            get { return _indEconSimb; }
            set
            {
                if (_indEconSimb != value)
                {
                    _indEconSimb = value;
                    OnPropertyChanged("IndEconSimb");
                }
            }
        }
        private string _indEconSimb;
    
        [DataMember]
        public string IndEconTipo
        {
            get { return _indEconTipo; }
            set
            {
                if (_indEconTipo != value)
                {
                    _indEconTipo = value;
                    OnPropertyChanged("IndEconTipo");
                }
            }
        }
        private string _indEconTipo;
    
        [DataMember]
        public Nullable<short> IndEconQtdDec
        {
            get { return _indEconQtdDec; }
            set
            {
                if (_indEconQtdDec != value)
                {
                    _indEconQtdDec = value;
                    OnPropertyChanged("IndEconQtdDec");
                }
            }
        }
        private Nullable<short> _indEconQtdDec;
    
        [DataMember]
        public string IndEconExtIntSing
        {
            get { return _indEconExtIntSing; }
            set
            {
                if (_indEconExtIntSing != value)
                {
                    _indEconExtIntSing = value;
                    OnPropertyChanged("IndEconExtIntSing");
                }
            }
        }
        private string _indEconExtIntSing;
    
        [DataMember]
        public string IndEconExtIntPlur
        {
            get { return _indEconExtIntPlur; }
            set
            {
                if (_indEconExtIntPlur != value)
                {
                    _indEconExtIntPlur = value;
                    OnPropertyChanged("IndEconExtIntPlur");
                }
            }
        }
        private string _indEconExtIntPlur;
    
        [DataMember]
        public string IndEconExtFracSing
        {
            get { return _indEconExtFracSing; }
            set
            {
                if (_indEconExtFracSing != value)
                {
                    _indEconExtFracSing = value;
                    OnPropertyChanged("IndEconExtFracSing");
                }
            }
        }
        private string _indEconExtFracSing;
    
        [DataMember]
        public string IndEconExtFracPlur
        {
            get { return _indEconExtFracPlur; }
            set
            {
                if (_indEconExtFracPlur != value)
                {
                    _indEconExtFracPlur = value;
                    OnPropertyChanged("IndEconExtFracPlur");
                }
            }
        }
        private string _indEconExtFracPlur;
    
        [DataMember]
        public System.DateTime IndEconDataInic
        {
            get { return _indEconDataInic; }
            set
            {
                if (_indEconDataInic != value)
                {
                    _indEconDataInic = value;
                    OnPropertyChanged("IndEconDataInic");
                }
            }
        }
        private System.DateTime _indEconDataInic;
    
        [DataMember]
        public Nullable<System.DateTime> IndEconDataFim
        {
            get { return _indEconDataFim; }
            set
            {
                if (_indEconDataFim != value)
                {
                    _indEconDataFim = value;
                    OnPropertyChanged("IndEconDataFim");
                }
            }
        }
        private Nullable<System.DateTime> _indEconDataFim;
    
        [DataMember]
        public string IndEconAnt
        {
            get { return _indEconAnt; }
            set
            {
                if (_indEconAnt != value)
                {
                    _indEconAnt = value;
                    OnPropertyChanged("IndEconAnt");
                }
            }
        }
        private string _indEconAnt;
    
        [DataMember]
        public string IndEconPost
        {
            get { return _indEconPost; }
            set
            {
                if (_indEconPost != value)
                {
                    _indEconPost = value;
                    OnPropertyChanged("IndEconPost");
                }
            }
        }
        private string _indEconPost;
    
        [DataMember]
        public string IndEconCorrente
        {
            get { return _indEconCorrente; }
            set
            {
                if (_indEconCorrente != value)
                {
                    _indEconCorrente = value;
                    OnPropertyChanged("IndEconCorrente");
                }
            }
        }
        private string _indEconCorrente;
    
        [DataMember]
        public string IndEconCodRef
        {
            get { return _indEconCodRef; }
            set
            {
                if (_indEconCodRef != value)
                {
                    ChangeTracker.RecordOriginalValue("IndEconCodRef", _indEconCodRef);
                    if (!IsDeserializing)
                    {
                        if (IND_ECONOMICO2 != null && IND_ECONOMICO2.IndEconCod != value)
                        {
                            IND_ECONOMICO2 = null;
                        }
                    }
                    _indEconCodRef = value;
                    OnPropertyChanged("IndEconCodRef");
                }
            }
        }
        private string _indEconCodRef;
    
        [DataMember]
        public string IndEconSiglaIata
        {
            get { return _indEconSiglaIata; }
            set
            {
                if (_indEconSiglaIata != value)
                {
                    _indEconSiglaIata = value;
                    OnPropertyChanged("IndEconSiglaIata");
                }
            }
        }
        private string _indEconSiglaIata;
    
        [DataMember]
        public string IndEconCodFGV
        {
            get { return _indEconCodFGV; }
            set
            {
                if (_indEconCodFGV != value)
                {
                    _indEconCodFGV = value;
                    OnPropertyChanged("IndEconCodFGV");
                }
            }
        }
        private string _indEconCodFGV;
    
        [DataMember]
        public string IndEconDescrFGV
        {
            get { return _indEconDescrFGV; }
            set
            {
                if (_indEconDescrFGV != value)
                {
                    _indEconDescrFGV = value;
                    OnPropertyChanged("IndEconDescrFGV");
                }
            }
        }
        private string _indEconDescrFGV;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<AEROPORTO> AEROPORTO
        {
            get
            {
                if (_aEROPORTO == null)
                {
                    _aEROPORTO = new TrackableCollection<AEROPORTO>();
                    _aEROPORTO.CollectionChanged += FixupAEROPORTO;
                }
                return _aEROPORTO;
            }
            set
            {
                if (!ReferenceEquals(_aEROPORTO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aEROPORTO != null)
                    {
                        _aEROPORTO.CollectionChanged -= FixupAEROPORTO;
                    }
                    _aEROPORTO = value;
                    if (_aEROPORTO != null)
                    {
                        _aEROPORTO.CollectionChanged += FixupAEROPORTO;
                    }
                    OnNavigationPropertyChanged("AEROPORTO");
                }
            }
        }
        private TrackableCollection<AEROPORTO> _aEROPORTO;
    
        [DataMember]
        public TrackableCollection<AEROPORTO> AEROPORTO1
        {
            get
            {
                if (_aEROPORTO1 == null)
                {
                    _aEROPORTO1 = new TrackableCollection<AEROPORTO>();
                    _aEROPORTO1.CollectionChanged += FixupAEROPORTO1;
                }
                return _aEROPORTO1;
            }
            set
            {
                if (!ReferenceEquals(_aEROPORTO1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aEROPORTO1 != null)
                    {
                        _aEROPORTO1.CollectionChanged -= FixupAEROPORTO1;
                    }
                    _aEROPORTO1 = value;
                    if (_aEROPORTO1 != null)
                    {
                        _aEROPORTO1.CollectionChanged += FixupAEROPORTO1;
                    }
                    OnNavigationPropertyChanged("AEROPORTO1");
                }
            }
        }
        private TrackableCollection<AEROPORTO> _aEROPORTO1;
    
        [DataMember]
        public TrackableCollection<AEROPORTO> AEROPORTO2
        {
            get
            {
                if (_aEROPORTO2 == null)
                {
                    _aEROPORTO2 = new TrackableCollection<AEROPORTO>();
                    _aEROPORTO2.CollectionChanged += FixupAEROPORTO2;
                }
                return _aEROPORTO2;
            }
            set
            {
                if (!ReferenceEquals(_aEROPORTO2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aEROPORTO2 != null)
                    {
                        _aEROPORTO2.CollectionChanged -= FixupAEROPORTO2;
                    }
                    _aEROPORTO2 = value;
                    if (_aEROPORTO2 != null)
                    {
                        _aEROPORTO2.CollectionChanged += FixupAEROPORTO2;
                    }
                    OnNavigationPropertyChanged("AEROPORTO2");
                }
            }
        }
        private TrackableCollection<AEROPORTO> _aEROPORTO2;
    
        [DataMember]
        public TrackableCollection<IND_ECONOMICO> IND_ECONOMICO1
        {
            get
            {
                if (_iND_ECONOMICO1 == null)
                {
                    _iND_ECONOMICO1 = new TrackableCollection<IND_ECONOMICO>();
                    _iND_ECONOMICO1.CollectionChanged += FixupIND_ECONOMICO1;
                }
                return _iND_ECONOMICO1;
            }
            set
            {
                if (!ReferenceEquals(_iND_ECONOMICO1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iND_ECONOMICO1 != null)
                    {
                        _iND_ECONOMICO1.CollectionChanged -= FixupIND_ECONOMICO1;
                    }
                    _iND_ECONOMICO1 = value;
                    if (_iND_ECONOMICO1 != null)
                    {
                        _iND_ECONOMICO1.CollectionChanged += FixupIND_ECONOMICO1;
                    }
                    OnNavigationPropertyChanged("IND_ECONOMICO1");
                }
            }
        }
        private TrackableCollection<IND_ECONOMICO> _iND_ECONOMICO1;
    
        [DataMember]
        public IND_ECONOMICO IND_ECONOMICO2
        {
            get { return _iND_ECONOMICO2; }
            set
            {
                if (!ReferenceEquals(_iND_ECONOMICO2, value))
                {
                    var previousValue = _iND_ECONOMICO2;
                    _iND_ECONOMICO2 = value;
                    FixupIND_ECONOMICO2(previousValue);
                    OnNavigationPropertyChanged("IND_ECONOMICO2");
                }
            }
        }
        private IND_ECONOMICO _iND_ECONOMICO2;
    
        [DataMember]
        public TrackableCollection<ITEM_PED_COMP> ITEM_PED_COMP
        {
            get
            {
                if (_iTEM_PED_COMP == null)
                {
                    _iTEM_PED_COMP = new TrackableCollection<ITEM_PED_COMP>();
                    _iTEM_PED_COMP.CollectionChanged += FixupITEM_PED_COMP;
                }
                return _iTEM_PED_COMP;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_PED_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_PED_COMP != null)
                    {
                        _iTEM_PED_COMP.CollectionChanged -= FixupITEM_PED_COMP;
                    }
                    _iTEM_PED_COMP = value;
                    if (_iTEM_PED_COMP != null)
                    {
                        _iTEM_PED_COMP.CollectionChanged += FixupITEM_PED_COMP;
                    }
                    OnNavigationPropertyChanged("ITEM_PED_COMP");
                }
            }
        }
        private TrackableCollection<ITEM_PED_COMP> _iTEM_PED_COMP;
    
        [DataMember]
        public TrackableCollection<PED_COMP> PED_COMP
        {
            get
            {
                if (_pED_COMP == null)
                {
                    _pED_COMP = new TrackableCollection<PED_COMP>();
                    _pED_COMP.CollectionChanged += FixupPED_COMP;
                }
                return _pED_COMP;
            }
            set
            {
                if (!ReferenceEquals(_pED_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pED_COMP != null)
                    {
                        _pED_COMP.CollectionChanged -= FixupPED_COMP;
                    }
                    _pED_COMP = value;
                    if (_pED_COMP != null)
                    {
                        _pED_COMP.CollectionChanged += FixupPED_COMP;
                    }
                    OnNavigationPropertyChanged("PED_COMP");
                }
            }
        }
        private TrackableCollection<PED_COMP> _pED_COMP;
    
        [DataMember]
        public TrackableCollection<NOTA_FISCAL> NOTA_FISCAL
        {
            get
            {
                if (_nOTA_FISCAL == null)
                {
                    _nOTA_FISCAL = new TrackableCollection<NOTA_FISCAL>();
                    _nOTA_FISCAL.CollectionChanged += FixupNOTA_FISCAL;
                }
                return _nOTA_FISCAL;
            }
            set
            {
                if (!ReferenceEquals(_nOTA_FISCAL, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_nOTA_FISCAL != null)
                    {
                        _nOTA_FISCAL.CollectionChanged -= FixupNOTA_FISCAL;
                    }
                    _nOTA_FISCAL = value;
                    if (_nOTA_FISCAL != null)
                    {
                        _nOTA_FISCAL.CollectionChanged += FixupNOTA_FISCAL;
                    }
                    OnNavigationPropertyChanged("NOTA_FISCAL");
                }
            }
        }
        private TrackableCollection<NOTA_FISCAL> _nOTA_FISCAL;
    
        [DataMember]
        public TrackableCollection<NOTA_FISCAL> NOTA_FISCAL1
        {
            get
            {
                if (_nOTA_FISCAL1 == null)
                {
                    _nOTA_FISCAL1 = new TrackableCollection<NOTA_FISCAL>();
                    _nOTA_FISCAL1.CollectionChanged += FixupNOTA_FISCAL1;
                }
                return _nOTA_FISCAL1;
            }
            set
            {
                if (!ReferenceEquals(_nOTA_FISCAL1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_nOTA_FISCAL1 != null)
                    {
                        _nOTA_FISCAL1.CollectionChanged -= FixupNOTA_FISCAL1;
                    }
                    _nOTA_FISCAL1 = value;
                    if (_nOTA_FISCAL1 != null)
                    {
                        _nOTA_FISCAL1.CollectionChanged += FixupNOTA_FISCAL1;
                    }
                    OnNavigationPropertyChanged("NOTA_FISCAL1");
                }
            }
        }
        private TrackableCollection<NOTA_FISCAL> _nOTA_FISCAL1;
    
        [DataMember]
        public TrackableCollection<NOTA_FISCAL> NOTA_FISCAL2
        {
            get
            {
                if (_nOTA_FISCAL2 == null)
                {
                    _nOTA_FISCAL2 = new TrackableCollection<NOTA_FISCAL>();
                    _nOTA_FISCAL2.CollectionChanged += FixupNOTA_FISCAL2;
                }
                return _nOTA_FISCAL2;
            }
            set
            {
                if (!ReferenceEquals(_nOTA_FISCAL2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_nOTA_FISCAL2 != null)
                    {
                        _nOTA_FISCAL2.CollectionChanged -= FixupNOTA_FISCAL2;
                    }
                    _nOTA_FISCAL2 = value;
                    if (_nOTA_FISCAL2 != null)
                    {
                        _nOTA_FISCAL2.CollectionChanged += FixupNOTA_FISCAL2;
                    }
                    OnNavigationPropertyChanged("NOTA_FISCAL2");
                }
            }
        }
        private TrackableCollection<NOTA_FISCAL> _nOTA_FISCAL2;
    
        [DataMember]
        public TrackableCollection<NOTA_FISCAL> NOTA_FISCAL3
        {
            get
            {
                if (_nOTA_FISCAL3 == null)
                {
                    _nOTA_FISCAL3 = new TrackableCollection<NOTA_FISCAL>();
                    _nOTA_FISCAL3.CollectionChanged += FixupNOTA_FISCAL3;
                }
                return _nOTA_FISCAL3;
            }
            set
            {
                if (!ReferenceEquals(_nOTA_FISCAL3, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_nOTA_FISCAL3 != null)
                    {
                        _nOTA_FISCAL3.CollectionChanged -= FixupNOTA_FISCAL3;
                    }
                    _nOTA_FISCAL3 = value;
                    if (_nOTA_FISCAL3 != null)
                    {
                        _nOTA_FISCAL3.CollectionChanged += FixupNOTA_FISCAL3;
                    }
                    OnNavigationPropertyChanged("NOTA_FISCAL3");
                }
            }
        }
        private TrackableCollection<NOTA_FISCAL> _nOTA_FISCAL3;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AEROPORTO.Clear();
            AEROPORTO1.Clear();
            AEROPORTO2.Clear();
            IND_ECONOMICO1.Clear();
            IND_ECONOMICO2 = null;
            ITEM_PED_COMP.Clear();
            PED_COMP.Clear();
            NOTA_FISCAL.Clear();
            NOTA_FISCAL1.Clear();
            NOTA_FISCAL2.Clear();
            NOTA_FISCAL3.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupIND_ECONOMICO2(IND_ECONOMICO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.IND_ECONOMICO1.Contains(this))
            {
                previousValue.IND_ECONOMICO1.Remove(this);
            }
    
            if (IND_ECONOMICO2 != null)
            {
                if (!IND_ECONOMICO2.IND_ECONOMICO1.Contains(this))
                {
                    IND_ECONOMICO2.IND_ECONOMICO1.Add(this);
                }
    
                IndEconCodRef = IND_ECONOMICO2.IndEconCod;
            }
            else if (!skipKeys)
            {
                IndEconCodRef = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("IND_ECONOMICO2")
                    && (ChangeTracker.OriginalValues["IND_ECONOMICO2"] == IND_ECONOMICO2))
                {
                    ChangeTracker.OriginalValues.Remove("IND_ECONOMICO2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("IND_ECONOMICO2", previousValue);
                }
                if (IND_ECONOMICO2 != null && !IND_ECONOMICO2.ChangeTracker.ChangeTrackingEnabled)
                {
                    IND_ECONOMICO2.StartTracking();
                }
            }
        }
    
        private void FixupAEROPORTO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AEROPORTO item in e.NewItems)
                {
                    item.IND_ECONOMICO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AEROPORTO", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AEROPORTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO, this))
                    {
                        item.IND_ECONOMICO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AEROPORTO", item);
                    }
                }
            }
        }
    
        private void FixupAEROPORTO1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AEROPORTO item in e.NewItems)
                {
                    item.IND_ECONOMICO1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AEROPORTO1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AEROPORTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO1, this))
                    {
                        item.IND_ECONOMICO1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AEROPORTO1", item);
                    }
                }
            }
        }
    
        private void FixupAEROPORTO2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AEROPORTO item in e.NewItems)
                {
                    item.IND_ECONOMICO2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AEROPORTO2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AEROPORTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO2, this))
                    {
                        item.IND_ECONOMICO2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AEROPORTO2", item);
                    }
                }
            }
        }
    
        private void FixupIND_ECONOMICO1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IND_ECONOMICO item in e.NewItems)
                {
                    item.IND_ECONOMICO2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IND_ECONOMICO1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IND_ECONOMICO item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO2, this))
                    {
                        item.IND_ECONOMICO2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IND_ECONOMICO1", item);
                    }
                }
            }
        }
    
        private void FixupITEM_PED_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_PED_COMP item in e.NewItems)
                {
                    item.IND_ECONOMICO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_PED_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO, this))
                    {
                        item.IND_ECONOMICO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_PED_COMP", item);
                    }
                }
            }
        }
    
        private void FixupPED_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PED_COMP item in e.NewItems)
                {
                    item.IND_ECONOMICO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PED_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO, this))
                    {
                        item.IND_ECONOMICO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PED_COMP", item);
                    }
                }
            }
        }
    
        private void FixupNOTA_FISCAL(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NOTA_FISCAL item in e.NewItems)
                {
                    item.IND_ECONOMICO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NOTA_FISCAL", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NOTA_FISCAL item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO, this))
                    {
                        item.IND_ECONOMICO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NOTA_FISCAL", item);
                    }
                }
            }
        }
    
        private void FixupNOTA_FISCAL1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NOTA_FISCAL item in e.NewItems)
                {
                    item.IND_ECONOMICO1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NOTA_FISCAL1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NOTA_FISCAL item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO1, this))
                    {
                        item.IND_ECONOMICO1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NOTA_FISCAL1", item);
                    }
                }
            }
        }
    
        private void FixupNOTA_FISCAL2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NOTA_FISCAL item in e.NewItems)
                {
                    item.IND_ECONOMICO2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NOTA_FISCAL2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NOTA_FISCAL item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO2, this))
                    {
                        item.IND_ECONOMICO2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NOTA_FISCAL2", item);
                    }
                }
            }
        }
    
        private void FixupNOTA_FISCAL3(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NOTA_FISCAL item in e.NewItems)
                {
                    item.IND_ECONOMICO3 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NOTA_FISCAL3", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NOTA_FISCAL item in e.OldItems)
                {
                    if (ReferenceEquals(item.IND_ECONOMICO3, this))
                    {
                        item.IND_ECONOMICO3 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NOTA_FISCAL3", item);
                    }
                }
            }
        }

        #endregion

    }
}
