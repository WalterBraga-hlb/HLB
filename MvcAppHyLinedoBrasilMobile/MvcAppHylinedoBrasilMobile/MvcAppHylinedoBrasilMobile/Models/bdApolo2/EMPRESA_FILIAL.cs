//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo2
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ATIVIDADE_GRUPO))]
    [KnownType(typeof(FUNCIONARIO))]
    [KnownType(typeof(EMPRESA_FILIAL))]
    [KnownType(typeof(CIDADE))]
    [KnownType(typeof(REQ_COMP))]
    [KnownType(typeof(PED_COMP))]
    public partial class EMPRESA_FILIAL: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string EmpNome
        {
            get { return _empNome; }
            set
            {
                if (_empNome != value)
                {
                    _empNome = value;
                    OnPropertyChanged("EmpNome");
                }
            }
        }
        private string _empNome;
    
        [DataMember]
        public string EmpNomeFant
        {
            get { return _empNomeFant; }
            set
            {
                if (_empNomeFant != value)
                {
                    _empNomeFant = value;
                    OnPropertyChanged("EmpNomeFant");
                }
            }
        }
        private string _empNomeFant;
    
        [DataMember]
        public string TipoLogradAbrev
        {
            get { return _tipoLogradAbrev; }
            set
            {
                if (_tipoLogradAbrev != value)
                {
                    _tipoLogradAbrev = value;
                    OnPropertyChanged("TipoLogradAbrev");
                }
            }
        }
        private string _tipoLogradAbrev;
    
        [DataMember]
        public string EmpEnder
        {
            get { return _empEnder; }
            set
            {
                if (_empEnder != value)
                {
                    _empEnder = value;
                    OnPropertyChanged("EmpEnder");
                }
            }
        }
        private string _empEnder;
    
        [DataMember]
        public string EmpEnderNo
        {
            get { return _empEnderNo; }
            set
            {
                if (_empEnderNo != value)
                {
                    _empEnderNo = value;
                    OnPropertyChanged("EmpEnderNo");
                }
            }
        }
        private string _empEnderNo;
    
        [DataMember]
        public string EmpEnderComp
        {
            get { return _empEnderComp; }
            set
            {
                if (_empEnderComp != value)
                {
                    _empEnderComp = value;
                    OnPropertyChanged("EmpEnderComp");
                }
            }
        }
        private string _empEnderComp;
    
        [DataMember]
        public string EmpBair
        {
            get { return _empBair; }
            set
            {
                if (_empBair != value)
                {
                    _empBair = value;
                    OnPropertyChanged("EmpBair");
                }
            }
        }
        private string _empBair;
    
        [DataMember]
        public string CidCod
        {
            get { return _cidCod; }
            set
            {
                if (_cidCod != value)
                {
                    ChangeTracker.RecordOriginalValue("CidCod", _cidCod);
                    if (!IsDeserializing)
                    {
                        if (CIDADE != null && CIDADE.CidCod != value)
                        {
                            CIDADE = null;
                        }
                    }
                    _cidCod = value;
                    OnPropertyChanged("CidCod");
                }
            }
        }
        private string _cidCod;
    
        [DataMember]
        public string EmpCep
        {
            get { return _empCep; }
            set
            {
                if (_empCep != value)
                {
                    _empCep = value;
                    OnPropertyChanged("EmpCep");
                }
            }
        }
        private string _empCep;
    
        [DataMember]
        public string EmpCpfCgc
        {
            get { return _empCpfCgc; }
            set
            {
                if (_empCpfCgc != value)
                {
                    _empCpfCgc = value;
                    OnPropertyChanged("EmpCpfCgc");
                }
            }
        }
        private string _empCpfCgc;
    
        [DataMember]
        public string EmpRgIe
        {
            get { return _empRgIe; }
            set
            {
                if (_empRgIe != value)
                {
                    _empRgIe = value;
                    OnPropertyChanged("EmpRgIe");
                }
            }
        }
        private string _empRgIe;
    
        [DataMember]
        public string EmpRgOrgExped
        {
            get { return _empRgOrgExped; }
            set
            {
                if (_empRgOrgExped != value)
                {
                    _empRgOrgExped = value;
                    OnPropertyChanged("EmpRgOrgExped");
                }
            }
        }
        private string _empRgOrgExped;
    
        [DataMember]
        public string EmpCxaPost
        {
            get { return _empCxaPost; }
            set
            {
                if (_empCxaPost != value)
                {
                    _empCxaPost = value;
                    OnPropertyChanged("EmpCxaPost");
                }
            }
        }
        private string _empCxaPost;
    
        [DataMember]
        public string EmpEMail
        {
            get { return _empEMail; }
            set
            {
                if (_empEMail != value)
                {
                    _empEMail = value;
                    OnPropertyChanged("EmpEMail");
                }
            }
        }
        private string _empEMail;
    
        [DataMember]
        public string EmpWWW
        {
            get { return _empWWW; }
            set
            {
                if (_empWWW != value)
                {
                    _empWWW = value;
                    OnPropertyChanged("EmpWWW");
                }
            }
        }
        private string _empWWW;
    
        [DataMember]
        public string EmpRegJuntaCom
        {
            get { return _empRegJuntaCom; }
            set
            {
                if (_empRegJuntaCom != value)
                {
                    _empRegJuntaCom = value;
                    OnPropertyChanged("EmpRegJuntaCom");
                }
            }
        }
        private string _empRegJuntaCom;
    
        [DataMember]
        public Nullable<System.DateTime> EmpDataRegJuntaCom
        {
            get { return _empDataRegJuntaCom; }
            set
            {
                if (_empDataRegJuntaCom != value)
                {
                    _empDataRegJuntaCom = value;
                    OnPropertyChanged("EmpDataRegJuntaCom");
                }
            }
        }
        private Nullable<System.DateTime> _empDataRegJuntaCom;
    
        [DataMember]
        public string EmpInscMunic
        {
            get { return _empInscMunic; }
            set
            {
                if (_empInscMunic != value)
                {
                    _empInscMunic = value;
                    OnPropertyChanged("EmpInscMunic");
                }
            }
        }
        private string _empInscMunic;
    
        [DataMember]
        public string AtivEconCodEstr
        {
            get { return _ativEconCodEstr; }
            set
            {
                if (_ativEconCodEstr != value)
                {
                    _ativEconCodEstr = value;
                    OnPropertyChanged("AtivEconCodEstr");
                }
            }
        }
        private string _ativEconCodEstr;
    
        [DataMember]
        public string EmpCodAtivEst
        {
            get { return _empCodAtivEst; }
            set
            {
                if (_empCodAtivEst != value)
                {
                    _empCodAtivEst = value;
                    OnPropertyChanged("EmpCodAtivEst");
                }
            }
        }
        private string _empCodAtivEst;
    
        [DataMember]
        public string EmpCodAtivFed
        {
            get { return _empCodAtivFed; }
            set
            {
                if (_empCodAtivFed != value)
                {
                    _empCodAtivFed = value;
                    OnPropertyChanged("EmpCodAtivFed");
                }
            }
        }
        private string _empCodAtivFed;
    
        [DataMember]
        public string EmpCodSci
        {
            get { return _empCodSci; }
            set
            {
                if (_empCodSci != value)
                {
                    _empCodSci = value;
                    OnPropertyChanged("EmpCodSci");
                }
            }
        }
        private string _empCodSci;
    
        [DataMember]
        public string EmpAvisoSac
        {
            get { return _empAvisoSac; }
            set
            {
                if (_empAvisoSac != value)
                {
                    _empAvisoSac = value;
                    OnPropertyChanged("EmpAvisoSac");
                }
            }
        }
        private string _empAvisoSac;
    
        [DataMember]
        public string EmpObs
        {
            get { return _empObs; }
            set
            {
                if (_empObs != value)
                {
                    _empObs = value;
                    OnPropertyChanged("EmpObs");
                }
            }
        }
        private string _empObs;
    
        [DataMember]
        public string EmpFone1DDD
        {
            get { return _empFone1DDD; }
            set
            {
                if (_empFone1DDD != value)
                {
                    _empFone1DDD = value;
                    OnPropertyChanged("EmpFone1DDD");
                }
            }
        }
        private string _empFone1DDD;
    
        [DataMember]
        public string EmpFone1
        {
            get { return _empFone1; }
            set
            {
                if (_empFone1 != value)
                {
                    _empFone1 = value;
                    OnPropertyChanged("EmpFone1");
                }
            }
        }
        private string _empFone1;
    
        [DataMember]
        public string EmpFone1Ramal
        {
            get { return _empFone1Ramal; }
            set
            {
                if (_empFone1Ramal != value)
                {
                    _empFone1Ramal = value;
                    OnPropertyChanged("EmpFone1Ramal");
                }
            }
        }
        private string _empFone1Ramal;
    
        [DataMember]
        public string EmpFone2DDD
        {
            get { return _empFone2DDD; }
            set
            {
                if (_empFone2DDD != value)
                {
                    _empFone2DDD = value;
                    OnPropertyChanged("EmpFone2DDD");
                }
            }
        }
        private string _empFone2DDD;
    
        [DataMember]
        public string EmpFone2
        {
            get { return _empFone2; }
            set
            {
                if (_empFone2 != value)
                {
                    _empFone2 = value;
                    OnPropertyChanged("EmpFone2");
                }
            }
        }
        private string _empFone2;
    
        [DataMember]
        public string EmpFone2Ramal
        {
            get { return _empFone2Ramal; }
            set
            {
                if (_empFone2Ramal != value)
                {
                    _empFone2Ramal = value;
                    OnPropertyChanged("EmpFone2Ramal");
                }
            }
        }
        private string _empFone2Ramal;
    
        [DataMember]
        public string EmpFonePrinc
        {
            get { return _empFonePrinc; }
            set
            {
                if (_empFonePrinc != value)
                {
                    _empFonePrinc = value;
                    OnPropertyChanged("EmpFonePrinc");
                }
            }
        }
        private string _empFonePrinc;
    
        [DataMember]
        public string EmpFoneFaxDDD
        {
            get { return _empFoneFaxDDD; }
            set
            {
                if (_empFoneFaxDDD != value)
                {
                    _empFoneFaxDDD = value;
                    OnPropertyChanged("EmpFoneFaxDDD");
                }
            }
        }
        private string _empFoneFaxDDD;
    
        [DataMember]
        public string EmpFoneFax
        {
            get { return _empFoneFax; }
            set
            {
                if (_empFoneFax != value)
                {
                    _empFoneFax = value;
                    OnPropertyChanged("EmpFoneFax");
                }
            }
        }
        private string _empFoneFax;
    
        [DataMember]
        public string EmpFoneFaxRamal
        {
            get { return _empFoneFaxRamal; }
            set
            {
                if (_empFoneFaxRamal != value)
                {
                    _empFoneFaxRamal = value;
                    OnPropertyChanged("EmpFoneFaxRamal");
                }
            }
        }
        private string _empFoneFaxRamal;
    
        [DataMember]
        public string EmpFoneCelDDD
        {
            get { return _empFoneCelDDD; }
            set
            {
                if (_empFoneCelDDD != value)
                {
                    _empFoneCelDDD = value;
                    OnPropertyChanged("EmpFoneCelDDD");
                }
            }
        }
        private string _empFoneCelDDD;
    
        [DataMember]
        public string EmpFoneCel
        {
            get { return _empFoneCel; }
            set
            {
                if (_empFoneCel != value)
                {
                    _empFoneCel = value;
                    OnPropertyChanged("EmpFoneCel");
                }
            }
        }
        private string _empFoneCel;
    
        [DataMember]
        public Nullable<System.DateTime> EmpDataFund
        {
            get { return _empDataFund; }
            set
            {
                if (_empDataFund != value)
                {
                    _empDataFund = value;
                    OnPropertyChanged("EmpDataFund");
                }
            }
        }
        private Nullable<System.DateTime> _empDataFund;
    
        [DataMember]
        public string EmpContato
        {
            get { return _empContato; }
            set
            {
                if (_empContato != value)
                {
                    _empContato = value;
                    OnPropertyChanged("EmpContato");
                }
            }
        }
        private string _empContato;
    
        [DataMember]
        public string CargoCodEstr
        {
            get { return _cargoCodEstr; }
            set
            {
                if (_cargoCodEstr != value)
                {
                    _cargoCodEstr = value;
                    OnPropertyChanged("CargoCodEstr");
                }
            }
        }
        private string _cargoCodEstr;
    
        [DataMember]
        public string EmpGrauDecisContato
        {
            get { return _empGrauDecisContato; }
            set
            {
                if (_empGrauDecisContato != value)
                {
                    _empGrauDecisContato = value;
                    OnPropertyChanged("EmpGrauDecisContato");
                }
            }
        }
        private string _empGrauDecisContato;
    
        [DataMember]
        public string EmpCodNiv
        {
            get { return _empCodNiv; }
            set
            {
                if (_empCodNiv != value)
                {
                    _empCodNiv = value;
                    OnPropertyChanged("EmpCodNiv");
                }
            }
        }
        private string _empCodNiv;
    
        [DataMember]
        public string EmpGrupo
        {
            get { return _empGrupo; }
            set
            {
                if (_empGrupo != value)
                {
                    _empGrupo = value;
                    OnPropertyChanged("EmpGrupo");
                }
            }
        }
        private string _empGrupo;
    
        [DataMember]
        public string EmpNat
        {
            get { return _empNat; }
            set
            {
                if (_empNat != value)
                {
                    _empNat = value;
                    OnPropertyChanged("EmpNat");
                }
            }
        }
        private string _empNat;
    
        [DataMember]
        public string EmpTipoFJ
        {
            get { return _empTipoFJ; }
            set
            {
                if (_empTipoFJ != value)
                {
                    _empTipoFJ = value;
                    OnPropertyChanged("EmpTipoFJ");
                }
            }
        }
        private string _empTipoFJ;
    
        [DataMember]
        public string EmpAgrop
        {
            get { return _empAgrop; }
            set
            {
                if (_empAgrop != value)
                {
                    _empAgrop = value;
                    OnPropertyChanged("EmpAgrop");
                }
            }
        }
        private string _empAgrop;
    
        [DataMember]
        public string EmpAgropInsc
        {
            get { return _empAgropInsc; }
            set
            {
                if (_empAgropInsc != value)
                {
                    _empAgropInsc = value;
                    OnPropertyChanged("EmpAgropInsc");
                }
            }
        }
        private string _empAgropInsc;
    
        [DataMember]
        public string EmpPlanoCta
        {
            get { return _empPlanoCta; }
            set
            {
                if (_empPlanoCta != value)
                {
                    ChangeTracker.RecordOriginalValue("EmpPlanoCta", _empPlanoCta);
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL2 != null && EMPRESA_FILIAL2.EmpCod != value)
                        {
                            EMPRESA_FILIAL2 = null;
                        }
                    }
                    _empPlanoCta = value;
                    OnPropertyChanged("EmpPlanoCta");
                }
            }
        }
        private string _empPlanoCta;
    
        [DataMember]
        public string EmpMeEppOptSimples
        {
            get { return _empMeEppOptSimples; }
            set
            {
                if (_empMeEppOptSimples != value)
                {
                    _empMeEppOptSimples = value;
                    OnPropertyChanged("EmpMeEppOptSimples");
                }
            }
        }
        private string _empMeEppOptSimples;
    
        [DataMember]
        public string EmpMeEpp
        {
            get { return _empMeEpp; }
            set
            {
                if (_empMeEpp != value)
                {
                    _empMeEpp = value;
                    OnPropertyChanged("EmpMeEpp");
                }
            }
        }
        private string _empMeEpp;
    
        [DataMember]
        public string EmpEppAB
        {
            get { return _empEppAB; }
            set
            {
                if (_empEppAB != value)
                {
                    _empEppAB = value;
                    OnPropertyChanged("EmpEppAB");
                }
            }
        }
        private string _empEppAB;
    
        [DataMember]
        public Nullable<decimal> EmpEppPercIcms
        {
            get { return _empEppPercIcms; }
            set
            {
                if (_empEppPercIcms != value)
                {
                    _empEppPercIcms = value;
                    OnPropertyChanged("EmpEppPercIcms");
                }
            }
        }
        private Nullable<decimal> _empEppPercIcms;
    
        [DataMember]
        public string EmpCodOperFoneNaUf
        {
            get { return _empCodOperFoneNaUf; }
            set
            {
                if (_empCodOperFoneNaUf != value)
                {
                    _empCodOperFoneNaUf = value;
                    OnPropertyChanged("EmpCodOperFoneNaUf");
                }
            }
        }
        private string _empCodOperFoneNaUf;
    
        [DataMember]
        public string EmpCodOperFoneForaUf
        {
            get { return _empCodOperFoneForaUf; }
            set
            {
                if (_empCodOperFoneForaUf != value)
                {
                    _empCodOperFoneForaUf = value;
                    OnPropertyChanged("EmpCodOperFoneForaUf");
                }
            }
        }
        private string _empCodOperFoneForaUf;
    
        [DataMember]
        public string RegCodEstr
        {
            get { return _regCodEstr; }
            set
            {
                if (_regCodEstr != value)
                {
                    _regCodEstr = value;
                    OnPropertyChanged("RegCodEstr");
                }
            }
        }
        private string _regCodEstr;
    
        [DataMember]
        public string EmpRede
        {
            get { return _empRede; }
            set
            {
                if (_empRede != value)
                {
                    _empRede = value;
                    OnPropertyChanged("EmpRede");
                }
            }
        }
        private string _empRede;
    
        [DataMember]
        public string EmpInscIata
        {
            get { return _empInscIata; }
            set
            {
                if (_empInscIata != value)
                {
                    _empInscIata = value;
                    OnPropertyChanged("EmpInscIata");
                }
            }
        }
        private string _empInscIata;
    
        [DataMember]
        public string EmpInscEmbratur
        {
            get { return _empInscEmbratur; }
            set
            {
                if (_empInscEmbratur != value)
                {
                    _empInscEmbratur = value;
                    OnPropertyChanged("EmpInscEmbratur");
                }
            }
        }
        private string _empInscEmbratur;
    
        [DataMember]
        public string EmpAtiva
        {
            get { return _empAtiva; }
            set
            {
                if (_empAtiva != value)
                {
                    _empAtiva = value;
                    OnPropertyChanged("EmpAtiva");
                }
            }
        }
        private string _empAtiva;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string EmpSitPrestServRefIss
        {
            get { return _empSitPrestServRefIss; }
            set
            {
                if (_empSitPrestServRefIss != value)
                {
                    _empSitPrestServRefIss = value;
                    OnPropertyChanged("EmpSitPrestServRefIss");
                }
            }
        }
        private string _empSitPrestServRefIss;
    
        [DataMember]
        public Nullable<int> EmpMxDominio
        {
            get { return _empMxDominio; }
            set
            {
                if (_empMxDominio != value)
                {
                    _empMxDominio = value;
                    OnPropertyChanged("EmpMxDominio");
                }
            }
        }
        private Nullable<int> _empMxDominio;
    
        [DataMember]
        public string EmpMxEsIdEstrutura
        {
            get { return _empMxEsIdEstrutura; }
            set
            {
                if (_empMxEsIdEstrutura != value)
                {
                    _empMxEsIdEstrutura = value;
                    OnPropertyChanged("EmpMxEsIdEstrutura");
                }
            }
        }
        private string _empMxEsIdEstrutura;
    
        [DataMember]
        public string EmpNaoRetCofinsAmparPor
        {
            get { return _empNaoRetCofinsAmparPor; }
            set
            {
                if (_empNaoRetCofinsAmparPor != value)
                {
                    _empNaoRetCofinsAmparPor = value;
                    OnPropertyChanged("EmpNaoRetCofinsAmparPor");
                }
            }
        }
        private string _empNaoRetCofinsAmparPor;
    
        [DataMember]
        public string EmpNaoRetCsllAmparPor
        {
            get { return _empNaoRetCsllAmparPor; }
            set
            {
                if (_empNaoRetCsllAmparPor != value)
                {
                    _empNaoRetCsllAmparPor = value;
                    OnPropertyChanged("EmpNaoRetCsllAmparPor");
                }
            }
        }
        private string _empNaoRetCsllAmparPor;
    
        [DataMember]
        public string EmpNaoRetPisAmparPor
        {
            get { return _empNaoRetPisAmparPor; }
            set
            {
                if (_empNaoRetPisAmparPor != value)
                {
                    _empNaoRetPisAmparPor = value;
                    OnPropertyChanged("EmpNaoRetPisAmparPor");
                }
            }
        }
        private string _empNaoRetPisAmparPor;
    
        [DataMember]
        public string USERRelatorio
        {
            get { return _uSERRelatorio; }
            set
            {
                if (_uSERRelatorio != value)
                {
                    _uSERRelatorio = value;
                    OnPropertyChanged("USERRelatorio");
                }
            }
        }
        private string _uSERRelatorio;
    
        [DataMember]
        public byte[] EmpLogotipo
        {
            get { return _empLogotipo; }
            set
            {
                if (_empLogotipo != value)
                {
                    _empLogotipo = value;
                    OnPropertyChanged("EmpLogotipo");
                }
            }
        }
        private byte[] _empLogotipo;
    
        [DataMember]
        public string NatJurCod
        {
            get { return _natJurCod; }
            set
            {
                if (_natJurCod != value)
                {
                    _natJurCod = value;
                    OnPropertyChanged("NatJurCod");
                }
            }
        }
        private string _natJurCod;
    
        [DataMember]
        public string TabRecSimpEstCod
        {
            get { return _tabRecSimpEstCod; }
            set
            {
                if (_tabRecSimpEstCod != value)
                {
                    _tabRecSimpEstCod = value;
                    OnPropertyChanged("TabRecSimpEstCod");
                }
            }
        }
        private string _tabRecSimpEstCod;
    
        [DataMember]
        public string EmpMeEppOptSimplesFed
        {
            get { return _empMeEppOptSimplesFed; }
            set
            {
                if (_empMeEppOptSimplesFed != value)
                {
                    _empMeEppOptSimplesFed = value;
                    OnPropertyChanged("EmpMeEppOptSimplesFed");
                }
            }
        }
        private string _empMeEppOptSimplesFed;
    
        [DataMember]
        public string TabRecSimpFedCod
        {
            get { return _tabRecSimpFedCod; }
            set
            {
                if (_tabRecSimpFedCod != value)
                {
                    _tabRecSimpFedCod = value;
                    OnPropertyChanged("TabRecSimpFedCod");
                }
            }
        }
        private string _tabRecSimpFedCod;
    
        [DataMember]
        public Nullable<short> EMPFUSOHORARIOLOJA
        {
            get { return _eMPFUSOHORARIOLOJA; }
            set
            {
                if (_eMPFUSOHORARIOLOJA != value)
                {
                    _eMPFUSOHORARIOLOJA = value;
                    OnPropertyChanged("EMPFUSOHORARIOLOJA");
                }
            }
        }
        private Nullable<short> _eMPFUSOHORARIOLOJA;
    
        [DataMember]
        public string EmpEquipIndust
        {
            get { return _empEquipIndust; }
            set
            {
                if (_empEquipIndust != value)
                {
                    _empEquipIndust = value;
                    OnPropertyChanged("EmpEquipIndust");
                }
            }
        }
        private string _empEquipIndust;
    
        [DataMember]
        public Nullable<decimal> EmpValLimApolice
        {
            get { return _empValLimApolice; }
            set
            {
                if (_empValLimApolice != value)
                {
                    _empValLimApolice = value;
                    OnPropertyChanged("EmpValLimApolice");
                }
            }
        }
        private Nullable<decimal> _empValLimApolice;
    
        [DataMember]
        public Nullable<System.DateTime> EmpDataOpcSimpFed
        {
            get { return _empDataOpcSimpFed; }
            set
            {
                if (_empDataOpcSimpFed != value)
                {
                    _empDataOpcSimpFed = value;
                    OnPropertyChanged("EmpDataOpcSimpFed");
                }
            }
        }
        private Nullable<System.DateTime> _empDataOpcSimpFed;
    
        [DataMember]
        public Nullable<System.DateTime> EmpDataOpcSimpEst
        {
            get { return _empDataOpcSimpEst; }
            set
            {
                if (_empDataOpcSimpEst != value)
                {
                    _empDataOpcSimpEst = value;
                    OnPropertyChanged("EmpDataOpcSimpEst");
                }
            }
        }
        private Nullable<System.DateTime> _empDataOpcSimpEst;
    
        [DataMember]
        public Nullable<decimal> EmpMeEppConvPercIssSimplesFed
        {
            get { return _empMeEppConvPercIssSimplesFed; }
            set
            {
                if (_empMeEppConvPercIssSimplesFed != value)
                {
                    _empMeEppConvPercIssSimplesFed = value;
                    OnPropertyChanged("EmpMeEppConvPercIssSimplesFed");
                }
            }
        }
        private Nullable<decimal> _empMeEppConvPercIssSimplesFed;
    
        [DataMember]
        public Nullable<decimal> EmpMeEppConvPercIcmsSimplesFed
        {
            get { return _empMeEppConvPercIcmsSimplesFed; }
            set
            {
                if (_empMeEppConvPercIcmsSimplesFed != value)
                {
                    _empMeEppConvPercIcmsSimplesFed = value;
                    OnPropertyChanged("EmpMeEppConvPercIcmsSimplesFed");
                }
            }
        }
        private Nullable<decimal> _empMeEppConvPercIcmsSimplesFed;
    
        [DataMember]
        public Nullable<decimal> EmpMeEppConvPercIssIcmsSimpFed
        {
            get { return _empMeEppConvPercIssIcmsSimpFed; }
            set
            {
                if (_empMeEppConvPercIssIcmsSimpFed != value)
                {
                    _empMeEppConvPercIssIcmsSimpFed = value;
                    OnPropertyChanged("EmpMeEppConvPercIssIcmsSimpFed");
                }
            }
        }
        private Nullable<decimal> _empMeEppConvPercIssIcmsSimpFed;
    
        [DataMember]
        public string EmpInscSuframa
        {
            get { return _empInscSuframa; }
            set
            {
                if (_empInscSuframa != value)
                {
                    _empInscSuframa = value;
                    OnPropertyChanged("EmpInscSuframa");
                }
            }
        }
        private string _empInscSuframa;
    
        [DataMember]
        public string EmpObra
        {
            get { return _empObra; }
            set
            {
                if (_empObra != value)
                {
                    _empObra = value;
                    OnPropertyChanged("EmpObra");
                }
            }
        }
        private string _empObra;
    
        [DataMember]
        public string EmpGeraInventFiscal
        {
            get { return _empGeraInventFiscal; }
            set
            {
                if (_empGeraInventFiscal != value)
                {
                    _empGeraInventFiscal = value;
                    OnPropertyChanged("EmpGeraInventFiscal");
                }
            }
        }
        private string _empGeraInventFiscal;
    
        [DataMember]
        public string EmpPossuiRegimeST
        {
            get { return _empPossuiRegimeST; }
            set
            {
                if (_empPossuiRegimeST != value)
                {
                    _empPossuiRegimeST = value;
                    OnPropertyChanged("EmpPossuiRegimeST");
                }
            }
        }
        private string _empPossuiRegimeST;
    
        [DataMember]
        public string RegEspecNum
        {
            get { return _regEspecNum; }
            set
            {
                if (_regEspecNum != value)
                {
                    _regEspecNum = value;
                    OnPropertyChanged("RegEspecNum");
                }
            }
        }
        private string _regEspecNum;
    
        [DataMember]
        public string EmpOptSimplesNac
        {
            get { return _empOptSimplesNac; }
            set
            {
                if (_empOptSimplesNac != value)
                {
                    _empOptSimplesNac = value;
                    OnPropertyChanged("EmpOptSimplesNac");
                }
            }
        }
        private string _empOptSimplesNac;
    
        [DataMember]
        public Nullable<System.DateTime> EmpDataAdesaoSimplesNac
        {
            get { return _empDataAdesaoSimplesNac; }
            set
            {
                if (_empDataAdesaoSimplesNac != value)
                {
                    _empDataAdesaoSimplesNac = value;
                    OnPropertyChanged("EmpDataAdesaoSimplesNac");
                }
            }
        }
        private Nullable<System.DateTime> _empDataAdesaoSimplesNac;
    
        [DataMember]
        public Nullable<System.DateTime> EmpDataEncerSimpFed
        {
            get { return _empDataEncerSimpFed; }
            set
            {
                if (_empDataEncerSimpFed != value)
                {
                    _empDataEncerSimpFed = value;
                    OnPropertyChanged("EmpDataEncerSimpFed");
                }
            }
        }
        private Nullable<System.DateTime> _empDataEncerSimpFed;
    
        [DataMember]
        public Nullable<System.DateTime> EmpDataEncerSimpEst
        {
            get { return _empDataEncerSimpEst; }
            set
            {
                if (_empDataEncerSimpEst != value)
                {
                    _empDataEncerSimpEst = value;
                    OnPropertyChanged("EmpDataEncerSimpEst");
                }
            }
        }
        private Nullable<System.DateTime> _empDataEncerSimpEst;
    
        [DataMember]
        public string EmpCodIdentRegEspecTribMun
        {
            get { return _empCodIdentRegEspecTribMun; }
            set
            {
                if (_empCodIdentRegEspecTribMun != value)
                {
                    _empCodIdentRegEspecTribMun = value;
                    OnPropertyChanged("EmpCodIdentRegEspecTribMun");
                }
            }
        }
        private string _empCodIdentRegEspecTribMun;
    
        [DataMember]
        public Nullable<System.DateTime> EmpUltDataMod
        {
            get { return _empUltDataMod; }
            set
            {
                if (_empUltDataMod != value)
                {
                    _empUltDataMod = value;
                    OnPropertyChanged("EmpUltDataMod");
                }
            }
        }
        private Nullable<System.DateTime> _empUltDataMod;
    
        [DataMember]
        public Nullable<int> TipoAssinCod
        {
            get { return _tipoAssinCod; }
            set
            {
                if (_tipoAssinCod != value)
                {
                    _tipoAssinCod = value;
                    OnPropertyChanged("TipoAssinCod");
                }
            }
        }
        private Nullable<int> _tipoAssinCod;
    
        [DataMember]
        public string EmpTpLigacao
        {
            get { return _empTpLigacao; }
            set
            {
                if (_empTpLigacao != value)
                {
                    _empTpLigacao = value;
                    OnPropertyChanged("EmpTpLigacao");
                }
            }
        }
        private string _empTpLigacao;
    
        [DataMember]
        public string GrupTensaoCod
        {
            get { return _grupTensaoCod; }
            set
            {
                if (_grupTensaoCod != value)
                {
                    _grupTensaoCod = value;
                    OnPropertyChanged("GrupTensaoCod");
                }
            }
        }
        private string _grupTensaoCod;
    
        [DataMember]
        public string EmpExcSubLimRecBruta
        {
            get { return _empExcSubLimRecBruta; }
            set
            {
                if (_empExcSubLimRecBruta != value)
                {
                    _empExcSubLimRecBruta = value;
                    OnPropertyChanged("EmpExcSubLimRecBruta");
                }
            }
        }
        private string _empExcSubLimRecBruta;
    
        [DataMember]
        public string EmpCalICMSVenEmpConsIsenIE
        {
            get { return _empCalICMSVenEmpConsIsenIE; }
            set
            {
                if (_empCalICMSVenEmpConsIsenIE != value)
                {
                    _empCalICMSVenEmpConsIsenIE = value;
                    OnPropertyChanged("EmpCalICMSVenEmpConsIsenIE");
                }
            }
        }
        private string _empCalICMSVenEmpConsIsenIE;
    
        [DataMember]
        public string USEREmailSAC
        {
            get { return _uSEREmailSAC; }
            set
            {
                if (_uSEREmailSAC != value)
                {
                    _uSEREmailSAC = value;
                    OnPropertyChanged("USEREmailSAC");
                }
            }
        }
        private string _uSEREmailSAC;
    
        [DataMember]
        public string USERFLIPCod
        {
            get { return _uSERFLIPCod; }
            set
            {
                if (_uSERFLIPCod != value)
                {
                    _uSERFLIPCod = value;
                    OnPropertyChanged("USERFLIPCod");
                }
            }
        }
        private string _uSERFLIPCod;
    
        [DataMember]
        public string USERTipoUnidadeFLIP
        {
            get { return _uSERTipoUnidadeFLIP; }
            set
            {
                if (_uSERTipoUnidadeFLIP != value)
                {
                    _uSERTipoUnidadeFLIP = value;
                    OnPropertyChanged("USERTipoUnidadeFLIP");
                }
            }
        }
        private string _uSERTipoUnidadeFLIP;
    
        [DataMember]
        public string USERRegistroMAPA
        {
            get { return _uSERRegistroMAPA; }
            set
            {
                if (_uSERRegistroMAPA != value)
                {
                    _uSERRegistroMAPA = value;
                    OnPropertyChanged("USERRegistroMAPA");
                }
            }
        }
        private string _uSERRegistroMAPA;
    
        [DataMember]
        public string USERUFRegistroMAPA
        {
            get { return _uSERUFRegistroMAPA; }
            set
            {
                if (_uSERUFRegistroMAPA != value)
                {
                    _uSERUFRegistroMAPA = value;
                    OnPropertyChanged("USERUFRegistroMAPA");
                }
            }
        }
        private string _uSERUFRegistroMAPA;
    
        [DataMember]
        public string USERNomeGranjaMAPA
        {
            get { return _uSERNomeGranjaMAPA; }
            set
            {
                if (_uSERNomeGranjaMAPA != value)
                {
                    _uSERNomeGranjaMAPA = value;
                    OnPropertyChanged("USERNomeGranjaMAPA");
                }
            }
        }
        private string _uSERNomeGranjaMAPA;
    
        [DataMember]
        public string USERCodigoCHIC
        {
            get { return _uSERCodigoCHIC; }
            set
            {
                if (_uSERCodigoCHIC != value)
                {
                    _uSERCodigoCHIC = value;
                    OnPropertyChanged("USERCodigoCHIC");
                }
            }
        }
        private string _uSERCodigoCHIC;
    
        [DataMember]
        public string USEREmpresaAtiva
        {
            get { return _uSEREmpresaAtiva; }
            set
            {
                if (_uSEREmpresaAtiva != value)
                {
                    _uSEREmpresaAtiva = value;
                    OnPropertyChanged("USEREmpresaAtiva");
                }
            }
        }
        private string _uSEREmpresaAtiva;
    
        [DataMember]
        public string EmpAssSAT
        {
            get { return _empAssSAT; }
            set
            {
                if (_empAssSAT != value)
                {
                    _empAssSAT = value;
                    OnPropertyChanged("EmpAssSAT");
                }
            }
        }
        private string _empAssSAT;
    
        [DataMember]
        public Nullable<System.DateTime> EmpDtUltAtualiz
        {
            get { return _empDtUltAtualiz; }
            set
            {
                if (_empDtUltAtualiz != value)
                {
                    _empDtUltAtualiz = value;
                    OnPropertyChanged("EmpDtUltAtualiz");
                }
            }
        }
        private Nullable<System.DateTime> _empDtUltAtualiz;
    
        [DataMember]
        public string EmpMicroEmpreendIndiv
        {
            get { return _empMicroEmpreendIndiv; }
            set
            {
                if (_empMicroEmpreendIndiv != value)
                {
                    _empMicroEmpreendIndiv = value;
                    OnPropertyChanged("EmpMicroEmpreendIndiv");
                }
            }
        }
        private string _empMicroEmpreendIndiv;
    
        [DataMember]
        public Nullable<int> IDClasContribIPI
        {
            get { return _iDClasContribIPI; }
            set
            {
                if (_iDClasContribIPI != value)
                {
                    _iDClasContribIPI = value;
                    OnPropertyChanged("IDClasContribIPI");
                }
            }
        }
        private Nullable<int> _iDClasContribIPI;
    
        [DataMember]
        public string USERDadosRecebMercad
        {
            get { return _uSERDadosRecebMercad; }
            set
            {
                if (_uSERDadosRecebMercad != value)
                {
                    _uSERDadosRecebMercad = value;
                    OnPropertyChanged("USERDadosRecebMercad");
                }
            }
        }
        private string _uSERDadosRecebMercad;
    
        [DataMember]
        public string USERNomeMarcaNF
        {
            get { return _uSERNomeMarcaNF; }
            set
            {
                if (_uSERNomeMarcaNF != value)
                {
                    _uSERNomeMarcaNF = value;
                    OnPropertyChanged("USERNomeMarcaNF");
                }
            }
        }
        private string _uSERNomeMarcaNF;
    
        [DataMember]
        public string USERClassUnidade
        {
            get { return _uSERClassUnidade; }
            set
            {
                if (_uSERClassUnidade != value)
                {
                    _uSERClassUnidade = value;
                    OnPropertyChanged("USERClassUnidade");
                }
            }
        }
        private string _uSERClassUnidade;
    
        [DataMember]
        public string EmpNFSeUsuario
        {
            get { return _empNFSeUsuario; }
            set
            {
                if (_empNFSeUsuario != value)
                {
                    _empNFSeUsuario = value;
                    OnPropertyChanged("EmpNFSeUsuario");
                }
            }
        }
        private string _empNFSeUsuario;
    
        [DataMember]
        public string EmpNFSeSenha
        {
            get { return _empNFSeSenha; }
            set
            {
                if (_empNFSeSenha != value)
                {
                    _empNFSeSenha = value;
                    OnPropertyChanged("EmpNFSeSenha");
                }
            }
        }
        private string _empNFSeSenha;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ATIVIDADE_GRUPO> ATIVIDADE_GRUPO
        {
            get
            {
                if (_aTIVIDADE_GRUPO == null)
                {
                    _aTIVIDADE_GRUPO = new TrackableCollection<ATIVIDADE_GRUPO>();
                    _aTIVIDADE_GRUPO.CollectionChanged += FixupATIVIDADE_GRUPO;
                }
                return _aTIVIDADE_GRUPO;
            }
            set
            {
                if (!ReferenceEquals(_aTIVIDADE_GRUPO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aTIVIDADE_GRUPO != null)
                    {
                        _aTIVIDADE_GRUPO.CollectionChanged -= FixupATIVIDADE_GRUPO;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ATIVIDADE_GRUPO item in _aTIVIDADE_GRUPO)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _aTIVIDADE_GRUPO = value;
                    if (_aTIVIDADE_GRUPO != null)
                    {
                        _aTIVIDADE_GRUPO.CollectionChanged += FixupATIVIDADE_GRUPO;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ATIVIDADE_GRUPO item in _aTIVIDADE_GRUPO)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ATIVIDADE_GRUPO");
                }
            }
        }
        private TrackableCollection<ATIVIDADE_GRUPO> _aTIVIDADE_GRUPO;
    
        [DataMember]
        public TrackableCollection<FUNCIONARIO> FUNCIONARIO
        {
            get
            {
                if (_fUNCIONARIO == null)
                {
                    _fUNCIONARIO = new TrackableCollection<FUNCIONARIO>();
                    _fUNCIONARIO.CollectionChanged += FixupFUNCIONARIO;
                }
                return _fUNCIONARIO;
            }
            set
            {
                if (!ReferenceEquals(_fUNCIONARIO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fUNCIONARIO != null)
                    {
                        _fUNCIONARIO.CollectionChanged -= FixupFUNCIONARIO;
                    }
                    _fUNCIONARIO = value;
                    if (_fUNCIONARIO != null)
                    {
                        _fUNCIONARIO.CollectionChanged += FixupFUNCIONARIO;
                    }
                    OnNavigationPropertyChanged("FUNCIONARIO");
                }
            }
        }
        private TrackableCollection<FUNCIONARIO> _fUNCIONARIO;
    
        [DataMember]
        public TrackableCollection<EMPRESA_FILIAL> EMPRESA_FILIAL1
        {
            get
            {
                if (_eMPRESA_FILIAL1 == null)
                {
                    _eMPRESA_FILIAL1 = new TrackableCollection<EMPRESA_FILIAL>();
                    _eMPRESA_FILIAL1.CollectionChanged += FixupEMPRESA_FILIAL1;
                }
                return _eMPRESA_FILIAL1;
            }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_eMPRESA_FILIAL1 != null)
                    {
                        _eMPRESA_FILIAL1.CollectionChanged -= FixupEMPRESA_FILIAL1;
                    }
                    _eMPRESA_FILIAL1 = value;
                    if (_eMPRESA_FILIAL1 != null)
                    {
                        _eMPRESA_FILIAL1.CollectionChanged += FixupEMPRESA_FILIAL1;
                    }
                    OnNavigationPropertyChanged("EMPRESA_FILIAL1");
                }
            }
        }
        private TrackableCollection<EMPRESA_FILIAL> _eMPRESA_FILIAL1;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL2
        {
            get { return _eMPRESA_FILIAL2; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL2, value))
                {
                    var previousValue = _eMPRESA_FILIAL2;
                    _eMPRESA_FILIAL2 = value;
                    FixupEMPRESA_FILIAL2(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL2");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL2;
    
        [DataMember]
        public CIDADE CIDADE
        {
            get { return _cIDADE; }
            set
            {
                if (!ReferenceEquals(_cIDADE, value))
                {
                    var previousValue = _cIDADE;
                    _cIDADE = value;
                    FixupCIDADE(previousValue);
                    OnNavigationPropertyChanged("CIDADE");
                }
            }
        }
        private CIDADE _cIDADE;
    
        [DataMember]
        public TrackableCollection<REQ_COMP> REQ_COMP
        {
            get
            {
                if (_rEQ_COMP == null)
                {
                    _rEQ_COMP = new TrackableCollection<REQ_COMP>();
                    _rEQ_COMP.CollectionChanged += FixupREQ_COMP;
                }
                return _rEQ_COMP;
            }
            set
            {
                if (!ReferenceEquals(_rEQ_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rEQ_COMP != null)
                    {
                        _rEQ_COMP.CollectionChanged -= FixupREQ_COMP;
                    }
                    _rEQ_COMP = value;
                    if (_rEQ_COMP != null)
                    {
                        _rEQ_COMP.CollectionChanged += FixupREQ_COMP;
                    }
                    OnNavigationPropertyChanged("REQ_COMP");
                }
            }
        }
        private TrackableCollection<REQ_COMP> _rEQ_COMP;
    
        [DataMember]
        public TrackableCollection<REQ_COMP> REQ_COMP1
        {
            get
            {
                if (_rEQ_COMP1 == null)
                {
                    _rEQ_COMP1 = new TrackableCollection<REQ_COMP>();
                    _rEQ_COMP1.CollectionChanged += FixupREQ_COMP1;
                }
                return _rEQ_COMP1;
            }
            set
            {
                if (!ReferenceEquals(_rEQ_COMP1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rEQ_COMP1 != null)
                    {
                        _rEQ_COMP1.CollectionChanged -= FixupREQ_COMP1;
                    }
                    _rEQ_COMP1 = value;
                    if (_rEQ_COMP1 != null)
                    {
                        _rEQ_COMP1.CollectionChanged += FixupREQ_COMP1;
                    }
                    OnNavigationPropertyChanged("REQ_COMP1");
                }
            }
        }
        private TrackableCollection<REQ_COMP> _rEQ_COMP1;
    
        [DataMember]
        public TrackableCollection<REQ_COMP> REQ_COMP2
        {
            get
            {
                if (_rEQ_COMP2 == null)
                {
                    _rEQ_COMP2 = new TrackableCollection<REQ_COMP>();
                    _rEQ_COMP2.CollectionChanged += FixupREQ_COMP2;
                }
                return _rEQ_COMP2;
            }
            set
            {
                if (!ReferenceEquals(_rEQ_COMP2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rEQ_COMP2 != null)
                    {
                        _rEQ_COMP2.CollectionChanged -= FixupREQ_COMP2;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (REQ_COMP item in _rEQ_COMP2)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rEQ_COMP2 = value;
                    if (_rEQ_COMP2 != null)
                    {
                        _rEQ_COMP2.CollectionChanged += FixupREQ_COMP2;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (REQ_COMP item in _rEQ_COMP2)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("REQ_COMP2");
                }
            }
        }
        private TrackableCollection<REQ_COMP> _rEQ_COMP2;
    
        [DataMember]
        public TrackableCollection<PED_COMP> PED_COMP
        {
            get
            {
                if (_pED_COMP == null)
                {
                    _pED_COMP = new TrackableCollection<PED_COMP>();
                    _pED_COMP.CollectionChanged += FixupPED_COMP;
                }
                return _pED_COMP;
            }
            set
            {
                if (!ReferenceEquals(_pED_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pED_COMP != null)
                    {
                        _pED_COMP.CollectionChanged -= FixupPED_COMP;
                    }
                    _pED_COMP = value;
                    if (_pED_COMP != null)
                    {
                        _pED_COMP.CollectionChanged += FixupPED_COMP;
                    }
                    OnNavigationPropertyChanged("PED_COMP");
                }
            }
        }
        private TrackableCollection<PED_COMP> _pED_COMP;
    
        [DataMember]
        public TrackableCollection<PED_COMP> PED_COMP1
        {
            get
            {
                if (_pED_COMP1 == null)
                {
                    _pED_COMP1 = new TrackableCollection<PED_COMP>();
                    _pED_COMP1.CollectionChanged += FixupPED_COMP1;
                }
                return _pED_COMP1;
            }
            set
            {
                if (!ReferenceEquals(_pED_COMP1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pED_COMP1 != null)
                    {
                        _pED_COMP1.CollectionChanged -= FixupPED_COMP1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (PED_COMP item in _pED_COMP1)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _pED_COMP1 = value;
                    if (_pED_COMP1 != null)
                    {
                        _pED_COMP1.CollectionChanged += FixupPED_COMP1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (PED_COMP item in _pED_COMP1)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PED_COMP1");
                }
            }
        }
        private TrackableCollection<PED_COMP> _pED_COMP1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ATIVIDADE_GRUPO.Clear();
            FUNCIONARIO.Clear();
            EMPRESA_FILIAL1.Clear();
            EMPRESA_FILIAL2 = null;
            CIDADE = null;
            REQ_COMP.Clear();
            REQ_COMP1.Clear();
            REQ_COMP2.Clear();
            PED_COMP.Clear();
            PED_COMP1.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupEMPRESA_FILIAL2(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.EMPRESA_FILIAL1.Contains(this))
            {
                previousValue.EMPRESA_FILIAL1.Remove(this);
            }
    
            if (EMPRESA_FILIAL2 != null)
            {
                if (!EMPRESA_FILIAL2.EMPRESA_FILIAL1.Contains(this))
                {
                    EMPRESA_FILIAL2.EMPRESA_FILIAL1.Add(this);
                }
    
                EmpPlanoCta = EMPRESA_FILIAL2.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL2")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL2"] == EMPRESA_FILIAL2))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL2", previousValue);
                }
                if (EMPRESA_FILIAL2 != null && !EMPRESA_FILIAL2.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL2.StartTracking();
                }
            }
        }
    
        private void FixupCIDADE(CIDADE previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.EMPRESA_FILIAL.Contains(this))
            {
                previousValue.EMPRESA_FILIAL.Remove(this);
            }
    
            if (CIDADE != null)
            {
                if (!CIDADE.EMPRESA_FILIAL.Contains(this))
                {
                    CIDADE.EMPRESA_FILIAL.Add(this);
                }
    
                CidCod = CIDADE.CidCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CIDADE")
                    && (ChangeTracker.OriginalValues["CIDADE"] == CIDADE))
                {
                    ChangeTracker.OriginalValues.Remove("CIDADE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CIDADE", previousValue);
                }
                if (CIDADE != null && !CIDADE.ChangeTracker.ChangeTrackingEnabled)
                {
                    CIDADE.StartTracking();
                }
            }
        }
    
        private void FixupATIVIDADE_GRUPO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ATIVIDADE_GRUPO item in e.NewItems)
                {
                    item.EMPRESA_FILIAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ATIVIDADE_GRUPO", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ATIVIDADE_GRUPO item in e.OldItems)
                {
                    if (ReferenceEquals(item.EMPRESA_FILIAL, this))
                    {
                        item.EMPRESA_FILIAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ATIVIDADE_GRUPO", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupFUNCIONARIO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FUNCIONARIO item in e.NewItems)
                {
                    item.EMPRESA_FILIAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FUNCIONARIO", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FUNCIONARIO item in e.OldItems)
                {
                    if (ReferenceEquals(item.EMPRESA_FILIAL, this))
                    {
                        item.EMPRESA_FILIAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FUNCIONARIO", item);
                    }
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (EMPRESA_FILIAL item in e.NewItems)
                {
                    item.EMPRESA_FILIAL2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("EMPRESA_FILIAL1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EMPRESA_FILIAL item in e.OldItems)
                {
                    if (ReferenceEquals(item.EMPRESA_FILIAL2, this))
                    {
                        item.EMPRESA_FILIAL2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("EMPRESA_FILIAL1", item);
                    }
                }
            }
        }
    
        private void FixupREQ_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (REQ_COMP item in e.NewItems)
                {
                    item.EMPRESA_FILIAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("REQ_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REQ_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.EMPRESA_FILIAL, this))
                    {
                        item.EMPRESA_FILIAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("REQ_COMP", item);
                    }
                }
            }
        }
    
        private void FixupREQ_COMP1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (REQ_COMP item in e.NewItems)
                {
                    item.EMPRESA_FILIAL1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("REQ_COMP1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REQ_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.EMPRESA_FILIAL1, this))
                    {
                        item.EMPRESA_FILIAL1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("REQ_COMP1", item);
                    }
                }
            }
        }
    
        private void FixupREQ_COMP2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (REQ_COMP item in e.NewItems)
                {
                    item.EMPRESA_FILIAL2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("REQ_COMP2", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REQ_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.EMPRESA_FILIAL2, this))
                    {
                        item.EMPRESA_FILIAL2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("REQ_COMP2", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPED_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PED_COMP item in e.NewItems)
                {
                    item.EMPRESA_FILIAL = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PED_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.EMPRESA_FILIAL, this))
                    {
                        item.EMPRESA_FILIAL = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PED_COMP", item);
                    }
                }
            }
        }
    
        private void FixupPED_COMP1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PED_COMP item in e.NewItems)
                {
                    item.EMPRESA_FILIAL1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PED_COMP1", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.EMPRESA_FILIAL1, this))
                    {
                        item.EMPRESA_FILIAL1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PED_COMP1", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
