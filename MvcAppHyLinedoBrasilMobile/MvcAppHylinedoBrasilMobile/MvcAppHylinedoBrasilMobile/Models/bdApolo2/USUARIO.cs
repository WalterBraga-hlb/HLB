//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo2
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CIDADE))]
    [KnownType(typeof(COND_PAG))]
    [KnownType(typeof(DOC_ENTIDADE))]
    [KnownType(typeof(FUNCIONARIO))]
    [KnownType(typeof(ITEM_REQ_COMP))]
    [KnownType(typeof(REQ_COMP))]
    [KnownType(typeof(USUARIO))]
    [KnownType(typeof(APROV_COMP))]
    [KnownType(typeof(ITEM_PED_COMP))]
    [KnownType(typeof(PED_COMP))]
    [KnownType(typeof(NOTA_FISCAL))]
    public partial class USUARIO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UsuCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;
    
        [DataMember]
        public string UsuNome
        {
            get { return _usuNome; }
            set
            {
                if (_usuNome != value)
                {
                    _usuNome = value;
                    OnPropertyChanged("UsuNome");
                }
            }
        }
        private string _usuNome;
    
        [DataMember]
        public string UsuDepto
        {
            get { return _usuDepto; }
            set
            {
                if (_usuDepto != value)
                {
                    _usuDepto = value;
                    OnPropertyChanged("UsuDepto");
                }
            }
        }
        private string _usuDepto;
    
        [DataMember]
        public string UsuEmail
        {
            get { return _usuEmail; }
            set
            {
                if (_usuEmail != value)
                {
                    _usuEmail = value;
                    OnPropertyChanged("UsuEmail");
                }
            }
        }
        private string _usuEmail;
    
        [DataMember]
        public string UsuRamal
        {
            get { return _usuRamal; }
            set
            {
                if (_usuRamal != value)
                {
                    _usuRamal = value;
                    OnPropertyChanged("UsuRamal");
                }
            }
        }
        private string _usuRamal;
    
        [DataMember]
        public string UsuAdmin
        {
            get { return _usuAdmin; }
            set
            {
                if (_usuAdmin != value)
                {
                    _usuAdmin = value;
                    OnPropertyChanged("UsuAdmin");
                }
            }
        }
        private string _usuAdmin;
    
        [DataMember]
        public string UsuSenha
        {
            get { return _usuSenha; }
            set
            {
                if (_usuSenha != value)
                {
                    _usuSenha = value;
                    OnPropertyChanged("UsuSenha");
                }
            }
        }
        private string _usuSenha;
    
        [DataMember]
        public string UsuNomeAcesInternet
        {
            get { return _usuNomeAcesInternet; }
            set
            {
                if (_usuNomeAcesInternet != value)
                {
                    _usuNomeAcesInternet = value;
                    OnPropertyChanged("UsuNomeAcesInternet");
                }
            }
        }
        private string _usuNomeAcesInternet;
    
        [DataMember]
        public string UsuSenhaInternet
        {
            get { return _usuSenhaInternet; }
            set
            {
                if (_usuSenhaInternet != value)
                {
                    _usuSenhaInternet = value;
                    OnPropertyChanged("UsuSenhaInternet");
                }
            }
        }
        private string _usuSenhaInternet;
    
        [DataMember]
        public string UsuServidorSMTP
        {
            get { return _usuServidorSMTP; }
            set
            {
                if (_usuServidorSMTP != value)
                {
                    _usuServidorSMTP = value;
                    OnPropertyChanged("UsuServidorSMTP");
                }
            }
        }
        private string _usuServidorSMTP;
    
        [DataMember]
        public string UsuServidorPOP3
        {
            get { return _usuServidorPOP3; }
            set
            {
                if (_usuServidorPOP3 != value)
                {
                    _usuServidorPOP3 = value;
                    OnPropertyChanged("UsuServidorPOP3");
                }
            }
        }
        private string _usuServidorPOP3;
    
        [DataMember]
        public string UsuStat
        {
            get { return _usuStat; }
            set
            {
                if (_usuStat != value)
                {
                    _usuStat = value;
                    OnPropertyChanged("UsuStat");
                }
            }
        }
        private string _usuStat;
    
        [DataMember]
        public Nullable<System.DateTime> UsuDataHoraInicAfast
        {
            get { return _usuDataHoraInicAfast; }
            set
            {
                if (_usuDataHoraInicAfast != value)
                {
                    _usuDataHoraInicAfast = value;
                    OnPropertyChanged("UsuDataHoraInicAfast");
                }
            }
        }
        private Nullable<System.DateTime> _usuDataHoraInicAfast;
    
        [DataMember]
        public Nullable<System.DateTime> UsuDataHoraFimAfast
        {
            get { return _usuDataHoraFimAfast; }
            set
            {
                if (_usuDataHoraFimAfast != value)
                {
                    _usuDataHoraFimAfast = value;
                    OnPropertyChanged("UsuDataHoraFimAfast");
                }
            }
        }
        private Nullable<System.DateTime> _usuDataHoraFimAfast;
    
        [DataMember]
        public short UsuNum
        {
            get { return _usuNum; }
            set
            {
                if (_usuNum != value)
                {
                    _usuNum = value;
                    OnPropertyChanged("UsuNum");
                }
            }
        }
        private short _usuNum;
    
        [DataMember]
        public decimal UsuPercMaxDesc
        {
            get { return _usuPercMaxDesc; }
            set
            {
                if (_usuPercMaxDesc != value)
                {
                    _usuPercMaxDesc = value;
                    OnPropertyChanged("UsuPercMaxDesc");
                }
            }
        }
        private decimal _usuPercMaxDesc;
    
        [DataMember]
        public string UsuComisFixaVar
        {
            get { return _usuComisFixaVar; }
            set
            {
                if (_usuComisFixaVar != value)
                {
                    _usuComisFixaVar = value;
                    OnPropertyChanged("UsuComisFixaVar");
                }
            }
        }
        private string _usuComisFixaVar;
    
        [DataMember]
        public decimal UsuLibMarkupMin
        {
            get { return _usuLibMarkupMin; }
            set
            {
                if (_usuLibMarkupMin != value)
                {
                    _usuLibMarkupMin = value;
                    OnPropertyChanged("UsuLibMarkupMin");
                }
            }
        }
        private decimal _usuLibMarkupMin;
    
        [DataMember]
        public decimal UsuLibMarkupMax
        {
            get { return _usuLibMarkupMax; }
            set
            {
                if (_usuLibMarkupMax != value)
                {
                    _usuLibMarkupMax = value;
                    OnPropertyChanged("UsuLibMarkupMax");
                }
            }
        }
        private decimal _usuLibMarkupMax;
    
        [DataMember]
        public string UsuMix
        {
            get { return _usuMix; }
            set
            {
                if (_usuMix != value)
                {
                    _usuMix = value;
                    OnPropertyChanged("UsuMix");
                }
            }
        }
        private string _usuMix;
    
        [DataMember]
        public decimal UsuValLimLibCredEnt
        {
            get { return _usuValLimLibCredEnt; }
            set
            {
                if (_usuValLimLibCredEnt != value)
                {
                    _usuValLimLibCredEnt = value;
                    OnPropertyChanged("UsuValLimLibCredEnt");
                }
            }
        }
        private decimal _usuValLimLibCredEnt;
    
        [DataMember]
        public string UsuCodAtribAdminWeb
        {
            get { return _usuCodAtribAdminWeb; }
            set
            {
                if (_usuCodAtribAdminWeb != value)
                {
                    ChangeTracker.RecordOriginalValue("UsuCodAtribAdminWeb", _usuCodAtribAdminWeb);
                    if (!IsDeserializing)
                    {
                        if (USUARIO2 != null && USUARIO2.UsuCod != value)
                        {
                            USUARIO2 = null;
                        }
                    }
                    _usuCodAtribAdminWeb = value;
                    OnPropertyChanged("UsuCodAtribAdminWeb");
                }
            }
        }
        private string _usuCodAtribAdminWeb;
    
        [DataMember]
        public string UsuUtilCorTempoEtapaOS
        {
            get { return _usuUtilCorTempoEtapaOS; }
            set
            {
                if (_usuUtilCorTempoEtapaOS != value)
                {
                    _usuUtilCorTempoEtapaOS = value;
                    OnPropertyChanged("UsuUtilCorTempoEtapaOS");
                }
            }
        }
        private string _usuUtilCorTempoEtapaOS;
    
        [DataMember]
        public Nullable<System.DateTime> UsuDataSenha
        {
            get { return _usuDataSenha; }
            set
            {
                if (_usuDataSenha != value)
                {
                    _usuDataSenha = value;
                    OnPropertyChanged("UsuDataSenha");
                }
            }
        }
        private Nullable<System.DateTime> _usuDataSenha;
    
        [DataMember]
        public decimal UsuPercLimAjusteContrato
        {
            get { return _usuPercLimAjusteContrato; }
            set
            {
                if (_usuPercLimAjusteContrato != value)
                {
                    _usuPercLimAjusteContrato = value;
                    OnPropertyChanged("UsuPercLimAjusteContrato");
                }
            }
        }
        private decimal _usuPercLimAjusteContrato;
    
        [DataMember]
        public Nullable<System.DateTime> UsuUltDataMod
        {
            get { return _usuUltDataMod; }
            set
            {
                if (_usuUltDataMod != value)
                {
                    _usuUltDataMod = value;
                    OnPropertyChanged("UsuUltDataMod");
                }
            }
        }
        private Nullable<System.DateTime> _usuUltDataMod;
    
        [DataMember]
        public string USUCHECACONFBDE
        {
            get { return _uSUCHECACONFBDE; }
            set
            {
                if (_uSUCHECACONFBDE != value)
                {
                    _uSUCHECACONFBDE = value;
                    OnPropertyChanged("USUCHECACONFBDE");
                }
            }
        }
        private string _uSUCHECACONFBDE;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string UsuTipoLoginAd
        {
            get { return _usuTipoLoginAd; }
            set
            {
                if (_usuTipoLoginAd != value)
                {
                    _usuTipoLoginAd = value;
                    OnPropertyChanged("UsuTipoLoginAd");
                }
            }
        }
        private string _usuTipoLoginAd;
    
        [DataMember]
        public string UsuLoginAd
        {
            get { return _usuLoginAd; }
            set
            {
                if (_usuLoginAd != value)
                {
                    _usuLoginAd = value;
                    OnPropertyChanged("UsuLoginAd");
                }
            }
        }
        private string _usuLoginAd;
    
        [DataMember]
        public string UsuVisualFav
        {
            get { return _usuVisualFav; }
            set
            {
                if (_usuVisualFav != value)
                {
                    _usuVisualFav = value;
                    OnPropertyChanged("UsuVisualFav");
                }
            }
        }
        private string _usuVisualFav;
    
        [DataMember]
        public Nullable<int> IDMenuSistema
        {
            get { return _iDMenuSistema; }
            set
            {
                if (_iDMenuSistema != value)
                {
                    _iDMenuSistema = value;
                    OnPropertyChanged("IDMenuSistema");
                }
            }
        }
        private Nullable<int> _iDMenuSistema;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CIDADE> CIDADE
        {
            get
            {
                if (_cIDADE == null)
                {
                    _cIDADE = new TrackableCollection<CIDADE>();
                    _cIDADE.CollectionChanged += FixupCIDADE;
                }
                return _cIDADE;
            }
            set
            {
                if (!ReferenceEquals(_cIDADE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cIDADE != null)
                    {
                        _cIDADE.CollectionChanged -= FixupCIDADE;
                    }
                    _cIDADE = value;
                    if (_cIDADE != null)
                    {
                        _cIDADE.CollectionChanged += FixupCIDADE;
                    }
                    OnNavigationPropertyChanged("CIDADE");
                }
            }
        }
        private TrackableCollection<CIDADE> _cIDADE;
    
        [DataMember]
        public TrackableCollection<COND_PAG> COND_PAG
        {
            get
            {
                if (_cOND_PAG == null)
                {
                    _cOND_PAG = new TrackableCollection<COND_PAG>();
                    _cOND_PAG.CollectionChanged += FixupCOND_PAG;
                }
                return _cOND_PAG;
            }
            set
            {
                if (!ReferenceEquals(_cOND_PAG, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cOND_PAG != null)
                    {
                        _cOND_PAG.CollectionChanged -= FixupCOND_PAG;
                    }
                    _cOND_PAG = value;
                    if (_cOND_PAG != null)
                    {
                        _cOND_PAG.CollectionChanged += FixupCOND_PAG;
                    }
                    OnNavigationPropertyChanged("COND_PAG");
                }
            }
        }
        private TrackableCollection<COND_PAG> _cOND_PAG;
    
        [DataMember]
        public TrackableCollection<DOC_ENTIDADE> DOC_ENTIDADE
        {
            get
            {
                if (_dOC_ENTIDADE == null)
                {
                    _dOC_ENTIDADE = new TrackableCollection<DOC_ENTIDADE>();
                    _dOC_ENTIDADE.CollectionChanged += FixupDOC_ENTIDADE;
                }
                return _dOC_ENTIDADE;
            }
            set
            {
                if (!ReferenceEquals(_dOC_ENTIDADE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dOC_ENTIDADE != null)
                    {
                        _dOC_ENTIDADE.CollectionChanged -= FixupDOC_ENTIDADE;
                    }
                    _dOC_ENTIDADE = value;
                    if (_dOC_ENTIDADE != null)
                    {
                        _dOC_ENTIDADE.CollectionChanged += FixupDOC_ENTIDADE;
                    }
                    OnNavigationPropertyChanged("DOC_ENTIDADE");
                }
            }
        }
        private TrackableCollection<DOC_ENTIDADE> _dOC_ENTIDADE;
    
        [DataMember]
        public TrackableCollection<FUNCIONARIO> FUNCIONARIO
        {
            get
            {
                if (_fUNCIONARIO == null)
                {
                    _fUNCIONARIO = new TrackableCollection<FUNCIONARIO>();
                    _fUNCIONARIO.CollectionChanged += FixupFUNCIONARIO;
                }
                return _fUNCIONARIO;
            }
            set
            {
                if (!ReferenceEquals(_fUNCIONARIO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fUNCIONARIO != null)
                    {
                        _fUNCIONARIO.CollectionChanged -= FixupFUNCIONARIO;
                    }
                    _fUNCIONARIO = value;
                    if (_fUNCIONARIO != null)
                    {
                        _fUNCIONARIO.CollectionChanged += FixupFUNCIONARIO;
                    }
                    OnNavigationPropertyChanged("FUNCIONARIO");
                }
            }
        }
        private TrackableCollection<FUNCIONARIO> _fUNCIONARIO;
    
        [DataMember]
        public TrackableCollection<ITEM_REQ_COMP> ITEM_REQ_COMP
        {
            get
            {
                if (_iTEM_REQ_COMP == null)
                {
                    _iTEM_REQ_COMP = new TrackableCollection<ITEM_REQ_COMP>();
                    _iTEM_REQ_COMP.CollectionChanged += FixupITEM_REQ_COMP;
                }
                return _iTEM_REQ_COMP;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_REQ_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_REQ_COMP != null)
                    {
                        _iTEM_REQ_COMP.CollectionChanged -= FixupITEM_REQ_COMP;
                    }
                    _iTEM_REQ_COMP = value;
                    if (_iTEM_REQ_COMP != null)
                    {
                        _iTEM_REQ_COMP.CollectionChanged += FixupITEM_REQ_COMP;
                    }
                    OnNavigationPropertyChanged("ITEM_REQ_COMP");
                }
            }
        }
        private TrackableCollection<ITEM_REQ_COMP> _iTEM_REQ_COMP;
    
        [DataMember]
        public TrackableCollection<REQ_COMP> REQ_COMP
        {
            get
            {
                if (_rEQ_COMP == null)
                {
                    _rEQ_COMP = new TrackableCollection<REQ_COMP>();
                    _rEQ_COMP.CollectionChanged += FixupREQ_COMP;
                }
                return _rEQ_COMP;
            }
            set
            {
                if (!ReferenceEquals(_rEQ_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rEQ_COMP != null)
                    {
                        _rEQ_COMP.CollectionChanged -= FixupREQ_COMP;
                    }
                    _rEQ_COMP = value;
                    if (_rEQ_COMP != null)
                    {
                        _rEQ_COMP.CollectionChanged += FixupREQ_COMP;
                    }
                    OnNavigationPropertyChanged("REQ_COMP");
                }
            }
        }
        private TrackableCollection<REQ_COMP> _rEQ_COMP;
    
        [DataMember]
        public TrackableCollection<USUARIO> USUARIO1
        {
            get
            {
                if (_uSUARIO1 == null)
                {
                    _uSUARIO1 = new TrackableCollection<USUARIO>();
                    _uSUARIO1.CollectionChanged += FixupUSUARIO1;
                }
                return _uSUARIO1;
            }
            set
            {
                if (!ReferenceEquals(_uSUARIO1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_uSUARIO1 != null)
                    {
                        _uSUARIO1.CollectionChanged -= FixupUSUARIO1;
                    }
                    _uSUARIO1 = value;
                    if (_uSUARIO1 != null)
                    {
                        _uSUARIO1.CollectionChanged += FixupUSUARIO1;
                    }
                    OnNavigationPropertyChanged("USUARIO1");
                }
            }
        }
        private TrackableCollection<USUARIO> _uSUARIO1;
    
        [DataMember]
        public USUARIO USUARIO2
        {
            get { return _uSUARIO2; }
            set
            {
                if (!ReferenceEquals(_uSUARIO2, value))
                {
                    var previousValue = _uSUARIO2;
                    _uSUARIO2 = value;
                    FixupUSUARIO2(previousValue);
                    OnNavigationPropertyChanged("USUARIO2");
                }
            }
        }
        private USUARIO _uSUARIO2;
    
        [DataMember]
        public TrackableCollection<APROV_COMP> APROV_COMP
        {
            get
            {
                if (_aPROV_COMP == null)
                {
                    _aPROV_COMP = new TrackableCollection<APROV_COMP>();
                    _aPROV_COMP.CollectionChanged += FixupAPROV_COMP;
                }
                return _aPROV_COMP;
            }
            set
            {
                if (!ReferenceEquals(_aPROV_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aPROV_COMP != null)
                    {
                        _aPROV_COMP.CollectionChanged -= FixupAPROV_COMP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (APROV_COMP item in _aPROV_COMP)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _aPROV_COMP = value;
                    if (_aPROV_COMP != null)
                    {
                        _aPROV_COMP.CollectionChanged += FixupAPROV_COMP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (APROV_COMP item in _aPROV_COMP)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("APROV_COMP");
                }
            }
        }
        private TrackableCollection<APROV_COMP> _aPROV_COMP;
    
        [DataMember]
        public TrackableCollection<ITEM_PED_COMP> ITEM_PED_COMP
        {
            get
            {
                if (_iTEM_PED_COMP == null)
                {
                    _iTEM_PED_COMP = new TrackableCollection<ITEM_PED_COMP>();
                    _iTEM_PED_COMP.CollectionChanged += FixupITEM_PED_COMP;
                }
                return _iTEM_PED_COMP;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_PED_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_PED_COMP != null)
                    {
                        _iTEM_PED_COMP.CollectionChanged -= FixupITEM_PED_COMP;
                    }
                    _iTEM_PED_COMP = value;
                    if (_iTEM_PED_COMP != null)
                    {
                        _iTEM_PED_COMP.CollectionChanged += FixupITEM_PED_COMP;
                    }
                    OnNavigationPropertyChanged("ITEM_PED_COMP");
                }
            }
        }
        private TrackableCollection<ITEM_PED_COMP> _iTEM_PED_COMP;
    
        [DataMember]
        public TrackableCollection<ITEM_PED_COMP> ITEM_PED_COMP1
        {
            get
            {
                if (_iTEM_PED_COMP1 == null)
                {
                    _iTEM_PED_COMP1 = new TrackableCollection<ITEM_PED_COMP>();
                    _iTEM_PED_COMP1.CollectionChanged += FixupITEM_PED_COMP1;
                }
                return _iTEM_PED_COMP1;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_PED_COMP1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_PED_COMP1 != null)
                    {
                        _iTEM_PED_COMP1.CollectionChanged -= FixupITEM_PED_COMP1;
                    }
                    _iTEM_PED_COMP1 = value;
                    if (_iTEM_PED_COMP1 != null)
                    {
                        _iTEM_PED_COMP1.CollectionChanged += FixupITEM_PED_COMP1;
                    }
                    OnNavigationPropertyChanged("ITEM_PED_COMP1");
                }
            }
        }
        private TrackableCollection<ITEM_PED_COMP> _iTEM_PED_COMP1;
    
        [DataMember]
        public TrackableCollection<ITEM_PED_COMP> ITEM_PED_COMP2
        {
            get
            {
                if (_iTEM_PED_COMP2 == null)
                {
                    _iTEM_PED_COMP2 = new TrackableCollection<ITEM_PED_COMP>();
                    _iTEM_PED_COMP2.CollectionChanged += FixupITEM_PED_COMP2;
                }
                return _iTEM_PED_COMP2;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_PED_COMP2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_PED_COMP2 != null)
                    {
                        _iTEM_PED_COMP2.CollectionChanged -= FixupITEM_PED_COMP2;
                    }
                    _iTEM_PED_COMP2 = value;
                    if (_iTEM_PED_COMP2 != null)
                    {
                        _iTEM_PED_COMP2.CollectionChanged += FixupITEM_PED_COMP2;
                    }
                    OnNavigationPropertyChanged("ITEM_PED_COMP2");
                }
            }
        }
        private TrackableCollection<ITEM_PED_COMP> _iTEM_PED_COMP2;
    
        [DataMember]
        public TrackableCollection<PED_COMP> PED_COMP
        {
            get
            {
                if (_pED_COMP == null)
                {
                    _pED_COMP = new TrackableCollection<PED_COMP>();
                    _pED_COMP.CollectionChanged += FixupPED_COMP;
                }
                return _pED_COMP;
            }
            set
            {
                if (!ReferenceEquals(_pED_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pED_COMP != null)
                    {
                        _pED_COMP.CollectionChanged -= FixupPED_COMP;
                    }
                    _pED_COMP = value;
                    if (_pED_COMP != null)
                    {
                        _pED_COMP.CollectionChanged += FixupPED_COMP;
                    }
                    OnNavigationPropertyChanged("PED_COMP");
                }
            }
        }
        private TrackableCollection<PED_COMP> _pED_COMP;
    
        [DataMember]
        public TrackableCollection<NOTA_FISCAL> NOTA_FISCAL
        {
            get
            {
                if (_nOTA_FISCAL == null)
                {
                    _nOTA_FISCAL = new TrackableCollection<NOTA_FISCAL>();
                    _nOTA_FISCAL.CollectionChanged += FixupNOTA_FISCAL;
                }
                return _nOTA_FISCAL;
            }
            set
            {
                if (!ReferenceEquals(_nOTA_FISCAL, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_nOTA_FISCAL != null)
                    {
                        _nOTA_FISCAL.CollectionChanged -= FixupNOTA_FISCAL;
                    }
                    _nOTA_FISCAL = value;
                    if (_nOTA_FISCAL != null)
                    {
                        _nOTA_FISCAL.CollectionChanged += FixupNOTA_FISCAL;
                    }
                    OnNavigationPropertyChanged("NOTA_FISCAL");
                }
            }
        }
        private TrackableCollection<NOTA_FISCAL> _nOTA_FISCAL;
    
        [DataMember]
        public TrackableCollection<NOTA_FISCAL> NOTA_FISCAL1
        {
            get
            {
                if (_nOTA_FISCAL1 == null)
                {
                    _nOTA_FISCAL1 = new TrackableCollection<NOTA_FISCAL>();
                    _nOTA_FISCAL1.CollectionChanged += FixupNOTA_FISCAL1;
                }
                return _nOTA_FISCAL1;
            }
            set
            {
                if (!ReferenceEquals(_nOTA_FISCAL1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_nOTA_FISCAL1 != null)
                    {
                        _nOTA_FISCAL1.CollectionChanged -= FixupNOTA_FISCAL1;
                    }
                    _nOTA_FISCAL1 = value;
                    if (_nOTA_FISCAL1 != null)
                    {
                        _nOTA_FISCAL1.CollectionChanged += FixupNOTA_FISCAL1;
                    }
                    OnNavigationPropertyChanged("NOTA_FISCAL1");
                }
            }
        }
        private TrackableCollection<NOTA_FISCAL> _nOTA_FISCAL1;
    
        [DataMember]
        public TrackableCollection<NOTA_FISCAL> NOTA_FISCAL2
        {
            get
            {
                if (_nOTA_FISCAL2 == null)
                {
                    _nOTA_FISCAL2 = new TrackableCollection<NOTA_FISCAL>();
                    _nOTA_FISCAL2.CollectionChanged += FixupNOTA_FISCAL2;
                }
                return _nOTA_FISCAL2;
            }
            set
            {
                if (!ReferenceEquals(_nOTA_FISCAL2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_nOTA_FISCAL2 != null)
                    {
                        _nOTA_FISCAL2.CollectionChanged -= FixupNOTA_FISCAL2;
                    }
                    _nOTA_FISCAL2 = value;
                    if (_nOTA_FISCAL2 != null)
                    {
                        _nOTA_FISCAL2.CollectionChanged += FixupNOTA_FISCAL2;
                    }
                    OnNavigationPropertyChanged("NOTA_FISCAL2");
                }
            }
        }
        private TrackableCollection<NOTA_FISCAL> _nOTA_FISCAL2;
    
        [DataMember]
        public TrackableCollection<PED_COMP> PED_COMP1
        {
            get
            {
                if (_pED_COMP1 == null)
                {
                    _pED_COMP1 = new TrackableCollection<PED_COMP>();
                    _pED_COMP1.CollectionChanged += FixupPED_COMP1;
                }
                return _pED_COMP1;
            }
            set
            {
                if (!ReferenceEquals(_pED_COMP1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pED_COMP1 != null)
                    {
                        _pED_COMP1.CollectionChanged -= FixupPED_COMP1;
                    }
                    _pED_COMP1 = value;
                    if (_pED_COMP1 != null)
                    {
                        _pED_COMP1.CollectionChanged += FixupPED_COMP1;
                    }
                    OnNavigationPropertyChanged("PED_COMP1");
                }
            }
        }
        private TrackableCollection<PED_COMP> _pED_COMP1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CIDADE.Clear();
            COND_PAG.Clear();
            DOC_ENTIDADE.Clear();
            FUNCIONARIO.Clear();
            ITEM_REQ_COMP.Clear();
            REQ_COMP.Clear();
            USUARIO1.Clear();
            USUARIO2 = null;
            APROV_COMP.Clear();
            ITEM_PED_COMP.Clear();
            ITEM_PED_COMP1.Clear();
            ITEM_PED_COMP2.Clear();
            PED_COMP.Clear();
            NOTA_FISCAL.Clear();
            NOTA_FISCAL1.Clear();
            NOTA_FISCAL2.Clear();
            PED_COMP1.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupUSUARIO2(USUARIO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.USUARIO1.Contains(this))
            {
                previousValue.USUARIO1.Remove(this);
            }
    
            if (USUARIO2 != null)
            {
                if (!USUARIO2.USUARIO1.Contains(this))
                {
                    USUARIO2.USUARIO1.Add(this);
                }
    
                UsuCodAtribAdminWeb = USUARIO2.UsuCod;
            }
            else if (!skipKeys)
            {
                UsuCodAtribAdminWeb = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("USUARIO2")
                    && (ChangeTracker.OriginalValues["USUARIO2"] == USUARIO2))
                {
                    ChangeTracker.OriginalValues.Remove("USUARIO2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("USUARIO2", previousValue);
                }
                if (USUARIO2 != null && !USUARIO2.ChangeTracker.ChangeTrackingEnabled)
                {
                    USUARIO2.StartTracking();
                }
            }
        }
    
        private void FixupCIDADE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CIDADE item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CIDADE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CIDADE item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CIDADE", item);
                    }
                }
            }
        }
    
        private void FixupCOND_PAG(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (COND_PAG item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("COND_PAG", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (COND_PAG item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("COND_PAG", item);
                    }
                }
            }
        }
    
        private void FixupDOC_ENTIDADE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DOC_ENTIDADE item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DOC_ENTIDADE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DOC_ENTIDADE item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DOC_ENTIDADE", item);
                    }
                }
            }
        }
    
        private void FixupFUNCIONARIO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FUNCIONARIO item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FUNCIONARIO", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FUNCIONARIO item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FUNCIONARIO", item);
                    }
                }
            }
        }
    
        private void FixupITEM_REQ_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_REQ_COMP item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_REQ_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_REQ_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_REQ_COMP", item);
                    }
                }
            }
        }
    
        private void FixupREQ_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (REQ_COMP item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("REQ_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REQ_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("REQ_COMP", item);
                    }
                }
            }
        }
    
        private void FixupUSUARIO1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (USUARIO item in e.NewItems)
                {
                    item.USUARIO2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("USUARIO1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (USUARIO item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO2, this))
                    {
                        item.USUARIO2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("USUARIO1", item);
                    }
                }
            }
        }
    
        private void FixupAPROV_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (APROV_COMP item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("APROV_COMP", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (APROV_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("APROV_COMP", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupITEM_PED_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_PED_COMP item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_PED_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_PED_COMP", item);
                    }
                }
            }
        }
    
        private void FixupITEM_PED_COMP1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_PED_COMP item in e.NewItems)
                {
                    item.USUARIO1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_PED_COMP1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO1, this))
                    {
                        item.USUARIO1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_PED_COMP1", item);
                    }
                }
            }
        }
    
        private void FixupITEM_PED_COMP2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_PED_COMP item in e.NewItems)
                {
                    item.USUARIO2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_PED_COMP2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO2, this))
                    {
                        item.USUARIO2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_PED_COMP2", item);
                    }
                }
            }
        }
    
        private void FixupPED_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PED_COMP item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PED_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PED_COMP", item);
                    }
                }
            }
        }
    
        private void FixupNOTA_FISCAL(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NOTA_FISCAL item in e.NewItems)
                {
                    item.USUARIO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NOTA_FISCAL", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NOTA_FISCAL item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO, this))
                    {
                        item.USUARIO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NOTA_FISCAL", item);
                    }
                }
            }
        }
    
        private void FixupNOTA_FISCAL1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NOTA_FISCAL item in e.NewItems)
                {
                    item.USUARIO1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NOTA_FISCAL1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NOTA_FISCAL item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO1, this))
                    {
                        item.USUARIO1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NOTA_FISCAL1", item);
                    }
                }
            }
        }
    
        private void FixupNOTA_FISCAL2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NOTA_FISCAL item in e.NewItems)
                {
                    item.USUARIO2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NOTA_FISCAL2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NOTA_FISCAL item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO2, this))
                    {
                        item.USUARIO2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NOTA_FISCAL2", item);
                    }
                }
            }
        }
    
        private void FixupPED_COMP1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PED_COMP item in e.NewItems)
                {
                    item.USUARIO1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PED_COMP1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.USUARIO1, this))
                    {
                        item.USUARIO1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PED_COMP1", item);
                    }
                }
            }
        }

        #endregion

    }
}
