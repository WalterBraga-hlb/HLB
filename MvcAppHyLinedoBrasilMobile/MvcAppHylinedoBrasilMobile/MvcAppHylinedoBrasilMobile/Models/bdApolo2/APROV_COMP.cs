//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo2
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(APROV_COMP_FINALIDADE))]
    [KnownType(typeof(USUARIO))]
    public partial class APROV_COMP: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UsuCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (USUARIO != null && USUARIO.UsuCod != value)
                        {
                            USUARIO = null;
                        }
                    }
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;
    
        [DataMember]
        public string AprovCompTipo
        {
            get { return _aprovCompTipo; }
            set
            {
                if (_aprovCompTipo != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AprovCompTipo' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aprovCompTipo = value;
                    OnPropertyChanged("AprovCompTipo");
                }
            }
        }
        private string _aprovCompTipo;
    
        [DataMember]
        public Nullable<decimal> AprovCompLim
        {
            get { return _aprovCompLim; }
            set
            {
                if (_aprovCompLim != value)
                {
                    _aprovCompLim = value;
                    OnPropertyChanged("AprovCompLim");
                }
            }
        }
        private Nullable<decimal> _aprovCompLim;
    
        [DataMember]
        public string AprovCompTodosNec
        {
            get { return _aprovCompTodosNec; }
            set
            {
                if (_aprovCompTodosNec != value)
                {
                    _aprovCompTodosNec = value;
                    OnPropertyChanged("AprovCompTodosNec");
                }
            }
        }
        private string _aprovCompTodosNec;
    
        [DataMember]
        public Nullable<decimal> AprovCompLimRecPercMenorQtd
        {
            get { return _aprovCompLimRecPercMenorQtd; }
            set
            {
                if (_aprovCompLimRecPercMenorQtd != value)
                {
                    _aprovCompLimRecPercMenorQtd = value;
                    OnPropertyChanged("AprovCompLimRecPercMenorQtd");
                }
            }
        }
        private Nullable<decimal> _aprovCompLimRecPercMenorQtd;
    
        [DataMember]
        public Nullable<decimal> AprovCompLimRecPercMaiorQtd
        {
            get { return _aprovCompLimRecPercMaiorQtd; }
            set
            {
                if (_aprovCompLimRecPercMaiorQtd != value)
                {
                    _aprovCompLimRecPercMaiorQtd = value;
                    OnPropertyChanged("AprovCompLimRecPercMaiorQtd");
                }
            }
        }
        private Nullable<decimal> _aprovCompLimRecPercMaiorQtd;
    
        [DataMember]
        public Nullable<decimal> AprovCompLimRecPercMenorVal
        {
            get { return _aprovCompLimRecPercMenorVal; }
            set
            {
                if (_aprovCompLimRecPercMenorVal != value)
                {
                    _aprovCompLimRecPercMenorVal = value;
                    OnPropertyChanged("AprovCompLimRecPercMenorVal");
                }
            }
        }
        private Nullable<decimal> _aprovCompLimRecPercMenorVal;
    
        [DataMember]
        public Nullable<decimal> AprovCompLimRecPercMaiorVal
        {
            get { return _aprovCompLimRecPercMaiorVal; }
            set
            {
                if (_aprovCompLimRecPercMaiorVal != value)
                {
                    _aprovCompLimRecPercMaiorVal = value;
                    OnPropertyChanged("AprovCompLimRecPercMaiorVal");
                }
            }
        }
        private Nullable<decimal> _aprovCompLimRecPercMaiorVal;
    
        [DataMember]
        public string AprovCompPorFinalidade
        {
            get { return _aprovCompPorFinalidade; }
            set
            {
                if (_aprovCompPorFinalidade != value)
                {
                    _aprovCompPorFinalidade = value;
                    OnPropertyChanged("AprovCompPorFinalidade");
                }
            }
        }
        private string _aprovCompPorFinalidade;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<APROV_COMP_FINALIDADE> APROV_COMP_FINALIDADE
        {
            get
            {
                if (_aPROV_COMP_FINALIDADE == null)
                {
                    _aPROV_COMP_FINALIDADE = new TrackableCollection<APROV_COMP_FINALIDADE>();
                    _aPROV_COMP_FINALIDADE.CollectionChanged += FixupAPROV_COMP_FINALIDADE;
                }
                return _aPROV_COMP_FINALIDADE;
            }
            set
            {
                if (!ReferenceEquals(_aPROV_COMP_FINALIDADE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aPROV_COMP_FINALIDADE != null)
                    {
                        _aPROV_COMP_FINALIDADE.CollectionChanged -= FixupAPROV_COMP_FINALIDADE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (APROV_COMP_FINALIDADE item in _aPROV_COMP_FINALIDADE)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _aPROV_COMP_FINALIDADE = value;
                    if (_aPROV_COMP_FINALIDADE != null)
                    {
                        _aPROV_COMP_FINALIDADE.CollectionChanged += FixupAPROV_COMP_FINALIDADE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (APROV_COMP_FINALIDADE item in _aPROV_COMP_FINALIDADE)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("APROV_COMP_FINALIDADE");
                }
            }
        }
        private TrackableCollection<APROV_COMP_FINALIDADE> _aPROV_COMP_FINALIDADE;
    
        [DataMember]
        public USUARIO USUARIO
        {
            get { return _uSUARIO; }
            set
            {
                if (!ReferenceEquals(_uSUARIO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (UsuCod != value.UsuCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _uSUARIO;
                    _uSUARIO = value;
                    FixupUSUARIO(previousValue);
                    OnNavigationPropertyChanged("USUARIO");
                }
            }
        }
        private USUARIO _uSUARIO;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            APROV_COMP_FINALIDADE.Clear();
            USUARIO = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupUSUARIO(USUARIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.APROV_COMP.Contains(this))
            {
                previousValue.APROV_COMP.Remove(this);
            }
    
            if (USUARIO != null)
            {
                if (!USUARIO.APROV_COMP.Contains(this))
                {
                    USUARIO.APROV_COMP.Add(this);
                }
    
                UsuCod = USUARIO.UsuCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("USUARIO")
                    && (ChangeTracker.OriginalValues["USUARIO"] == USUARIO))
                {
                    ChangeTracker.OriginalValues.Remove("USUARIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("USUARIO", previousValue);
                }
                if (USUARIO != null && !USUARIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    USUARIO.StartTracking();
                }
            }
        }
    
        private void FixupAPROV_COMP_FINALIDADE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (APROV_COMP_FINALIDADE item in e.NewItems)
                {
                    item.APROV_COMP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("APROV_COMP_FINALIDADE", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (APROV_COMP_FINALIDADE item in e.OldItems)
                {
                    if (ReferenceEquals(item.APROV_COMP, this))
                    {
                        item.APROV_COMP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("APROV_COMP_FINALIDADE", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
