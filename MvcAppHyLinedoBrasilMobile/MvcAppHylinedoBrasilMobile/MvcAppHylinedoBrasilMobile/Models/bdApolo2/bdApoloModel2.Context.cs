//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo2
{
    public partial class Apolo10Entities : ObjectContext
    {
        public const string ConnectionString = "name=Apolo10Entities";
        public const string ContainerName = "Apolo10Entities";
    
        #region Constructors
    
        public Apolo10Entities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public Apolo10Entities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public Apolo10Entities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<AEROPORTO> AEROPORTO
        {
            get { return _aEROPORTO  ?? (_aEROPORTO = CreateObjectSet<AEROPORTO>("AEROPORTO")); }
        }
        private ObjectSet<AEROPORTO> _aEROPORTO;
    
        public ObjectSet<COND_PAG_ENT> COND_PAG_ENT
        {
            get { return _cOND_PAG_ENT  ?? (_cOND_PAG_ENT = CreateObjectSet<COND_PAG_ENT>("COND_PAG_ENT")); }
        }
        private ObjectSet<COND_PAG_ENT> _cOND_PAG_ENT;
    
        public ObjectSet<COND_PAG> COND_PAG
        {
            get { return _cOND_PAG  ?? (_cOND_PAG = CreateObjectSet<COND_PAG>("COND_PAG")); }
        }
        private ObjectSet<COND_PAG> _cOND_PAG;
    
        public ObjectSet<DOC_ENTIDADE> DOC_ENTIDADE
        {
            get { return _dOC_ENTIDADE  ?? (_dOC_ENTIDADE = CreateObjectSet<DOC_ENTIDADE>("DOC_ENTIDADE")); }
        }
        private ObjectSet<DOC_ENTIDADE> _dOC_ENTIDADE;
    
        public ObjectSet<PAIS> PAIS
        {
            get { return _pAIS  ?? (_pAIS = CreateObjectSet<PAIS>("PAIS")); }
        }
        private ObjectSet<PAIS> _pAIS;
    
        public ObjectSet<ENT_OBJ> ENT_OBJ
        {
            get { return _eNT_OBJ  ?? (_eNT_OBJ = CreateObjectSet<ENT_OBJ>("ENT_OBJ")); }
        }
        private ObjectSet<ENT_OBJ> _eNT_OBJ;
    
        public ObjectSet<OBJETO> OBJETO
        {
            get { return _oBJETO  ?? (_oBJETO = CreateObjectSet<OBJETO>("OBJETO")); }
        }
        private ObjectSet<OBJETO> _oBJETO;
    
        public ObjectSet<ENDER_ENT> ENDER_ENT
        {
            get { return _eNDER_ENT  ?? (_eNDER_ENT = CreateObjectSet<ENDER_ENT>("ENDER_ENT")); }
        }
        private ObjectSet<ENDER_ENT> _eNDER_ENT;
    
        public ObjectSet<CATEGORIA_PRODUTO> CATEGORIA_PRODUTO
        {
            get { return _cATEGORIA_PRODUTO  ?? (_cATEGORIA_PRODUTO = CreateObjectSet<CATEGORIA_PRODUTO>("CATEGORIA_PRODUTO")); }
        }
        private ObjectSet<CATEGORIA_PRODUTO> _cATEGORIA_PRODUTO;
    
        public ObjectSet<FAIXA_PRODUTO> FAIXA_PRODUTO
        {
            get { return _fAIXA_PRODUTO  ?? (_fAIXA_PRODUTO = CreateObjectSet<FAIXA_PRODUTO>("FAIXA_PRODUTO")); }
        }
        private ObjectSet<FAIXA_PRODUTO> _fAIXA_PRODUTO;
    
        public ObjectSet<FUNCIONARIO> FUNCIONARIO
        {
            get { return _fUNCIONARIO  ?? (_fUNCIONARIO = CreateObjectSet<FUNCIONARIO>("FUNCIONARIO")); }
        }
        private ObjectSet<FUNCIONARIO> _fUNCIONARIO;
    
        public ObjectSet<TIPO_DESPESA> TIPO_DESPESA
        {
            get { return _tIPO_DESPESA  ?? (_tIPO_DESPESA = CreateObjectSet<TIPO_DESPESA>("TIPO_DESPESA")); }
        }
        private ObjectSet<TIPO_DESPESA> _tIPO_DESPESA;
    
        public ObjectSet<IND_ECONOMICO> IND_ECONOMICO
        {
            get { return _iND_ECONOMICO  ?? (_iND_ECONOMICO = CreateObjectSet<IND_ECONOMICO>("IND_ECONOMICO")); }
        }
        private ObjectSet<IND_ECONOMICO> _iND_ECONOMICO;
    
        public ObjectSet<ATIVIDADE_GRUPO> ATIVIDADE_GRUPO
        {
            get { return _aTIVIDADE_GRUPO  ?? (_aTIVIDADE_GRUPO = CreateObjectSet<ATIVIDADE_GRUPO>("ATIVIDADE_GRUPO")); }
        }
        private ObjectSet<ATIVIDADE_GRUPO> _aTIVIDADE_GRUPO;
    
        public ObjectSet<ATIVIDADE> ATIVIDADE
        {
            get { return _aTIVIDADE  ?? (_aTIVIDADE = CreateObjectSet<ATIVIDADE>("ATIVIDADE")); }
        }
        private ObjectSet<ATIVIDADE> _aTIVIDADE;
    
        public ObjectSet<EMPRESA_FILIAL> EMPRESA_FILIAL
        {
            get { return _eMPRESA_FILIAL  ?? (_eMPRESA_FILIAL = CreateObjectSet<EMPRESA_FILIAL>("EMPRESA_FILIAL")); }
        }
        private ObjectSet<EMPRESA_FILIAL> _eMPRESA_FILIAL;
    
        public ObjectSet<CIDADE> CIDADE
        {
            get { return _cIDADE  ?? (_cIDADE = CreateObjectSet<CIDADE>("CIDADE")); }
        }
        private ObjectSet<CIDADE> _cIDADE;
    
        public ObjectSet<GRP_FUNC> GRP_FUNC
        {
            get { return _gRP_FUNC  ?? (_gRP_FUNC = CreateObjectSet<GRP_FUNC>("GRP_FUNC")); }
        }
        private ObjectSet<GRP_FUNC> _gRP_FUNC;
    
        public ObjectSet<ITEM_REQ_COMP> ITEM_REQ_COMP
        {
            get { return _iTEM_REQ_COMP  ?? (_iTEM_REQ_COMP = CreateObjectSet<ITEM_REQ_COMP>("ITEM_REQ_COMP")); }
        }
        private ObjectSet<ITEM_REQ_COMP> _iTEM_REQ_COMP;
    
        public ObjectSet<REQ_COMP> REQ_COMP
        {
            get { return _rEQ_COMP  ?? (_rEQ_COMP = CreateObjectSet<REQ_COMP>("REQ_COMP")); }
        }
        private ObjectSet<REQ_COMP> _rEQ_COMP;
    
        public ObjectSet<USUARIO> USUARIO
        {
            get { return _uSUARIO  ?? (_uSUARIO = CreateObjectSet<USUARIO>("USUARIO")); }
        }
        private ObjectSet<USUARIO> _uSUARIO;
    
        public ObjectSet<APROV_COMP> APROV_COMP
        {
            get { return _aPROV_COMP  ?? (_aPROV_COMP = CreateObjectSet<APROV_COMP>("APROV_COMP")); }
        }
        private ObjectSet<APROV_COMP> _aPROV_COMP;
    
        public ObjectSet<APROV_COMP_FINALIDADE> APROV_COMP_FINALIDADE
        {
            get { return _aPROV_COMP_FINALIDADE  ?? (_aPROV_COMP_FINALIDADE = CreateObjectSet<APROV_COMP_FINALIDADE>("APROV_COMP_FINALIDADE")); }
        }
        private ObjectSet<APROV_COMP_FINALIDADE> _aPROV_COMP_FINALIDADE;
    
        public ObjectSet<PROD_UNID_MED> PROD_UNID_MED
        {
            get { return _pROD_UNID_MED  ?? (_pROD_UNID_MED = CreateObjectSet<PROD_UNID_MED>("PROD_UNID_MED")); }
        }
        private ObjectSet<PROD_UNID_MED> _pROD_UNID_MED;
    
        public ObjectSet<COND_PAG_PED_COMP> COND_PAG_PED_COMP
        {
            get { return _cOND_PAG_PED_COMP  ?? (_cOND_PAG_PED_COMP = CreateObjectSet<COND_PAG_PED_COMP>("COND_PAG_PED_COMP")); }
        }
        private ObjectSet<COND_PAG_PED_COMP> _cOND_PAG_PED_COMP;
    
        public ObjectSet<ITEM_PED_COMP> ITEM_PED_COMP
        {
            get { return _iTEM_PED_COMP  ?? (_iTEM_PED_COMP = CreateObjectSet<ITEM_PED_COMP>("ITEM_PED_COMP")); }
        }
        private ObjectSet<ITEM_PED_COMP> _iTEM_PED_COMP;
    
        public ObjectSet<PARC_PAG_PED_COMP> PARC_PAG_PED_COMP
        {
            get { return _pARC_PAG_PED_COMP  ?? (_pARC_PAG_PED_COMP = CreateObjectSet<PARC_PAG_PED_COMP>("PARC_PAG_PED_COMP")); }
        }
        private ObjectSet<PARC_PAG_PED_COMP> _pARC_PAG_PED_COMP;
    
        public ObjectSet<PED_COMP> PED_COMP
        {
            get { return _pED_COMP  ?? (_pED_COMP = CreateObjectSet<PED_COMP>("PED_COMP")); }
        }
        private ObjectSet<PED_COMP> _pED_COMP;
    
        public ObjectSet<NOTA_FISCAL> NOTA_FISCAL
        {
            get { return _nOTA_FISCAL  ?? (_nOTA_FISCAL = CreateObjectSet<NOTA_FISCAL>("NOTA_FISCAL")); }
        }
        private ObjectSet<NOTA_FISCAL> _nOTA_FISCAL;

        #endregion

        #region Function Imports
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empresa">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="tabela">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="codigo">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int gerar_codigo(string empresa, string tabela, ObjectParameter codigo)
        {
    
            ObjectParameter empresaParameter;
    
            if (empresa != null)
            {
                empresaParameter = new ObjectParameter("empresa", empresa);
            }
            else
            {
                empresaParameter = new ObjectParameter("empresa", typeof(string));
            }
    
            ObjectParameter tabelaParameter;
    
            if (tabela != null)
            {
                tabelaParameter = new ObjectParameter("tabela", tabela);
            }
            else
            {
                tabelaParameter = new ObjectParameter("tabela", typeof(string));
            }
            return base.ExecuteFunction("gerar_codigo", empresaParameter, tabelaParameter, codigo);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="cODIGO">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="tAMANHO">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="nUMERO">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int CONCAT_ZERO_ESQUERDA(string cODIGO, Nullable<int> tAMANHO, ObjectParameter nUMERO)
        {
    
            ObjectParameter cODIGOParameter;
    
            if (cODIGO != null)
            {
                cODIGOParameter = new ObjectParameter("CODIGO", cODIGO);
            }
            else
            {
                cODIGOParameter = new ObjectParameter("CODIGO", typeof(string));
            }
    
            ObjectParameter tAMANHOParameter;
    
            if (tAMANHO.HasValue)
            {
                tAMANHOParameter = new ObjectParameter("TAMANHO", tAMANHO);
            }
            else
            {
                tAMANHOParameter = new ObjectParameter("TAMANHO", typeof(int));
            }
            return base.ExecuteFunction("CONCAT_ZERO_ESQUERDA", cODIGOParameter, tAMANHOParameter, nUMERO);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empresa">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="requisicao">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="fornecedor">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="pedido">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="usuario">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="tipo">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="comprador">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="pedcompragerado">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="empresaatual">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int requisicao_gera_pedcomp(string empresa, string requisicao, string fornecedor, string pedido, string usuario, string tipo, string comprador, ObjectParameter pedcompragerado, string empresaatual)
        {
    
            ObjectParameter empresaParameter;
    
            if (empresa != null)
            {
                empresaParameter = new ObjectParameter("empresa", empresa);
            }
            else
            {
                empresaParameter = new ObjectParameter("empresa", typeof(string));
            }
    
            ObjectParameter requisicaoParameter;
    
            if (requisicao != null)
            {
                requisicaoParameter = new ObjectParameter("requisicao", requisicao);
            }
            else
            {
                requisicaoParameter = new ObjectParameter("requisicao", typeof(string));
            }
    
            ObjectParameter fornecedorParameter;
    
            if (fornecedor != null)
            {
                fornecedorParameter = new ObjectParameter("fornecedor", fornecedor);
            }
            else
            {
                fornecedorParameter = new ObjectParameter("fornecedor", typeof(string));
            }
    
            ObjectParameter pedidoParameter;
    
            if (pedido != null)
            {
                pedidoParameter = new ObjectParameter("pedido", pedido);
            }
            else
            {
                pedidoParameter = new ObjectParameter("pedido", typeof(string));
            }
    
            ObjectParameter usuarioParameter;
    
            if (usuario != null)
            {
                usuarioParameter = new ObjectParameter("usuario", usuario);
            }
            else
            {
                usuarioParameter = new ObjectParameter("usuario", typeof(string));
            }
    
            ObjectParameter tipoParameter;
    
            if (tipo != null)
            {
                tipoParameter = new ObjectParameter("tipo", tipo);
            }
            else
            {
                tipoParameter = new ObjectParameter("tipo", typeof(string));
            }
    
            ObjectParameter compradorParameter;
    
            if (comprador != null)
            {
                compradorParameter = new ObjectParameter("comprador", comprador);
            }
            else
            {
                compradorParameter = new ObjectParameter("comprador", typeof(string));
            }
    
            ObjectParameter empresaatualParameter;
    
            if (empresaatual != null)
            {
                empresaatualParameter = new ObjectParameter("empresaatual", empresaatual);
            }
            else
            {
                empresaatualParameter = new ObjectParameter("empresaatual", typeof(string));
            }
            return base.ExecuteFunction("requisicao_gera_pedcomp", empresaParameter, requisicaoParameter, fornecedorParameter, pedidoParameter, usuarioParameter, tipoParameter, compradorParameter, pedcompragerado, empresaatualParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empresa">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="requisicao">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="pedido">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="produto">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="sequencia">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="aprova">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="seqforn">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="empresaatual">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int requisicao_gera_itempedcomp(string empresa, string requisicao, string pedido, string produto, Nullable<int> sequencia, string aprova, Nullable<int> seqforn, string empresaatual)
        {
    
            ObjectParameter empresaParameter;
    
            if (empresa != null)
            {
                empresaParameter = new ObjectParameter("empresa", empresa);
            }
            else
            {
                empresaParameter = new ObjectParameter("empresa", typeof(string));
            }
    
            ObjectParameter requisicaoParameter;
    
            if (requisicao != null)
            {
                requisicaoParameter = new ObjectParameter("requisicao", requisicao);
            }
            else
            {
                requisicaoParameter = new ObjectParameter("requisicao", typeof(string));
            }
    
            ObjectParameter pedidoParameter;
    
            if (pedido != null)
            {
                pedidoParameter = new ObjectParameter("pedido", pedido);
            }
            else
            {
                pedidoParameter = new ObjectParameter("pedido", typeof(string));
            }
    
            ObjectParameter produtoParameter;
    
            if (produto != null)
            {
                produtoParameter = new ObjectParameter("produto", produto);
            }
            else
            {
                produtoParameter = new ObjectParameter("produto", typeof(string));
            }
    
            ObjectParameter sequenciaParameter;
    
            if (sequencia.HasValue)
            {
                sequenciaParameter = new ObjectParameter("sequencia", sequencia);
            }
            else
            {
                sequenciaParameter = new ObjectParameter("sequencia", typeof(int));
            }
    
            ObjectParameter aprovaParameter;
    
            if (aprova != null)
            {
                aprovaParameter = new ObjectParameter("aprova", aprova);
            }
            else
            {
                aprovaParameter = new ObjectParameter("aprova", typeof(string));
            }
    
            ObjectParameter seqfornParameter;
    
            if (seqforn.HasValue)
            {
                seqfornParameter = new ObjectParameter("seqforn", seqforn);
            }
            else
            {
                seqfornParameter = new ObjectParameter("seqforn", typeof(int));
            }
    
            ObjectParameter empresaatualParameter;
    
            if (empresaatual != null)
            {
                empresaatualParameter = new ObjectParameter("empresaatual", empresaatual);
            }
            else
            {
                empresaatualParameter = new ObjectParameter("empresaatual", typeof(string));
            }
            return base.ExecuteFunction("requisicao_gera_itempedcomp", empresaParameter, requisicaoParameter, pedidoParameter, produtoParameter, sequenciaParameter, aprovaParameter, seqfornParameter, empresaatualParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empresa">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="numero">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="sequencia">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="produto">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="usuario">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="chamou">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="motivo">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int aprovacao_compras(string empresa, string numero, Nullable<short> sequencia, string produto, string usuario, string chamou, string motivo)
        {
    
            ObjectParameter empresaParameter;
    
            if (empresa != null)
            {
                empresaParameter = new ObjectParameter("empresa", empresa);
            }
            else
            {
                empresaParameter = new ObjectParameter("empresa", typeof(string));
            }
    
            ObjectParameter numeroParameter;
    
            if (numero != null)
            {
                numeroParameter = new ObjectParameter("numero", numero);
            }
            else
            {
                numeroParameter = new ObjectParameter("numero", typeof(string));
            }
    
            ObjectParameter sequenciaParameter;
    
            if (sequencia.HasValue)
            {
                sequenciaParameter = new ObjectParameter("sequencia", sequencia);
            }
            else
            {
                sequenciaParameter = new ObjectParameter("sequencia", typeof(short));
            }
    
            ObjectParameter produtoParameter;
    
            if (produto != null)
            {
                produtoParameter = new ObjectParameter("produto", produto);
            }
            else
            {
                produtoParameter = new ObjectParameter("produto", typeof(string));
            }
    
            ObjectParameter usuarioParameter;
    
            if (usuario != null)
            {
                usuarioParameter = new ObjectParameter("usuario", usuario);
            }
            else
            {
                usuarioParameter = new ObjectParameter("usuario", typeof(string));
            }
    
            ObjectParameter chamouParameter;
    
            if (chamou != null)
            {
                chamouParameter = new ObjectParameter("chamou", chamou);
            }
            else
            {
                chamouParameter = new ObjectParameter("chamou", typeof(string));
            }
    
            ObjectParameter motivoParameter;
    
            if (motivo != null)
            {
                motivoParameter = new ObjectParameter("motivo", motivo);
            }
            else
            {
                motivoParameter = new ObjectParameter("motivo", typeof(string));
            }
            return base.ExecuteFunction("aprovacao_compras", empresaParameter, numeroParameter, sequenciaParameter, produtoParameter, usuarioParameter, chamouParameter, motivoParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="pedcompnum">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="entcod">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int delete_pedcomp(string empcod, string pedcompnum, string entcod)
        {
    
            ObjectParameter empcodParameter;
    
            if (empcod != null)
            {
                empcodParameter = new ObjectParameter("empcod", empcod);
            }
            else
            {
                empcodParameter = new ObjectParameter("empcod", typeof(string));
            }
    
            ObjectParameter pedcompnumParameter;
    
            if (pedcompnum != null)
            {
                pedcompnumParameter = new ObjectParameter("pedcompnum", pedcompnum);
            }
            else
            {
                pedcompnumParameter = new ObjectParameter("pedcompnum", typeof(string));
            }
    
            ObjectParameter entcodParameter;
    
            if (entcod != null)
            {
                entcodParameter = new ObjectParameter("entcod", entcod);
            }
            else
            {
                entcodParameter = new ObjectParameter("entcod", typeof(string));
            }
            return base.ExecuteFunction("delete_pedcomp", empcodParameter, pedcompnumParameter, entcodParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="reqcompnum">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int delete_reqcomp(string empcod, string reqcompnum)
        {
    
            ObjectParameter empcodParameter;
    
            if (empcod != null)
            {
                empcodParameter = new ObjectParameter("empcod", empcod);
            }
            else
            {
                empcodParameter = new ObjectParameter("empcod", typeof(string));
            }
    
            ObjectParameter reqcompnumParameter;
    
            if (reqcompnum != null)
            {
                reqcompnumParameter = new ObjectParameter("reqcompnum", reqcompnum);
            }
            else
            {
                reqcompnumParameter = new ObjectParameter("reqcompnum", typeof(string));
            }
            return base.ExecuteFunction("delete_reqcomp", empcodParameter, reqcompnumParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empresa">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="requisicao">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="operacao">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int atualiza_requisicao_pedcomp(string empresa, string requisicao, string operacao)
        {
    
            ObjectParameter empresaParameter;
    
            if (empresa != null)
            {
                empresaParameter = new ObjectParameter("empresa", empresa);
            }
            else
            {
                empresaParameter = new ObjectParameter("empresa", typeof(string));
            }
    
            ObjectParameter requisicaoParameter;
    
            if (requisicao != null)
            {
                requisicaoParameter = new ObjectParameter("requisicao", requisicao);
            }
            else
            {
                requisicaoParameter = new ObjectParameter("requisicao", typeof(string));
            }
    
            ObjectParameter operacaoParameter;
    
            if (operacao != null)
            {
                operacaoParameter = new ObjectParameter("operacao", operacao);
            }
            else
            {
                operacaoParameter = new ObjectParameter("operacao", typeof(string));
            }
            return base.ExecuteFunction("atualiza_requisicao_pedcomp", empresaParameter, requisicaoParameter, operacaoParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empcod">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="pedcompnum">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int atualiza_status_pedcomp(string empcod, string pedcompnum)
        {
    
            ObjectParameter empcodParameter;
    
            if (empcod != null)
            {
                empcodParameter = new ObjectParameter("empcod", empcod);
            }
            else
            {
                empcodParameter = new ObjectParameter("empcod", typeof(string));
            }
    
            ObjectParameter pedcompnumParameter;
    
            if (pedcompnum != null)
            {
                pedcompnumParameter = new ObjectParameter("pedcompnum", pedcompnum);
            }
            else
            {
                pedcompnumParameter = new ObjectParameter("pedcompnum", typeof(string));
            }
            return base.ExecuteFunction("atualiza_status_pedcomp", empcodParameter, pedcompnumParameter);
        }
    
        /// <summary>
        /// Nenhuma Documentação de Metadados disponível.
        /// </summary>
        /// <param name="empresa">Nenhuma Documentação de Metadados disponível.</param>
        /// <param name="numero">Nenhuma Documentação de Metadados disponível.</param>
        public virtual int parcela_ped_comp(string empresa, string numero)
        {
    
            ObjectParameter empresaParameter;
    
            if (empresa != null)
            {
                empresaParameter = new ObjectParameter("empresa", empresa);
            }
            else
            {
                empresaParameter = new ObjectParameter("empresa", typeof(string));
            }
    
            ObjectParameter numeroParameter;
    
            if (numero != null)
            {
                numeroParameter = new ObjectParameter("numero", numero);
            }
            else
            {
                numeroParameter = new ObjectParameter("numero", typeof(string));
            }
            return base.ExecuteFunction("parcela_ped_comp", empresaParameter, numeroParameter);
        }

        #endregion

    }
}
