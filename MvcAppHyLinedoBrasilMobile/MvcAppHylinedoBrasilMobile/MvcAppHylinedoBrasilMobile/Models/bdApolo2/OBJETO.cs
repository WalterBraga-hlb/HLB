//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo2
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ENT_OBJ))]
    public partial class OBJETO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ObjCodEstr
        {
            get { return _objCodEstr; }
            set
            {
                if (_objCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ObjCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _objCodEstr = value;
                    OnPropertyChanged("ObjCodEstr");
                }
            }
        }
        private string _objCodEstr;
    
        [DataMember]
        public string ObjNome
        {
            get { return _objNome; }
            set
            {
                if (_objNome != value)
                {
                    _objNome = value;
                    OnPropertyChanged("ObjNome");
                }
            }
        }
        private string _objNome;
    
        [DataMember]
        public string ObjCodEstrNiv
        {
            get { return _objCodEstrNiv; }
            set
            {
                if (_objCodEstrNiv != value)
                {
                    _objCodEstrNiv = value;
                    OnPropertyChanged("ObjCodEstrNiv");
                }
            }
        }
        private string _objCodEstrNiv;
    
        [DataMember]
        public string ObjGrupo
        {
            get { return _objGrupo; }
            set
            {
                if (_objGrupo != value)
                {
                    _objGrupo = value;
                    OnPropertyChanged("ObjGrupo");
                }
            }
        }
        private string _objGrupo;
    
        [DataMember]
        public byte[] ObjFoto
        {
            get { return _objFoto; }
            set
            {
                if (_objFoto != value)
                {
                    _objFoto = value;
                    OnPropertyChanged("ObjFoto");
                }
            }
        }
        private byte[] _objFoto;
    
        [DataMember]
        public string USERTipoDocumento
        {
            get { return _uSERTipoDocumento; }
            set
            {
                if (_uSERTipoDocumento != value)
                {
                    _uSERTipoDocumento = value;
                    OnPropertyChanged("USERTipoDocumento");
                }
            }
        }
        private string _uSERTipoDocumento;
    
        [DataMember]
        public string USERCodTipoManutEquip
        {
            get { return _uSERCodTipoManutEquip; }
            set
            {
                if (_uSERCodTipoManutEquip != value)
                {
                    _uSERCodTipoManutEquip = value;
                    OnPropertyChanged("USERCodTipoManutEquip");
                }
            }
        }
        private string _uSERCodTipoManutEquip;
    
        [DataMember]
        public string USERDescrCompTipoManutEquip
        {
            get { return _uSERDescrCompTipoManutEquip; }
            set
            {
                if (_uSERDescrCompTipoManutEquip != value)
                {
                    _uSERDescrCompTipoManutEquip = value;
                    OnPropertyChanged("USERDescrCompTipoManutEquip");
                }
            }
        }
        private string _uSERDescrCompTipoManutEquip;
    
        [DataMember]
        public Nullable<short> USERPeriodicidadeSemana
        {
            get { return _uSERPeriodicidadeSemana; }
            set
            {
                if (_uSERPeriodicidadeSemana != value)
                {
                    _uSERPeriodicidadeSemana = value;
                    OnPropertyChanged("USERPeriodicidadeSemana");
                }
            }
        }
        private Nullable<short> _uSERPeriodicidadeSemana;
    
        [DataMember]
        public string USERCriticidade
        {
            get { return _uSERCriticidade; }
            set
            {
                if (_uSERCriticidade != value)
                {
                    _uSERCriticidade = value;
                    OnPropertyChanged("USERCriticidade");
                }
            }
        }
        private string _uSERCriticidade;
    
        [DataMember]
        public Nullable<decimal> USERQtdeHoras
        {
            get { return _uSERQtdeHoras; }
            set
            {
                if (_uSERQtdeHoras != value)
                {
                    _uSERQtdeHoras = value;
                    OnPropertyChanged("USERQtdeHoras");
                }
            }
        }
        private Nullable<decimal> _uSERQtdeHoras;
    
        [DataMember]
        public Nullable<short> USERDEQtdeCopias
        {
            get { return _uSERDEQtdeCopias; }
            set
            {
                if (_uSERDEQtdeCopias != value)
                {
                    _uSERDEQtdeCopias = value;
                    OnPropertyChanged("USERDEQtdeCopias");
                }
            }
        }
        private Nullable<short> _uSERDEQtdeCopias;
    
        [DataMember]
        public string USERTipoPeriodo
        {
            get { return _uSERTipoPeriodo; }
            set
            {
                if (_uSERTipoPeriodo != value)
                {
                    _uSERTipoPeriodo = value;
                    OnPropertyChanged("USERTipoPeriodo");
                }
            }
        }
        private string _uSERTipoPeriodo;
    
        [DataMember]
        public Nullable<short> USERQtdeOSPeriodo
        {
            get { return _uSERQtdeOSPeriodo; }
            set
            {
                if (_uSERQtdeOSPeriodo != value)
                {
                    _uSERQtdeOSPeriodo = value;
                    OnPropertyChanged("USERQtdeOSPeriodo");
                }
            }
        }
        private Nullable<short> _uSERQtdeOSPeriodo;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ENT_OBJ> ENT_OBJ
        {
            get
            {
                if (_eNT_OBJ == null)
                {
                    _eNT_OBJ = new TrackableCollection<ENT_OBJ>();
                    _eNT_OBJ.CollectionChanged += FixupENT_OBJ;
                }
                return _eNT_OBJ;
            }
            set
            {
                if (!ReferenceEquals(_eNT_OBJ, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_eNT_OBJ != null)
                    {
                        _eNT_OBJ.CollectionChanged -= FixupENT_OBJ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ENT_OBJ item in _eNT_OBJ)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _eNT_OBJ = value;
                    if (_eNT_OBJ != null)
                    {
                        _eNT_OBJ.CollectionChanged += FixupENT_OBJ;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ENT_OBJ item in _eNT_OBJ)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ENT_OBJ");
                }
            }
        }
        private TrackableCollection<ENT_OBJ> _eNT_OBJ;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ENT_OBJ.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupENT_OBJ(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ENT_OBJ item in e.NewItems)
                {
                    item.OBJETO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ENT_OBJ", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ENT_OBJ item in e.OldItems)
                {
                    if (ReferenceEquals(item.OBJETO, this))
                    {
                        item.OBJETO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ENT_OBJ", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
