//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo2
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EMPRESA_FILIAL))]
    [KnownType(typeof(FUNCIONARIO))]
    [KnownType(typeof(ITEM_REQ_COMP))]
    [KnownType(typeof(USUARIO))]
    [KnownType(typeof(PED_COMP))]
    public partial class REQ_COMP: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL2 != null && EMPRESA_FILIAL2.EmpCod != value)
                        {
                            EMPRESA_FILIAL2 = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string ReqCompNum
        {
            get { return _reqCompNum; }
            set
            {
                if (_reqCompNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReqCompNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reqCompNum = value;
                    OnPropertyChanged("ReqCompNum");
                }
            }
        }
        private string _reqCompNum;
    
        [DataMember]
        public string CCtrlCodEstr
        {
            get { return _cCtrlCodEstr; }
            set
            {
                if (_cCtrlCodEstr != value)
                {
                    _cCtrlCodEstr = value;
                    OnPropertyChanged("CCtrlCodEstr");
                }
            }
        }
        private string _cCtrlCodEstr;
    
        [DataMember]
        public string FuncCod
        {
            get { return _funcCod; }
            set
            {
                if (_funcCod != value)
                {
                    ChangeTracker.RecordOriginalValue("FuncCod", _funcCod);
                    if (!IsDeserializing)
                    {
                        if (FUNCIONARIO != null && FUNCIONARIO.FuncCod != value)
                        {
                            FUNCIONARIO = null;
                        }
                    }
                    _funcCod = value;
                    OnPropertyChanged("FuncCod");
                }
            }
        }
        private string _funcCod;
    
        [DataMember]
        public string ReqCompDescr
        {
            get { return _reqCompDescr; }
            set
            {
                if (_reqCompDescr != value)
                {
                    _reqCompDescr = value;
                    OnPropertyChanged("ReqCompDescr");
                }
            }
        }
        private string _reqCompDescr;
    
        [DataMember]
        public Nullable<System.DateTime> ReqCompData
        {
            get { return _reqCompData; }
            set
            {
                if (_reqCompData != value)
                {
                    _reqCompData = value;
                    OnPropertyChanged("ReqCompData");
                }
            }
        }
        private Nullable<System.DateTime> _reqCompData;
    
        [DataMember]
        public Nullable<System.DateTime> ReqCompDataNec
        {
            get { return _reqCompDataNec; }
            set
            {
                if (_reqCompDataNec != value)
                {
                    _reqCompDataNec = value;
                    OnPropertyChanged("ReqCompDataNec");
                }
            }
        }
        private Nullable<System.DateTime> _reqCompDataNec;
    
        [DataMember]
        public string ReqCompStat
        {
            get { return _reqCompStat; }
            set
            {
                if (_reqCompStat != value)
                {
                    _reqCompStat = value;
                    OnPropertyChanged("ReqCompStat");
                }
            }
        }
        private string _reqCompStat;
    
        [DataMember]
        public string ReqCompCot
        {
            get { return _reqCompCot; }
            set
            {
                if (_reqCompCot != value)
                {
                    _reqCompCot = value;
                    OnPropertyChanged("ReqCompCot");
                }
            }
        }
        private string _reqCompCot;
    
        [DataMember]
        public string ReqCompEmpCodDoc
        {
            get { return _reqCompEmpCodDoc; }
            set
            {
                if (_reqCompEmpCodDoc != value)
                {
                    ChangeTracker.RecordOriginalValue("ReqCompEmpCodDoc", _reqCompEmpCodDoc);
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL1 != null && EMPRESA_FILIAL1.EmpCod != value)
                        {
                            EMPRESA_FILIAL1 = null;
                        }
                    }
                    _reqCompEmpCodDoc = value;
                    OnPropertyChanged("ReqCompEmpCodDoc");
                }
            }
        }
        private string _reqCompEmpCodDoc;
    
        [DataMember]
        public string ReqCompEspecDoc
        {
            get { return _reqCompEspecDoc; }
            set
            {
                if (_reqCompEspecDoc != value)
                {
                    _reqCompEspecDoc = value;
                    OnPropertyChanged("ReqCompEspecDoc");
                }
            }
        }
        private string _reqCompEspecDoc;
    
        [DataMember]
        public string ReqCompSerieDoc
        {
            get { return _reqCompSerieDoc; }
            set
            {
                if (_reqCompSerieDoc != value)
                {
                    _reqCompSerieDoc = value;
                    OnPropertyChanged("ReqCompSerieDoc");
                }
            }
        }
        private string _reqCompSerieDoc;
    
        [DataMember]
        public string ReqCompNumDoc
        {
            get { return _reqCompNumDoc; }
            set
            {
                if (_reqCompNumDoc != value)
                {
                    _reqCompNumDoc = value;
                    OnPropertyChanged("ReqCompNumDoc");
                }
            }
        }
        private string _reqCompNumDoc;
    
        [DataMember]
        public string ReqCompAprov
        {
            get { return _reqCompAprov; }
            set
            {
                if (_reqCompAprov != value)
                {
                    _reqCompAprov = value;
                    OnPropertyChanged("ReqCompAprov");
                }
            }
        }
        private string _reqCompAprov;
    
        [DataMember]
        public string ReqCompTexto
        {
            get { return _reqCompTexto; }
            set
            {
                if (_reqCompTexto != value)
                {
                    _reqCompTexto = value;
                    OnPropertyChanged("ReqCompTexto");
                }
            }
        }
        private string _reqCompTexto;
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    ChangeTracker.RecordOriginalValue("UsuCod", _usuCod);
                    if (!IsDeserializing)
                    {
                        if (USUARIO != null && USUARIO.UsuCod != value)
                        {
                            USUARIO = null;
                        }
                    }
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;
    
        [DataMember]
        public string ReqCompPed
        {
            get { return _reqCompPed; }
            set
            {
                if (_reqCompPed != value)
                {
                    _reqCompPed = value;
                    OnPropertyChanged("ReqCompPed");
                }
            }
        }
        private string _reqCompPed;
    
        [DataMember]
        public string PedVendaNum
        {
            get { return _pedVendaNum; }
            set
            {
                if (_pedVendaNum != value)
                {
                    _pedVendaNum = value;
                    OnPropertyChanged("PedVendaNum");
                }
            }
        }
        private string _pedVendaNum;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string ReqCompNumPedEnt
        {
            get { return _reqCompNumPedEnt; }
            set
            {
                if (_reqCompNumPedEnt != value)
                {
                    _reqCompNumPedEnt = value;
                    OnPropertyChanged("ReqCompNumPedEnt");
                }
            }
        }
        private string _reqCompNumPedEnt;
    
        [DataMember]
        public string ReqCompReprov
        {
            get { return _reqCompReprov; }
            set
            {
                if (_reqCompReprov != value)
                {
                    _reqCompReprov = value;
                    OnPropertyChanged("ReqCompReprov");
                }
            }
        }
        private string _reqCompReprov;
    
        [DataMember]
        public Nullable<short> ReqCompSeqDoc
        {
            get { return _reqCompSeqDoc; }
            set
            {
                if (_reqCompSeqDoc != value)
                {
                    _reqCompSeqDoc = value;
                    OnPropertyChanged("ReqCompSeqDoc");
                }
            }
        }
        private Nullable<short> _reqCompSeqDoc;
    
        [DataMember]
        public string ReqCompNumAltDoc
        {
            get { return _reqCompNumAltDoc; }
            set
            {
                if (_reqCompNumAltDoc != value)
                {
                    _reqCompNumAltDoc = value;
                    OnPropertyChanged("ReqCompNumAltDoc");
                }
            }
        }
        private string _reqCompNumAltDoc;
    
        [DataMember]
        public string ReqCompRes
        {
            get { return _reqCompRes; }
            set
            {
                if (_reqCompRes != value)
                {
                    _reqCompRes = value;
                    OnPropertyChanged("ReqCompRes");
                }
            }
        }
        private string _reqCompRes;
    
        [DataMember]
        public string ReqCompTipoReq
        {
            get { return _reqCompTipoReq; }
            set
            {
                if (_reqCompTipoReq != value)
                {
                    _reqCompTipoReq = value;
                    OnPropertyChanged("ReqCompTipoReq");
                }
            }
        }
        private string _reqCompTipoReq;
    
        [DataMember]
        public string ReqCompEmpCodLocEnt
        {
            get { return _reqCompEmpCodLocEnt; }
            set
            {
                if (_reqCompEmpCodLocEnt != value)
                {
                    ChangeTracker.RecordOriginalValue("ReqCompEmpCodLocEnt", _reqCompEmpCodLocEnt);
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL != null && EMPRESA_FILIAL.EmpCod != value)
                        {
                            EMPRESA_FILIAL = null;
                        }
                    }
                    _reqCompEmpCodLocEnt = value;
                    OnPropertyChanged("ReqCompEmpCodLocEnt");
                }
            }
        }
        private string _reqCompEmpCodLocEnt;
    
        [DataMember]
        public string ReqCompEntCodLocEnt
        {
            get { return _reqCompEntCodLocEnt; }
            set
            {
                if (_reqCompEntCodLocEnt != value)
                {
                    _reqCompEntCodLocEnt = value;
                    OnPropertyChanged("ReqCompEntCodLocEnt");
                }
            }
        }
        private string _reqCompEntCodLocEnt;
    
        [DataMember]
        public string ReqCompControle
        {
            get { return _reqCompControle; }
            set
            {
                if (_reqCompControle != value)
                {
                    _reqCompControle = value;
                    OnPropertyChanged("ReqCompControle");
                }
            }
        }
        private string _reqCompControle;
    
        [DataMember]
        public string FinCompCod
        {
            get { return _finCompCod; }
            set
            {
                if (_finCompCod != value)
                {
                    _finCompCod = value;
                    OnPropertyChanged("FinCompCod");
                }
            }
        }
        private string _finCompCod;
    
        [DataMember]
        public string ReqCompTerc
        {
            get { return _reqCompTerc; }
            set
            {
                if (_reqCompTerc != value)
                {
                    _reqCompTerc = value;
                    OnPropertyChanged("ReqCompTerc");
                }
            }
        }
        private string _reqCompTerc;
    
        [DataMember]
        public Nullable<decimal> ReqCompValLimite
        {
            get { return _reqCompValLimite; }
            set
            {
                if (_reqCompValLimite != value)
                {
                    _reqCompValLimite = value;
                    OnPropertyChanged("ReqCompValLimite");
                }
            }
        }
        private Nullable<decimal> _reqCompValLimite;
    
        [DataMember]
        public string CtrlProjNum
        {
            get { return _ctrlProjNum; }
            set
            {
                if (_ctrlProjNum != value)
                {
                    _ctrlProjNum = value;
                    OnPropertyChanged("CtrlProjNum");
                }
            }
        }
        private string _ctrlProjNum;
    
        [DataMember]
        public string MatrizCod
        {
            get { return _matrizCod; }
            set
            {
                if (_matrizCod != value)
                {
                    _matrizCod = value;
                    OnPropertyChanged("MatrizCod");
                }
            }
        }
        private string _matrizCod;
    
        [DataMember]
        public string LinhaCod
        {
            get { return _linhaCod; }
            set
            {
                if (_linhaCod != value)
                {
                    _linhaCod = value;
                    OnPropertyChanged("LinhaCod");
                }
            }
        }
        private string _linhaCod;
    
        [DataMember]
        public string ColunaCod
        {
            get { return _colunaCod; }
            set
            {
                if (_colunaCod != value)
                {
                    _colunaCod = value;
                    OnPropertyChanged("ColunaCod");
                }
            }
        }
        private string _colunaCod;
    
        [DataMember]
        public Nullable<int> VerbaCtrlProjSeq
        {
            get { return _verbaCtrlProjSeq; }
            set
            {
                if (_verbaCtrlProjSeq != value)
                {
                    _verbaCtrlProjSeq = value;
                    OnPropertyChanged("VerbaCtrlProjSeq");
                }
            }
        }
        private Nullable<int> _verbaCtrlProjSeq;
    
        [DataMember]
        public string ReqCompNumOrig
        {
            get { return _reqCompNumOrig; }
            set
            {
                if (_reqCompNumOrig != value)
                {
                    _reqCompNumOrig = value;
                    OnPropertyChanged("ReqCompNumOrig");
                }
            }
        }
        private string _reqCompNumOrig;
    
        [DataMember]
        public string ReqCompHist
        {
            get { return _reqCompHist; }
            set
            {
                if (_reqCompHist != value)
                {
                    _reqCompHist = value;
                    OnPropertyChanged("ReqCompHist");
                }
            }
        }
        private string _reqCompHist;
    
        [DataMember]
        public string VendCod
        {
            get { return _vendCod; }
            set
            {
                if (_vendCod != value)
                {
                    _vendCod = value;
                    OnPropertyChanged("VendCod");
                }
            }
        }
        private string _vendCod;
    
        [DataMember]
        public string USERAprovador
        {
            get { return _uSERAprovador; }
            set
            {
                if (_uSERAprovador != value)
                {
                    _uSERAprovador = value;
                    OnPropertyChanged("USERAprovador");
                }
            }
        }
        private string _uSERAprovador;
    
        [DataMember]
        public string USERRecebido
        {
            get { return _uSERRecebido; }
            set
            {
                if (_uSERRecebido != value)
                {
                    _uSERRecebido = value;
                    OnPropertyChanged("USERRecebido");
                }
            }
        }
        private string _uSERRecebido;
    
        [DataMember]
        public string USERObsRecebimento
        {
            get { return _uSERObsRecebimento; }
            set
            {
                if (_uSERObsRecebimento != value)
                {
                    _uSERObsRecebimento = value;
                    OnPropertyChanged("USERObsRecebimento");
                }
            }
        }
        private string _uSERObsRecebimento;
    
        [DataMember]
        public string USEREnviarAprovacao
        {
            get { return _uSEREnviarAprovacao; }
            set
            {
                if (_uSEREnviarAprovacao != value)
                {
                    _uSEREnviarAprovacao = value;
                    OnPropertyChanged("USEREnviarAprovacao");
                }
            }
        }
        private string _uSEREnviarAprovacao;
    
        [DataMember]
        public string USERRequisicaoCotada
        {
            get { return _uSERRequisicaoCotada; }
            set
            {
                if (_uSERRequisicaoCotada != value)
                {
                    _uSERRequisicaoCotada = value;
                    OnPropertyChanged("USERRequisicaoCotada");
                }
            }
        }
        private string _uSERRequisicaoCotada;
    
        [DataMember]
        public string USERPlacaVeiculo
        {
            get { return _uSERPlacaVeiculo; }
            set
            {
                if (_uSERPlacaVeiculo != value)
                {
                    _uSERPlacaVeiculo = value;
                    OnPropertyChanged("USERPlacaVeiculo");
                }
            }
        }
        private string _uSERPlacaVeiculo;
    
        [DataMember]
        public string USERMotivoManutencaoVeiculo
        {
            get { return _uSERMotivoManutencaoVeiculo; }
            set
            {
                if (_uSERMotivoManutencaoVeiculo != value)
                {
                    _uSERMotivoManutencaoVeiculo = value;
                    OnPropertyChanged("USERMotivoManutencaoVeiculo");
                }
            }
        }
        private string _uSERMotivoManutencaoVeiculo;
    
        [DataMember]
        public Nullable<System.DateTime> REQCOMPDATAHORADIG
        {
            get { return _rEQCOMPDATAHORADIG; }
            set
            {
                if (_rEQCOMPDATAHORADIG != value)
                {
                    _rEQCOMPDATAHORADIG = value;
                    OnPropertyChanged("REQCOMPDATAHORADIG");
                }
            }
        }
        private Nullable<System.DateTime> _rEQCOMPDATAHORADIG;
    
        [DataMember]
        public string REQCOMPORIG
        {
            get { return _rEQCOMPORIG; }
            set
            {
                if (_rEQCOMPORIG != value)
                {
                    _rEQCOMPORIG = value;
                    OnPropertyChanged("REQCOMPORIG");
                }
            }
        }
        private string _rEQCOMPORIG;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL
        {
            get { return _eMPRESA_FILIAL; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL, value))
                {
                    var previousValue = _eMPRESA_FILIAL;
                    _eMPRESA_FILIAL = value;
                    FixupEMPRESA_FILIAL(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL1
        {
            get { return _eMPRESA_FILIAL1; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL1, value))
                {
                    var previousValue = _eMPRESA_FILIAL1;
                    _eMPRESA_FILIAL1 = value;
                    FixupEMPRESA_FILIAL1(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL1");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL1;
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL2
        {
            get { return _eMPRESA_FILIAL2; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eMPRESA_FILIAL2;
                    _eMPRESA_FILIAL2 = value;
                    FixupEMPRESA_FILIAL2(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL2");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL2;
    
        [DataMember]
        public FUNCIONARIO FUNCIONARIO
        {
            get { return _fUNCIONARIO; }
            set
            {
                if (!ReferenceEquals(_fUNCIONARIO, value))
                {
                    var previousValue = _fUNCIONARIO;
                    _fUNCIONARIO = value;
                    FixupFUNCIONARIO(previousValue);
                    OnNavigationPropertyChanged("FUNCIONARIO");
                }
            }
        }
        private FUNCIONARIO _fUNCIONARIO;
    
        [DataMember]
        public TrackableCollection<ITEM_REQ_COMP> ITEM_REQ_COMP
        {
            get
            {
                if (_iTEM_REQ_COMP == null)
                {
                    _iTEM_REQ_COMP = new TrackableCollection<ITEM_REQ_COMP>();
                    _iTEM_REQ_COMP.CollectionChanged += FixupITEM_REQ_COMP;
                }
                return _iTEM_REQ_COMP;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_REQ_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_REQ_COMP != null)
                    {
                        _iTEM_REQ_COMP.CollectionChanged -= FixupITEM_REQ_COMP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ITEM_REQ_COMP item in _iTEM_REQ_COMP)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _iTEM_REQ_COMP = value;
                    if (_iTEM_REQ_COMP != null)
                    {
                        _iTEM_REQ_COMP.CollectionChanged += FixupITEM_REQ_COMP;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ITEM_REQ_COMP item in _iTEM_REQ_COMP)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ITEM_REQ_COMP");
                }
            }
        }
        private TrackableCollection<ITEM_REQ_COMP> _iTEM_REQ_COMP;
    
        [DataMember]
        public USUARIO USUARIO
        {
            get { return _uSUARIO; }
            set
            {
                if (!ReferenceEquals(_uSUARIO, value))
                {
                    var previousValue = _uSUARIO;
                    _uSUARIO = value;
                    FixupUSUARIO(previousValue);
                    OnNavigationPropertyChanged("USUARIO");
                }
            }
        }
        private USUARIO _uSUARIO;
    
        [DataMember]
        public TrackableCollection<PED_COMP> PED_COMP
        {
            get
            {
                if (_pED_COMP == null)
                {
                    _pED_COMP = new TrackableCollection<PED_COMP>();
                    _pED_COMP.CollectionChanged += FixupPED_COMP;
                }
                return _pED_COMP;
            }
            set
            {
                if (!ReferenceEquals(_pED_COMP, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pED_COMP != null)
                    {
                        _pED_COMP.CollectionChanged -= FixupPED_COMP;
                    }
                    _pED_COMP = value;
                    if (_pED_COMP != null)
                    {
                        _pED_COMP.CollectionChanged += FixupPED_COMP;
                    }
                    OnNavigationPropertyChanged("PED_COMP");
                }
            }
        }
        private TrackableCollection<PED_COMP> _pED_COMP;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            EMPRESA_FILIAL = null;
            EMPRESA_FILIAL1 = null;
            EMPRESA_FILIAL2 = null;
            FUNCIONARIO = null;
            ITEM_REQ_COMP.Clear();
            USUARIO = null;
            PED_COMP.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupEMPRESA_FILIAL(EMPRESA_FILIAL previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REQ_COMP.Contains(this))
            {
                previousValue.REQ_COMP.Remove(this);
            }
    
            if (EMPRESA_FILIAL != null)
            {
                if (!EMPRESA_FILIAL.REQ_COMP.Contains(this))
                {
                    EMPRESA_FILIAL.REQ_COMP.Add(this);
                }
    
                ReqCompEmpCodLocEnt = EMPRESA_FILIAL.EmpCod;
            }
            else if (!skipKeys)
            {
                ReqCompEmpCodLocEnt = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL"] == EMPRESA_FILIAL))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL", previousValue);
                }
                if (EMPRESA_FILIAL != null && !EMPRESA_FILIAL.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL.StartTracking();
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL1(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REQ_COMP1.Contains(this))
            {
                previousValue.REQ_COMP1.Remove(this);
            }
    
            if (EMPRESA_FILIAL1 != null)
            {
                if (!EMPRESA_FILIAL1.REQ_COMP1.Contains(this))
                {
                    EMPRESA_FILIAL1.REQ_COMP1.Add(this);
                }
    
                ReqCompEmpCodDoc = EMPRESA_FILIAL1.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL1")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL1"] == EMPRESA_FILIAL1))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL1", previousValue);
                }
                if (EMPRESA_FILIAL1 != null && !EMPRESA_FILIAL1.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL1.StartTracking();
                }
            }
        }
    
        private void FixupEMPRESA_FILIAL2(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REQ_COMP2.Contains(this))
            {
                previousValue.REQ_COMP2.Remove(this);
            }
    
            if (EMPRESA_FILIAL2 != null)
            {
                if (!EMPRESA_FILIAL2.REQ_COMP2.Contains(this))
                {
                    EMPRESA_FILIAL2.REQ_COMP2.Add(this);
                }
    
                EmpCod = EMPRESA_FILIAL2.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL2")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL2"] == EMPRESA_FILIAL2))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL2", previousValue);
                }
                if (EMPRESA_FILIAL2 != null && !EMPRESA_FILIAL2.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL2.StartTracking();
                }
            }
        }
    
        private void FixupFUNCIONARIO(FUNCIONARIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REQ_COMP.Contains(this))
            {
                previousValue.REQ_COMP.Remove(this);
            }
    
            if (FUNCIONARIO != null)
            {
                if (!FUNCIONARIO.REQ_COMP.Contains(this))
                {
                    FUNCIONARIO.REQ_COMP.Add(this);
                }
    
                FuncCod = FUNCIONARIO.FuncCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FUNCIONARIO")
                    && (ChangeTracker.OriginalValues["FUNCIONARIO"] == FUNCIONARIO))
                {
                    ChangeTracker.OriginalValues.Remove("FUNCIONARIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FUNCIONARIO", previousValue);
                }
                if (FUNCIONARIO != null && !FUNCIONARIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    FUNCIONARIO.StartTracking();
                }
            }
        }
    
        private void FixupUSUARIO(USUARIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.REQ_COMP.Contains(this))
            {
                previousValue.REQ_COMP.Remove(this);
            }
    
            if (USUARIO != null)
            {
                if (!USUARIO.REQ_COMP.Contains(this))
                {
                    USUARIO.REQ_COMP.Add(this);
                }
    
                UsuCod = USUARIO.UsuCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("USUARIO")
                    && (ChangeTracker.OriginalValues["USUARIO"] == USUARIO))
                {
                    ChangeTracker.OriginalValues.Remove("USUARIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("USUARIO", previousValue);
                }
                if (USUARIO != null && !USUARIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    USUARIO.StartTracking();
                }
            }
        }
    
        private void FixupITEM_REQ_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_REQ_COMP item in e.NewItems)
                {
                    item.REQ_COMP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_REQ_COMP", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_REQ_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.REQ_COMP, this))
                    {
                        item.REQ_COMP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_REQ_COMP", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPED_COMP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PED_COMP item in e.NewItems)
                {
                    item.REQ_COMP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PED_COMP", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PED_COMP item in e.OldItems)
                {
                    if (ReferenceEquals(item.REQ_COMP, this))
                    {
                        item.REQ_COMP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PED_COMP", item);
                    }
                }
            }
        }

        #endregion

    }
}
