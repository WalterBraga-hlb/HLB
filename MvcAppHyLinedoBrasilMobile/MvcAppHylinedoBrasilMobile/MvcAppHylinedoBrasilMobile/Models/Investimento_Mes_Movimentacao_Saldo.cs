//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Investimento_Mes))]
    public partial class Investimento_Mes_Movimentacao_Saldo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public int IDInvestimentoMesOrigem
        {
            get { return _iDInvestimentoMesOrigem; }
            set
            {
                if (_iDInvestimentoMesOrigem != value)
                {
                    ChangeTracker.RecordOriginalValue("IDInvestimentoMesOrigem", _iDInvestimentoMesOrigem);
                    if (!IsDeserializing)
                    {
                        if (Investimento_Mes1 != null && Investimento_Mes1.ID != value)
                        {
                            Investimento_Mes1 = null;
                        }
                    }
                    _iDInvestimentoMesOrigem = value;
                    OnPropertyChanged("IDInvestimentoMesOrigem");
                }
            }
        }
        private int _iDInvestimentoMesOrigem;
    
        [DataMember]
        public int IDInvestimentoMesDestino
        {
            get { return _iDInvestimentoMesDestino; }
            set
            {
                if (_iDInvestimentoMesDestino != value)
                {
                    ChangeTracker.RecordOriginalValue("IDInvestimentoMesDestino", _iDInvestimentoMesDestino);
                    if (!IsDeserializing)
                    {
                        if (Investimento_Mes != null && Investimento_Mes.ID != value)
                        {
                            Investimento_Mes = null;
                        }
                    }
                    _iDInvestimentoMesDestino = value;
                    OnPropertyChanged("IDInvestimentoMesDestino");
                }
            }
        }
        private int _iDInvestimentoMesDestino;
    
        [DataMember]
        public decimal Valor
        {
            get { return _valor; }
            set
            {
                if (_valor != value)
                {
                    _valor = value;
                    OnPropertyChanged("Valor");
                }
            }
        }
        private decimal _valor;
    
        [DataMember]
        public string Usuario
        {
            get { return _usuario; }
            set
            {
                if (_usuario != value)
                {
                    _usuario = value;
                    OnPropertyChanged("Usuario");
                }
            }
        }
        private string _usuario;
    
        [DataMember]
        public System.DateTime DataHoraCadastro
        {
            get { return _dataHoraCadastro; }
            set
            {
                if (_dataHoraCadastro != value)
                {
                    _dataHoraCadastro = value;
                    OnPropertyChanged("DataHoraCadastro");
                }
            }
        }
        private System.DateTime _dataHoraCadastro;
    
        [DataMember]
        public string UsuarioAprovacao
        {
            get { return _usuarioAprovacao; }
            set
            {
                if (_usuarioAprovacao != value)
                {
                    _usuarioAprovacao = value;
                    OnPropertyChanged("UsuarioAprovacao");
                }
            }
        }
        private string _usuarioAprovacao;
    
        [DataMember]
        public Nullable<System.DateTime> DataHoraAprovacao
        {
            get { return _dataHoraAprovacao; }
            set
            {
                if (_dataHoraAprovacao != value)
                {
                    _dataHoraAprovacao = value;
                    OnPropertyChanged("DataHoraAprovacao");
                }
            }
        }
        private Nullable<System.DateTime> _dataHoraAprovacao;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Investimento_Mes Investimento_Mes
        {
            get { return _investimento_Mes; }
            set
            {
                if (!ReferenceEquals(_investimento_Mes, value))
                {
                    var previousValue = _investimento_Mes;
                    _investimento_Mes = value;
                    FixupInvestimento_Mes(previousValue);
                    OnNavigationPropertyChanged("Investimento_Mes");
                }
            }
        }
        private Investimento_Mes _investimento_Mes;
    
        [DataMember]
        public Investimento_Mes Investimento_Mes1
        {
            get { return _investimento_Mes1; }
            set
            {
                if (!ReferenceEquals(_investimento_Mes1, value))
                {
                    var previousValue = _investimento_Mes1;
                    _investimento_Mes1 = value;
                    FixupInvestimento_Mes1(previousValue);
                    OnNavigationPropertyChanged("Investimento_Mes1");
                }
            }
        }
        private Investimento_Mes _investimento_Mes1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Investimento_Mes = null;
            Investimento_Mes1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupInvestimento_Mes(Investimento_Mes previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Investimento_Mes_Movimentacao_Saldo.Contains(this))
            {
                previousValue.Investimento_Mes_Movimentacao_Saldo.Remove(this);
            }
    
            if (Investimento_Mes != null)
            {
                if (!Investimento_Mes.Investimento_Mes_Movimentacao_Saldo.Contains(this))
                {
                    Investimento_Mes.Investimento_Mes_Movimentacao_Saldo.Add(this);
                }
    
                IDInvestimentoMesDestino = Investimento_Mes.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Investimento_Mes")
                    && (ChangeTracker.OriginalValues["Investimento_Mes"] == Investimento_Mes))
                {
                    ChangeTracker.OriginalValues.Remove("Investimento_Mes");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Investimento_Mes", previousValue);
                }
                if (Investimento_Mes != null && !Investimento_Mes.ChangeTracker.ChangeTrackingEnabled)
                {
                    Investimento_Mes.StartTracking();
                }
            }
        }
    
        private void FixupInvestimento_Mes1(Investimento_Mes previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Investimento_Mes_Movimentacao_Saldo1.Contains(this))
            {
                previousValue.Investimento_Mes_Movimentacao_Saldo1.Remove(this);
            }
    
            if (Investimento_Mes1 != null)
            {
                if (!Investimento_Mes1.Investimento_Mes_Movimentacao_Saldo1.Contains(this))
                {
                    Investimento_Mes1.Investimento_Mes_Movimentacao_Saldo1.Add(this);
                }
    
                IDInvestimentoMesOrigem = Investimento_Mes1.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Investimento_Mes1")
                    && (ChangeTracker.OriginalValues["Investimento_Mes1"] == Investimento_Mes1))
                {
                    ChangeTracker.OriginalValues.Remove("Investimento_Mes1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Investimento_Mes1", previousValue);
                }
                if (Investimento_Mes1 != null && !Investimento_Mes1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Investimento_Mes1.StartTracking();
                }
            }
        }

        #endregion

    }
}
