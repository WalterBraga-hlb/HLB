//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ENTIDADE))]
    [KnownType(typeof(ROTA_ENTREGA_CID))]
    [KnownType(typeof(ENTIDADE1))]
    public partial class ROTA_ENTREGA_CID_ENT: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string RotaEntregaCod
        {
            get { return _rotaEntregaCod; }
            set
            {
                if (_rotaEntregaCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RotaEntregaCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ROTA_ENTREGA_CID != null && ROTA_ENTREGA_CID.RotaEntregaCod != value)
                        {
                            ROTA_ENTREGA_CID = null;
                        }
                    }
                    _rotaEntregaCod = value;
                    OnPropertyChanged("RotaEntregaCod");
                }
            }
        }
        private string _rotaEntregaCod;
    
        [DataMember]
        public string CidCod
        {
            get { return _cidCod; }
            set
            {
                if (_cidCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CidCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ROTA_ENTREGA_CID != null && ROTA_ENTREGA_CID.CidCod != value)
                        {
                            ROTA_ENTREGA_CID = null;
                        }
                    }
                    _cidCod = value;
                    OnPropertyChanged("CidCod");
                }
            }
        }
        private string _cidCod;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EntCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE != null && ENTIDADE.EntCod != value)
                        {
                            ENTIDADE = null;
                        }
                    }
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public Nullable<short> RotaEntregaCidEntSeq
        {
            get { return _rotaEntregaCidEntSeq; }
            set
            {
                if (_rotaEntregaCidEntSeq != value)
                {
                    _rotaEntregaCidEntSeq = value;
                    OnPropertyChanged("RotaEntregaCidEntSeq");
                }
            }
        }
        private Nullable<short> _rotaEntregaCidEntSeq;
    
        [DataMember]
        public string RotaEntregaCidEntPerVisita
        {
            get { return _rotaEntregaCidEntPerVisita; }
            set
            {
                if (_rotaEntregaCidEntPerVisita != value)
                {
                    _rotaEntregaCidEntPerVisita = value;
                    OnPropertyChanged("RotaEntregaCidEntPerVisita");
                }
            }
        }
        private string _rotaEntregaCidEntPerVisita;
    
        [DataMember]
        public Nullable<int> RotaEntregaCidEntFreqVisita
        {
            get { return _rotaEntregaCidEntFreqVisita; }
            set
            {
                if (_rotaEntregaCidEntFreqVisita != value)
                {
                    _rotaEntregaCidEntFreqVisita = value;
                    OnPropertyChanged("RotaEntregaCidEntFreqVisita");
                }
            }
        }
        private Nullable<int> _rotaEntregaCidEntFreqVisita;
    
        [DataMember]
        public string RotaEntregaCidEntConsidera
        {
            get { return _rotaEntregaCidEntConsidera; }
            set
            {
                if (_rotaEntregaCidEntConsidera != value)
                {
                    _rotaEntregaCidEntConsidera = value;
                    OnPropertyChanged("RotaEntregaCidEntConsidera");
                }
            }
        }
        private string _rotaEntregaCidEntConsidera;
    
        [DataMember]
        public Nullable<int> ROTAENTREGACIDENTSEQAUX
        {
            get { return _rOTAENTREGACIDENTSEQAUX; }
            set
            {
                if (_rOTAENTREGACIDENTSEQAUX != value)
                {
                    _rOTAENTREGACIDENTSEQAUX = value;
                    OnPropertyChanged("ROTAENTREGACIDENTSEQAUX");
                }
            }
        }
        private Nullable<int> _rOTAENTREGACIDENTSEQAUX;
    
        [DataMember]
        public string ROTAENTREGACIDENTSELECT
        {
            get { return _rOTAENTREGACIDENTSELECT; }
            set
            {
                if (_rOTAENTREGACIDENTSELECT != value)
                {
                    _rOTAENTREGACIDENTSELECT = value;
                    OnPropertyChanged("ROTAENTREGACIDENTSELECT");
                }
            }
        }
        private string _rOTAENTREGACIDENTSELECT;
    
        [DataMember]
        public string RotaEntrgCidEntEntEntrgAnt
        {
            get { return _rotaEntrgCidEntEntEntrgAnt; }
            set
            {
                if (_rotaEntrgCidEntEntEntrgAnt != value)
                {
                    ChangeTracker.RecordOriginalValue("RotaEntrgCidEntEntEntrgAnt", _rotaEntrgCidEntEntEntrgAnt);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE1 != null && ENTIDADE1.EntCod != value)
                        {
                            ENTIDADE1 = null;
                        }
                    }
                    _rotaEntrgCidEntEntEntrgAnt = value;
                    OnPropertyChanged("RotaEntrgCidEntEntEntrgAnt");
                }
            }
        }
        private string _rotaEntrgCidEntEntEntrgAnt;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ENTIDADE ENTIDADE
        {
            get { return _eNTIDADE; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EntCod != value.EntCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eNTIDADE;
                    _eNTIDADE = value;
                    FixupENTIDADE(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE");
                }
            }
        }
        private ENTIDADE _eNTIDADE;
    
        [DataMember]
        public ROTA_ENTREGA_CID ROTA_ENTREGA_CID
        {
            get { return _rOTA_ENTREGA_CID; }
            set
            {
                if (!ReferenceEquals(_rOTA_ENTREGA_CID, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (RotaEntregaCod != value.RotaEntregaCod || CidCod != value.CidCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _rOTA_ENTREGA_CID;
                    _rOTA_ENTREGA_CID = value;
                    FixupROTA_ENTREGA_CID(previousValue);
                    OnNavigationPropertyChanged("ROTA_ENTREGA_CID");
                }
            }
        }
        private ROTA_ENTREGA_CID _rOTA_ENTREGA_CID;
    
        [DataMember]
        public ENTIDADE1 ENTIDADE1
        {
            get { return _eNTIDADE1; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE1, value))
                {
                    var previousValue = _eNTIDADE1;
                    _eNTIDADE1 = value;
                    FixupENTIDADE1(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE1");
                }
            }
        }
        private ENTIDADE1 _eNTIDADE1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ENTIDADE = null;
            ROTA_ENTREGA_CID = null;
            ENTIDADE1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupENTIDADE(ENTIDADE previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ROTA_ENTREGA_CID_ENT.Contains(this))
            {
                previousValue.ROTA_ENTREGA_CID_ENT.Remove(this);
            }
    
            if (ENTIDADE != null)
            {
                if (!ENTIDADE.ROTA_ENTREGA_CID_ENT.Contains(this))
                {
                    ENTIDADE.ROTA_ENTREGA_CID_ENT.Add(this);
                }
    
                EntCod = ENTIDADE.EntCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE")
                    && (ChangeTracker.OriginalValues["ENTIDADE"] == ENTIDADE))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE", previousValue);
                }
                if (ENTIDADE != null && !ENTIDADE.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE.StartTracking();
                }
            }
        }
    
        private void FixupROTA_ENTREGA_CID(ROTA_ENTREGA_CID previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ROTA_ENTREGA_CID_ENT.Contains(this))
            {
                previousValue.ROTA_ENTREGA_CID_ENT.Remove(this);
            }
    
            if (ROTA_ENTREGA_CID != null)
            {
                if (!ROTA_ENTREGA_CID.ROTA_ENTREGA_CID_ENT.Contains(this))
                {
                    ROTA_ENTREGA_CID.ROTA_ENTREGA_CID_ENT.Add(this);
                }
    
                RotaEntregaCod = ROTA_ENTREGA_CID.RotaEntregaCod;
                CidCod = ROTA_ENTREGA_CID.CidCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ROTA_ENTREGA_CID")
                    && (ChangeTracker.OriginalValues["ROTA_ENTREGA_CID"] == ROTA_ENTREGA_CID))
                {
                    ChangeTracker.OriginalValues.Remove("ROTA_ENTREGA_CID");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ROTA_ENTREGA_CID", previousValue);
                }
                if (ROTA_ENTREGA_CID != null && !ROTA_ENTREGA_CID.ChangeTracker.ChangeTrackingEnabled)
                {
                    ROTA_ENTREGA_CID.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE1(ENTIDADE1 previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ROTA_ENTREGA_CID_ENT.Contains(this))
            {
                previousValue.ROTA_ENTREGA_CID_ENT.Remove(this);
            }
    
            if (ENTIDADE1 != null)
            {
                if (!ENTIDADE1.ROTA_ENTREGA_CID_ENT.Contains(this))
                {
                    ENTIDADE1.ROTA_ENTREGA_CID_ENT.Add(this);
                }
    
                RotaEntrgCidEntEntEntrgAnt = ENTIDADE1.EntCod;
            }
            else if (!skipKeys)
            {
                RotaEntrgCidEntEntEntrgAnt = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE1")
                    && (ChangeTracker.OriginalValues["ENTIDADE1"] == ENTIDADE1))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE1", previousValue);
                }
                if (ENTIDADE1 != null && !ENTIDADE1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE1.StartTracking();
                }
            }
        }

        #endregion

    }
}
