//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EMPRESA_FILIAL))]
    [KnownType(typeof(ITEM_CTRL_INV1))]
    public partial class CTRL_INV: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (EMPRESA_FILIAL != null && EMPRESA_FILIAL.EmpCod != value)
                        {
                            EMPRESA_FILIAL = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string CtrlInvNum
        {
            get { return _ctrlInvNum; }
            set
            {
                if (_ctrlInvNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CtrlInvNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _ctrlInvNum = value;
                    OnPropertyChanged("CtrlInvNum");
                }
            }
        }
        private string _ctrlInvNum;
    
        [DataMember]
        public System.DateTime CtrlInvDataEmis
        {
            get { return _ctrlInvDataEmis; }
            set
            {
                if (_ctrlInvDataEmis != value)
                {
                    _ctrlInvDataEmis = value;
                    OnPropertyChanged("CtrlInvDataEmis");
                }
            }
        }
        private System.DateTime _ctrlInvDataEmis;
    
        [DataMember]
        public System.DateTime CtrlInvDataRealiz
        {
            get { return _ctrlInvDataRealiz; }
            set
            {
                if (_ctrlInvDataRealiz != value)
                {
                    _ctrlInvDataRealiz = value;
                    OnPropertyChanged("CtrlInvDataRealiz");
                }
            }
        }
        private System.DateTime _ctrlInvDataRealiz;
    
        [DataMember]
        public string CtrlInvContag1Analisada
        {
            get { return _ctrlInvContag1Analisada; }
            set
            {
                if (_ctrlInvContag1Analisada != value)
                {
                    _ctrlInvContag1Analisada = value;
                    OnPropertyChanged("CtrlInvContag1Analisada");
                }
            }
        }
        private string _ctrlInvContag1Analisada;
    
        [DataMember]
        public string CtrlInvContag2Analisada
        {
            get { return _ctrlInvContag2Analisada; }
            set
            {
                if (_ctrlInvContag2Analisada != value)
                {
                    _ctrlInvContag2Analisada = value;
                    OnPropertyChanged("CtrlInvContag2Analisada");
                }
            }
        }
        private string _ctrlInvContag2Analisada;
    
        [DataMember]
        public string CtrlInvContag3Analisada
        {
            get { return _ctrlInvContag3Analisada; }
            set
            {
                if (_ctrlInvContag3Analisada != value)
                {
                    _ctrlInvContag3Analisada = value;
                    OnPropertyChanged("CtrlInvContag3Analisada");
                }
            }
        }
        private string _ctrlInvContag3Analisada;
    
        [DataMember]
        public string CtrlInvVisPocket
        {
            get { return _ctrlInvVisPocket; }
            set
            {
                if (_ctrlInvVisPocket != value)
                {
                    _ctrlInvVisPocket = value;
                    OnPropertyChanged("CtrlInvVisPocket");
                }
            }
        }
        private string _ctrlInvVisPocket;
    
        [DataMember]
        public Nullable<System.DateTime> CtrlInvUltDataMod
        {
            get { return _ctrlInvUltDataMod; }
            set
            {
                if (_ctrlInvUltDataMod != value)
                {
                    _ctrlInvUltDataMod = value;
                    OnPropertyChanged("CtrlInvUltDataMod");
                }
            }
        }
        private Nullable<System.DateTime> _ctrlInvUltDataMod;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public EMPRESA_FILIAL EMPRESA_FILIAL
        {
            get { return _eMPRESA_FILIAL; }
            set
            {
                if (!ReferenceEquals(_eMPRESA_FILIAL, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _eMPRESA_FILIAL;
                    _eMPRESA_FILIAL = value;
                    FixupEMPRESA_FILIAL(previousValue);
                    OnNavigationPropertyChanged("EMPRESA_FILIAL");
                }
            }
        }
        private EMPRESA_FILIAL _eMPRESA_FILIAL;
    
        [DataMember]
        public TrackableCollection<ITEM_CTRL_INV1> ITEM_CTRL_INV1
        {
            get
            {
                if (_iTEM_CTRL_INV1 == null)
                {
                    _iTEM_CTRL_INV1 = new TrackableCollection<ITEM_CTRL_INV1>();
                    _iTEM_CTRL_INV1.CollectionChanged += FixupITEM_CTRL_INV1;
                }
                return _iTEM_CTRL_INV1;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_CTRL_INV1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_CTRL_INV1 != null)
                    {
                        _iTEM_CTRL_INV1.CollectionChanged -= FixupITEM_CTRL_INV1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ITEM_CTRL_INV1 item in _iTEM_CTRL_INV1)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _iTEM_CTRL_INV1 = value;
                    if (_iTEM_CTRL_INV1 != null)
                    {
                        _iTEM_CTRL_INV1.CollectionChanged += FixupITEM_CTRL_INV1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ITEM_CTRL_INV1 item in _iTEM_CTRL_INV1)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ITEM_CTRL_INV1");
                }
            }
        }
        private TrackableCollection<ITEM_CTRL_INV1> _iTEM_CTRL_INV1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            EMPRESA_FILIAL = null;
            ITEM_CTRL_INV1.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupEMPRESA_FILIAL(EMPRESA_FILIAL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CTRL_INV.Contains(this))
            {
                previousValue.CTRL_INV.Remove(this);
            }
    
            if (EMPRESA_FILIAL != null)
            {
                if (!EMPRESA_FILIAL.CTRL_INV.Contains(this))
                {
                    EMPRESA_FILIAL.CTRL_INV.Add(this);
                }
    
                EmpCod = EMPRESA_FILIAL.EmpCod;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EMPRESA_FILIAL")
                    && (ChangeTracker.OriginalValues["EMPRESA_FILIAL"] == EMPRESA_FILIAL))
                {
                    ChangeTracker.OriginalValues.Remove("EMPRESA_FILIAL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EMPRESA_FILIAL", previousValue);
                }
                if (EMPRESA_FILIAL != null && !EMPRESA_FILIAL.ChangeTracker.ChangeTrackingEnabled)
                {
                    EMPRESA_FILIAL.StartTracking();
                }
            }
        }
    
        private void FixupITEM_CTRL_INV1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_CTRL_INV1 item in e.NewItems)
                {
                    item.CTRL_INV = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_CTRL_INV1", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_CTRL_INV1 item in e.OldItems)
                {
                    if (ReferenceEquals(item.CTRL_INV, this))
                    {
                        item.CTRL_INV = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_CTRL_INV1", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
