//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CTRL_LOTE_INV_LOC_ARM1))]
    [KnownType(typeof(ITEM_CTRL_INV1))]
    [KnownType(typeof(ENTIDADE1))]
    public partial class ITEM_CTRL_INV_LOC_ARM1: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_CTRL_INV1 != null && ITEM_CTRL_INV1.EmpCod != value)
                        {
                            ITEM_CTRL_INV1 = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string CtrlInvNum
        {
            get { return _ctrlInvNum; }
            set
            {
                if (_ctrlInvNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CtrlInvNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_CTRL_INV1 != null && ITEM_CTRL_INV1.CtrlInvNum != value)
                        {
                            ITEM_CTRL_INV1 = null;
                        }
                    }
                    _ctrlInvNum = value;
                    OnPropertyChanged("CtrlInvNum");
                }
            }
        }
        private string _ctrlInvNum;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (ITEM_CTRL_INV1 != null && ITEM_CTRL_INV1.ProdCodEstr != value)
                        {
                            ITEM_CTRL_INV1 = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public string LocArmazCodEstr
        {
            get { return _locArmazCodEstr; }
            set
            {
                if (_locArmazCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LocArmazCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _locArmazCodEstr = value;
                    OnPropertyChanged("LocArmazCodEstr");
                }
            }
        }
        private string _locArmazCodEstr;
    
        [DataMember]
        public Nullable<decimal> ItCtrlInvLocArm1Qtd
        {
            get { return _itCtrlInvLocArm1Qtd; }
            set
            {
                if (_itCtrlInvLocArm1Qtd != value)
                {
                    _itCtrlInvLocArm1Qtd = value;
                    OnPropertyChanged("ItCtrlInvLocArm1Qtd");
                }
            }
        }
        private Nullable<decimal> _itCtrlInvLocArm1Qtd;
    
        [DataMember]
        public Nullable<decimal> ItCtrlInvLocArm1QtdDifEstq
        {
            get { return _itCtrlInvLocArm1QtdDifEstq; }
            set
            {
                if (_itCtrlInvLocArm1QtdDifEstq != value)
                {
                    _itCtrlInvLocArm1QtdDifEstq = value;
                    OnPropertyChanged("ItCtrlInvLocArm1QtdDifEstq");
                }
            }
        }
        private Nullable<decimal> _itCtrlInvLocArm1QtdDifEstq;
    
        [DataMember]
        public Nullable<System.DateTime> ItCtrlInvLocArm1DataDig
        {
            get { return _itCtrlInvLocArm1DataDig; }
            set
            {
                if (_itCtrlInvLocArm1DataDig != value)
                {
                    _itCtrlInvLocArm1DataDig = value;
                    OnPropertyChanged("ItCtrlInvLocArm1DataDig");
                }
            }
        }
        private Nullable<System.DateTime> _itCtrlInvLocArm1DataDig;
    
        [DataMember]
        public Nullable<System.DateTime> ItCtrlInvLocArm1DataContag
        {
            get { return _itCtrlInvLocArm1DataContag; }
            set
            {
                if (_itCtrlInvLocArm1DataContag != value)
                {
                    _itCtrlInvLocArm1DataContag = value;
                    OnPropertyChanged("ItCtrlInvLocArm1DataContag");
                }
            }
        }
        private Nullable<System.DateTime> _itCtrlInvLocArm1DataContag;
    
        [DataMember]
        public string ItCtrlInvLocArm1Analisado
        {
            get { return _itCtrlInvLocArm1Analisado; }
            set
            {
                if (_itCtrlInvLocArm1Analisado != value)
                {
                    _itCtrlInvLocArm1Analisado = value;
                    OnPropertyChanged("ItCtrlInvLocArm1Analisado");
                }
            }
        }
        private string _itCtrlInvLocArm1Analisado;
    
        [DataMember]
        public Nullable<int> ItCtrlInvLocArm1Seq
        {
            get { return _itCtrlInvLocArm1Seq; }
            set
            {
                if (_itCtrlInvLocArm1Seq != value)
                {
                    _itCtrlInvLocArm1Seq = value;
                    OnPropertyChanged("ItCtrlInvLocArm1Seq");
                }
            }
        }
        private Nullable<int> _itCtrlInvLocArm1Seq;
    
        [DataMember]
        public string EntCod
        {
            get { return _entCod; }
            set
            {
                if (_entCod != value)
                {
                    ChangeTracker.RecordOriginalValue("EntCod", _entCod);
                    if (!IsDeserializing)
                    {
                        if (ENTIDADE1 != null && ENTIDADE1.EntCod != value)
                        {
                            ENTIDADE1 = null;
                        }
                    }
                    _entCod = value;
                    OnPropertyChanged("EntCod");
                }
            }
        }
        private string _entCod;
    
        [DataMember]
        public string UsuCod
        {
            get { return _usuCod; }
            set
            {
                if (_usuCod != value)
                {
                    _usuCod = value;
                    OnPropertyChanged("UsuCod");
                }
            }
        }
        private string _usuCod;
    
        [DataMember]
        public string ITCTRLINVLOCARM1PRODCODALT
        {
            get { return _iTCTRLINVLOCARM1PRODCODALT; }
            set
            {
                if (_iTCTRLINVLOCARM1PRODCODALT != value)
                {
                    _iTCTRLINVLOCARM1PRODCODALT = value;
                    OnPropertyChanged("ITCTRLINVLOCARM1PRODCODALT");
                }
            }
        }
        private string _iTCTRLINVLOCARM1PRODCODALT;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CTRL_LOTE_INV_LOC_ARM1> CTRL_LOTE_INV_LOC_ARM1
        {
            get
            {
                if (_cTRL_LOTE_INV_LOC_ARM1 == null)
                {
                    _cTRL_LOTE_INV_LOC_ARM1 = new TrackableCollection<CTRL_LOTE_INV_LOC_ARM1>();
                    _cTRL_LOTE_INV_LOC_ARM1.CollectionChanged += FixupCTRL_LOTE_INV_LOC_ARM1;
                }
                return _cTRL_LOTE_INV_LOC_ARM1;
            }
            set
            {
                if (!ReferenceEquals(_cTRL_LOTE_INV_LOC_ARM1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cTRL_LOTE_INV_LOC_ARM1 != null)
                    {
                        _cTRL_LOTE_INV_LOC_ARM1.CollectionChanged -= FixupCTRL_LOTE_INV_LOC_ARM1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CTRL_LOTE_INV_LOC_ARM1 item in _cTRL_LOTE_INV_LOC_ARM1)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _cTRL_LOTE_INV_LOC_ARM1 = value;
                    if (_cTRL_LOTE_INV_LOC_ARM1 != null)
                    {
                        _cTRL_LOTE_INV_LOC_ARM1.CollectionChanged += FixupCTRL_LOTE_INV_LOC_ARM1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CTRL_LOTE_INV_LOC_ARM1 item in _cTRL_LOTE_INV_LOC_ARM1)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CTRL_LOTE_INV_LOC_ARM1");
                }
            }
        }
        private TrackableCollection<CTRL_LOTE_INV_LOC_ARM1> _cTRL_LOTE_INV_LOC_ARM1;
    
        [DataMember]
        public ITEM_CTRL_INV1 ITEM_CTRL_INV1
        {
            get { return _iTEM_CTRL_INV1; }
            set
            {
                if (!ReferenceEquals(_iTEM_CTRL_INV1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || CtrlInvNum != value.CtrlInvNum || ProdCodEstr != value.ProdCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _iTEM_CTRL_INV1;
                    _iTEM_CTRL_INV1 = value;
                    FixupITEM_CTRL_INV1(previousValue);
                    OnNavigationPropertyChanged("ITEM_CTRL_INV1");
                }
            }
        }
        private ITEM_CTRL_INV1 _iTEM_CTRL_INV1;
    
        [DataMember]
        public ENTIDADE1 ENTIDADE1
        {
            get { return _eNTIDADE1; }
            set
            {
                if (!ReferenceEquals(_eNTIDADE1, value))
                {
                    var previousValue = _eNTIDADE1;
                    _eNTIDADE1 = value;
                    FixupENTIDADE1(previousValue);
                    OnNavigationPropertyChanged("ENTIDADE1");
                }
            }
        }
        private ENTIDADE1 _eNTIDADE1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CTRL_LOTE_INV_LOC_ARM1.Clear();
            ITEM_CTRL_INV1 = null;
            ENTIDADE1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupITEM_CTRL_INV1(ITEM_CTRL_INV1 previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ITEM_CTRL_INV_LOC_ARM1.Contains(this))
            {
                previousValue.ITEM_CTRL_INV_LOC_ARM1.Remove(this);
            }
    
            if (ITEM_CTRL_INV1 != null)
            {
                if (!ITEM_CTRL_INV1.ITEM_CTRL_INV_LOC_ARM1.Contains(this))
                {
                    ITEM_CTRL_INV1.ITEM_CTRL_INV_LOC_ARM1.Add(this);
                }
    
                EmpCod = ITEM_CTRL_INV1.EmpCod;
                CtrlInvNum = ITEM_CTRL_INV1.CtrlInvNum;
                ProdCodEstr = ITEM_CTRL_INV1.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ITEM_CTRL_INV1")
                    && (ChangeTracker.OriginalValues["ITEM_CTRL_INV1"] == ITEM_CTRL_INV1))
                {
                    ChangeTracker.OriginalValues.Remove("ITEM_CTRL_INV1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ITEM_CTRL_INV1", previousValue);
                }
                if (ITEM_CTRL_INV1 != null && !ITEM_CTRL_INV1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ITEM_CTRL_INV1.StartTracking();
                }
            }
        }
    
        private void FixupENTIDADE1(ENTIDADE1 previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ITEM_CTRL_INV_LOC_ARM1.Contains(this))
            {
                previousValue.ITEM_CTRL_INV_LOC_ARM1.Remove(this);
            }
    
            if (ENTIDADE1 != null)
            {
                if (!ENTIDADE1.ITEM_CTRL_INV_LOC_ARM1.Contains(this))
                {
                    ENTIDADE1.ITEM_CTRL_INV_LOC_ARM1.Add(this);
                }
    
                EntCod = ENTIDADE1.EntCod;
            }
            else if (!skipKeys)
            {
                EntCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ENTIDADE1")
                    && (ChangeTracker.OriginalValues["ENTIDADE1"] == ENTIDADE1))
                {
                    ChangeTracker.OriginalValues.Remove("ENTIDADE1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ENTIDADE1", previousValue);
                }
                if (ENTIDADE1 != null && !ENTIDADE1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ENTIDADE1.StartTracking();
                }
            }
        }
    
        private void FixupCTRL_LOTE_INV_LOC_ARM1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CTRL_LOTE_INV_LOC_ARM1 item in e.NewItems)
                {
                    item.ITEM_CTRL_INV_LOC_ARM1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CTRL_LOTE_INV_LOC_ARM1", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CTRL_LOTE_INV_LOC_ARM1 item in e.OldItems)
                {
                    if (ReferenceEquals(item.ITEM_CTRL_INV_LOC_ARM1, this))
                    {
                        item.ITEM_CTRL_INV_LOC_ARM1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CTRL_LOTE_INV_LOC_ARM1", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
