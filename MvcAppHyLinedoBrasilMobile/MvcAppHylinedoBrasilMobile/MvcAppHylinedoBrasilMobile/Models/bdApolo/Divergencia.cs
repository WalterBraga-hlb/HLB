//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo
{
    [DataContract(IsReference = true)]
    public partial class Divergencia: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public Nullable<decimal> Saldo_Estq_Data
        {
            get { return _saldo_Estq_Data; }
            set
            {
                if (_saldo_Estq_Data != value)
                {
                    _saldo_Estq_Data = value;
                    OnPropertyChanged("Saldo_Estq_Data");
                }
            }
        }
        private Nullable<decimal> _saldo_Estq_Data;
    
        [DataMember]
        public Nullable<decimal> Saldo_Estq_Data_Loc_Armaz
        {
            get { return _saldo_Estq_Data_Loc_Armaz; }
            set
            {
                if (_saldo_Estq_Data_Loc_Armaz != value)
                {
                    _saldo_Estq_Data_Loc_Armaz = value;
                    OnPropertyChanged("Saldo_Estq_Data_Loc_Armaz");
                }
            }
        }
        private Nullable<decimal> _saldo_Estq_Data_Loc_Armaz;
    
        [DataMember]
        public Nullable<decimal> Estq_Loc_Armaz
        {
            get { return _estq_Loc_Armaz; }
            set
            {
                if (_estq_Loc_Armaz != value)
                {
                    _estq_Loc_Armaz = value;
                    OnPropertyChanged("Estq_Loc_Armaz");
                }
            }
        }
        private Nullable<decimal> _estq_Loc_Armaz;
    
        [DataMember]
        public Nullable<decimal> Loc_Armaz_Item_Mov_Estq
        {
            get { return _loc_Armaz_Item_Mov_Estq; }
            set
            {
                if (_loc_Armaz_Item_Mov_Estq != value)
                {
                    _loc_Armaz_Item_Mov_Estq = value;
                    OnPropertyChanged("Loc_Armaz_Item_Mov_Estq");
                }
            }
        }
        private Nullable<decimal> _loc_Armaz_Item_Mov_Estq;
    
        [DataMember]
        public Nullable<decimal> Saldo_Estq_Data_Loc_Armaz_Lote
        {
            get { return _saldo_Estq_Data_Loc_Armaz_Lote; }
            set
            {
                if (_saldo_Estq_Data_Loc_Armaz_Lote != value)
                {
                    _saldo_Estq_Data_Loc_Armaz_Lote = value;
                    OnPropertyChanged("Saldo_Estq_Data_Loc_Armaz_Lote");
                }
            }
        }
        private Nullable<decimal> _saldo_Estq_Data_Loc_Armaz_Lote;
    
        [DataMember]
        public Nullable<decimal> Ctrl_Lote_Item_Mov_Estq
        {
            get { return _ctrl_Lote_Item_Mov_Estq; }
            set
            {
                if (_ctrl_Lote_Item_Mov_Estq != value)
                {
                    _ctrl_Lote_Item_Mov_Estq = value;
                    OnPropertyChanged("Ctrl_Lote_Item_Mov_Estq");
                }
            }
        }
        private Nullable<decimal> _ctrl_Lote_Item_Mov_Estq;
    
        [DataMember]
        public Nullable<decimal> Ctrl_Lote_LOC_ARMAZ
        {
            get { return _ctrl_Lote_LOC_ARMAZ; }
            set
            {
                if (_ctrl_Lote_LOC_ARMAZ != value)
                {
                    _ctrl_Lote_LOC_ARMAZ = value;
                    OnPropertyChanged("Ctrl_Lote_LOC_ARMAZ");
                }
            }
        }
        private Nullable<decimal> _ctrl_Lote_LOC_ARMAZ;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
