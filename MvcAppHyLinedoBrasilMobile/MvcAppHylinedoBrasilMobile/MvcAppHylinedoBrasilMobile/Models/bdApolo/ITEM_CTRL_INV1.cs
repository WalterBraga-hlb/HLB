//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CTRL_INV))]
    [KnownType(typeof(ITEM_CTRL_INV_LOC_ARM1))]
    [KnownType(typeof(PRODUTO1))]
    public partial class ITEM_CTRL_INV1: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EmpCod
        {
            get { return _empCod; }
            set
            {
                if (_empCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmpCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (CTRL_INV != null && CTRL_INV.EmpCod != value)
                        {
                            CTRL_INV = null;
                        }
                    }
                    _empCod = value;
                    OnPropertyChanged("EmpCod");
                }
            }
        }
        private string _empCod;
    
        [DataMember]
        public string CtrlInvNum
        {
            get { return _ctrlInvNum; }
            set
            {
                if (_ctrlInvNum != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CtrlInvNum' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (CTRL_INV != null && CTRL_INV.CtrlInvNum != value)
                        {
                            CTRL_INV = null;
                        }
                    }
                    _ctrlInvNum = value;
                    OnPropertyChanged("CtrlInvNum");
                }
            }
        }
        private string _ctrlInvNum;
    
        [DataMember]
        public string ProdCodEstr
        {
            get { return _prodCodEstr; }
            set
            {
                if (_prodCodEstr != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProdCodEstr' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PRODUTO1 != null && PRODUTO1.ProdCodEstr != value)
                        {
                            PRODUTO1 = null;
                        }
                    }
                    _prodCodEstr = value;
                    OnPropertyChanged("ProdCodEstr");
                }
            }
        }
        private string _prodCodEstr;
    
        [DataMember]
        public Nullable<decimal> ItCtrlInv1Qtd
        {
            get { return _itCtrlInv1Qtd; }
            set
            {
                if (_itCtrlInv1Qtd != value)
                {
                    _itCtrlInv1Qtd = value;
                    OnPropertyChanged("ItCtrlInv1Qtd");
                }
            }
        }
        private Nullable<decimal> _itCtrlInv1Qtd;
    
        [DataMember]
        public Nullable<decimal> ItCtrlInv1QtdDifEstq
        {
            get { return _itCtrlInv1QtdDifEstq; }
            set
            {
                if (_itCtrlInv1QtdDifEstq != value)
                {
                    _itCtrlInv1QtdDifEstq = value;
                    OnPropertyChanged("ItCtrlInv1QtdDifEstq");
                }
            }
        }
        private Nullable<decimal> _itCtrlInv1QtdDifEstq;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CTRL_INV CTRL_INV
        {
            get { return _cTRL_INV; }
            set
            {
                if (!ReferenceEquals(_cTRL_INV, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (EmpCod != value.EmpCod || CtrlInvNum != value.CtrlInvNum)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _cTRL_INV;
                    _cTRL_INV = value;
                    FixupCTRL_INV(previousValue);
                    OnNavigationPropertyChanged("CTRL_INV");
                }
            }
        }
        private CTRL_INV _cTRL_INV;
    
        [DataMember]
        public TrackableCollection<ITEM_CTRL_INV_LOC_ARM1> ITEM_CTRL_INV_LOC_ARM1
        {
            get
            {
                if (_iTEM_CTRL_INV_LOC_ARM1 == null)
                {
                    _iTEM_CTRL_INV_LOC_ARM1 = new TrackableCollection<ITEM_CTRL_INV_LOC_ARM1>();
                    _iTEM_CTRL_INV_LOC_ARM1.CollectionChanged += FixupITEM_CTRL_INV_LOC_ARM1;
                }
                return _iTEM_CTRL_INV_LOC_ARM1;
            }
            set
            {
                if (!ReferenceEquals(_iTEM_CTRL_INV_LOC_ARM1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM_CTRL_INV_LOC_ARM1 != null)
                    {
                        _iTEM_CTRL_INV_LOC_ARM1.CollectionChanged -= FixupITEM_CTRL_INV_LOC_ARM1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ITEM_CTRL_INV_LOC_ARM1 item in _iTEM_CTRL_INV_LOC_ARM1)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _iTEM_CTRL_INV_LOC_ARM1 = value;
                    if (_iTEM_CTRL_INV_LOC_ARM1 != null)
                    {
                        _iTEM_CTRL_INV_LOC_ARM1.CollectionChanged += FixupITEM_CTRL_INV_LOC_ARM1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ITEM_CTRL_INV_LOC_ARM1 item in _iTEM_CTRL_INV_LOC_ARM1)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ITEM_CTRL_INV_LOC_ARM1");
                }
            }
        }
        private TrackableCollection<ITEM_CTRL_INV_LOC_ARM1> _iTEM_CTRL_INV_LOC_ARM1;
    
        [DataMember]
        public PRODUTO1 PRODUTO1
        {
            get { return _pRODUTO1; }
            set
            {
                if (!ReferenceEquals(_pRODUTO1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProdCodEstr != value.ProdCodEstr)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pRODUTO1;
                    _pRODUTO1 = value;
                    FixupPRODUTO1(previousValue);
                    OnNavigationPropertyChanged("PRODUTO1");
                }
            }
        }
        private PRODUTO1 _pRODUTO1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CTRL_INV = null;
            ITEM_CTRL_INV_LOC_ARM1.Clear();
            PRODUTO1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCTRL_INV(CTRL_INV previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ITEM_CTRL_INV1.Contains(this))
            {
                previousValue.ITEM_CTRL_INV1.Remove(this);
            }
    
            if (CTRL_INV != null)
            {
                if (!CTRL_INV.ITEM_CTRL_INV1.Contains(this))
                {
                    CTRL_INV.ITEM_CTRL_INV1.Add(this);
                }
    
                EmpCod = CTRL_INV.EmpCod;
                CtrlInvNum = CTRL_INV.CtrlInvNum;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CTRL_INV")
                    && (ChangeTracker.OriginalValues["CTRL_INV"] == CTRL_INV))
                {
                    ChangeTracker.OriginalValues.Remove("CTRL_INV");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CTRL_INV", previousValue);
                }
                if (CTRL_INV != null && !CTRL_INV.ChangeTracker.ChangeTrackingEnabled)
                {
                    CTRL_INV.StartTracking();
                }
            }
        }
    
        private void FixupPRODUTO1(PRODUTO1 previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ITEM_CTRL_INV1.Contains(this))
            {
                previousValue.ITEM_CTRL_INV1.Remove(this);
            }
    
            if (PRODUTO1 != null)
            {
                if (!PRODUTO1.ITEM_CTRL_INV1.Contains(this))
                {
                    PRODUTO1.ITEM_CTRL_INV1.Add(this);
                }
    
                ProdCodEstr = PRODUTO1.ProdCodEstr;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUTO1")
                    && (ChangeTracker.OriginalValues["PRODUTO1"] == PRODUTO1))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUTO1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUTO1", previousValue);
                }
                if (PRODUTO1 != null && !PRODUTO1.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUTO1.StartTracking();
                }
            }
        }
    
        private void FixupITEM_CTRL_INV_LOC_ARM1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM_CTRL_INV_LOC_ARM1 item in e.NewItems)
                {
                    item.ITEM_CTRL_INV1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM_CTRL_INV_LOC_ARM1", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM_CTRL_INV_LOC_ARM1 item in e.OldItems)
                {
                    if (ReferenceEquals(item.ITEM_CTRL_INV1, this))
                    {
                        item.ITEM_CTRL_INV1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM_CTRL_INV_LOC_ARM1", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
