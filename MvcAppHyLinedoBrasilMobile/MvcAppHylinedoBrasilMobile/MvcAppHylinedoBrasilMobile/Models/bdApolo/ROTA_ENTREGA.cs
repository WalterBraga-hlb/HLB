//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ROTA_ENTREGA_CID))]
    [KnownType(typeof(VENDEDOR))]
    public partial class ROTA_ENTREGA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string RotaEntregaCod
        {
            get { return _rotaEntregaCod; }
            set
            {
                if (_rotaEntregaCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RotaEntregaCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rotaEntregaCod = value;
                    OnPropertyChanged("RotaEntregaCod");
                }
            }
        }
        private string _rotaEntregaCod;
    
        [DataMember]
        public string RotaEntregaNome
        {
            get { return _rotaEntregaNome; }
            set
            {
                if (_rotaEntregaNome != value)
                {
                    _rotaEntregaNome = value;
                    OnPropertyChanged("RotaEntregaNome");
                }
            }
        }
        private string _rotaEntregaNome;
    
        [DataMember]
        public string RotaEntregaObs
        {
            get { return _rotaEntregaObs; }
            set
            {
                if (_rotaEntregaObs != value)
                {
                    _rotaEntregaObs = value;
                    OnPropertyChanged("RotaEntregaObs");
                }
            }
        }
        private string _rotaEntregaObs;
    
        [DataMember]
        public string FuncCod
        {
            get { return _funcCod; }
            set
            {
                if (_funcCod != value)
                {
                    _funcCod = value;
                    OnPropertyChanged("FuncCod");
                }
            }
        }
        private string _funcCod;
    
        [DataMember]
        public string RotaEntregaTipo
        {
            get { return _rotaEntregaTipo; }
            set
            {
                if (_rotaEntregaTipo != value)
                {
                    _rotaEntregaTipo = value;
                    OnPropertyChanged("RotaEntregaTipo");
                }
            }
        }
        private string _rotaEntregaTipo;
    
        [DataMember]
        public string OndaCod
        {
            get { return _ondaCod; }
            set
            {
                if (_ondaCod != value)
                {
                    _ondaCod = value;
                    OnPropertyChanged("OndaCod");
                }
            }
        }
        private string _ondaCod;
    
        [DataMember]
        public string CorredorCod
        {
            get { return _corredorCod; }
            set
            {
                if (_corredorCod != value)
                {
                    _corredorCod = value;
                    OnPropertyChanged("CorredorCod");
                }
            }
        }
        private string _corredorCod;
    
        [DataMember]
        public Nullable<int> RotaEntregaQtdMaxPedVenda
        {
            get { return _rotaEntregaQtdMaxPedVenda; }
            set
            {
                if (_rotaEntregaQtdMaxPedVenda != value)
                {
                    _rotaEntregaQtdMaxPedVenda = value;
                    OnPropertyChanged("RotaEntregaQtdMaxPedVenda");
                }
            }
        }
        private Nullable<int> _rotaEntregaQtdMaxPedVenda;
    
        [DataMember]
        public string RotaEntregaGeraBloqHoraOnda
        {
            get { return _rotaEntregaGeraBloqHoraOnda; }
            set
            {
                if (_rotaEntregaGeraBloqHoraOnda != value)
                {
                    _rotaEntregaGeraBloqHoraOnda = value;
                    OnPropertyChanged("RotaEntregaGeraBloqHoraOnda");
                }
            }
        }
        private string _rotaEntregaGeraBloqHoraOnda;
    
        [DataMember]
        public string RotaEntregaDomingo
        {
            get { return _rotaEntregaDomingo; }
            set
            {
                if (_rotaEntregaDomingo != value)
                {
                    _rotaEntregaDomingo = value;
                    OnPropertyChanged("RotaEntregaDomingo");
                }
            }
        }
        private string _rotaEntregaDomingo;
    
        [DataMember]
        public string RotaEntregaSegunda
        {
            get { return _rotaEntregaSegunda; }
            set
            {
                if (_rotaEntregaSegunda != value)
                {
                    _rotaEntregaSegunda = value;
                    OnPropertyChanged("RotaEntregaSegunda");
                }
            }
        }
        private string _rotaEntregaSegunda;
    
        [DataMember]
        public string RotaEntregaTerca
        {
            get { return _rotaEntregaTerca; }
            set
            {
                if (_rotaEntregaTerca != value)
                {
                    _rotaEntregaTerca = value;
                    OnPropertyChanged("RotaEntregaTerca");
                }
            }
        }
        private string _rotaEntregaTerca;
    
        [DataMember]
        public string RotaEntregaQuarta
        {
            get { return _rotaEntregaQuarta; }
            set
            {
                if (_rotaEntregaQuarta != value)
                {
                    _rotaEntregaQuarta = value;
                    OnPropertyChanged("RotaEntregaQuarta");
                }
            }
        }
        private string _rotaEntregaQuarta;
    
        [DataMember]
        public string RotaEntregaQuinta
        {
            get { return _rotaEntregaQuinta; }
            set
            {
                if (_rotaEntregaQuinta != value)
                {
                    _rotaEntregaQuinta = value;
                    OnPropertyChanged("RotaEntregaQuinta");
                }
            }
        }
        private string _rotaEntregaQuinta;
    
        [DataMember]
        public string RotaEntregaSexta
        {
            get { return _rotaEntregaSexta; }
            set
            {
                if (_rotaEntregaSexta != value)
                {
                    _rotaEntregaSexta = value;
                    OnPropertyChanged("RotaEntregaSexta");
                }
            }
        }
        private string _rotaEntregaSexta;
    
        [DataMember]
        public string RotaEntregaSabado
        {
            get { return _rotaEntregaSabado; }
            set
            {
                if (_rotaEntregaSabado != value)
                {
                    _rotaEntregaSabado = value;
                    OnPropertyChanged("RotaEntregaSabado");
                }
            }
        }
        private string _rotaEntregaSabado;
    
        [DataMember]
        public string VendCod
        {
            get { return _vendCod; }
            set
            {
                if (_vendCod != value)
                {
                    ChangeTracker.RecordOriginalValue("VendCod", _vendCod);
                    if (!IsDeserializing)
                    {
                        if (VENDEDOR != null && VENDEDOR.VendCod != value)
                        {
                            VENDEDOR = null;
                        }
                    }
                    _vendCod = value;
                    OnPropertyChanged("VendCod");
                }
            }
        }
        private string _vendCod;
    
        [DataMember]
        public string USUCOD
        {
            get { return _uSUCOD; }
            set
            {
                if (_uSUCOD != value)
                {
                    _uSUCOD = value;
                    OnPropertyChanged("USUCOD");
                }
            }
        }
        private string _uSUCOD;
    
        [DataMember]
        public Nullable<int> ROTAENTREGADIASEMANA
        {
            get { return _rOTAENTREGADIASEMANA; }
            set
            {
                if (_rOTAENTREGADIASEMANA != value)
                {
                    _rOTAENTREGADIASEMANA = value;
                    OnPropertyChanged("ROTAENTREGADIASEMANA");
                }
            }
        }
        private Nullable<int> _rOTAENTREGADIASEMANA;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ROTA_ENTREGA_CID> ROTA_ENTREGA_CID
        {
            get
            {
                if (_rOTA_ENTREGA_CID == null)
                {
                    _rOTA_ENTREGA_CID = new TrackableCollection<ROTA_ENTREGA_CID>();
                    _rOTA_ENTREGA_CID.CollectionChanged += FixupROTA_ENTREGA_CID;
                }
                return _rOTA_ENTREGA_CID;
            }
            set
            {
                if (!ReferenceEquals(_rOTA_ENTREGA_CID, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rOTA_ENTREGA_CID != null)
                    {
                        _rOTA_ENTREGA_CID.CollectionChanged -= FixupROTA_ENTREGA_CID;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ROTA_ENTREGA_CID item in _rOTA_ENTREGA_CID)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rOTA_ENTREGA_CID = value;
                    if (_rOTA_ENTREGA_CID != null)
                    {
                        _rOTA_ENTREGA_CID.CollectionChanged += FixupROTA_ENTREGA_CID;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ROTA_ENTREGA_CID item in _rOTA_ENTREGA_CID)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ROTA_ENTREGA_CID");
                }
            }
        }
        private TrackableCollection<ROTA_ENTREGA_CID> _rOTA_ENTREGA_CID;
    
        [DataMember]
        public VENDEDOR VENDEDOR
        {
            get { return _vENDEDOR; }
            set
            {
                if (!ReferenceEquals(_vENDEDOR, value))
                {
                    var previousValue = _vENDEDOR;
                    _vENDEDOR = value;
                    FixupVENDEDOR(previousValue);
                    OnNavigationPropertyChanged("VENDEDOR");
                }
            }
        }
        private VENDEDOR _vENDEDOR;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ROTA_ENTREGA_CID.Clear();
            VENDEDOR = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupVENDEDOR(VENDEDOR previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ROTA_ENTREGA.Contains(this))
            {
                previousValue.ROTA_ENTREGA.Remove(this);
            }
    
            if (VENDEDOR != null)
            {
                if (!VENDEDOR.ROTA_ENTREGA.Contains(this))
                {
                    VENDEDOR.ROTA_ENTREGA.Add(this);
                }
    
                VendCod = VENDEDOR.VendCod;
            }
            else if (!skipKeys)
            {
                VendCod = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VENDEDOR")
                    && (ChangeTracker.OriginalValues["VENDEDOR"] == VENDEDOR))
                {
                    ChangeTracker.OriginalValues.Remove("VENDEDOR");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VENDEDOR", previousValue);
                }
                if (VENDEDOR != null && !VENDEDOR.ChangeTracker.ChangeTrackingEnabled)
                {
                    VENDEDOR.StartTracking();
                }
            }
        }
    
        private void FixupROTA_ENTREGA_CID(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ROTA_ENTREGA_CID item in e.NewItems)
                {
                    item.ROTA_ENTREGA = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ROTA_ENTREGA_CID", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ROTA_ENTREGA_CID item in e.OldItems)
                {
                    if (ReferenceEquals(item.ROTA_ENTREGA, this))
                    {
                        item.ROTA_ENTREGA = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ROTA_ENTREGA_CID", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
