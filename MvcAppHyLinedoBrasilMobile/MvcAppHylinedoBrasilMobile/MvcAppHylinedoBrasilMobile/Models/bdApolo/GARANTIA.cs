//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models.bdApolo
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PRODUTO))]
    public partial class GARANTIA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string GarCod
        {
            get { return _garCod; }
            set
            {
                if (_garCod != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'GarCod' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _garCod = value;
                    OnPropertyChanged("GarCod");
                }
            }
        }
        private string _garCod;
    
        [DataMember]
        public string GarDescr
        {
            get { return _garDescr; }
            set
            {
                if (_garDescr != value)
                {
                    _garDescr = value;
                    OnPropertyChanged("GarDescr");
                }
            }
        }
        private string _garDescr;
    
        [DataMember]
        public Nullable<short> GarPrazo
        {
            get { return _garPrazo; }
            set
            {
                if (_garPrazo != value)
                {
                    _garPrazo = value;
                    OnPropertyChanged("GarPrazo");
                }
            }
        }
        private Nullable<short> _garPrazo;
    
        [DataMember]
        public string GarPrazoTipo
        {
            get { return _garPrazoTipo; }
            set
            {
                if (_garPrazoTipo != value)
                {
                    _garPrazoTipo = value;
                    OnPropertyChanged("GarPrazoTipo");
                }
            }
        }
        private string _garPrazoTipo;
    
        [DataMember]
        public string GarResp
        {
            get { return _garResp; }
            set
            {
                if (_garResp != value)
                {
                    _garResp = value;
                    OnPropertyChanged("GarResp");
                }
            }
        }
        private string _garResp;
    
        [DataMember]
        public string GarObs
        {
            get { return _garObs; }
            set
            {
                if (_garObs != value)
                {
                    _garObs = value;
                    OnPropertyChanged("GarObs");
                }
            }
        }
        private string _garObs;
    
        [DataMember]
        public string GarEntradaDataInic
        {
            get { return _garEntradaDataInic; }
            set
            {
                if (_garEntradaDataInic != value)
                {
                    _garEntradaDataInic = value;
                    OnPropertyChanged("GarEntradaDataInic");
                }
            }
        }
        private string _garEntradaDataInic;
    
        [DataMember]
        public string GarSaidaDataInic
        {
            get { return _garSaidaDataInic; }
            set
            {
                if (_garSaidaDataInic != value)
                {
                    _garSaidaDataInic = value;
                    OnPropertyChanged("GarSaidaDataInic");
                }
            }
        }
        private string _garSaidaDataInic;
    
        [DataMember]
        public Nullable<decimal> USERAprovOvosAveAlojMin
        {
            get { return _uSERAprovOvosAveAlojMin; }
            set
            {
                if (_uSERAprovOvosAveAlojMin != value)
                {
                    _uSERAprovOvosAveAlojMin = value;
                    OnPropertyChanged("USERAprovOvosAveAlojMin");
                }
            }
        }
        private Nullable<decimal> _uSERAprovOvosAveAlojMin;
    
        [DataMember]
        public Nullable<decimal> USERAprovOvosAveAlojMax
        {
            get { return _uSERAprovOvosAveAlojMax; }
            set
            {
                if (_uSERAprovOvosAveAlojMax != value)
                {
                    _uSERAprovOvosAveAlojMax = value;
                    OnPropertyChanged("USERAprovOvosAveAlojMax");
                }
            }
        }
        private Nullable<decimal> _uSERAprovOvosAveAlojMax;
    
        [DataMember]
        public Nullable<short> USERIdadeMinima
        {
            get { return _uSERIdadeMinima; }
            set
            {
                if (_uSERIdadeMinima != value)
                {
                    _uSERIdadeMinima = value;
                    OnPropertyChanged("USERIdadeMinima");
                }
            }
        }
        private Nullable<short> _uSERIdadeMinima;
    
        [DataMember]
        public Nullable<short> USERIdadeMaxima
        {
            get { return _uSERIdadeMaxima; }
            set
            {
                if (_uSERIdadeMaxima != value)
                {
                    _uSERIdadeMaxima = value;
                    OnPropertyChanged("USERIdadeMaxima");
                }
            }
        }
        private Nullable<short> _uSERIdadeMaxima;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<PRODUTO> PRODUTO
        {
            get
            {
                if (_pRODUTO == null)
                {
                    _pRODUTO = new TrackableCollection<PRODUTO>();
                    _pRODUTO.CollectionChanged += FixupPRODUTO;
                }
                return _pRODUTO;
            }
            set
            {
                if (!ReferenceEquals(_pRODUTO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pRODUTO != null)
                    {
                        _pRODUTO.CollectionChanged -= FixupPRODUTO;
                    }
                    _pRODUTO = value;
                    if (_pRODUTO != null)
                    {
                        _pRODUTO.CollectionChanged += FixupPRODUTO;
                    }
                    OnNavigationPropertyChanged("PRODUTO");
                }
            }
        }
        private TrackableCollection<PRODUTO> _pRODUTO;
    
        [DataMember]
        public TrackableCollection<PRODUTO> PRODUTO1
        {
            get
            {
                if (_pRODUTO1 == null)
                {
                    _pRODUTO1 = new TrackableCollection<PRODUTO>();
                    _pRODUTO1.CollectionChanged += FixupPRODUTO1;
                }
                return _pRODUTO1;
            }
            set
            {
                if (!ReferenceEquals(_pRODUTO1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pRODUTO1 != null)
                    {
                        _pRODUTO1.CollectionChanged -= FixupPRODUTO1;
                    }
                    _pRODUTO1 = value;
                    if (_pRODUTO1 != null)
                    {
                        _pRODUTO1.CollectionChanged += FixupPRODUTO1;
                    }
                    OnNavigationPropertyChanged("PRODUTO1");
                }
            }
        }
        private TrackableCollection<PRODUTO> _pRODUTO1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PRODUTO.Clear();
            PRODUTO1.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupPRODUTO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PRODUTO item in e.NewItems)
                {
                    item.GARANTIA = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PRODUTO", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PRODUTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.GARANTIA, this))
                    {
                        item.GARANTIA = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PRODUTO", item);
                    }
                }
            }
        }
    
        private void FixupPRODUTO1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PRODUTO item in e.NewItems)
                {
                    item.GARANTIA1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PRODUTO1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PRODUTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.GARANTIA1, this))
                    {
                        item.GARANTIA1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PRODUTO1", item);
                    }
                }
            }
        }

        #endregion

    }
}
