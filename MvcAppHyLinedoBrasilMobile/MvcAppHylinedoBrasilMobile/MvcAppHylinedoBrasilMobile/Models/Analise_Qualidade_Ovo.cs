//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MvcAppHylinedoBrasilMobile.Models
{
    [DataContract(IsReference = true)]
    public partial class Analise_Qualidade_Ovo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Incubatorio
        {
            get { return _incubatorio; }
            set
            {
                if (_incubatorio != value)
                {
                    _incubatorio = value;
                    OnPropertyChanged("Incubatorio");
                }
            }
        }
        private string _incubatorio;
    
        [DataMember]
        public System.DateTime DataAQO
        {
            get { return _dataAQO; }
            set
            {
                if (_dataAQO != value)
                {
                    _dataAQO = value;
                    OnPropertyChanged("DataAQO");
                }
            }
        }
        private System.DateTime _dataAQO;
    
        [DataMember]
        public string Nucleo
        {
            get { return _nucleo; }
            set
            {
                if (_nucleo != value)
                {
                    _nucleo = value;
                    OnPropertyChanged("Nucleo");
                }
            }
        }
        private string _nucleo;
    
        [DataMember]
        public string Galpao
        {
            get { return _galpao; }
            set
            {
                if (_galpao != value)
                {
                    _galpao = value;
                    OnPropertyChanged("Galpao");
                }
            }
        }
        private string _galpao;
    
        [DataMember]
        public string Lote
        {
            get { return _lote; }
            set
            {
                if (_lote != value)
                {
                    _lote = value;
                    OnPropertyChanged("Lote");
                }
            }
        }
        private string _lote;
    
        [DataMember]
        public int Idade
        {
            get { return _idade; }
            set
            {
                if (_idade != value)
                {
                    _idade = value;
                    OnPropertyChanged("Idade");
                }
            }
        }
        private int _idade;
    
        [DataMember]
        public string Linhagem
        {
            get { return _linhagem; }
            set
            {
                if (_linhagem != value)
                {
                    _linhagem = value;
                    OnPropertyChanged("Linhagem");
                }
            }
        }
        private string _linhagem;
    
        [DataMember]
        public string LoteCompleto
        {
            get { return _loteCompleto; }
            set
            {
                if (_loteCompleto != value)
                {
                    _loteCompleto = value;
                    OnPropertyChanged("LoteCompleto");
                }
            }
        }
        private string _loteCompleto;
    
        [DataMember]
        public System.DateTime DataProducao
        {
            get { return _dataProducao; }
            set
            {
                if (_dataProducao != value)
                {
                    _dataProducao = value;
                    OnPropertyChanged("DataProducao");
                }
            }
        }
        private System.DateTime _dataProducao;
    
        [DataMember]
        public string ResponsavelColeta
        {
            get { return _responsavelColeta; }
            set
            {
                if (_responsavelColeta != value)
                {
                    _responsavelColeta = value;
                    OnPropertyChanged("ResponsavelColeta");
                }
            }
        }
        private string _responsavelColeta;
    
        [DataMember]
        public int Amostra
        {
            get { return _amostra; }
            set
            {
                if (_amostra != value)
                {
                    _amostra = value;
                    OnPropertyChanged("Amostra");
                }
            }
        }
        private int _amostra;
    
        [DataMember]
        public int Sujo
        {
            get { return _sujo; }
            set
            {
                if (_sujo != value)
                {
                    _sujo = value;
                    OnPropertyChanged("Sujo");
                }
            }
        }
        private int _sujo;
    
        [DataMember]
        public int Trincado
        {
            get { return _trincado; }
            set
            {
                if (_trincado != value)
                {
                    _trincado = value;
                    OnPropertyChanged("Trincado");
                }
            }
        }
        private int _trincado;
    
        [DataMember]
        public int Virado
        {
            get { return _virado; }
            set
            {
                if (_virado != value)
                {
                    _virado = value;
                    OnPropertyChanged("Virado");
                }
            }
        }
        private int _virado;
    
        [DataMember]
        public int Pequeno
        {
            get { return _pequeno; }
            set
            {
                if (_pequeno != value)
                {
                    _pequeno = value;
                    OnPropertyChanged("Pequeno");
                }
            }
        }
        private int _pequeno;
    
        [DataMember]
        public int Grande
        {
            get { return _grande; }
            set
            {
                if (_grande != value)
                {
                    _grande = value;
                    OnPropertyChanged("Grande");
                }
            }
        }
        private int _grande;
    
        [DataMember]
        public Nullable<decimal> TemperaturaOvo
        {
            get { return _temperaturaOvo; }
            set
            {
                if (_temperaturaOvo != value)
                {
                    _temperaturaOvo = value;
                    OnPropertyChanged("TemperaturaOvo");
                }
            }
        }
        private Nullable<decimal> _temperaturaOvo;
    
        [DataMember]
        public Nullable<decimal> GravidadeEspecificaOvo
        {
            get { return _gravidadeEspecificaOvo; }
            set
            {
                if (_gravidadeEspecificaOvo != value)
                {
                    _gravidadeEspecificaOvo = value;
                    OnPropertyChanged("GravidadeEspecificaOvo");
                }
            }
        }
        private Nullable<decimal> _gravidadeEspecificaOvo;
    
        [DataMember]
        public string NFNum
        {
            get { return _nFNum; }
            set
            {
                if (_nFNum != value)
                {
                    _nFNum = value;
                    OnPropertyChanged("NFNum");
                }
            }
        }
        private string _nFNum;
    
        [DataMember]
        public string Observacao
        {
            get { return _observacao; }
            set
            {
                if (_observacao != value)
                {
                    _observacao = value;
                    OnPropertyChanged("Observacao");
                }
            }
        }
        private string _observacao;
    
        [DataMember]
        public int Defeituoso
        {
            get { return _defeituoso; }
            set
            {
                if (_defeituoso != value)
                {
                    _defeituoso = value;
                    OnPropertyChanged("Defeituoso");
                }
            }
        }
        private int _defeituoso;
    
        [DataMember]
        public Nullable<int> Sangue
        {
            get { return _sangue; }
            set
            {
                if (_sangue != value)
                {
                    _sangue = value;
                    OnPropertyChanged("Sangue");
                }
            }
        }
        private Nullable<int> _sangue;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
